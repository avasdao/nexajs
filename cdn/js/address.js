/* NEXA.js <Address> v2024.06.25 */
/* Learn more at â†’ https://nexajs.org/pkg/address */
var Address = (function (exports) {
    'use strict';

    /**
     * @license
     * https://github.com/ealmansi/cashaddrjs
     * Copyright (c) 2017-2020 Emilio Almansi
     * Distributed under the MIT software license, see the accompanying
     * file LICENSE or http://www.opensource.org/licenses/mit-license.php.
     */

    /**
     * Validation utility.
     *
     * @module validation
     */

    /**
     * Error thrown when encoding or decoding fail due to invalid input.
     *
     * @constructor ValidationError
     * @param {string} message Error description.
     */
    function ValidationError(message) {
        const error = new Error();
        this.name = error.name = 'ValidationError';
        this.message = error.message = message;
        this.stack = error.stack;
    }

    ValidationError.prototype = Object.create(Error.prototype);

    /**
     * Validates a given condition, throwing a {@link ValidationError} if
     * the given condition does not hold.
     *
     * @static
     * @param {boolean} condition Condition to validate.
     * @param {string} message Error message in case the condition does not hold.
     */
    function validate(condition, message) {
        if (!condition) {
            throw new ValidationError(message)
        }
    }

    /**
     * @license
     * https://github.com/ealmansi/cashaddrjs
     * Copyright (c) 2017-2020 Emilio Almansi
     * Distributed under the MIT software license, see the accompanying
     * file LICENSE or http://www.opensource.org/licenses/mit-license.php.
     */


    /**
     * Base32 encoding and decoding.
     *
     * @module base32
     */

    /**
     * Charset containing the 32 symbols used in the base32 encoding.
     * @private
     */
    const CHARSET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';

    /**
     * Inverted index mapping each symbol into its index within the charset.
     * @private
     */
    const CHARSET_INVERSE_INDEX = {
        'q': 0, 'p': 1, 'z': 2, 'r': 3, 'y': 4, '9': 5, 'x': 6, '8': 7,
        'g': 8, 'f': 9, '2': 10, 't': 11, 'v': 12, 'd': 13, 'w': 14, '0': 15,
        's': 16, '3': 17, 'j': 18, 'n': 19, '5': 20, '4': 21, 'k': 22, 'h': 23,
        'c': 24, 'e': 25, '6': 26, 'm': 27, 'u': 28, 'a': 29, '7': 30, 'l': 31,
    };

    /**
     * Encodes the given array of 5-bit integers as a base32-encoded string.
     *
     * @static
     * @param {Uint8Array} data Array of integers between 0 and 31 inclusive.
     * @returns {string}
     * @throws {ValidationError}
     */
    function encode$1(data) {
        validate(data instanceof Uint8Array, 'Invalid data: ' + data + '.');

        let base32 = '';

        for (let i = 0; i < data.length; ++i) {
            const value = data[i];
            validate(0 <= value && value < 32, 'Invalid value: ' + value + '.');
            base32 += CHARSET[value];
        }

        return base32
    }

    /**
     * Decodes the given base32-encoded string into an array of 5-bit integers.
     *
     * @static
     * @param {string} string
     * @returns {Uint8Array}
     * @throws {ValidationError}
     */
    function decode(string) {
        validate(typeof string === 'string', 'Invalid base32-encoded string: ' + string + '.');

        const data = new Uint8Array(string.length);

        for (let i = 0; i < string.length; ++i) {
            const value = string[i];
            validate(value in CHARSET_INVERSE_INDEX, 'Invalid value: ' + value + '.');
            data[i] = CHARSET_INVERSE_INDEX[value];
        }

        return data
    }

    var base32 = {
        encode: encode$1,
        decode,
    };

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function getAugmentedNamespace(n) {
      if (n.__esModule) return n;
      var f = n.default;
    	if (typeof f == "function") {
    		var a = function a () {
    			if (this instanceof a) {
            return Reflect.construct(f, arguments, this.constructor);
    			}
    			return f.apply(this, arguments);
    		};
    		a.prototype = f.prototype;
      } else a = {};
      Object.defineProperty(a, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    var BigInteger = {exports: {}};

    (function (module) {
    	var bigInt = (function (undefined$1) {

    	    var BASE = 1e7,
    	        LOG_BASE = 7,
    	        MAX_INT = 9007199254740992,
    	        MAX_INT_ARR = smallToArray(MAX_INT),
    	        DEFAULT_ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz";

    	    var supportsNativeBigInt = typeof BigInt === "function";

    	    function Integer(v, radix, alphabet, caseSensitive) {
    	        if (typeof v === "undefined") return Integer[0];
    	        if (typeof radix !== "undefined") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);
    	        return parseValue(v);
    	    }

    	    function BigInteger(value, sign) {
    	        this.value = value;
    	        this.sign = sign;
    	        this.isSmall = false;
    	    }
    	    BigInteger.prototype = Object.create(Integer.prototype);

    	    function SmallInteger(value) {
    	        this.value = value;
    	        this.sign = value < 0;
    	        this.isSmall = true;
    	    }
    	    SmallInteger.prototype = Object.create(Integer.prototype);

    	    function NativeBigInt(value) {
    	        this.value = value;
    	    }
    	    NativeBigInt.prototype = Object.create(Integer.prototype);

    	    function isPrecise(n) {
    	        return -MAX_INT < n && n < MAX_INT;
    	    }

    	    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes
    	        if (n < 1e7)
    	            return [n];
    	        if (n < 1e14)
    	            return [n % 1e7, Math.floor(n / 1e7)];
    	        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];
    	    }

    	    function arrayToSmall(arr) { // If BASE changes this function may need to change
    	        trim(arr);
    	        var length = arr.length;
    	        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {
    	            switch (length) {
    	                case 0: return 0;
    	                case 1: return arr[0];
    	                case 2: return arr[0] + arr[1] * BASE;
    	                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;
    	            }
    	        }
    	        return arr;
    	    }

    	    function trim(v) {
    	        var i = v.length;
    	        while (v[--i] === 0);
    	        v.length = i + 1;
    	    }

    	    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger
    	        var x = new Array(length);
    	        var i = -1;
    	        while (++i < length) {
    	            x[i] = 0;
    	        }
    	        return x;
    	    }

    	    function truncate(n) {
    	        if (n > 0) return Math.floor(n);
    	        return Math.ceil(n);
    	    }

    	    function add(a, b) { // assumes a and b are arrays with a.length >= b.length
    	        var l_a = a.length,
    	            l_b = b.length,
    	            r = new Array(l_a),
    	            carry = 0,
    	            base = BASE,
    	            sum, i;
    	        for (i = 0; i < l_b; i++) {
    	            sum = a[i] + b[i] + carry;
    	            carry = sum >= base ? 1 : 0;
    	            r[i] = sum - carry * base;
    	        }
    	        while (i < l_a) {
    	            sum = a[i] + carry;
    	            carry = sum === base ? 1 : 0;
    	            r[i++] = sum - carry * base;
    	        }
    	        if (carry > 0) r.push(carry);
    	        return r;
    	    }

    	    function addAny(a, b) {
    	        if (a.length >= b.length) return add(a, b);
    	        return add(b, a);
    	    }

    	    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT
    	        var l = a.length,
    	            r = new Array(l),
    	            base = BASE,
    	            sum, i;
    	        for (i = 0; i < l; i++) {
    	            sum = a[i] - base + carry;
    	            carry = Math.floor(sum / base);
    	            r[i] = sum - carry * base;
    	            carry += 1;
    	        }
    	        while (carry > 0) {
    	            r[i++] = carry % base;
    	            carry = Math.floor(carry / base);
    	        }
    	        return r;
    	    }

    	    BigInteger.prototype.add = function (v) {
    	        var n = parseValue(v);
    	        if (this.sign !== n.sign) {
    	            return this.subtract(n.negate());
    	        }
    	        var a = this.value, b = n.value;
    	        if (n.isSmall) {
    	            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);
    	        }
    	        return new BigInteger(addAny(a, b), this.sign);
    	    };
    	    BigInteger.prototype.plus = BigInteger.prototype.add;

    	    SmallInteger.prototype.add = function (v) {
    	        var n = parseValue(v);
    	        var a = this.value;
    	        if (a < 0 !== n.sign) {
    	            return this.subtract(n.negate());
    	        }
    	        var b = n.value;
    	        if (n.isSmall) {
    	            if (isPrecise(a + b)) return new SmallInteger(a + b);
    	            b = smallToArray(Math.abs(b));
    	        }
    	        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);
    	    };
    	    SmallInteger.prototype.plus = SmallInteger.prototype.add;

    	    NativeBigInt.prototype.add = function (v) {
    	        return new NativeBigInt(this.value + parseValue(v).value);
    	    };
    	    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;

    	    function subtract(a, b) { // assumes a and b are arrays with a >= b
    	        var a_l = a.length,
    	            b_l = b.length,
    	            r = new Array(a_l),
    	            borrow = 0,
    	            base = BASE,
    	            i, difference;
    	        for (i = 0; i < b_l; i++) {
    	            difference = a[i] - borrow - b[i];
    	            if (difference < 0) {
    	                difference += base;
    	                borrow = 1;
    	            } else borrow = 0;
    	            r[i] = difference;
    	        }
    	        for (i = b_l; i < a_l; i++) {
    	            difference = a[i] - borrow;
    	            if (difference < 0) difference += base;
    	            else {
    	                r[i++] = difference;
    	                break;
    	            }
    	            r[i] = difference;
    	        }
    	        for (; i < a_l; i++) {
    	            r[i] = a[i];
    	        }
    	        trim(r);
    	        return r;
    	    }

    	    function subtractAny(a, b, sign) {
    	        var value;
    	        if (compareAbs(a, b) >= 0) {
    	            value = subtract(a, b);
    	        } else {
    	            value = subtract(b, a);
    	            sign = !sign;
    	        }
    	        value = arrayToSmall(value);
    	        if (typeof value === "number") {
    	            if (sign) value = -value;
    	            return new SmallInteger(value);
    	        }
    	        return new BigInteger(value, sign);
    	    }

    	    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT
    	        var l = a.length,
    	            r = new Array(l),
    	            carry = -b,
    	            base = BASE,
    	            i, difference;
    	        for (i = 0; i < l; i++) {
    	            difference = a[i] + carry;
    	            carry = Math.floor(difference / base);
    	            difference %= base;
    	            r[i] = difference < 0 ? difference + base : difference;
    	        }
    	        r = arrayToSmall(r);
    	        if (typeof r === "number") {
    	            if (sign) r = -r;
    	            return new SmallInteger(r);
    	        } return new BigInteger(r, sign);
    	    }

    	    BigInteger.prototype.subtract = function (v) {
    	        var n = parseValue(v);
    	        if (this.sign !== n.sign) {
    	            return this.add(n.negate());
    	        }
    	        var a = this.value, b = n.value;
    	        if (n.isSmall)
    	            return subtractSmall(a, Math.abs(b), this.sign);
    	        return subtractAny(a, b, this.sign);
    	    };
    	    BigInteger.prototype.minus = BigInteger.prototype.subtract;

    	    SmallInteger.prototype.subtract = function (v) {
    	        var n = parseValue(v);
    	        var a = this.value;
    	        if (a < 0 !== n.sign) {
    	            return this.add(n.negate());
    	        }
    	        var b = n.value;
    	        if (n.isSmall) {
    	            return new SmallInteger(a - b);
    	        }
    	        return subtractSmall(b, Math.abs(a), a >= 0);
    	    };
    	    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;

    	    NativeBigInt.prototype.subtract = function (v) {
    	        return new NativeBigInt(this.value - parseValue(v).value);
    	    };
    	    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;

    	    BigInteger.prototype.negate = function () {
    	        return new BigInteger(this.value, !this.sign);
    	    };
    	    SmallInteger.prototype.negate = function () {
    	        var sign = this.sign;
    	        var small = new SmallInteger(-this.value);
    	        small.sign = !sign;
    	        return small;
    	    };
    	    NativeBigInt.prototype.negate = function () {
    	        return new NativeBigInt(-this.value);
    	    };

    	    BigInteger.prototype.abs = function () {
    	        return new BigInteger(this.value, false);
    	    };
    	    SmallInteger.prototype.abs = function () {
    	        return new SmallInteger(Math.abs(this.value));
    	    };
    	    NativeBigInt.prototype.abs = function () {
    	        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);
    	    };


    	    function multiplyLong(a, b) {
    	        var a_l = a.length,
    	            b_l = b.length,
    	            l = a_l + b_l,
    	            r = createArray(l),
    	            base = BASE,
    	            product, carry, i, a_i, b_j;
    	        for (i = 0; i < a_l; ++i) {
    	            a_i = a[i];
    	            for (var j = 0; j < b_l; ++j) {
    	                b_j = b[j];
    	                product = a_i * b_j + r[i + j];
    	                carry = Math.floor(product / base);
    	                r[i + j] = product - carry * base;
    	                r[i + j + 1] += carry;
    	            }
    	        }
    	        trim(r);
    	        return r;
    	    }

    	    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE
    	        var l = a.length,
    	            r = new Array(l),
    	            base = BASE,
    	            carry = 0,
    	            product, i;
    	        for (i = 0; i < l; i++) {
    	            product = a[i] * b + carry;
    	            carry = Math.floor(product / base);
    	            r[i] = product - carry * base;
    	        }
    	        while (carry > 0) {
    	            r[i++] = carry % base;
    	            carry = Math.floor(carry / base);
    	        }
    	        return r;
    	    }

    	    function shiftLeft(x, n) {
    	        var r = [];
    	        while (n-- > 0) r.push(0);
    	        return r.concat(x);
    	    }

    	    function multiplyKaratsuba(x, y) {
    	        var n = Math.max(x.length, y.length);

    	        if (n <= 30) return multiplyLong(x, y);
    	        n = Math.ceil(n / 2);

    	        var b = x.slice(n),
    	            a = x.slice(0, n),
    	            d = y.slice(n),
    	            c = y.slice(0, n);

    	        var ac = multiplyKaratsuba(a, c),
    	            bd = multiplyKaratsuba(b, d),
    	            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));

    	        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));
    	        trim(product);
    	        return product;
    	    }

    	    // The following function is derived from a surface fit of a graph plotting the performance difference
    	    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.
    	    function useKaratsuba(l1, l2) {
    	        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;
    	    }

    	    BigInteger.prototype.multiply = function (v) {
    	        var n = parseValue(v),
    	            a = this.value, b = n.value,
    	            sign = this.sign !== n.sign,
    	            abs;
    	        if (n.isSmall) {
    	            if (b === 0) return Integer[0];
    	            if (b === 1) return this;
    	            if (b === -1) return this.negate();
    	            abs = Math.abs(b);
    	            if (abs < BASE) {
    	                return new BigInteger(multiplySmall(a, abs), sign);
    	            }
    	            b = smallToArray(abs);
    	        }
    	        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes
    	            return new BigInteger(multiplyKaratsuba(a, b), sign);
    	        return new BigInteger(multiplyLong(a, b), sign);
    	    };

    	    BigInteger.prototype.times = BigInteger.prototype.multiply;

    	    function multiplySmallAndArray(a, b, sign) { // a >= 0
    	        if (a < BASE) {
    	            return new BigInteger(multiplySmall(b, a), sign);
    	        }
    	        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);
    	    }
    	    SmallInteger.prototype._multiplyBySmall = function (a) {
    	        if (isPrecise(a.value * this.value)) {
    	            return new SmallInteger(a.value * this.value);
    	        }
    	        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);
    	    };
    	    BigInteger.prototype._multiplyBySmall = function (a) {
    	        if (a.value === 0) return Integer[0];
    	        if (a.value === 1) return this;
    	        if (a.value === -1) return this.negate();
    	        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);
    	    };
    	    SmallInteger.prototype.multiply = function (v) {
    	        return parseValue(v)._multiplyBySmall(this);
    	    };
    	    SmallInteger.prototype.times = SmallInteger.prototype.multiply;

    	    NativeBigInt.prototype.multiply = function (v) {
    	        return new NativeBigInt(this.value * parseValue(v).value);
    	    };
    	    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;

    	    function square(a) {
    	        //console.assert(2 * BASE * BASE < MAX_INT);
    	        var l = a.length,
    	            r = createArray(l + l),
    	            base = BASE,
    	            product, carry, i, a_i, a_j;
    	        for (i = 0; i < l; i++) {
    	            a_i = a[i];
    	            carry = 0 - a_i * a_i;
    	            for (var j = i; j < l; j++) {
    	                a_j = a[j];
    	                product = 2 * (a_i * a_j) + r[i + j] + carry;
    	                carry = Math.floor(product / base);
    	                r[i + j] = product - carry * base;
    	            }
    	            r[i + l] = carry;
    	        }
    	        trim(r);
    	        return r;
    	    }

    	    BigInteger.prototype.square = function () {
    	        return new BigInteger(square(this.value), false);
    	    };

    	    SmallInteger.prototype.square = function () {
    	        var value = this.value * this.value;
    	        if (isPrecise(value)) return new SmallInteger(value);
    	        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);
    	    };

    	    NativeBigInt.prototype.square = function (v) {
    	        return new NativeBigInt(this.value * this.value);
    	    };

    	    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.
    	        var a_l = a.length,
    	            b_l = b.length,
    	            base = BASE,
    	            result = createArray(b.length),
    	            divisorMostSignificantDigit = b[b_l - 1],
    	            // normalization
    	            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),
    	            remainder = multiplySmall(a, lambda),
    	            divisor = multiplySmall(b, lambda),
    	            quotientDigit, shift, carry, borrow, i, l, q;
    	        if (remainder.length <= a_l) remainder.push(0);
    	        divisor.push(0);
    	        divisorMostSignificantDigit = divisor[b_l - 1];
    	        for (shift = a_l - b_l; shift >= 0; shift--) {
    	            quotientDigit = base - 1;
    	            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {
    	                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);
    	            }
    	            // quotientDigit <= base - 1
    	            carry = 0;
    	            borrow = 0;
    	            l = divisor.length;
    	            for (i = 0; i < l; i++) {
    	                carry += quotientDigit * divisor[i];
    	                q = Math.floor(carry / base);
    	                borrow += remainder[shift + i] - (carry - q * base);
    	                carry = q;
    	                if (borrow < 0) {
    	                    remainder[shift + i] = borrow + base;
    	                    borrow = -1;
    	                } else {
    	                    remainder[shift + i] = borrow;
    	                    borrow = 0;
    	                }
    	            }
    	            while (borrow !== 0) {
    	                quotientDigit -= 1;
    	                carry = 0;
    	                for (i = 0; i < l; i++) {
    	                    carry += remainder[shift + i] - base + divisor[i];
    	                    if (carry < 0) {
    	                        remainder[shift + i] = carry + base;
    	                        carry = 0;
    	                    } else {
    	                        remainder[shift + i] = carry;
    	                        carry = 1;
    	                    }
    	                }
    	                borrow += carry;
    	            }
    	            result[shift] = quotientDigit;
    	        }
    	        // denormalization
    	        remainder = divModSmall(remainder, lambda)[0];
    	        return [arrayToSmall(result), arrayToSmall(remainder)];
    	    }

    	    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/
    	        // Performs faster than divMod1 on larger input sizes.
    	        var a_l = a.length,
    	            b_l = b.length,
    	            result = [],
    	            part = [],
    	            base = BASE,
    	            guess, xlen, highx, highy, check;
    	        while (a_l) {
    	            part.unshift(a[--a_l]);
    	            trim(part);
    	            if (compareAbs(part, b) < 0) {
    	                result.push(0);
    	                continue;
    	            }
    	            xlen = part.length;
    	            highx = part[xlen - 1] * base + part[xlen - 2];
    	            highy = b[b_l - 1] * base + b[b_l - 2];
    	            if (xlen > b_l) {
    	                highx = (highx + 1) * base;
    	            }
    	            guess = Math.ceil(highx / highy);
    	            do {
    	                check = multiplySmall(b, guess);
    	                if (compareAbs(check, part) <= 0) break;
    	                guess--;
    	            } while (guess);
    	            result.push(guess);
    	            part = subtract(part, check);
    	        }
    	        result.reverse();
    	        return [arrayToSmall(result), arrayToSmall(part)];
    	    }

    	    function divModSmall(value, lambda) {
    	        var length = value.length,
    	            quotient = createArray(length),
    	            base = BASE,
    	            i, q, remainder, divisor;
    	        remainder = 0;
    	        for (i = length - 1; i >= 0; --i) {
    	            divisor = remainder * base + value[i];
    	            q = truncate(divisor / lambda);
    	            remainder = divisor - q * lambda;
    	            quotient[i] = q | 0;
    	        }
    	        return [quotient, remainder | 0];
    	    }

    	    function divModAny(self, v) {
    	        var value, n = parseValue(v);
    	        if (supportsNativeBigInt) {
    	            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];
    	        }
    	        var a = self.value, b = n.value;
    	        var quotient;
    	        if (b === 0) throw new Error("Cannot divide by zero");
    	        if (self.isSmall) {
    	            if (n.isSmall) {
    	                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];
    	            }
    	            return [Integer[0], self];
    	        }
    	        if (n.isSmall) {
    	            if (b === 1) return [self, Integer[0]];
    	            if (b == -1) return [self.negate(), Integer[0]];
    	            var abs = Math.abs(b);
    	            if (abs < BASE) {
    	                value = divModSmall(a, abs);
    	                quotient = arrayToSmall(value[0]);
    	                var remainder = value[1];
    	                if (self.sign) remainder = -remainder;
    	                if (typeof quotient === "number") {
    	                    if (self.sign !== n.sign) quotient = -quotient;
    	                    return [new SmallInteger(quotient), new SmallInteger(remainder)];
    	                }
    	                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];
    	            }
    	            b = smallToArray(abs);
    	        }
    	        var comparison = compareAbs(a, b);
    	        if (comparison === -1) return [Integer[0], self];
    	        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];

    	        // divMod1 is faster on smaller input sizes
    	        if (a.length + b.length <= 200)
    	            value = divMod1(a, b);
    	        else value = divMod2(a, b);

    	        quotient = value[0];
    	        var qSign = self.sign !== n.sign,
    	            mod = value[1],
    	            mSign = self.sign;
    	        if (typeof quotient === "number") {
    	            if (qSign) quotient = -quotient;
    	            quotient = new SmallInteger(quotient);
    	        } else quotient = new BigInteger(quotient, qSign);
    	        if (typeof mod === "number") {
    	            if (mSign) mod = -mod;
    	            mod = new SmallInteger(mod);
    	        } else mod = new BigInteger(mod, mSign);
    	        return [quotient, mod];
    	    }

    	    BigInteger.prototype.divmod = function (v) {
    	        var result = divModAny(this, v);
    	        return {
    	            quotient: result[0],
    	            remainder: result[1]
    	        };
    	    };
    	    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;


    	    BigInteger.prototype.divide = function (v) {
    	        return divModAny(this, v)[0];
    	    };
    	    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {
    	        return new NativeBigInt(this.value / parseValue(v).value);
    	    };
    	    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;

    	    BigInteger.prototype.mod = function (v) {
    	        return divModAny(this, v)[1];
    	    };
    	    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {
    	        return new NativeBigInt(this.value % parseValue(v).value);
    	    };
    	    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;

    	    BigInteger.prototype.pow = function (v) {
    	        var n = parseValue(v),
    	            a = this.value,
    	            b = n.value,
    	            value, x, y;
    	        if (b === 0) return Integer[1];
    	        if (a === 0) return Integer[0];
    	        if (a === 1) return Integer[1];
    	        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];
    	        if (n.sign) {
    	            return Integer[0];
    	        }
    	        if (!n.isSmall) throw new Error("The exponent " + n.toString() + " is too large.");
    	        if (this.isSmall) {
    	            if (isPrecise(value = Math.pow(a, b)))
    	                return new SmallInteger(truncate(value));
    	        }
    	        x = this;
    	        y = Integer[1];
    	        while (true) {
    	            if (b & 1 === 1) {
    	                y = y.times(x);
    	                --b;
    	            }
    	            if (b === 0) break;
    	            b /= 2;
    	            x = x.square();
    	        }
    	        return y;
    	    };
    	    SmallInteger.prototype.pow = BigInteger.prototype.pow;

    	    NativeBigInt.prototype.pow = function (v) {
    	        var n = parseValue(v);
    	        var a = this.value, b = n.value;
    	        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);
    	        if (b === _0) return Integer[1];
    	        if (a === _0) return Integer[0];
    	        if (a === _1) return Integer[1];
    	        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];
    	        if (n.isNegative()) return new NativeBigInt(_0);
    	        var x = this;
    	        var y = Integer[1];
    	        while (true) {
    	            if ((b & _1) === _1) {
    	                y = y.times(x);
    	                --b;
    	            }
    	            if (b === _0) break;
    	            b /= _2;
    	            x = x.square();
    	        }
    	        return y;
    	    };

    	    BigInteger.prototype.modPow = function (exp, mod) {
    	        exp = parseValue(exp);
    	        mod = parseValue(mod);
    	        if (mod.isZero()) throw new Error("Cannot take modPow with modulus 0");
    	        var r = Integer[1],
    	            base = this.mod(mod);
    	        if (exp.isNegative()) {
    	            exp = exp.multiply(Integer[-1]);
    	            base = base.modInv(mod);
    	        }
    	        while (exp.isPositive()) {
    	            if (base.isZero()) return Integer[0];
    	            if (exp.isOdd()) r = r.multiply(base).mod(mod);
    	            exp = exp.divide(2);
    	            base = base.square().mod(mod);
    	        }
    	        return r;
    	    };
    	    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;

    	    function compareAbs(a, b) {
    	        if (a.length !== b.length) {
    	            return a.length > b.length ? 1 : -1;
    	        }
    	        for (var i = a.length - 1; i >= 0; i--) {
    	            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;
    	        }
    	        return 0;
    	    }

    	    BigInteger.prototype.compareAbs = function (v) {
    	        var n = parseValue(v),
    	            a = this.value,
    	            b = n.value;
    	        if (n.isSmall) return 1;
    	        return compareAbs(a, b);
    	    };
    	    SmallInteger.prototype.compareAbs = function (v) {
    	        var n = parseValue(v),
    	            a = Math.abs(this.value),
    	            b = n.value;
    	        if (n.isSmall) {
    	            b = Math.abs(b);
    	            return a === b ? 0 : a > b ? 1 : -1;
    	        }
    	        return -1;
    	    };
    	    NativeBigInt.prototype.compareAbs = function (v) {
    	        var a = this.value;
    	        var b = parseValue(v).value;
    	        a = a >= 0 ? a : -a;
    	        b = b >= 0 ? b : -b;
    	        return a === b ? 0 : a > b ? 1 : -1;
    	    };

    	    BigInteger.prototype.compare = function (v) {
    	        // See discussion about comparison with Infinity:
    	        // https://github.com/peterolson/BigInteger.js/issues/61
    	        if (v === Infinity) {
    	            return -1;
    	        }
    	        if (v === -Infinity) {
    	            return 1;
    	        }

    	        var n = parseValue(v),
    	            a = this.value,
    	            b = n.value;
    	        if (this.sign !== n.sign) {
    	            return n.sign ? 1 : -1;
    	        }
    	        if (n.isSmall) {
    	            return this.sign ? -1 : 1;
    	        }
    	        return compareAbs(a, b) * (this.sign ? -1 : 1);
    	    };
    	    BigInteger.prototype.compareTo = BigInteger.prototype.compare;

    	    SmallInteger.prototype.compare = function (v) {
    	        if (v === Infinity) {
    	            return -1;
    	        }
    	        if (v === -Infinity) {
    	            return 1;
    	        }

    	        var n = parseValue(v),
    	            a = this.value,
    	            b = n.value;
    	        if (n.isSmall) {
    	            return a == b ? 0 : a > b ? 1 : -1;
    	        }
    	        if (a < 0 !== n.sign) {
    	            return a < 0 ? -1 : 1;
    	        }
    	        return a < 0 ? 1 : -1;
    	    };
    	    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;

    	    NativeBigInt.prototype.compare = function (v) {
    	        if (v === Infinity) {
    	            return -1;
    	        }
    	        if (v === -Infinity) {
    	            return 1;
    	        }
    	        var a = this.value;
    	        var b = parseValue(v).value;
    	        return a === b ? 0 : a > b ? 1 : -1;
    	    };
    	    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;

    	    BigInteger.prototype.equals = function (v) {
    	        return this.compare(v) === 0;
    	    };
    	    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;

    	    BigInteger.prototype.notEquals = function (v) {
    	        return this.compare(v) !== 0;
    	    };
    	    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;

    	    BigInteger.prototype.greater = function (v) {
    	        return this.compare(v) > 0;
    	    };
    	    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;

    	    BigInteger.prototype.lesser = function (v) {
    	        return this.compare(v) < 0;
    	    };
    	    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;

    	    BigInteger.prototype.greaterOrEquals = function (v) {
    	        return this.compare(v) >= 0;
    	    };
    	    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;

    	    BigInteger.prototype.lesserOrEquals = function (v) {
    	        return this.compare(v) <= 0;
    	    };
    	    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;

    	    BigInteger.prototype.isEven = function () {
    	        return (this.value[0] & 1) === 0;
    	    };
    	    SmallInteger.prototype.isEven = function () {
    	        return (this.value & 1) === 0;
    	    };
    	    NativeBigInt.prototype.isEven = function () {
    	        return (this.value & BigInt(1)) === BigInt(0);
    	    };

    	    BigInteger.prototype.isOdd = function () {
    	        return (this.value[0] & 1) === 1;
    	    };
    	    SmallInteger.prototype.isOdd = function () {
    	        return (this.value & 1) === 1;
    	    };
    	    NativeBigInt.prototype.isOdd = function () {
    	        return (this.value & BigInt(1)) === BigInt(1);
    	    };

    	    BigInteger.prototype.isPositive = function () {
    	        return !this.sign;
    	    };
    	    SmallInteger.prototype.isPositive = function () {
    	        return this.value > 0;
    	    };
    	    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;

    	    BigInteger.prototype.isNegative = function () {
    	        return this.sign;
    	    };
    	    SmallInteger.prototype.isNegative = function () {
    	        return this.value < 0;
    	    };
    	    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;

    	    BigInteger.prototype.isUnit = function () {
    	        return false;
    	    };
    	    SmallInteger.prototype.isUnit = function () {
    	        return Math.abs(this.value) === 1;
    	    };
    	    NativeBigInt.prototype.isUnit = function () {
    	        return this.abs().value === BigInt(1);
    	    };

    	    BigInteger.prototype.isZero = function () {
    	        return false;
    	    };
    	    SmallInteger.prototype.isZero = function () {
    	        return this.value === 0;
    	    };
    	    NativeBigInt.prototype.isZero = function () {
    	        return this.value === BigInt(0);
    	    };

    	    BigInteger.prototype.isDivisibleBy = function (v) {
    	        var n = parseValue(v);
    	        if (n.isZero()) return false;
    	        if (n.isUnit()) return true;
    	        if (n.compareAbs(2) === 0) return this.isEven();
    	        return this.mod(n).isZero();
    	    };
    	    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;

    	    function isBasicPrime(v) {
    	        var n = v.abs();
    	        if (n.isUnit()) return false;
    	        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;
    	        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;
    	        if (n.lesser(49)) return true;
    	        // we don't know if it's prime: let the other functions figure it out
    	    }

    	    function millerRabinTest(n, a) {
    	        var nPrev = n.prev(),
    	            b = nPrev,
    	            r = 0,
    	            d, i, x;
    	        while (b.isEven()) b = b.divide(2), r++;
    	        next: for (i = 0; i < a.length; i++) {
    	            if (n.lesser(a[i])) continue;
    	            x = bigInt(a[i]).modPow(b, n);
    	            if (x.isUnit() || x.equals(nPrev)) continue;
    	            for (d = r - 1; d != 0; d--) {
    	                x = x.square().mod(n);
    	                if (x.isUnit()) return false;
    	                if (x.equals(nPrev)) continue next;
    	            }
    	            return false;
    	        }
    	        return true;
    	    }

    	    // Set "strict" to true to force GRH-supported lower bound of 2*log(N)^2
    	    BigInteger.prototype.isPrime = function (strict) {
    	        var isPrime = isBasicPrime(this);
    	        if (isPrime !== undefined$1) return isPrime;
    	        var n = this.abs();
    	        var bits = n.bitLength();
    	        if (bits <= 64)
    	            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);
    	        var logN = Math.log(2) * bits.toJSNumber();
    	        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);
    	        for (var a = [], i = 0; i < t; i++) {
    	            a.push(bigInt(i + 2));
    	        }
    	        return millerRabinTest(n, a);
    	    };
    	    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;

    	    BigInteger.prototype.isProbablePrime = function (iterations, rng) {
    	        var isPrime = isBasicPrime(this);
    	        if (isPrime !== undefined$1) return isPrime;
    	        var n = this.abs();
    	        var t = iterations === undefined$1 ? 5 : iterations;
    	        for (var a = [], i = 0; i < t; i++) {
    	            a.push(bigInt.randBetween(2, n.minus(2), rng));
    	        }
    	        return millerRabinTest(n, a);
    	    };
    	    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;

    	    BigInteger.prototype.modInv = function (n) {
    	        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;
    	        while (!newR.isZero()) {
    	            q = r.divide(newR);
    	            lastT = t;
    	            lastR = r;
    	            t = newT;
    	            r = newR;
    	            newT = lastT.subtract(q.multiply(newT));
    	            newR = lastR.subtract(q.multiply(newR));
    	        }
    	        if (!r.isUnit()) throw new Error(this.toString() + " and " + n.toString() + " are not co-prime");
    	        if (t.compare(0) === -1) {
    	            t = t.add(n);
    	        }
    	        if (this.isNegative()) {
    	            return t.negate();
    	        }
    	        return t;
    	    };

    	    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;

    	    BigInteger.prototype.next = function () {
    	        var value = this.value;
    	        if (this.sign) {
    	            return subtractSmall(value, 1, this.sign);
    	        }
    	        return new BigInteger(addSmall(value, 1), this.sign);
    	    };
    	    SmallInteger.prototype.next = function () {
    	        var value = this.value;
    	        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);
    	        return new BigInteger(MAX_INT_ARR, false);
    	    };
    	    NativeBigInt.prototype.next = function () {
    	        return new NativeBigInt(this.value + BigInt(1));
    	    };

    	    BigInteger.prototype.prev = function () {
    	        var value = this.value;
    	        if (this.sign) {
    	            return new BigInteger(addSmall(value, 1), true);
    	        }
    	        return subtractSmall(value, 1, this.sign);
    	    };
    	    SmallInteger.prototype.prev = function () {
    	        var value = this.value;
    	        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);
    	        return new BigInteger(MAX_INT_ARR, true);
    	    };
    	    NativeBigInt.prototype.prev = function () {
    	        return new NativeBigInt(this.value - BigInt(1));
    	    };

    	    var powersOfTwo = [1];
    	    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);
    	    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];

    	    function shift_isSmall(n) {
    	        return Math.abs(n) <= BASE;
    	    }

    	    BigInteger.prototype.shiftLeft = function (v) {
    	        var n = parseValue(v).toJSNumber();
    	        if (!shift_isSmall(n)) {
    	            throw new Error(String(n) + " is too large for shifting.");
    	        }
    	        if (n < 0) return this.shiftRight(-n);
    	        var result = this;
    	        if (result.isZero()) return result;
    	        while (n >= powers2Length) {
    	            result = result.multiply(highestPower2);
    	            n -= powers2Length - 1;
    	        }
    	        return result.multiply(powersOfTwo[n]);
    	    };
    	    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;

    	    BigInteger.prototype.shiftRight = function (v) {
    	        var remQuo;
    	        var n = parseValue(v).toJSNumber();
    	        if (!shift_isSmall(n)) {
    	            throw new Error(String(n) + " is too large for shifting.");
    	        }
    	        if (n < 0) return this.shiftLeft(-n);
    	        var result = this;
    	        while (n >= powers2Length) {
    	            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;
    	            remQuo = divModAny(result, highestPower2);
    	            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
    	            n -= powers2Length - 1;
    	        }
    	        remQuo = divModAny(result, powersOfTwo[n]);
    	        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
    	    };
    	    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;

    	    function bitwise(x, y, fn) {
    	        y = parseValue(y);
    	        var xSign = x.isNegative(), ySign = y.isNegative();
    	        var xRem = xSign ? x.not() : x,
    	            yRem = ySign ? y.not() : y;
    	        var xDigit = 0, yDigit = 0;
    	        var xDivMod = null, yDivMod = null;
    	        var result = [];
    	        while (!xRem.isZero() || !yRem.isZero()) {
    	            xDivMod = divModAny(xRem, highestPower2);
    	            xDigit = xDivMod[1].toJSNumber();
    	            if (xSign) {
    	                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers
    	            }

    	            yDivMod = divModAny(yRem, highestPower2);
    	            yDigit = yDivMod[1].toJSNumber();
    	            if (ySign) {
    	                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers
    	            }

    	            xRem = xDivMod[0];
    	            yRem = yDivMod[0];
    	            result.push(fn(xDigit, yDigit));
    	        }
    	        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);
    	        for (var i = result.length - 1; i >= 0; i -= 1) {
    	            sum = sum.multiply(highestPower2).add(bigInt(result[i]));
    	        }
    	        return sum;
    	    }

    	    BigInteger.prototype.not = function () {
    	        return this.negate().prev();
    	    };
    	    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;

    	    BigInteger.prototype.and = function (n) {
    	        return bitwise(this, n, function (a, b) { return a & b; });
    	    };
    	    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;

    	    BigInteger.prototype.or = function (n) {
    	        return bitwise(this, n, function (a, b) { return a | b; });
    	    };
    	    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;

    	    BigInteger.prototype.xor = function (n) {
    	        return bitwise(this, n, function (a, b) { return a ^ b; });
    	    };
    	    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;

    	    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;
    	    function roughLOB(n) { // get lowestOneBit (rough)
    	        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)
    	        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]
    	        var v = n.value,
    	            x = typeof v === "number" ? v | LOBMASK_I :
    	                typeof v === "bigint" ? v | BigInt(LOBMASK_I) :
    	                    v[0] + v[1] * BASE | LOBMASK_BI;
    	        return x & -x;
    	    }

    	    function integerLogarithm(value, base) {
    	        if (base.compareTo(value) <= 0) {
    	            var tmp = integerLogarithm(value, base.square(base));
    	            var p = tmp.p;
    	            var e = tmp.e;
    	            var t = p.multiply(base);
    	            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };
    	        }
    	        return { p: bigInt(1), e: 0 };
    	    }

    	    BigInteger.prototype.bitLength = function () {
    	        var n = this;
    	        if (n.compareTo(bigInt(0)) < 0) {
    	            n = n.negate().subtract(bigInt(1));
    	        }
    	        if (n.compareTo(bigInt(0)) === 0) {
    	            return bigInt(0);
    	        }
    	        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));
    	    };
    	    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;

    	    function max(a, b) {
    	        a = parseValue(a);
    	        b = parseValue(b);
    	        return a.greater(b) ? a : b;
    	    }
    	    function min(a, b) {
    	        a = parseValue(a);
    	        b = parseValue(b);
    	        return a.lesser(b) ? a : b;
    	    }
    	    function gcd(a, b) {
    	        a = parseValue(a).abs();
    	        b = parseValue(b).abs();
    	        if (a.equals(b)) return a;
    	        if (a.isZero()) return b;
    	        if (b.isZero()) return a;
    	        var c = Integer[1], d, t;
    	        while (a.isEven() && b.isEven()) {
    	            d = min(roughLOB(a), roughLOB(b));
    	            a = a.divide(d);
    	            b = b.divide(d);
    	            c = c.multiply(d);
    	        }
    	        while (a.isEven()) {
    	            a = a.divide(roughLOB(a));
    	        }
    	        do {
    	            while (b.isEven()) {
    	                b = b.divide(roughLOB(b));
    	            }
    	            if (a.greater(b)) {
    	                t = b; b = a; a = t;
    	            }
    	            b = b.subtract(a);
    	        } while (!b.isZero());
    	        return c.isUnit() ? a : a.multiply(c);
    	    }
    	    function lcm(a, b) {
    	        a = parseValue(a).abs();
    	        b = parseValue(b).abs();
    	        return a.divide(gcd(a, b)).multiply(b);
    	    }
    	    function randBetween(a, b, rng) {
    	        a = parseValue(a);
    	        b = parseValue(b);
    	        var usedRNG = rng || Math.random;
    	        var low = min(a, b), high = max(a, b);
    	        var range = high.subtract(low).add(1);
    	        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));
    	        var digits = toBase(range, BASE).value;
    	        var result = [], restricted = true;
    	        for (var i = 0; i < digits.length; i++) {
    	            var top = restricted ? digits[i] + (i + 1 < digits.length ? digits[i + 1] / BASE : 0) : BASE;
    	            var digit = truncate(usedRNG() * top);
    	            result.push(digit);
    	            if (digit < digits[i]) restricted = false;
    	        }
    	        return low.add(Integer.fromArray(result, BASE, false));
    	    }

    	    var parseBase = function (text, base, alphabet, caseSensitive) {
    	        alphabet = alphabet || DEFAULT_ALPHABET;
    	        text = String(text);
    	        if (!caseSensitive) {
    	            text = text.toLowerCase();
    	            alphabet = alphabet.toLowerCase();
    	        }
    	        var length = text.length;
    	        var i;
    	        var absBase = Math.abs(base);
    	        var alphabetValues = {};
    	        for (i = 0; i < alphabet.length; i++) {
    	            alphabetValues[alphabet[i]] = i;
    	        }
    	        for (i = 0; i < length; i++) {
    	            var c = text[i];
    	            if (c === "-") continue;
    	            if (c in alphabetValues) {
    	                if (alphabetValues[c] >= absBase) {
    	                    if (c === "1" && absBase === 1) continue;
    	                    throw new Error(c + " is not a valid digit in base " + base + ".");
    	                }
    	            }
    	        }
    	        base = parseValue(base);
    	        var digits = [];
    	        var isNegative = text[0] === "-";
    	        for (i = isNegative ? 1 : 0; i < text.length; i++) {
    	            var c = text[i];
    	            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));
    	            else if (c === "<") {
    	                var start = i;
    	                do { i++; } while (text[i] !== ">" && i < text.length);
    	                digits.push(parseValue(text.slice(start + 1, i)));
    	            }
    	            else throw new Error(c + " is not a valid character");
    	        }
    	        return parseBaseFromArray(digits, base, isNegative);
    	    };

    	    function parseBaseFromArray(digits, base, isNegative) {
    	        var val = Integer[0], pow = Integer[1], i;
    	        for (i = digits.length - 1; i >= 0; i--) {
    	            val = val.add(digits[i].times(pow));
    	            pow = pow.times(base);
    	        }
    	        return isNegative ? val.negate() : val;
    	    }

    	    function stringify(digit, alphabet) {
    	        alphabet = alphabet || DEFAULT_ALPHABET;
    	        if (digit < alphabet.length) {
    	            return alphabet[digit];
    	        }
    	        return "<" + digit + ">";
    	    }

    	    function toBase(n, base) {
    	        base = bigInt(base);
    	        if (base.isZero()) {
    	            if (n.isZero()) return { value: [0], isNegative: false };
    	            throw new Error("Cannot convert nonzero numbers to base 0.");
    	        }
    	        if (base.equals(-1)) {
    	            if (n.isZero()) return { value: [0], isNegative: false };
    	            if (n.isNegative())
    	                return {
    	                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))
    	                        .map(Array.prototype.valueOf, [1, 0])
    	                    ),
    	                    isNegative: false
    	                };

    	            var arr = Array.apply(null, Array(n.toJSNumber() - 1))
    	                .map(Array.prototype.valueOf, [0, 1]);
    	            arr.unshift([1]);
    	            return {
    	                value: [].concat.apply([], arr),
    	                isNegative: false
    	            };
    	        }

    	        var neg = false;
    	        if (n.isNegative() && base.isPositive()) {
    	            neg = true;
    	            n = n.abs();
    	        }
    	        if (base.isUnit()) {
    	            if (n.isZero()) return { value: [0], isNegative: false };

    	            return {
    	                value: Array.apply(null, Array(n.toJSNumber()))
    	                    .map(Number.prototype.valueOf, 1),
    	                isNegative: neg
    	            };
    	        }
    	        var out = [];
    	        var left = n, divmod;
    	        while (left.isNegative() || left.compareAbs(base) >= 0) {
    	            divmod = left.divmod(base);
    	            left = divmod.quotient;
    	            var digit = divmod.remainder;
    	            if (digit.isNegative()) {
    	                digit = base.minus(digit).abs();
    	                left = left.next();
    	            }
    	            out.push(digit.toJSNumber());
    	        }
    	        out.push(left.toJSNumber());
    	        return { value: out.reverse(), isNegative: neg };
    	    }

    	    function toBaseString(n, base, alphabet) {
    	        var arr = toBase(n, base);
    	        return (arr.isNegative ? "-" : "") + arr.value.map(function (x) {
    	            return stringify(x, alphabet);
    	        }).join('');
    	    }

    	    BigInteger.prototype.toArray = function (radix) {
    	        return toBase(this, radix);
    	    };

    	    SmallInteger.prototype.toArray = function (radix) {
    	        return toBase(this, radix);
    	    };

    	    NativeBigInt.prototype.toArray = function (radix) {
    	        return toBase(this, radix);
    	    };

    	    BigInteger.prototype.toString = function (radix, alphabet) {
    	        if (radix === undefined$1) radix = 10;
    	        if (radix !== 10) return toBaseString(this, radix, alphabet);
    	        var v = this.value, l = v.length, str = String(v[--l]), zeros = "0000000", digit;
    	        while (--l >= 0) {
    	            digit = String(v[l]);
    	            str += zeros.slice(digit.length) + digit;
    	        }
    	        var sign = this.sign ? "-" : "";
    	        return sign + str;
    	    };

    	    SmallInteger.prototype.toString = function (radix, alphabet) {
    	        if (radix === undefined$1) radix = 10;
    	        if (radix != 10) return toBaseString(this, radix, alphabet);
    	        return String(this.value);
    	    };

    	    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;

    	    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); };

    	    BigInteger.prototype.valueOf = function () {
    	        return parseInt(this.toString(), 10);
    	    };
    	    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;

    	    SmallInteger.prototype.valueOf = function () {
    	        return this.value;
    	    };
    	    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;
    	    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {
    	        return parseInt(this.toString(), 10);
    	    };

    	    function parseStringValue(v) {
    	        if (isPrecise(+v)) {
    	            var x = +v;
    	            if (x === truncate(x))
    	                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);
    	            throw new Error("Invalid integer: " + v);
    	        }
    	        var sign = v[0] === "-";
    	        if (sign) v = v.slice(1);
    	        var split = v.split(/e/i);
    	        if (split.length > 2) throw new Error("Invalid integer: " + split.join("e"));
    	        if (split.length === 2) {
    	            var exp = split[1];
    	            if (exp[0] === "+") exp = exp.slice(1);
    	            exp = +exp;
    	            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error("Invalid integer: " + exp + " is not a valid exponent.");
    	            var text = split[0];
    	            var decimalPlace = text.indexOf(".");
    	            if (decimalPlace >= 0) {
    	                exp -= text.length - decimalPlace - 1;
    	                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);
    	            }
    	            if (exp < 0) throw new Error("Cannot include negative exponent part for integers");
    	            text += (new Array(exp + 1)).join("0");
    	            v = text;
    	        }
    	        var isValid = /^([0-9][0-9]*)$/.test(v);
    	        if (!isValid) throw new Error("Invalid integer: " + v);
    	        if (supportsNativeBigInt) {
    	            return new NativeBigInt(BigInt(sign ? "-" + v : v));
    	        }
    	        var r = [], max = v.length, l = LOG_BASE, min = max - l;
    	        while (max > 0) {
    	            r.push(+v.slice(min, max));
    	            min -= l;
    	            if (min < 0) min = 0;
    	            max -= l;
    	        }
    	        trim(r);
    	        return new BigInteger(r, sign);
    	    }

    	    function parseNumberValue(v) {
    	        if (supportsNativeBigInt) {
    	            return new NativeBigInt(BigInt(v));
    	        }
    	        if (isPrecise(v)) {
    	            if (v !== truncate(v)) throw new Error(v + " is not an integer.");
    	            return new SmallInteger(v);
    	        }
    	        return parseStringValue(v.toString());
    	    }

    	    function parseValue(v) {
    	        if (typeof v === "number") {
    	            return parseNumberValue(v);
    	        }
    	        if (typeof v === "string") {
    	            return parseStringValue(v);
    	        }
    	        if (typeof v === "bigint") {
    	            return new NativeBigInt(v);
    	        }
    	        return v;
    	    }
    	    // Pre-define numbers in range [-999,999]
    	    for (var i = 0; i < 1000; i++) {
    	        Integer[i] = parseValue(i);
    	        if (i > 0) Integer[-i] = parseValue(-i);
    	    }
    	    // Backwards compatibility
    	    Integer.one = Integer[1];
    	    Integer.zero = Integer[0];
    	    Integer.minusOne = Integer[-1];
    	    Integer.max = max;
    	    Integer.min = min;
    	    Integer.gcd = gcd;
    	    Integer.lcm = lcm;
    	    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };
    	    Integer.randBetween = randBetween;

    	    Integer.fromArray = function (digits, base, isNegative) {
    	        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);
    	    };

    	    return Integer;
    	})();

    	// Node.js check
    	if (module.hasOwnProperty("exports")) {
    	    module.exports = bigInt;
    	}
    } (BigInteger));

    var BigIntegerExports = BigInteger.exports;
    var bigInt = /*@__PURE__*/getDefaultExportFromCjs(BigIntegerExports);

    // Copyright (c) 2017-2018 Emilio Almansi
    // Copyright (c) 2017 Pieter Wuille
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal
    // in the Software without restriction, including without limitation the rights
    // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    // copies of the Software, and to permit persons to whom the Software is
    // furnished to do so, subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    // THE SOFTWARE.


    /**
     * Converts an array of integers made up of 'from' bits into an
     * array of integers made up of 'to' bits. The output array is
     * zero-padded if necessary, unless strict mode is true.
     * Throws a {@link ValidationError} if input is invalid.
     * Original by Pieter Wuille: https://github.com/sipa/bech32.
     *
     * @param {Uint8Array} data Array of integers made up of 'from' bits.
     * @param {number} from Length in bits of elements in the input array.
     * @param {number} to Length in bits of elements in the output array.
     * @param {bool} strictMode Require the conversion to be completed without padding.
     * @returns {Uint8Array}
     */
    const convertBits = function(data, from, to, strictMode) {
        const length = strictMode
            ? Math.floor(data.length * from / to)
            : Math.ceil(data.length * from / to);

        const mask = (1 << to) - 1;
        const result = new Uint8Array(length);

        let index = 0;
        let accumulator = 0;
        let bits = 0;

        for (var i = 0; i < data.length; ++i) {
            const value = data[i];

            validate(0 <= value && (value >> from) === 0, 'Invalid value: ' + value + '.');

            accumulator = (accumulator << from) | value;
            bits += from;

            while (bits >= to) {
                bits -= to;
                result[index] = (accumulator >> bits) & mask;
                ++index;
            }
        }

        if (!strictMode) {
            if (bits > 0) {
                result[index] = (accumulator << (to - bits)) & mask;
                ++index;
            }
        } else {
            validate(
                bits < from && ((accumulator << (to - bits)) & mask) === 0,
                'Input cannot be converted to ' + to + ' bits without padding, but strict mode was used.'
            );
        }

        return result
    };

    /**
     * @license
     * https://gitlab.com/nexa/nexaddrhaddrjs
     * Copyright (c) 2022 Andrew Stone
     * Copyright (c) 2017-2020 Emilio Almansi
     * Distributed under the MIT software license, see the accompanying
     * file LICENSE or http://www.opensource.org/licenses/mit-license.php.
     */


    /**
     * Encoding and decoding of the bech32 address format for Nexa. <br />
     * Compliant with the nexa address specification:
     * {@link http://spec.nexa.org/protocol/blockchain/encoding/cashaddr}
     * @module cashaddr
     */

    /**
     * Encodes a hash from a given type into a Nexa address with the given prefix.
     *
     * @static
     * @param {string} prefix Network prefix. E.g.: 'nexa'.
     * @param {string} type Type of address to generate. Either 'P2PKH', 'TEMPLATE' or 'GROUP'.
     * @param {Uint8Array} hash Hash to encode represented as an array of 8-bit integers.
     * @returns {string}
     * @throws {ValidationError}
     */
    function encodeAddress$1 (prefix, type, hash) {
        validate(typeof prefix === 'string' && isValidPrefix(prefix), 'Invalid prefix: ' + prefix + '.');
        validate(typeof type === 'string', 'Invalid type: ' + type + '.');
        validate(hash instanceof Uint8Array, 'Invalid hash: ' + hash + '.');

        /* Initialize locals. */
        let checksumData;
        let payload;
        let payloadData;
        let prefixData;
        let versionByte;

        /* Build prefix data. */
        prefixData = concat$2(prefixToUint5Array(prefix), new Uint8Array(1));

        /* Calculate version byte. */
        versionByte = getTypeBits(type) + getHashSizeBits(hash);

        /* Handle payload data. */
        switch(type) {
        case 'GROUP':
            payloadData = toUint5Array(concat$2(new Uint8Array([versionByte]), hash));
            break
        case 'TEMPLATE':
            payloadData = toUint5Array(concat$2(new Uint8Array([versionByte, hash.length]), hash));
            break
        default:
            payloadData = toUint5Array(concat$2(new Uint8Array([versionByte]), hash));
        }

        /* Calculate checkum data. */
        checksumData = concat$2(concat$2(prefixData, payloadData), new Uint8Array(8));

        /* Build payload. */
        payload = concat$2(payloadData, checksumToUint5Array(polymod(checksumData)));

        /* Return encoded address. */
        return prefix + ':' + base32.encode(payload)
    }

    /**
     * Decodes the given address into its constituting prefix, type and hash. See [#encode()]{@link encode}.
     *
     * @static
     * @param {string} address Address to decode. E.g.: 'nexa:qpm2qsznhks23z7629mms6s4cwef74vcwvgpsey0xy'.
     * @returns {object}
     * @throws {ValidationError}
     */
    function decodeAddress$1 (address) {
        validate(typeof address === 'string' && hasSingleCase(address), 'Invalid address: ' + address + '.');

        /* Initialize locals. */
        let hash;
        let payload;
        let payloadData;
        let pieces;
        let prefix;
        let type;
        let versionByte;

        /* Split (address) pieces. */
        pieces = address.toLowerCase().split(':');

        validate(pieces.length === 2, 'Missing prefix: ' + address + '.');

        /* Set prefix. */
        prefix = pieces[0];

        /* Decode payload. */
        payload = base32.decode(pieces[1]);

        validate(validChecksum(prefix, payload), 'Invalid checksum: ' + address + '.');

        /* Calculate payload data. */
        payloadData = fromUint5Array(payload.subarray(0, -8));

        /* Set version byte. */
        versionByte = payloadData[0];

        /* Calculate type. */
        type = getType(versionByte);

        /* Handle hash. */
        switch(type) {
        case 'GROUP':
            hash = payloadData.subarray(1);
            break
        case 'TEMPLATE':
            hash = payloadData.subarray(2);
            break
        default:
            hash = payloadData.subarray(1);
        }

        /* Return address details. */
        return {
            prefix,
            type,
            hash,
        }
    }

    /**
     * Error thrown when encoding or decoding fail due to invalid input.
     *
     * @constructor ValidationError
     * @param {string} message Error description.
     */
    // const ValidationError = validation.ValidationError

    /**
     * Valid address prefixes.
     *
     * @private
     */
    const VALID_PREFIXES = ['nexa', 'nexatest', 'nexareg'];

    /**
     * Checks whether a string is a valid prefix; ie., it has a single letter case
     * and is one of the above.
     *
     * @private
     * @param {string} prefix
     * @returns {boolean}
     */
    function isValidPrefix(prefix) {
        return hasSingleCase(prefix) && VALID_PREFIXES.indexOf(prefix.toLowerCase()) !== -1;
    }

    /**
     * Derives an array from the given prefix to be used in the computation
     * of the address' checksum.
     *
     * @private
     * @param {string} prefix Network prefix. E.g.: 'nexa'.
     * @returns {Uint8Array}
     */
    function prefixToUint5Array(prefix) {
        const result = new Uint8Array(prefix.length);

        for (var i = 0; i < prefix.length; ++i) {
            result[i] = prefix[i].charCodeAt(0) & 31;
        }

        return result
    }

    /**
     * Returns an array representation of the given checksum to be encoded
     * within the address' payload.
     *
     * @private
     * @param {BigInteger} checksum Computed checksum.
     * @returns {Uint8Array}
     */
    function checksumToUint5Array(checksum) {
        const result = new Uint8Array(8);

        for (var i = 0; i < 8; ++i) {
            result[7 - i] = checksum.and(31).toJSNumber();

            checksum = checksum.shiftRight(5);
        }

        return result
    }

    /**
     * Returns the bit representation of the given type within the version
     * byte.
     *
     * @private
     * @param {string} type Address type. Either 'P2PKH' or 'P2SH'.
     * @returns {number}
     * @throws {ValidationError}
     */
    function getTypeBits(type) {
        switch (type) {
        case 'P2PKH':
            return 0
        case 'SCRIPT':
            return (1 << 3)
        case 'TEMPLATE':
            return (19 << 3)
        case 'GROUP':
            return (11 << 3)
        default:
            throw new ValidationError('Invalid type: ' + type + '.')
        }
    }

    /**
     * Retrieves the address type from its bit representation within the
     * version byte.
     *
     * @private
     * @param {number} versionByte
     * @returns {string}
     * @throws {ValidationError}
     */
    function getType(versionByte) {
        switch (versionByte & 248) {
        case 0:
            return 'P2PKH'
        case (1 << 3):
            return 'SCRIPT'
        case (19 << 3):
            return 'TEMPLATE'
        case (11 << 3):
            return 'GROUP'
        default:
            throw new ValidationError('Invalid address type in version byte: ' + versionByte + '.')
        }
    }

    /**
     * Returns the bit representation of the length in bits of the given
     * hash within the version byte.
     *
     * @private
     * @param {Uint8Array} hash Hash to encode represented as an array of 8-bit integers.
     * @returns {number}
     * @throws {ValidationError}
     */
    function getHashSizeBits(hash) {
        hash.length;  // Fake use of this
        return 0  // nexa hash size bits are always 0
    }

    /**
     * Converts an array of 8-bit integers into an array of 5-bit integers,
     * right-padding with zeroes if necessary.
     *
     * @private
     * @param {Uint8Array} data
     * @returns {Uint8Array}
     */
    function toUint5Array(data) {
        return convertBits(data, 8, 5)
    }

    /**
     * Converts an array of 5-bit integers back into an array of 8-bit integers,
     * removing extra zeroes left from padding if necessary.
     * Throws a {@link ValidationError} if input is not a zero-padded array of 8-bit integers.
     *
     * @private
     * @param {Uint8Array} data
     * @returns {Uint8Array}
     * @throws {ValidationError}
     */
    function fromUint5Array(data) {
        return convertBits(data, 5, 8, true)
    }

    /**
     * Returns the concatenation a and b.
     *
     * @private
     * @param {Uint8Array} a
     * @param {Uint8Array} b
     * @returns {Uint8Array}
     * @throws {ValidationError}
     */
    function concat$2(a, b) {
        const ab = new Uint8Array(a.length + b.length);

        ab.set(a);
        ab.set(b, a.length);

        return ab
    }

    /**
     * Computes a checksum from the given input data as specified for the CashAddr
     * format: https://github.com/Bitcoin-UAHF/spec/blob/master/cashaddr.md.
     *
     * @private
     * @param {Uint8Array} data Array of 5-bit integers over which the checksum is to be computed.
     * @returns {BigInteger}
     */
    function polymod(data) {
        const GENERATOR = [
            0x98f2bc8e61,
            0x79b76d99e2,
            0xf33e5fb3c4,
            0xae2eabe2a8,
            0x1e4f43e470
        ];

        var checksum = bigInt(1);

        for (let i = 0; i < data.length; ++i) {
            var value = data[i];
            var topBits = checksum.shiftRight(35);

            checksum = checksum.and(0x07ffffffff).shiftLeft(5).xor(value);

            for (var j = 0; j < GENERATOR.length; ++j) {
                if (topBits.shiftRight(j).and(1).equals(1)) {
                    checksum = checksum.xor(GENERATOR[j]);
                }
            }
        }

        return checksum.xor(1)
    }

    /**
     * Verify that the payload has not been corrupted by checking that the
     * checksum is valid.
     *
     * @private
     * @param {string} prefix Network prefix. E.g.: 'nexa'.
     * @param {Uint8Array} payload Array of 5-bit integers containing the address' payload.
     * @returns {boolean}
     */
    function validChecksum(prefix, payload) {
        const prefixData = concat$2(prefixToUint5Array(prefix), new Uint8Array(1));
        const checksumData = concat$2(prefixData, payload);

        return polymod(checksumData).equals(0)
    }

    /**
     * Returns true if, and only if, the given string contains either uppercase
     * or lowercase letters, but not both.
     *
     * @private
     * @param {string} string Input string.
     * @returns {boolean}
     */
    function hasSingleCase(string) {
        return string === string.toLowerCase() || string === string.toUpperCase()
    }

    /**
     * Get Seed Type
     *
     * Will parse the seed to determine the address type.
     */
    var getSeedType = (_seed) => {
        if (!_seed) return null

        if (_seed.toLowerCase().startsWith('nexa:')) {
            return '(Mainnet) address'
        }

        if (_seed.toLowerCase().startsWith('nexatest:')) {
            return '(Testnet) address'
        }

        // FIXME
        if (_seed.length > 0) {
            return 'privatekey'
        }

        /* Return null. */
        return null
    };

    var global$1 = (typeof global !== "undefined" ? global :
      typeof self !== "undefined" ? self :
      typeof window !== "undefined" ? window : {});

    // shim for using process in browser
    // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

    function defaultSetTimout$1() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout$1 () {
        throw new Error('clearTimeout has not been defined');
    }
    var cachedSetTimeout$1 = defaultSetTimout$1;
    var cachedClearTimeout$1 = defaultClearTimeout$1;
    if (typeof global$1.setTimeout === 'function') {
        cachedSetTimeout$1 = setTimeout;
    }
    if (typeof global$1.clearTimeout === 'function') {
        cachedClearTimeout$1 = clearTimeout;
    }

    function runTimeout$1(fun) {
        if (cachedSetTimeout$1 === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout$1 === defaultSetTimout$1 || !cachedSetTimeout$1) && setTimeout) {
            cachedSetTimeout$1 = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout$1(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout$1.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout$1.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout$1(marker) {
        if (cachedClearTimeout$1 === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout$1 === defaultClearTimeout$1 || !cachedClearTimeout$1) && clearTimeout) {
            cachedClearTimeout$1 = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout$1(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout$1.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout$1.call(this, marker);
            }
        }



    }
    var queue$1 = [];
    var draining$1 = false;
    var currentQueue$1;
    var queueIndex$1 = -1;

    function cleanUpNextTick$1() {
        if (!draining$1 || !currentQueue$1) {
            return;
        }
        draining$1 = false;
        if (currentQueue$1.length) {
            queue$1 = currentQueue$1.concat(queue$1);
        } else {
            queueIndex$1 = -1;
        }
        if (queue$1.length) {
            drainQueue$1();
        }
    }

    function drainQueue$1() {
        if (draining$1) {
            return;
        }
        var timeout = runTimeout$1(cleanUpNextTick$1);
        draining$1 = true;

        var len = queue$1.length;
        while(len) {
            currentQueue$1 = queue$1;
            queue$1 = [];
            while (++queueIndex$1 < len) {
                if (currentQueue$1) {
                    currentQueue$1[queueIndex$1].run();
                }
            }
            queueIndex$1 = -1;
            len = queue$1.length;
        }
        currentQueue$1 = null;
        draining$1 = false;
        runClearTimeout$1(timeout);
    }
    function nextTick$1(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue$1.push(new Item$1(fun, args));
        if (queue$1.length === 1 && !draining$1) {
            runTimeout$1(drainQueue$1);
        }
    }
    // v8 likes predictible objects
    function Item$1(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item$1.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    var title$1 = 'browser';
    var platform$2 = 'browser';
    var browser$3 = true;
    var env$1 = {};
    var argv$1 = [];
    var version$4 = ''; // empty string to avoid regexp issues
    var versions$1 = {};
    var release$2 = {};
    var config$1 = {};

    function noop$1() {}

    var on$1 = noop$1;
    var addListener$1 = noop$1;
    var once$1 = noop$1;
    var off$1 = noop$1;
    var removeListener$1 = noop$1;
    var removeAllListeners$1 = noop$1;
    var emit$1 = noop$1;

    function binding$2(name) {
        throw new Error('process.binding is not supported');
    }

    function cwd$1 () { return '/' }
    function chdir$1 (dir) {
        throw new Error('process.chdir is not supported');
    }function umask$1() { return 0; }

    // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
    var performance$1 = global$1.performance || {};
    var performanceNow$1 =
      performance$1.now        ||
      performance$1.mozNow     ||
      performance$1.msNow      ||
      performance$1.oNow       ||
      performance$1.webkitNow  ||
      function(){ return (new Date()).getTime() };

    // generate timestamp or delta
    // see http://nodejs.org/api/process.html#process_process_hrtime
    function hrtime$1(previousTimestamp){
      var clocktime = performanceNow$1.call(performance$1)*1e-3;
      var seconds = Math.floor(clocktime);
      var nanoseconds = Math.floor((clocktime%1)*1e9);
      if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds<0) {
          seconds--;
          nanoseconds += 1e9;
        }
      }
      return [seconds,nanoseconds]
    }

    var startTime$1 = new Date();
    function uptime$2() {
      var currentTime = new Date();
      var dif = currentTime - startTime$1;
      return dif / 1000;
    }

    var browser$1$1 = {
      nextTick: nextTick$1,
      title: title$1,
      browser: browser$3,
      env: env$1,
      argv: argv$1,
      version: version$4,
      versions: versions$1,
      on: on$1,
      addListener: addListener$1,
      once: once$1,
      off: off$1,
      removeListener: removeListener$1,
      removeAllListeners: removeAllListeners$1,
      emit: emit$1,
      binding: binding$2,
      cwd: cwd$1,
      chdir: chdir$1,
      umask: umask$1,
      hrtime: hrtime$1,
      platform: platform$2,
      release: release$2,
      config: config$1,
      uptime: uptime$2
    };

    var src = {exports: {}};

    var browser$2 = {exports: {}};

    /**
     * Helpers.
     */

    var ms;
    var hasRequiredMs;

    function requireMs () {
    	if (hasRequiredMs) return ms;
    	hasRequiredMs = 1;
    	var s = 1000;
    	var m = s * 60;
    	var h = m * 60;
    	var d = h * 24;
    	var w = d * 7;
    	var y = d * 365.25;

    	/**
    	 * Parse or format the given `val`.
    	 *
    	 * Options:
    	 *
    	 *  - `long` verbose formatting [false]
    	 *
    	 * @param {String|Number} val
    	 * @param {Object} [options]
    	 * @throws {Error} throw an error if val is not a non-empty string or a number
    	 * @return {String|Number}
    	 * @api public
    	 */

    	ms = function(val, options) {
    	  options = options || {};
    	  var type = typeof val;
    	  if (type === 'string' && val.length > 0) {
    	    return parse(val);
    	  } else if (type === 'number' && isFinite(val)) {
    	    return options.long ? fmtLong(val) : fmtShort(val);
    	  }
    	  throw new Error(
    	    'val is not a non-empty string or a valid number. val=' +
    	      JSON.stringify(val)
    	  );
    	};

    	/**
    	 * Parse the given `str` and return milliseconds.
    	 *
    	 * @param {String} str
    	 * @return {Number}
    	 * @api private
    	 */

    	function parse(str) {
    	  str = String(str);
    	  if (str.length > 100) {
    	    return;
    	  }
    	  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    	    str
    	  );
    	  if (!match) {
    	    return;
    	  }
    	  var n = parseFloat(match[1]);
    	  var type = (match[2] || 'ms').toLowerCase();
    	  switch (type) {
    	    case 'years':
    	    case 'year':
    	    case 'yrs':
    	    case 'yr':
    	    case 'y':
    	      return n * y;
    	    case 'weeks':
    	    case 'week':
    	    case 'w':
    	      return n * w;
    	    case 'days':
    	    case 'day':
    	    case 'd':
    	      return n * d;
    	    case 'hours':
    	    case 'hour':
    	    case 'hrs':
    	    case 'hr':
    	    case 'h':
    	      return n * h;
    	    case 'minutes':
    	    case 'minute':
    	    case 'mins':
    	    case 'min':
    	    case 'm':
    	      return n * m;
    	    case 'seconds':
    	    case 'second':
    	    case 'secs':
    	    case 'sec':
    	    case 's':
    	      return n * s;
    	    case 'milliseconds':
    	    case 'millisecond':
    	    case 'msecs':
    	    case 'msec':
    	    case 'ms':
    	      return n;
    	    default:
    	      return undefined;
    	  }
    	}

    	/**
    	 * Short format for `ms`.
    	 *
    	 * @param {Number} ms
    	 * @return {String}
    	 * @api private
    	 */

    	function fmtShort(ms) {
    	  var msAbs = Math.abs(ms);
    	  if (msAbs >= d) {
    	    return Math.round(ms / d) + 'd';
    	  }
    	  if (msAbs >= h) {
    	    return Math.round(ms / h) + 'h';
    	  }
    	  if (msAbs >= m) {
    	    return Math.round(ms / m) + 'm';
    	  }
    	  if (msAbs >= s) {
    	    return Math.round(ms / s) + 's';
    	  }
    	  return ms + 'ms';
    	}

    	/**
    	 * Long format for `ms`.
    	 *
    	 * @param {Number} ms
    	 * @return {String}
    	 * @api private
    	 */

    	function fmtLong(ms) {
    	  var msAbs = Math.abs(ms);
    	  if (msAbs >= d) {
    	    return plural(ms, msAbs, d, 'day');
    	  }
    	  if (msAbs >= h) {
    	    return plural(ms, msAbs, h, 'hour');
    	  }
    	  if (msAbs >= m) {
    	    return plural(ms, msAbs, m, 'minute');
    	  }
    	  if (msAbs >= s) {
    	    return plural(ms, msAbs, s, 'second');
    	  }
    	  return ms + ' ms';
    	}

    	/**
    	 * Pluralization helper.
    	 */

    	function plural(ms, msAbs, n, name) {
    	  var isPlural = msAbs >= n * 1.5;
    	  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
    	}
    	return ms;
    }

    var common;
    var hasRequiredCommon;

    function requireCommon () {
    	if (hasRequiredCommon) return common;
    	hasRequiredCommon = 1;
    	/**
    	 * This is the common logic for both the Node.js and web browser
    	 * implementations of `debug()`.
    	 */

    	function setup(env) {
    		createDebug.debug = createDebug;
    		createDebug.default = createDebug;
    		createDebug.coerce = coerce;
    		createDebug.disable = disable;
    		createDebug.enable = enable;
    		createDebug.enabled = enabled;
    		createDebug.humanize = requireMs();
    		createDebug.destroy = destroy;

    		Object.keys(env).forEach(key => {
    			createDebug[key] = env[key];
    		});

    		/**
    		* The currently active debug mode names, and names to skip.
    		*/

    		createDebug.names = [];
    		createDebug.skips = [];

    		/**
    		* Map of special "%n" handling functions, for the debug "format" argument.
    		*
    		* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
    		*/
    		createDebug.formatters = {};

    		/**
    		* Selects a color for a debug namespace
    		* @param {String} namespace The namespace string for the debug instance to be colored
    		* @return {Number|String} An ANSI color code for the given namespace
    		* @api private
    		*/
    		function selectColor(namespace) {
    			let hash = 0;

    			for (let i = 0; i < namespace.length; i++) {
    				hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
    				hash |= 0; // Convert to 32bit integer
    			}

    			return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    		}
    		createDebug.selectColor = selectColor;

    		/**
    		* Create a debugger with the given `namespace`.
    		*
    		* @param {String} namespace
    		* @return {Function}
    		* @api public
    		*/
    		function createDebug(namespace) {
    			let prevTime;
    			let enableOverride = null;
    			let namespacesCache;
    			let enabledCache;

    			function debug(...args) {
    				// Disabled?
    				if (!debug.enabled) {
    					return;
    				}

    				const self = debug;

    				// Set `diff` timestamp
    				const curr = Number(new Date());
    				const ms = curr - (prevTime || curr);
    				self.diff = ms;
    				self.prev = prevTime;
    				self.curr = curr;
    				prevTime = curr;

    				args[0] = createDebug.coerce(args[0]);

    				if (typeof args[0] !== 'string') {
    					// Anything else let's inspect with %O
    					args.unshift('%O');
    				}

    				// Apply any `formatters` transformations
    				let index = 0;
    				args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
    					// If we encounter an escaped % then don't increase the array index
    					if (match === '%%') {
    						return '%';
    					}
    					index++;
    					const formatter = createDebug.formatters[format];
    					if (typeof formatter === 'function') {
    						const val = args[index];
    						match = formatter.call(self, val);

    						// Now we need to remove `args[index]` since it's inlined in the `format`
    						args.splice(index, 1);
    						index--;
    					}
    					return match;
    				});

    				// Apply env-specific formatting (colors, etc.)
    				createDebug.formatArgs.call(self, args);

    				const logFn = self.log || createDebug.log;
    				logFn.apply(self, args);
    			}

    			debug.namespace = namespace;
    			debug.useColors = createDebug.useColors();
    			debug.color = createDebug.selectColor(namespace);
    			debug.extend = extend;
    			debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

    			Object.defineProperty(debug, 'enabled', {
    				enumerable: true,
    				configurable: false,
    				get: () => {
    					if (enableOverride !== null) {
    						return enableOverride;
    					}
    					if (namespacesCache !== createDebug.namespaces) {
    						namespacesCache = createDebug.namespaces;
    						enabledCache = createDebug.enabled(namespace);
    					}

    					return enabledCache;
    				},
    				set: v => {
    					enableOverride = v;
    				}
    			});

    			// Env-specific initialization logic for debug instances
    			if (typeof createDebug.init === 'function') {
    				createDebug.init(debug);
    			}

    			return debug;
    		}

    		function extend(namespace, delimiter) {
    			const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
    			newDebug.log = this.log;
    			return newDebug;
    		}

    		/**
    		* Enables a debug mode by namespaces. This can include modes
    		* separated by a colon and wildcards.
    		*
    		* @param {String} namespaces
    		* @api public
    		*/
    		function enable(namespaces) {
    			createDebug.save(namespaces);
    			createDebug.namespaces = namespaces;

    			createDebug.names = [];
    			createDebug.skips = [];

    			let i;
    			const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    			const len = split.length;

    			for (i = 0; i < len; i++) {
    				if (!split[i]) {
    					// ignore empty strings
    					continue;
    				}

    				namespaces = split[i].replace(/\*/g, '.*?');

    				if (namespaces[0] === '-') {
    					createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
    				} else {
    					createDebug.names.push(new RegExp('^' + namespaces + '$'));
    				}
    			}
    		}

    		/**
    		* Disable debug output.
    		*
    		* @return {String} namespaces
    		* @api public
    		*/
    		function disable() {
    			const namespaces = [
    				...createDebug.names.map(toNamespace),
    				...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
    			].join(',');
    			createDebug.enable('');
    			return namespaces;
    		}

    		/**
    		* Returns true if the given mode name is enabled, false otherwise.
    		*
    		* @param {String} name
    		* @return {Boolean}
    		* @api public
    		*/
    		function enabled(name) {
    			if (name[name.length - 1] === '*') {
    				return true;
    			}

    			let i;
    			let len;

    			for (i = 0, len = createDebug.skips.length; i < len; i++) {
    				if (createDebug.skips[i].test(name)) {
    					return false;
    				}
    			}

    			for (i = 0, len = createDebug.names.length; i < len; i++) {
    				if (createDebug.names[i].test(name)) {
    					return true;
    				}
    			}

    			return false;
    		}

    		/**
    		* Convert regexp to namespace
    		*
    		* @param {RegExp} regxep
    		* @return {String} namespace
    		* @api private
    		*/
    		function toNamespace(regexp) {
    			return regexp.toString()
    				.substring(2, regexp.toString().length - 2)
    				.replace(/\.\*\?$/, '*');
    		}

    		/**
    		* Coerce `val`.
    		*
    		* @param {Mixed} val
    		* @return {Mixed}
    		* @api private
    		*/
    		function coerce(val) {
    			if (val instanceof Error) {
    				return val.stack || val.message;
    			}
    			return val;
    		}

    		/**
    		* XXX DO NOT USE. This is a temporary stub function.
    		* XXX It WILL be removed in the next major release.
    		*/
    		function destroy() {
    			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    		}

    		createDebug.enable(createDebug.load());

    		return createDebug;
    	}

    	common = setup;
    	return common;
    }

    var hasRequiredBrowser;

    function requireBrowser () {
    	if (hasRequiredBrowser) return browser$2.exports;
    	hasRequiredBrowser = 1;
    	(function (module, exports) {
    		/**
    		 * This is the web browser implementation of `debug()`.
    		 */

    		exports.formatArgs = formatArgs;
    		exports.save = save;
    		exports.load = load;
    		exports.useColors = useColors;
    		exports.storage = localstorage();
    		exports.destroy = (() => {
    			let warned = false;

    			return () => {
    				if (!warned) {
    					warned = true;
    					console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    				}
    			};
    		})();

    		/**
    		 * Colors.
    		 */

    		exports.colors = [
    			'#0000CC',
    			'#0000FF',
    			'#0033CC',
    			'#0033FF',
    			'#0066CC',
    			'#0066FF',
    			'#0099CC',
    			'#0099FF',
    			'#00CC00',
    			'#00CC33',
    			'#00CC66',
    			'#00CC99',
    			'#00CCCC',
    			'#00CCFF',
    			'#3300CC',
    			'#3300FF',
    			'#3333CC',
    			'#3333FF',
    			'#3366CC',
    			'#3366FF',
    			'#3399CC',
    			'#3399FF',
    			'#33CC00',
    			'#33CC33',
    			'#33CC66',
    			'#33CC99',
    			'#33CCCC',
    			'#33CCFF',
    			'#6600CC',
    			'#6600FF',
    			'#6633CC',
    			'#6633FF',
    			'#66CC00',
    			'#66CC33',
    			'#9900CC',
    			'#9900FF',
    			'#9933CC',
    			'#9933FF',
    			'#99CC00',
    			'#99CC33',
    			'#CC0000',
    			'#CC0033',
    			'#CC0066',
    			'#CC0099',
    			'#CC00CC',
    			'#CC00FF',
    			'#CC3300',
    			'#CC3333',
    			'#CC3366',
    			'#CC3399',
    			'#CC33CC',
    			'#CC33FF',
    			'#CC6600',
    			'#CC6633',
    			'#CC9900',
    			'#CC9933',
    			'#CCCC00',
    			'#CCCC33',
    			'#FF0000',
    			'#FF0033',
    			'#FF0066',
    			'#FF0099',
    			'#FF00CC',
    			'#FF00FF',
    			'#FF3300',
    			'#FF3333',
    			'#FF3366',
    			'#FF3399',
    			'#FF33CC',
    			'#FF33FF',
    			'#FF6600',
    			'#FF6633',
    			'#FF9900',
    			'#FF9933',
    			'#FFCC00',
    			'#FFCC33'
    		];

    		/**
    		 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
    		 * and the Firebug extension (any Firefox version) are known
    		 * to support "%c" CSS customizations.
    		 *
    		 * TODO: add a `localStorage` variable to explicitly enable/disable colors
    		 */

    		// eslint-disable-next-line complexity
    		function useColors() {
    			// NB: In an Electron preload script, document will be defined but not fully
    			// initialized. Since we know we're in Chrome, we'll just detect this case
    			// explicitly
    			if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    				return true;
    			}

    			// Internet Explorer and Edge do not support colors.
    			if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    				return false;
    			}

    			// Is webkit? http://stackoverflow.com/a/16459606/376773
    			// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    			return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    				// Is firebug? http://stackoverflow.com/a/398120/376773
    				(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    				// Is firefox >= v31?
    				// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    				(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    				// Double check webkit in userAgent just in case we are in a worker
    				(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
    		}

    		/**
    		 * Colorize log arguments if enabled.
    		 *
    		 * @api public
    		 */

    		function formatArgs(args) {
    			args[0] = (this.useColors ? '%c' : '') +
    				this.namespace +
    				(this.useColors ? ' %c' : ' ') +
    				args[0] +
    				(this.useColors ? '%c ' : ' ') +
    				'+' + module.exports.humanize(this.diff);

    			if (!this.useColors) {
    				return;
    			}

    			const c = 'color: ' + this.color;
    			args.splice(1, 0, c, 'color: inherit');

    			// The final "%c" is somewhat tricky, because there could be other
    			// arguments passed either before or after the %c, so we need to
    			// figure out the correct index to insert the CSS into
    			let index = 0;
    			let lastC = 0;
    			args[0].replace(/%[a-zA-Z%]/g, match => {
    				if (match === '%%') {
    					return;
    				}
    				index++;
    				if (match === '%c') {
    					// We only are interested in the *last* %c
    					// (the user may have provided their own)
    					lastC = index;
    				}
    			});

    			args.splice(lastC, 0, c);
    		}

    		/**
    		 * Invokes `console.debug()` when available.
    		 * No-op when `console.debug` is not a "function".
    		 * If `console.debug` is not available, falls back
    		 * to `console.log`.
    		 *
    		 * @api public
    		 */
    		exports.log = console.debug || console.log || (() => {});

    		/**
    		 * Save `namespaces`.
    		 *
    		 * @param {String} namespaces
    		 * @api private
    		 */
    		function save(namespaces) {
    			try {
    				if (namespaces) {
    					exports.storage.setItem('debug', namespaces);
    				} else {
    					exports.storage.removeItem('debug');
    				}
    			} catch (error) {
    				// Swallow
    				// XXX (@Qix-) should we be logging these?
    			}
    		}

    		/**
    		 * Load `namespaces`.
    		 *
    		 * @return {String} returns the previously persisted debug modes
    		 * @api private
    		 */
    		function load() {
    			let r;
    			try {
    				r = exports.storage.getItem('debug');
    			} catch (error) {
    				// Swallow
    				// XXX (@Qix-) should we be logging these?
    			}

    			// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    			if (!r && typeof browser$1$1 !== 'undefined' && 'env' in browser$1$1) {
    				r = browser$1$1.env.DEBUG;
    			}

    			return r;
    		}

    		/**
    		 * Localstorage attempts to return the localstorage.
    		 *
    		 * This is necessary because safari throws
    		 * when a user disables cookies/localstorage
    		 * and you attempt to access it.
    		 *
    		 * @return {LocalStorage}
    		 * @api private
    		 */

    		function localstorage() {
    			try {
    				// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    				// The Browser also has localStorage in the global context.
    				return localStorage;
    			} catch (error) {
    				// Swallow
    				// XXX (@Qix-) should we be logging these?
    			}
    		}

    		module.exports = requireCommon()(exports);

    		const {formatters} = module.exports;

    		/**
    		 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
    		 */

    		formatters.j = function (v) {
    			try {
    				return JSON.stringify(v);
    			} catch (error) {
    				return '[UnexpectedJSONParseError]: ' + error.message;
    			}
    		}; 
    	} (browser$2, browser$2.exports));
    	return browser$2.exports;
    }

    var node = {exports: {}};

    // MIT lisence
    // from https://github.com/substack/tty-browserify/blob/1ba769a6429d242f36226538835b4034bf6b7886/index.js

    function isatty() {
      return false;
    }

    function ReadStream() {
      throw new Error('tty.ReadStream is not implemented');
    }

    function WriteStream() {
      throw new Error('tty.ReadStream is not implemented');
    }

    var _polyfillNode_tty = {
      isatty: isatty,
      ReadStream: ReadStream,
      WriteStream: WriteStream
    };

    var _polyfillNode_tty$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ReadStream: ReadStream,
        WriteStream: WriteStream,
        default: _polyfillNode_tty,
        isatty: isatty
    });

    var require$$0$4 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_tty$1);

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var inited = false;
    function init () {
      inited = true;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;
    }

    function toByteArray (b64) {
      if (!inited) {
        init();
      }
      var i, j, l, tmp, placeHolders, arr;
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

      // base64 is 4/3 + up to two characters of the original data
      arr = new Arr(len * 3 / 4 - placeHolders);

      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? len - 4 : len;

      var L = 0;

      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
        arr[L++] = (tmp >> 16) & 0xFF;
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      if (placeHolders === 2) {
        tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[L++] = tmp & 0xFF;
      } else if (placeHolders === 1) {
        tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      if (!inited) {
        init();
      }
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var output = '';
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup[tmp >> 2];
        output += lookup[(tmp << 4) & 0x3F];
        output += '==';
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
        output += lookup[tmp >> 10];
        output += lookup[(tmp >> 4) & 0x3F];
        output += lookup[(tmp << 2) & 0x3F];
        output += '=';
      }

      parts.push(output);

      return parts.join('')
    }

    function read (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    function write (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    }

    var toString = {}.toString;

    var isArray$2 = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };

    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
     * @license  MIT
     */
    /* eslint-disable no-proto */


    var INSPECT_MAX_BYTES = 50;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Use Object implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * Due to various browser bugs, sometimes the Object implementation will be used even
     * when the browser supports typed arrays.
     *
     * Note:
     *
     *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
     *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
     *
     *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
     *
     *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
     *     incorrect length in some situations.

     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
     * get the Object implementation, which is slower but behaves correctly.
     */
    Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
      ? global$1.TYPED_ARRAY_SUPPORT
      : true;

    /*
     * Export kMaxLength after typed array support is determined.
     */
    var _kMaxLength = kMaxLength();

    function kMaxLength () {
      return Buffer.TYPED_ARRAY_SUPPORT
        ? 0x7fffffff
        : 0x3fffffff
    }

    function createBuffer (that, length) {
      if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length')
      }
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
          that = new Buffer(length);
        }
        that.length = length;
      }

      return that
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer (arg, encodingOrOffset, length) {
      if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
        return new Buffer(arg, encodingOrOffset, length)
      }

      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error(
            'If encoding is specified then the first argument must be a string'
          )
        }
        return allocUnsafe(this, arg)
      }
      return from(this, arg, encodingOrOffset, length)
    }

    Buffer.poolSize = 8192; // not used by this implementation

    // TODO: Legacy, not needed anymore. Remove in next major version.
    Buffer._augment = function (arr) {
      arr.__proto__ = Buffer.prototype;
      return arr
    };

    function from (that, value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length)
      }

      if (typeof value === 'string') {
        return fromString(that, value, encodingOrOffset)
      }

      return fromObject(that, value)
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length)
    };

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      Buffer.prototype.__proto__ = Uint8Array.prototype;
      Buffer.__proto__ = Uint8Array;
      if (typeof Symbol !== 'undefined' && Symbol.species &&
          Buffer[Symbol.species] === Buffer) ;
    }

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number')
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative')
      }
    }

    function alloc (that, size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(that, size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(that, size).fill(fill, encoding)
          : createBuffer(that, size).fill(fill)
      }
      return createBuffer(that, size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(null, size, fill, encoding)
    };

    function allocUnsafe (that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }
      return that
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(null, size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(null, size)
    };

    function fromString (that, string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding')
      }

      var length = byteLength(string, encoding) | 0;
      that = createBuffer(that, length);

      var actual = that.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual);
      }

      return that
    }

    function fromArrayLike (that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);
      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }
      return that
    }

    function fromArrayBuffer (that, array, byteOffset, length) {
      array.byteLength; // this throws if `array` is not a valid ArrayBuffer

      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds')
      }

      if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array);
      } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike(that, array);
      }
      return that
    }

    function fromObject (that, obj) {
      if (internalIsBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);

        if (that.length === 0) {
          return that
        }

        obj.copy(that, 0, 0, len);
        return that
      }

      if (obj) {
        if ((typeof ArrayBuffer !== 'undefined' &&
            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan(obj.length)) {
            return createBuffer(that, 0)
          }
          return fromArrayLike(that, obj)
        }

        if (obj.type === 'Buffer' && isArray$2(obj.data)) {
          return fromArrayLike(that, obj.data)
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
    }

    function checked (length) {
      // Note: cannot use `length < kMaxLength()` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + kMaxLength().toString(16) + ' bytes')
      }
      return length | 0
    }

    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0;
      }
      return Buffer.alloc(+length)
    }
    Buffer.isBuffer = isBuffer$1;
    function internalIsBuffer (b) {
      return !!(b != null && b._isBuffer)
    }

    Buffer.compare = function compare (a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError('Arguments must be Buffers')
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer.concat = function concat (list, length) {
      if (!isArray$2(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (internalIsBuffer(string)) {
        return string.length
      }
      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) return utf8ToBytes(string).length // assume utf8
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
    // Buffer instances.
    Buffer.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer.prototype.toString = function toString () {
      var length = this.length | 0;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer.prototype.equals = function equals (b) {
      if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    };

    Buffer.prototype.inspect = function inspect () {
      var str = '';
      var max = INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
        if (this.length > max) str += ' ... ';
      }
      return '<Buffer ' + str + '>'
    };

    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError('Argument must be a Buffer')
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset;  // Coerce to Number.
      if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (internalIsBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (Buffer.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      // must be an even number of digits
      var strLen = string.length;
      if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      // legacy write(string, encoding, offset, length) - remove in v0.13
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return fromByteArray(buf)
      } else {
        return fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
          : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += toHex(buf[i]);
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res
    }

    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer(sliceLen, undefined);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, true, 23, 4)
    };

    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, false, 23, 4)
    };

    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, true, 52, 8)
    };

    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    function objectWriteUInt16 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
          (littleEndian ? i : 1 - i) * 8;
      }
    }

    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    function objectWriteUInt32 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffffffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
      }
    }

    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = (value >>> 24);
        this[offset + 2] = (value >>> 16);
        this[offset + 1] = (value >>> 8);
        this[offset] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
        this[offset + 2] = (value >>> 16);
        this[offset + 3] = (value >>> 24);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val)
          ? val
          : utf8ToBytes(new Buffer(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = stringtrim(str).replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function stringtrim (str) {
      if (str.trim) return str.trim()
      return str.replace(/^\s+|\s+$/g, '')
    }

    function toHex (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }


    function base64ToBytes (str) {
      return toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    function isnan (val) {
      return val !== val // eslint-disable-line no-self-compare
    }


    // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    function isBuffer$1(obj) {
      return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
    }

    function isFastBuffer (obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }

    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer (obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
    }

    var _polyfillNode_buffer = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Buffer: Buffer,
        INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
        SlowBuffer: SlowBuffer,
        isBuffer: isBuffer$1,
        kMaxLength: _kMaxLength
    });

    // shim for using process in browser
    // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    var cachedSetTimeout = defaultSetTimout;
    var cachedClearTimeout = defaultClearTimeout;
    if (typeof global$1.setTimeout === 'function') {
        cachedSetTimeout = setTimeout;
    }
    if (typeof global$1.clearTimeout === 'function') {
        cachedClearTimeout = clearTimeout;
    }

    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    function nextTick(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    }
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    var title = 'browser';
    var platform$1 = 'browser';
    var browser = true;
    var env = {};
    var argv = [];
    var version$3 = ''; // empty string to avoid regexp issues
    var versions = {};
    var release$1 = {};
    var config = {};

    function noop() {}

    var on = noop;
    var addListener = noop;
    var once = noop;
    var off = noop;
    var removeListener = noop;
    var removeAllListeners = noop;
    var emit = noop;

    function binding$1(name) {
        throw new Error('process.binding is not supported');
    }

    function cwd () { return '/' }
    function chdir (dir) {
        throw new Error('process.chdir is not supported');
    }function umask() { return 0; }

    // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
    var performance = global$1.performance || {};
    var performanceNow =
      performance.now        ||
      performance.mozNow     ||
      performance.msNow      ||
      performance.oNow       ||
      performance.webkitNow  ||
      function(){ return (new Date()).getTime() };

    // generate timestamp or delta
    // see http://nodejs.org/api/process.html#process_process_hrtime
    function hrtime(previousTimestamp){
      var clocktime = performanceNow.call(performance)*1e-3;
      var seconds = Math.floor(clocktime);
      var nanoseconds = Math.floor((clocktime%1)*1e9);
      if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds<0) {
          seconds--;
          nanoseconds += 1e9;
        }
      }
      return [seconds,nanoseconds]
    }

    var startTime = new Date();
    function uptime$1() {
      var currentTime = new Date();
      var dif = currentTime - startTime;
      return dif / 1000;
    }

    var browser$1 = {
      nextTick: nextTick,
      title: title,
      browser: browser,
      env: env,
      argv: argv,
      version: version$3,
      versions: versions,
      on: on,
      addListener: addListener,
      once: once,
      off: off,
      removeListener: removeListener,
      removeAllListeners: removeAllListeners,
      emit: emit,
      binding: binding$1,
      cwd: cwd,
      chdir: chdir,
      umask: umask,
      hrtime: hrtime,
      platform: platform$1,
      release: release$1,
      config: config,
      uptime: uptime$1
    };

    var inherits;
    if (typeof Object.create === 'function'){
      inherits = function inherits(ctor, superCtor) {
        // implementation from standard node.js 'util' module
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      inherits = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
    var inherits$1 = inherits;

    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
      function getOwnPropertyDescriptors(obj) {
        var keys = Object.keys(obj);
        var descriptors = {};
        for (var i = 0; i < keys.length; i++) {
          descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
        }
        return descriptors;
      };

    var formatRegExp = /%[sdj%]/g;
    function format$3(f) {
      if (!isString(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(' ');
      }

      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x) {
        if (x === '%%') return '%';
        if (i >= len) return x;
        switch (x) {
          case '%s': return String(args[i++]);
          case '%d': return Number(args[i++]);
          case '%j':
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return '[Circular]';
            }
          default:
            return x;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject$1(x)) {
          str += ' ' + x;
        } else {
          str += ' ' + inspect(x);
        }
      }
      return str;
    }

    // Mark that a method should not be used.
    // Returns a modified function which warns once by default.
    // If --no-deprecation is set, then it is a no-op.
    function deprecate(fn, msg) {
      // Allow for deprecating things in the process of starting up.
      if (isUndefined(global$1.process)) {
        return function() {
          return deprecate(fn, msg).apply(this, arguments);
        };
      }

      if (browser$1.noDeprecation === true) {
        return fn;
      }

      var warned = false;
      function deprecated() {
        if (!warned) {
          if (browser$1.throwDeprecation) {
            throw new Error(msg);
          } else if (browser$1.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }

      return deprecated;
    }

    var debugs = {};
    var debugEnviron;
    function debuglog(set) {
      if (isUndefined(debugEnviron))
        debugEnviron = browser$1.env.NODE_DEBUG || '';
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
          var pid = 0;
          debugs[set] = function() {
            var msg = format$3.apply(null, arguments);
            console.error('%s %d: %s', set, pid, msg);
          };
        } else {
          debugs[set] = function() {};
        }
      }
      return debugs[set];
    }

    /**
     * Echos the value of a value. Trys to print the value out
     * in the best way possible given the different types.
     *
     * @param {Object} obj The object to print out.
     * @param {Object} opts Optional options object that alters the output.
     */
    /* legacy: obj, showHidden, depth, colors*/
    function inspect(obj, opts) {
      // default options
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      // legacy...
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        // legacy...
        ctx.showHidden = opts;
      } else if (opts) {
        // got an "options" object
        _extend(ctx, opts);
      }
      // set default options
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }

    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    inspect.colors = {
      'bold' : [1, 22],
      'italic' : [3, 23],
      'underline' : [4, 24],
      'inverse' : [7, 27],
      'white' : [37, 39],
      'grey' : [90, 39],
      'black' : [30, 39],
      'blue' : [34, 39],
      'cyan' : [36, 39],
      'green' : [32, 39],
      'magenta' : [35, 39],
      'red' : [31, 39],
      'yellow' : [33, 39]
    };

    // Don't use 'blue' not visible on cmd.exe
    inspect.styles = {
      'special': 'cyan',
      'number': 'yellow',
      'boolean': 'yellow',
      'undefined': 'grey',
      'null': 'bold',
      'string': 'green',
      'date': 'magenta',
      // "name": intentionally not styling
      'regexp': 'red'
    };


    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];

      if (style) {
        return '\u001b[' + inspect.colors[style][0] + 'm' + str +
               '\u001b[' + inspect.colors[style][1] + 'm';
      } else {
        return str;
      }
    }


    function stylizeNoColor(str, styleType) {
      return str;
    }


    function arrayToHash(array) {
      var hash = {};

      array.forEach(function(val, idx) {
        hash[val] = true;
      });

      return hash;
    }


    function formatValue(ctx, value, recurseTimes) {
      // Provide a hook for user-specified inspect functions.
      // Check that value is an object with an inspect function on it
      if (ctx.customInspect &&
          value &&
          isFunction$1(value.inspect) &&
          // Filter out the util module, it's inspect function is special
          value.inspect !== inspect &&
          // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }

      // Primitive types cannot have properties
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }

      // Look up the keys of the object.
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }

      // IE doesn't make error fields non-enumerable
      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
      if (isError(value)
          && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      // Some type of object without properties can be shortcutted.
      if (keys.length === 0) {
        if (isFunction$1(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '', array = false, braces = ['{', '}'];

      // Make Array say that they are Array
      if (isArray$1(value)) {
        array = true;
        braces = ['[', ']'];
      }

      // Make functions say that they are functions
      if (isFunction$1(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      // Make RegExps say that they are RegExps
      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      // Make dates with properties first say the date
      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      // Make error with message first say the error
      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);

      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();

      return reduceToSingleString(output, base, braces);
    }


    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize('undefined', 'undefined');
      if (isString(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
      }
      if (isNumber(value))
        return ctx.stylize('' + value, 'number');
      if (isBoolean(value))
        return ctx.stylize('' + value, 'boolean');
      // For some reason typeof null is "object", so special case here.
      if (isNull(value))
        return ctx.stylize('null', 'null');
    }


    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }


    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty$1(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              key, true));
        }
      });
      return output;
    }


    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty$1(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }


    function reduceToSingleString(output, base, braces) {
      var length = output.reduce(function(prev, cur) {
        if (cur.indexOf('\n') >= 0) ;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }


    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray$1(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNullOrUndefined(arg) {
      return arg == null;
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isString(arg) {
      return typeof arg === 'string';
    }

    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }

    function isUndefined(arg) {
      return arg === void 0;
    }

    function isRegExp(re) {
      return isObject$1(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject$1(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isDate(d) {
      return isObject$1(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject$1(e) &&
          (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction$1(arg) {
      return typeof arg === 'function';
    }

    function isPrimitive(arg) {
      return arg === null ||
             typeof arg === 'boolean' ||
             typeof arg === 'number' ||
             typeof arg === 'string' ||
             typeof arg === 'symbol' ||  // ES6 symbol
             typeof arg === 'undefined';
    }

    function isBuffer(maybeBuf) {
      return Buffer.isBuffer(maybeBuf);
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }


    function pad(n) {
      return n < 10 ? '0' + n.toString(10) : n.toString(10);
    }


    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                  'Oct', 'Nov', 'Dec'];

    // 26 Feb 16:19:34
    function timestamp() {
      var d = new Date();
      var time = [pad(d.getHours()),
                  pad(d.getMinutes()),
                  pad(d.getSeconds())].join(':');
      return [d.getDate(), months[d.getMonth()], time].join(' ');
    }


    // log is just a thin wrapper to console.log that prepends a timestamp
    function log() {
      console.log('%s - %s', timestamp(), format$3.apply(null, arguments));
    }

    function _extend(origin, add) {
      // Don't do anything if add isn't an object
      if (!add || !isObject$1(add)) return origin;

      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    }
    function hasOwnProperty$1(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

    function promisify(original) {
      if (typeof original !== 'function')
        throw new TypeError('The "original" argument must be of type Function');

      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== 'function') {
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        }
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn, enumerable: false, writable: false, configurable: true
        });
        return fn;
      }

      function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function (resolve, reject) {
          promiseResolve = resolve;
          promiseReject = reject;
        });

        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        args.push(function (err, value) {
          if (err) {
            promiseReject(err);
          } else {
            promiseResolve(value);
          }
        });

        try {
          original.apply(this, args);
        } catch (err) {
          promiseReject(err);
        }

        return promise;
      }

      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

      if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn, enumerable: false, writable: false, configurable: true
      });
      return Object.defineProperties(
        fn,
        getOwnPropertyDescriptors(original)
      );
    }

    promisify.custom = kCustomPromisifiedSymbol;

    function callbackifyOnRejected(reason, cb) {
      // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
      // Because `null` is a special error value in callbacks which means "no error
      // occurred", we error-wrap so the callback consumer can distinguish between
      // "the promise rejected with null" or "the promise fulfilled with undefined".
      if (!reason) {
        var newReason = new Error('Promise was rejected with a falsy value');
        newReason.reason = reason;
        reason = newReason;
      }
      return cb(reason);
    }

    function callbackify(original) {
      if (typeof original !== 'function') {
        throw new TypeError('The "original" argument must be of type Function');
      }

      // We DO NOT return the promise as it gives the user a false sense that
      // the promise is actually somehow related to the callback's execution
      // and that the callback throwing will reject the promise.
      function callbackified() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }

        var maybeCb = args.pop();
        if (typeof maybeCb !== 'function') {
          throw new TypeError('The last argument must be of type Function');
        }
        var self = this;
        var cb = function() {
          return maybeCb.apply(self, arguments);
        };
        // In true node style we process the callback on `nextTick` with all the
        // implications (stack, `uncaughtException`, `async_hooks`)
        original.apply(this, args)
          .then(function(ret) { browser$1.nextTick(cb.bind(null, null, ret)); },
            function(rej) { browser$1.nextTick(callbackifyOnRejected.bind(null, rej, cb)); });
      }

      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
      Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
      return callbackified;
    }

    var _polyfillNode_util = {
      inherits: inherits$1,
      _extend: _extend,
      log: log,
      isBuffer: isBuffer,
      isPrimitive: isPrimitive,
      isFunction: isFunction$1,
      isError: isError,
      isDate: isDate,
      isObject: isObject$1,
      isRegExp: isRegExp,
      isUndefined: isUndefined,
      isSymbol: isSymbol,
      isString: isString,
      isNumber: isNumber,
      isNullOrUndefined: isNullOrUndefined,
      isNull: isNull,
      isBoolean: isBoolean,
      isArray: isArray$1,
      inspect: inspect,
      deprecate: deprecate,
      format: format$3,
      debuglog: debuglog,
      promisify: promisify,
      callbackify: callbackify,
    };

    var _polyfillNode_util$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        _extend: _extend,
        callbackify: callbackify,
        debuglog: debuglog,
        default: _polyfillNode_util,
        deprecate: deprecate,
        format: format$3,
        inherits: inherits$1,
        inspect: inspect,
        isArray: isArray$1,
        isBoolean: isBoolean,
        isBuffer: isBuffer,
        isDate: isDate,
        isError: isError,
        isFunction: isFunction$1,
        isNull: isNull,
        isNullOrUndefined: isNullOrUndefined,
        isNumber: isNumber,
        isObject: isObject$1,
        isPrimitive: isPrimitive,
        isRegExp: isRegExp,
        isString: isString,
        isSymbol: isSymbol,
        isUndefined: isUndefined,
        log: log,
        promisify: promisify
    });

    var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_util$1);

    /*
    The MIT License (MIT)

    Copyright (c) 2016 CoderPuppy

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

    */
    var _endianness;
    function endianness() {
      if (typeof _endianness === 'undefined') {
        var a = new ArrayBuffer(2);
        var b = new Uint8Array(a);
        var c = new Uint16Array(a);
        b[0] = 1;
        b[1] = 2;
        if (c[0] === 258) {
          _endianness = 'BE';
        } else if (c[0] === 513){
          _endianness = 'LE';
        } else {
          throw new Error('unable to figure out endianess');
        }
      }
      return _endianness;
    }

    function hostname() {
      if (typeof global$1.location !== 'undefined') {
        return global$1.location.hostname
      } else return '';
    }

    function loadavg() {
      return [];
    }

    function uptime() {
      return 0;
    }

    function freemem() {
      return Number.MAX_VALUE;
    }

    function totalmem() {
      return Number.MAX_VALUE;
    }

    function cpus() {
      return [];
    }

    function type() {
      return 'Browser';
    }

    function release () {
      if (typeof global$1.navigator !== 'undefined') {
        return global$1.navigator.appVersion;
      }
      return '';
    }

    function networkInterfaces () {
      return {};
    }

    function getNetworkInterfaces () {
      return {};
    }

    function arch() {
      return 'javascript';
    }

    function platform() {
      return 'browser';
    }

    function tmpDir() {
      return '/tmp';
    }
    var tmpdir = tmpDir;

    var EOL = '\n';

    function homedir(){
      return '$HOME'
    }

    var _polyfillNode_os = {
      homedir: homedir,
      EOL: EOL,
      arch: arch,
      platform: platform,
      tmpdir: tmpdir,
      tmpDir: tmpDir,
      networkInterfaces:networkInterfaces,
      getNetworkInterfaces: getNetworkInterfaces,
      release: release,
      type: type,
      cpus: cpus,
      totalmem: totalmem,
      freemem: freemem,
      uptime: uptime,
      loadavg: loadavg,
      hostname: hostname,
      endianness: endianness,
    };

    var _polyfillNode_os$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        EOL: EOL,
        arch: arch,
        cpus: cpus,
        default: _polyfillNode_os,
        endianness: endianness,
        freemem: freemem,
        getNetworkInterfaces: getNetworkInterfaces,
        homedir: homedir,
        hostname: hostname,
        loadavg: loadavg,
        networkInterfaces: networkInterfaces,
        platform: platform,
        release: release,
        tmpDir: tmpDir,
        tmpdir: tmpdir,
        totalmem: totalmem,
        type: type,
        uptime: uptime
    });

    var require$$0$3 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_os$1);

    var hasFlag;
    var hasRequiredHasFlag;

    function requireHasFlag () {
    	if (hasRequiredHasFlag) return hasFlag;
    	hasRequiredHasFlag = 1;

    	hasFlag = (flag, argv = browser$1$1.argv) => {
    		const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
    		const position = argv.indexOf(prefix + flag);
    		const terminatorPosition = argv.indexOf('--');
    		return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    	};
    	return hasFlag;
    }

    var supportsColor_1;
    var hasRequiredSupportsColor;

    function requireSupportsColor () {
    	if (hasRequiredSupportsColor) return supportsColor_1;
    	hasRequiredSupportsColor = 1;
    	const os = require$$0$3;
    	const tty = require$$0$4;
    	const hasFlag = requireHasFlag();

    	const {env} = browser$1$1;

    	let forceColor;
    	if (hasFlag('no-color') ||
    		hasFlag('no-colors') ||
    		hasFlag('color=false') ||
    		hasFlag('color=never')) {
    		forceColor = 0;
    	} else if (hasFlag('color') ||
    		hasFlag('colors') ||
    		hasFlag('color=true') ||
    		hasFlag('color=always')) {
    		forceColor = 1;
    	}

    	if ('FORCE_COLOR' in env) {
    		if (env.FORCE_COLOR === 'true') {
    			forceColor = 1;
    		} else if (env.FORCE_COLOR === 'false') {
    			forceColor = 0;
    		} else {
    			forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
    		}
    	}

    	function translateLevel(level) {
    		if (level === 0) {
    			return false;
    		}

    		return {
    			level,
    			hasBasic: true,
    			has256: level >= 2,
    			has16m: level >= 3
    		};
    	}

    	function supportsColor(haveStream, streamIsTTY) {
    		if (forceColor === 0) {
    			return 0;
    		}

    		if (hasFlag('color=16m') ||
    			hasFlag('color=full') ||
    			hasFlag('color=truecolor')) {
    			return 3;
    		}

    		if (hasFlag('color=256')) {
    			return 2;
    		}

    		if (haveStream && !streamIsTTY && forceColor === undefined) {
    			return 0;
    		}

    		const min = forceColor || 0;

    		if (env.TERM === 'dumb') {
    			return min;
    		}

    		if (browser$1$1.platform === 'win32') {
    			// Windows 10 build 10586 is the first Windows release that supports 256 colors.
    			// Windows 10 build 14931 is the first release that supports 16m/TrueColor.
    			const osRelease = os.release().split('.');
    			if (
    				Number(osRelease[0]) >= 10 &&
    				Number(osRelease[2]) >= 10586
    			) {
    				return Number(osRelease[2]) >= 14931 ? 3 : 2;
    			}

    			return 1;
    		}

    		if ('CI' in env) {
    			if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
    				return 1;
    			}

    			return min;
    		}

    		if ('TEAMCITY_VERSION' in env) {
    			return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    		}

    		if (env.COLORTERM === 'truecolor') {
    			return 3;
    		}

    		if ('TERM_PROGRAM' in env) {
    			const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

    			switch (env.TERM_PROGRAM) {
    				case 'iTerm.app':
    					return version >= 3 ? 3 : 2;
    				case 'Apple_Terminal':
    					return 2;
    				// No default
    			}
    		}

    		if (/-256(color)?$/i.test(env.TERM)) {
    			return 2;
    		}

    		if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
    			return 1;
    		}

    		if ('COLORTERM' in env) {
    			return 1;
    		}

    		return min;
    	}

    	function getSupportLevel(stream) {
    		const level = supportsColor(stream, stream && stream.isTTY);
    		return translateLevel(level);
    	}

    	supportsColor_1 = {
    		supportsColor: getSupportLevel,
    		stdout: translateLevel(supportsColor(true, tty.isatty(1))),
    		stderr: translateLevel(supportsColor(true, tty.isatty(2)))
    	};
    	return supportsColor_1;
    }

    var hasRequiredNode;

    function requireNode () {
    	if (hasRequiredNode) return node.exports;
    	hasRequiredNode = 1;
    	(function (module, exports) {
    		const tty = require$$0$4;
    		const util = require$$1$1;

    		/**
    		 * This is the Node.js implementation of `debug()`.
    		 */

    		exports.init = init;
    		exports.log = log;
    		exports.formatArgs = formatArgs;
    		exports.save = save;
    		exports.load = load;
    		exports.useColors = useColors;
    		exports.destroy = util.deprecate(
    			() => {},
    			'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
    		);

    		/**
    		 * Colors.
    		 */

    		exports.colors = [6, 2, 3, 4, 5, 1];

    		try {
    			// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
    			// eslint-disable-next-line import/no-extraneous-dependencies
    			const supportsColor = requireSupportsColor();

    			if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
    				exports.colors = [
    					20,
    					21,
    					26,
    					27,
    					32,
    					33,
    					38,
    					39,
    					40,
    					41,
    					42,
    					43,
    					44,
    					45,
    					56,
    					57,
    					62,
    					63,
    					68,
    					69,
    					74,
    					75,
    					76,
    					77,
    					78,
    					79,
    					80,
    					81,
    					92,
    					93,
    					98,
    					99,
    					112,
    					113,
    					128,
    					129,
    					134,
    					135,
    					148,
    					149,
    					160,
    					161,
    					162,
    					163,
    					164,
    					165,
    					166,
    					167,
    					168,
    					169,
    					170,
    					171,
    					172,
    					173,
    					178,
    					179,
    					184,
    					185,
    					196,
    					197,
    					198,
    					199,
    					200,
    					201,
    					202,
    					203,
    					204,
    					205,
    					206,
    					207,
    					208,
    					209,
    					214,
    					215,
    					220,
    					221
    				];
    			}
    		} catch (error) {
    			// Swallow - we only care if `supports-color` is available; it doesn't have to be.
    		}

    		/**
    		 * Build up the default `inspectOpts` object from the environment variables.
    		 *
    		 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
    		 */

    		exports.inspectOpts = Object.keys(browser$1$1.env).filter(key => {
    			return /^debug_/i.test(key);
    		}).reduce((obj, key) => {
    			// Camel-case
    			const prop = key
    				.substring(6)
    				.toLowerCase()
    				.replace(/_([a-z])/g, (_, k) => {
    					return k.toUpperCase();
    				});

    			// Coerce string value into JS value
    			let val = browser$1$1.env[key];
    			if (/^(yes|on|true|enabled)$/i.test(val)) {
    				val = true;
    			} else if (/^(no|off|false|disabled)$/i.test(val)) {
    				val = false;
    			} else if (val === 'null') {
    				val = null;
    			} else {
    				val = Number(val);
    			}

    			obj[prop] = val;
    			return obj;
    		}, {});

    		/**
    		 * Is stdout a TTY? Colored output is enabled when `true`.
    		 */

    		function useColors() {
    			return 'colors' in exports.inspectOpts ?
    				Boolean(exports.inspectOpts.colors) :
    				tty.isatty(browser$1$1.stderr.fd);
    		}

    		/**
    		 * Adds ANSI color escape codes if enabled.
    		 *
    		 * @api public
    		 */

    		function formatArgs(args) {
    			const {namespace: name, useColors} = this;

    			if (useColors) {
    				const c = this.color;
    				const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
    				const prefix = `  ${colorCode};1m${name} \u001B[0m`;

    				args[0] = prefix + args[0].split('\n').join('\n' + prefix);
    				args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
    			} else {
    				args[0] = getDate() + name + ' ' + args[0];
    			}
    		}

    		function getDate() {
    			if (exports.inspectOpts.hideDate) {
    				return '';
    			}
    			return new Date().toISOString() + ' ';
    		}

    		/**
    		 * Invokes `util.format()` with the specified arguments and writes to stderr.
    		 */

    		function log(...args) {
    			return browser$1$1.stderr.write(util.format(...args) + '\n');
    		}

    		/**
    		 * Save `namespaces`.
    		 *
    		 * @param {String} namespaces
    		 * @api private
    		 */
    		function save(namespaces) {
    			if (namespaces) {
    				browser$1$1.env.DEBUG = namespaces;
    			} else {
    				// If you set a process.env field to null or undefined, it gets cast to the
    				// string 'null' or 'undefined'. Just delete instead.
    				delete browser$1$1.env.DEBUG;
    			}
    		}

    		/**
    		 * Load `namespaces`.
    		 *
    		 * @return {String} returns the previously persisted debug modes
    		 * @api private
    		 */

    		function load() {
    			return browser$1$1.env.DEBUG;
    		}

    		/**
    		 * Init logic for `debug` instances.
    		 *
    		 * Create a new `inspectOpts` object in case `useColors` is set
    		 * differently for a particular `debug` instance.
    		 */

    		function init(debug) {
    			debug.inspectOpts = {};

    			const keys = Object.keys(exports.inspectOpts);
    			for (let i = 0; i < keys.length; i++) {
    				debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    			}
    		}

    		module.exports = requireCommon()(exports);

    		const {formatters} = module.exports;

    		/**
    		 * Map %o to `util.inspect()`, all on a single line.
    		 */

    		formatters.o = function (v) {
    			this.inspectOpts.colors = this.useColors;
    			return util.inspect(v, this.inspectOpts)
    				.split('\n')
    				.map(str => str.trim())
    				.join(' ');
    		};

    		/**
    		 * Map %O to `util.inspect()`, allowing multiple lines if needed.
    		 */

    		formatters.O = function (v) {
    			this.inspectOpts.colors = this.useColors;
    			return util.inspect(v, this.inspectOpts);
    		}; 
    	} (node, node.exports));
    	return node.exports;
    }

    if (typeof browser$1$1 === 'undefined' || browser$1$1.type === 'renderer' || browser$1$1.browser === true || browser$1$1.__nwjs) {
    	src.exports = requireBrowser();
    } else {
    	src.exports = requireNode();
    }

    var srcExports = src.exports;
    var debugFactory = /*@__PURE__*/getDefaultExportFromCjs(srcExports);

    var domain;

    // This constructor is used to store event handlers. Instantiating this is
    // faster than explicitly calling `Object.create(null)` to get a "clean" empty
    // object (tested with v8 v4.9).
    function EventHandlers() {}
    EventHandlers.prototype = Object.create(null);

    function EventEmitter$1() {
      EventEmitter$1.init.call(this);
    }

    // nodejs oddity
    // require('events') === require('events').EventEmitter
    EventEmitter$1.EventEmitter = EventEmitter$1;

    EventEmitter$1.usingDomains = false;

    EventEmitter$1.prototype.domain = undefined;
    EventEmitter$1.prototype._events = undefined;
    EventEmitter$1.prototype._maxListeners = undefined;

    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    EventEmitter$1.defaultMaxListeners = 10;

    EventEmitter$1.init = function() {
      this.domain = null;
      if (EventEmitter$1.usingDomains) {
        // if there is an active domain, then attach to it.
        if (domain.active ) ;
      }

      if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
        this._events = new EventHandlers();
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    };

    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter$1.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || isNaN(n))
        throw new TypeError('"n" argument must be a positive number');
      this._maxListeners = n;
      return this;
    };

    function $getMaxListeners(that) {
      if (that._maxListeners === undefined)
        return EventEmitter$1.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter$1.prototype.getMaxListeners = function getMaxListeners() {
      return $getMaxListeners(this);
    };

    // These standalone emit* functions are used to optimize calling of event
    // handlers for fast cases because emit() itself often has a variable number of
    // arguments and can be deoptimized because of that. These functions always have
    // the same number of arguments and thus do not get deoptimized, so the code
    // inside them can execute faster.
    function emitNone(handler, isFn, self) {
      if (isFn)
        handler.call(self);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self);
      }
    }
    function emitOne(handler, isFn, self, arg1) {
      if (isFn)
        handler.call(self, arg1);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1);
      }
    }
    function emitTwo(handler, isFn, self, arg1, arg2) {
      if (isFn)
        handler.call(self, arg1, arg2);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2);
      }
    }
    function emitThree(handler, isFn, self, arg1, arg2, arg3) {
      if (isFn)
        handler.call(self, arg1, arg2, arg3);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2, arg3);
      }
    }

    function emitMany(handler, isFn, self, args) {
      if (isFn)
        handler.apply(self, args);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].apply(self, args);
      }
    }

    EventEmitter$1.prototype.emit = function emit(type) {
      var er, handler, len, args, i, events, domain;
      var doError = (type === 'error');

      events = this._events;
      if (events)
        doError = (doError && events.error == null);
      else if (!doError)
        return false;

      domain = this.domain;

      // If there is no 'error' event listener then throw.
      if (doError) {
        er = arguments[1];
        if (domain) {
          if (!er)
            er = new Error('Uncaught, unspecified "error" event');
          er.domainEmitter = this;
          er.domain = domain;
          er.domainThrown = false;
          domain.emit('error', er);
        } else if (er instanceof Error) {
          throw er; // Unhandled 'error' event
        } else {
          // At least give some kind of context to the user
          var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
          err.context = er;
          throw err;
        }
        return false;
      }

      handler = events[type];

      if (!handler)
        return false;

      var isFn = typeof handler === 'function';
      len = arguments.length;
      switch (len) {
        // fast cases
        case 1:
          emitNone(handler, isFn, this);
          break;
        case 2:
          emitOne(handler, isFn, this, arguments[1]);
          break;
        case 3:
          emitTwo(handler, isFn, this, arguments[1], arguments[2]);
          break;
        case 4:
          emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
          break;
        // slower
        default:
          args = new Array(len - 1);
          for (i = 1; i < len; i++)
            args[i - 1] = arguments[i];
          emitMany(handler, isFn, this, args);
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = target._events;
      if (!events) {
        events = target._events = new EventHandlers();
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener) {
          target.emit('newListener', type,
                      listener.listener ? listener.listener : listener);

          // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object
          events = target._events;
        }
        existing = events[type];
      }

      if (!existing) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] = prepend ? [listener, existing] :
                                              [existing, listener];
        } else {
          // If we've already got an array, just append.
          if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
        }

        // Check for listener leak
        if (!existing.warned) {
          m = $getMaxListeners(target);
          if (m && m > 0 && existing.length > m) {
            existing.warned = true;
            var w = new Error('Possible EventEmitter memory leak detected. ' +
                                existing.length + ' ' + type + ' listeners added. ' +
                                'Use emitter.setMaxListeners() to increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            emitWarning(w);
          }
        }
      }

      return target;
    }
    function emitWarning(e) {
      typeof console.warn === 'function' ? console.warn(e) : console.log(e);
    }
    EventEmitter$1.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter$1.prototype.on = EventEmitter$1.prototype.addListener;

    EventEmitter$1.prototype.prependListener =
        function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };

    function _onceWrap(target, type, listener) {
      var fired = false;
      function g() {
        target.removeListener(type, g);
        if (!fired) {
          fired = true;
          listener.apply(target, arguments);
        }
      }
      g.listener = listener;
      return g;
    }

    EventEmitter$1.prototype.once = function once(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter$1.prototype.prependOnceListener =
        function prependOnceListener(type, listener) {
          if (typeof listener !== 'function')
            throw new TypeError('"listener" argument must be a function');
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };

    // emits a 'removeListener' event iff the listener was removed
    EventEmitter$1.prototype.removeListener =
        function removeListener(type, listener) {
          var list, events, position, i, originalListener;

          if (typeof listener !== 'function')
            throw new TypeError('"listener" argument must be a function');

          events = this._events;
          if (!events)
            return this;

          list = events[type];
          if (!list)
            return this;

          if (list === listener || (list.listener && list.listener === listener)) {
            if (--this._eventsCount === 0)
              this._events = new EventHandlers();
            else {
              delete events[type];
              if (events.removeListener)
                this.emit('removeListener', type, list.listener || listener);
            }
          } else if (typeof list !== 'function') {
            position = -1;

            for (i = list.length; i-- > 0;) {
              if (list[i] === listener ||
                  (list[i].listener && list[i].listener === listener)) {
                originalListener = list[i].listener;
                position = i;
                break;
              }
            }

            if (position < 0)
              return this;

            if (list.length === 1) {
              list[0] = undefined;
              if (--this._eventsCount === 0) {
                this._events = new EventHandlers();
                return this;
              } else {
                delete events[type];
              }
            } else {
              spliceOne(list, position);
            }

            if (events.removeListener)
              this.emit('removeListener', type, originalListener || listener);
          }

          return this;
        };
        
    // Alias for removeListener added in NodeJS 10.0
    // https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
    EventEmitter$1.prototype.off = function(type, listener){
        return this.removeListener(type, listener);
    };

    EventEmitter$1.prototype.removeAllListeners =
        function removeAllListeners(type) {
          var listeners, events;

          events = this._events;
          if (!events)
            return this;

          // not listening for removeListener, no need to emit
          if (!events.removeListener) {
            if (arguments.length === 0) {
              this._events = new EventHandlers();
              this._eventsCount = 0;
            } else if (events[type]) {
              if (--this._eventsCount === 0)
                this._events = new EventHandlers();
              else
                delete events[type];
            }
            return this;
          }

          // emit removeListener for all listeners on all events
          if (arguments.length === 0) {
            var keys = Object.keys(events);
            for (var i = 0, key; i < keys.length; ++i) {
              key = keys[i];
              if (key === 'removeListener') continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = new EventHandlers();
            this._eventsCount = 0;
            return this;
          }

          listeners = events[type];

          if (typeof listeners === 'function') {
            this.removeListener(type, listeners);
          } else if (listeners) {
            // LIFO order
            do {
              this.removeListener(type, listeners[listeners.length - 1]);
            } while (listeners[0]);
          }

          return this;
        };

    EventEmitter$1.prototype.listeners = function listeners(type) {
      var evlistener;
      var ret;
      var events = this._events;

      if (!events)
        ret = [];
      else {
        evlistener = events[type];
        if (!evlistener)
          ret = [];
        else if (typeof evlistener === 'function')
          ret = [evlistener.listener || evlistener];
        else
          ret = unwrapListeners(evlistener);
      }

      return ret;
    };

    EventEmitter$1.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount$1.call(emitter, type);
      }
    };

    EventEmitter$1.prototype.listenerCount = listenerCount$1;
    function listenerCount$1(type) {
      var events = this._events;

      if (events) {
        var evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter$1.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
    };

    // About 1.5x faster than the two-arg version of Array#splice().
    function spliceOne(list, index) {
      for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
        list[i] = list[k];
      list.pop();
    }

    function arrayClone(arr, i) {
      var copy = new Array(i);
      while (i--)
        copy[i] = arr[i];
      return copy;
    }

    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }

    var _polyfillNode_events = /*#__PURE__*/Object.freeze({
        __proto__: null,
        EventEmitter: EventEmitter$1,
        default: EventEmitter$1
    });

    var cryptoJs = {exports: {}};

    function commonjsRequire(path) {
    	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
    }

    var core = {exports: {}};

    var _polyfillNode_crypto = {};

    var _polyfillNode_crypto$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        default: _polyfillNode_crypto
    });

    var require$$5 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_crypto$1);

    var hasRequiredCore;

    function requireCore () {
    	if (hasRequiredCore) return core.exports;
    	hasRequiredCore = 1;
    	(function (module, exports) {
    (function (root, factory) {
    			{
    				// CommonJS
    				module.exports = factory();
    			}
    		}(commonjsGlobal, function () {

    			/*globals window, global, require*/

    			/**
    			 * CryptoJS core components.
    			 */
    			var CryptoJS = CryptoJS || (function (Math, undefined$1) {

    			    var crypto;

    			    // Native crypto from window (Browser)
    			    if (typeof window !== 'undefined' && window.crypto) {
    			        crypto = window.crypto;
    			    }

    			    // Native crypto in web worker (Browser)
    			    if (typeof self !== 'undefined' && self.crypto) {
    			        crypto = self.crypto;
    			    }

    			    // Native crypto from worker
    			    if (typeof globalThis !== 'undefined' && globalThis.crypto) {
    			        crypto = globalThis.crypto;
    			    }

    			    // Native (experimental IE 11) crypto from window (Browser)
    			    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
    			        crypto = window.msCrypto;
    			    }

    			    // Native crypto from global (NodeJS)
    			    if (!crypto && typeof commonjsGlobal !== 'undefined' && commonjsGlobal.crypto) {
    			        crypto = commonjsGlobal.crypto;
    			    }

    			    // Native crypto import via require (NodeJS)
    			    if (!crypto && typeof commonjsRequire === 'function') {
    			        try {
    			            crypto = require$$5;
    			        } catch (err) {}
    			    }

    			    /*
    			     * Cryptographically secure pseudorandom number generator
    			     *
    			     * As Math.random() is cryptographically not safe to use
    			     */
    			    var cryptoSecureRandomInt = function () {
    			        if (crypto) {
    			            // Use getRandomValues method (Browser)
    			            if (typeof crypto.getRandomValues === 'function') {
    			                try {
    			                    return crypto.getRandomValues(new Uint32Array(1))[0];
    			                } catch (err) {}
    			            }

    			            // Use randomBytes method (NodeJS)
    			            if (typeof crypto.randomBytes === 'function') {
    			                try {
    			                    return crypto.randomBytes(4).readInt32LE();
    			                } catch (err) {}
    			            }
    			        }

    			        throw new Error('Native crypto module could not be used to get secure random number.');
    			    };

    			    /*
    			     * Local polyfill of Object.create

    			     */
    			    var create = Object.create || (function () {
    			        function F() {}

    			        return function (obj) {
    			            var subtype;

    			            F.prototype = obj;

    			            subtype = new F();

    			            F.prototype = null;

    			            return subtype;
    			        };
    			    }());

    			    /**
    			     * CryptoJS namespace.
    			     */
    			    var C = {};

    			    /**
    			     * Library namespace.
    			     */
    			    var C_lib = C.lib = {};

    			    /**
    			     * Base object for prototypal inheritance.
    			     */
    			    var Base = C_lib.Base = (function () {


    			        return {
    			            /**
    			             * Creates a new object that inherits from this object.
    			             *
    			             * @param {Object} overrides Properties to copy into the new object.
    			             *
    			             * @return {Object} The new object.
    			             *
    			             * @static
    			             *
    			             * @example
    			             *
    			             *     var MyType = CryptoJS.lib.Base.extend({
    			             *         field: 'value',
    			             *
    			             *         method: function () {
    			             *         }
    			             *     });
    			             */
    			            extend: function (overrides) {
    			                // Spawn
    			                var subtype = create(this);

    			                // Augment
    			                if (overrides) {
    			                    subtype.mixIn(overrides);
    			                }

    			                // Create default initializer
    			                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
    			                    subtype.init = function () {
    			                        subtype.$super.init.apply(this, arguments);
    			                    };
    			                }

    			                // Initializer's prototype is the subtype object
    			                subtype.init.prototype = subtype;

    			                // Reference supertype
    			                subtype.$super = this;

    			                return subtype;
    			            },

    			            /**
    			             * Extends this object and runs the init method.
    			             * Arguments to create() will be passed to init().
    			             *
    			             * @return {Object} The new object.
    			             *
    			             * @static
    			             *
    			             * @example
    			             *
    			             *     var instance = MyType.create();
    			             */
    			            create: function () {
    			                var instance = this.extend();
    			                instance.init.apply(instance, arguments);

    			                return instance;
    			            },

    			            /**
    			             * Initializes a newly created object.
    			             * Override this method to add some logic when your objects are created.
    			             *
    			             * @example
    			             *
    			             *     var MyType = CryptoJS.lib.Base.extend({
    			             *         init: function () {
    			             *             // ...
    			             *         }
    			             *     });
    			             */
    			            init: function () {
    			            },

    			            /**
    			             * Copies properties into this object.
    			             *
    			             * @param {Object} properties The properties to mix in.
    			             *
    			             * @example
    			             *
    			             *     MyType.mixIn({
    			             *         field: 'value'
    			             *     });
    			             */
    			            mixIn: function (properties) {
    			                for (var propertyName in properties) {
    			                    if (properties.hasOwnProperty(propertyName)) {
    			                        this[propertyName] = properties[propertyName];
    			                    }
    			                }

    			                // IE won't copy toString using the loop above
    			                if (properties.hasOwnProperty('toString')) {
    			                    this.toString = properties.toString;
    			                }
    			            },

    			            /**
    			             * Creates a copy of this object.
    			             *
    			             * @return {Object} The clone.
    			             *
    			             * @example
    			             *
    			             *     var clone = instance.clone();
    			             */
    			            clone: function () {
    			                return this.init.prototype.extend(this);
    			            }
    			        };
    			    }());

    			    /**
    			     * An array of 32-bit words.
    			     *
    			     * @property {Array} words The array of 32-bit words.
    			     * @property {number} sigBytes The number of significant bytes in this word array.
    			     */
    			    var WordArray = C_lib.WordArray = Base.extend({
    			        /**
    			         * Initializes a newly created word array.
    			         *
    			         * @param {Array} words (Optional) An array of 32-bit words.
    			         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
    			         *
    			         * @example
    			         *
    			         *     var wordArray = CryptoJS.lib.WordArray.create();
    			         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
    			         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
    			         */
    			        init: function (words, sigBytes) {
    			            words = this.words = words || [];

    			            if (sigBytes != undefined$1) {
    			                this.sigBytes = sigBytes;
    			            } else {
    			                this.sigBytes = words.length * 4;
    			            }
    			        },

    			        /**
    			         * Converts this word array to a string.
    			         *
    			         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
    			         *
    			         * @return {string} The stringified word array.
    			         *
    			         * @example
    			         *
    			         *     var string = wordArray + '';
    			         *     var string = wordArray.toString();
    			         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
    			         */
    			        toString: function (encoder) {
    			            return (encoder || Hex).stringify(this);
    			        },

    			        /**
    			         * Concatenates a word array to this word array.
    			         *
    			         * @param {WordArray} wordArray The word array to append.
    			         *
    			         * @return {WordArray} This word array.
    			         *
    			         * @example
    			         *
    			         *     wordArray1.concat(wordArray2);
    			         */
    			        concat: function (wordArray) {
    			            // Shortcuts
    			            var thisWords = this.words;
    			            var thatWords = wordArray.words;
    			            var thisSigBytes = this.sigBytes;
    			            var thatSigBytes = wordArray.sigBytes;

    			            // Clamp excess bits
    			            this.clamp();

    			            // Concat
    			            if (thisSigBytes % 4) {
    			                // Copy one byte at a time
    			                for (var i = 0; i < thatSigBytes; i++) {
    			                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
    			                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
    			                }
    			            } else {
    			                // Copy one word at a time
    			                for (var j = 0; j < thatSigBytes; j += 4) {
    			                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];
    			                }
    			            }
    			            this.sigBytes += thatSigBytes;

    			            // Chainable
    			            return this;
    			        },

    			        /**
    			         * Removes insignificant bits.
    			         *
    			         * @example
    			         *
    			         *     wordArray.clamp();
    			         */
    			        clamp: function () {
    			            // Shortcuts
    			            var words = this.words;
    			            var sigBytes = this.sigBytes;

    			            // Clamp
    			            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
    			            words.length = Math.ceil(sigBytes / 4);
    			        },

    			        /**
    			         * Creates a copy of this word array.
    			         *
    			         * @return {WordArray} The clone.
    			         *
    			         * @example
    			         *
    			         *     var clone = wordArray.clone();
    			         */
    			        clone: function () {
    			            var clone = Base.clone.call(this);
    			            clone.words = this.words.slice(0);

    			            return clone;
    			        },

    			        /**
    			         * Creates a word array filled with random bytes.
    			         *
    			         * @param {number} nBytes The number of random bytes to generate.
    			         *
    			         * @return {WordArray} The random word array.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var wordArray = CryptoJS.lib.WordArray.random(16);
    			         */
    			        random: function (nBytes) {
    			            var words = [];

    			            for (var i = 0; i < nBytes; i += 4) {
    			                words.push(cryptoSecureRandomInt());
    			            }

    			            return new WordArray.init(words, nBytes);
    			        }
    			    });

    			    /**
    			     * Encoder namespace.
    			     */
    			    var C_enc = C.enc = {};

    			    /**
    			     * Hex encoding strategy.
    			     */
    			    var Hex = C_enc.Hex = {
    			        /**
    			         * Converts a word array to a hex string.
    			         *
    			         * @param {WordArray} wordArray The word array.
    			         *
    			         * @return {string} The hex string.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
    			         */
    			        stringify: function (wordArray) {
    			            // Shortcuts
    			            var words = wordArray.words;
    			            var sigBytes = wordArray.sigBytes;

    			            // Convert
    			            var hexChars = [];
    			            for (var i = 0; i < sigBytes; i++) {
    			                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
    			                hexChars.push((bite >>> 4).toString(16));
    			                hexChars.push((bite & 0x0f).toString(16));
    			            }

    			            return hexChars.join('');
    			        },

    			        /**
    			         * Converts a hex string to a word array.
    			         *
    			         * @param {string} hexStr The hex string.
    			         *
    			         * @return {WordArray} The word array.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
    			         */
    			        parse: function (hexStr) {
    			            // Shortcut
    			            var hexStrLength = hexStr.length;

    			            // Convert
    			            var words = [];
    			            for (var i = 0; i < hexStrLength; i += 2) {
    			                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
    			            }

    			            return new WordArray.init(words, hexStrLength / 2);
    			        }
    			    };

    			    /**
    			     * Latin1 encoding strategy.
    			     */
    			    var Latin1 = C_enc.Latin1 = {
    			        /**
    			         * Converts a word array to a Latin1 string.
    			         *
    			         * @param {WordArray} wordArray The word array.
    			         *
    			         * @return {string} The Latin1 string.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
    			         */
    			        stringify: function (wordArray) {
    			            // Shortcuts
    			            var words = wordArray.words;
    			            var sigBytes = wordArray.sigBytes;

    			            // Convert
    			            var latin1Chars = [];
    			            for (var i = 0; i < sigBytes; i++) {
    			                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
    			                latin1Chars.push(String.fromCharCode(bite));
    			            }

    			            return latin1Chars.join('');
    			        },

    			        /**
    			         * Converts a Latin1 string to a word array.
    			         *
    			         * @param {string} latin1Str The Latin1 string.
    			         *
    			         * @return {WordArray} The word array.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
    			         */
    			        parse: function (latin1Str) {
    			            // Shortcut
    			            var latin1StrLength = latin1Str.length;

    			            // Convert
    			            var words = [];
    			            for (var i = 0; i < latin1StrLength; i++) {
    			                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
    			            }

    			            return new WordArray.init(words, latin1StrLength);
    			        }
    			    };

    			    /**
    			     * UTF-8 encoding strategy.
    			     */
    			    var Utf8 = C_enc.Utf8 = {
    			        /**
    			         * Converts a word array to a UTF-8 string.
    			         *
    			         * @param {WordArray} wordArray The word array.
    			         *
    			         * @return {string} The UTF-8 string.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
    			         */
    			        stringify: function (wordArray) {
    			            try {
    			                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
    			            } catch (e) {
    			                throw new Error('Malformed UTF-8 data');
    			            }
    			        },

    			        /**
    			         * Converts a UTF-8 string to a word array.
    			         *
    			         * @param {string} utf8Str The UTF-8 string.
    			         *
    			         * @return {WordArray} The word array.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
    			         */
    			        parse: function (utf8Str) {
    			            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
    			        }
    			    };

    			    /**
    			     * Abstract buffered block algorithm template.
    			     *
    			     * The property blockSize must be implemented in a concrete subtype.
    			     *
    			     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
    			     */
    			    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
    			        /**
    			         * Resets this block algorithm's data buffer to its initial state.
    			         *
    			         * @example
    			         *
    			         *     bufferedBlockAlgorithm.reset();
    			         */
    			        reset: function () {
    			            // Initial values
    			            this._data = new WordArray.init();
    			            this._nDataBytes = 0;
    			        },

    			        /**
    			         * Adds new data to this block algorithm's buffer.
    			         *
    			         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
    			         *
    			         * @example
    			         *
    			         *     bufferedBlockAlgorithm._append('data');
    			         *     bufferedBlockAlgorithm._append(wordArray);
    			         */
    			        _append: function (data) {
    			            // Convert string to WordArray, else assume WordArray already
    			            if (typeof data == 'string') {
    			                data = Utf8.parse(data);
    			            }

    			            // Append
    			            this._data.concat(data);
    			            this._nDataBytes += data.sigBytes;
    			        },

    			        /**
    			         * Processes available data blocks.
    			         *
    			         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
    			         *
    			         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
    			         *
    			         * @return {WordArray} The processed data.
    			         *
    			         * @example
    			         *
    			         *     var processedData = bufferedBlockAlgorithm._process();
    			         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
    			         */
    			        _process: function (doFlush) {
    			            var processedWords;

    			            // Shortcuts
    			            var data = this._data;
    			            var dataWords = data.words;
    			            var dataSigBytes = data.sigBytes;
    			            var blockSize = this.blockSize;
    			            var blockSizeBytes = blockSize * 4;

    			            // Count blocks ready
    			            var nBlocksReady = dataSigBytes / blockSizeBytes;
    			            if (doFlush) {
    			                // Round up to include partial blocks
    			                nBlocksReady = Math.ceil(nBlocksReady);
    			            } else {
    			                // Round down to include only full blocks,
    			                // less the number of blocks that must remain in the buffer
    			                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
    			            }

    			            // Count words ready
    			            var nWordsReady = nBlocksReady * blockSize;

    			            // Count bytes ready
    			            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

    			            // Process blocks
    			            if (nWordsReady) {
    			                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
    			                    // Perform concrete-algorithm logic
    			                    this._doProcessBlock(dataWords, offset);
    			                }

    			                // Remove processed words
    			                processedWords = dataWords.splice(0, nWordsReady);
    			                data.sigBytes -= nBytesReady;
    			            }

    			            // Return processed words
    			            return new WordArray.init(processedWords, nBytesReady);
    			        },

    			        /**
    			         * Creates a copy of this object.
    			         *
    			         * @return {Object} The clone.
    			         *
    			         * @example
    			         *
    			         *     var clone = bufferedBlockAlgorithm.clone();
    			         */
    			        clone: function () {
    			            var clone = Base.clone.call(this);
    			            clone._data = this._data.clone();

    			            return clone;
    			        },

    			        _minBufferSize: 0
    			    });

    			    /**
    			     * Abstract hasher template.
    			     *
    			     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
    			     */
    			    C_lib.Hasher = BufferedBlockAlgorithm.extend({
    			        /**
    			         * Configuration options.
    			         */
    			        cfg: Base.extend(),

    			        /**
    			         * Initializes a newly created hasher.
    			         *
    			         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
    			         *
    			         * @example
    			         *
    			         *     var hasher = CryptoJS.algo.SHA256.create();
    			         */
    			        init: function (cfg) {
    			            // Apply config defaults
    			            this.cfg = this.cfg.extend(cfg);

    			            // Set initial values
    			            this.reset();
    			        },

    			        /**
    			         * Resets this hasher to its initial state.
    			         *
    			         * @example
    			         *
    			         *     hasher.reset();
    			         */
    			        reset: function () {
    			            // Reset data buffer
    			            BufferedBlockAlgorithm.reset.call(this);

    			            // Perform concrete-hasher logic
    			            this._doReset();
    			        },

    			        /**
    			         * Updates this hasher with a message.
    			         *
    			         * @param {WordArray|string} messageUpdate The message to append.
    			         *
    			         * @return {Hasher} This hasher.
    			         *
    			         * @example
    			         *
    			         *     hasher.update('message');
    			         *     hasher.update(wordArray);
    			         */
    			        update: function (messageUpdate) {
    			            // Append
    			            this._append(messageUpdate);

    			            // Update the hash
    			            this._process();

    			            // Chainable
    			            return this;
    			        },

    			        /**
    			         * Finalizes the hash computation.
    			         * Note that the finalize operation is effectively a destructive, read-once operation.
    			         *
    			         * @param {WordArray|string} messageUpdate (Optional) A final message update.
    			         *
    			         * @return {WordArray} The hash.
    			         *
    			         * @example
    			         *
    			         *     var hash = hasher.finalize();
    			         *     var hash = hasher.finalize('message');
    			         *     var hash = hasher.finalize(wordArray);
    			         */
    			        finalize: function (messageUpdate) {
    			            // Final message update
    			            if (messageUpdate) {
    			                this._append(messageUpdate);
    			            }

    			            // Perform concrete-hasher logic
    			            var hash = this._doFinalize();

    			            return hash;
    			        },

    			        blockSize: 512/32,

    			        /**
    			         * Creates a shortcut function to a hasher's object interface.
    			         *
    			         * @param {Hasher} hasher The hasher to create a helper for.
    			         *
    			         * @return {Function} The shortcut function.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
    			         */
    			        _createHelper: function (hasher) {
    			            return function (message, cfg) {
    			                return new hasher.init(cfg).finalize(message);
    			            };
    			        },

    			        /**
    			         * Creates a shortcut function to the HMAC's object interface.
    			         *
    			         * @param {Hasher} hasher The hasher to use in this HMAC helper.
    			         *
    			         * @return {Function} The shortcut function.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
    			         */
    			        _createHmacHelper: function (hasher) {
    			            return function (message, key) {
    			                return new C_algo.HMAC.init(hasher, key).finalize(message);
    			            };
    			        }
    			    });

    			    /**
    			     * Algorithm namespace.
    			     */
    			    var C_algo = C.algo = {};

    			    return C;
    			}(Math));


    			return CryptoJS;

    		})); 
    	} (core));
    	return core.exports;
    }

    var x64Core = {exports: {}};

    var hasRequiredX64Core;

    function requireX64Core () {
    	if (hasRequiredX64Core) return x64Core.exports;
    	hasRequiredX64Core = 1;
    	(function (module, exports) {
    (function (root, factory) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function (undefined$1) {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var Base = C_lib.Base;
    			    var X32WordArray = C_lib.WordArray;

    			    /**
    			     * x64 namespace.
    			     */
    			    var C_x64 = C.x64 = {};

    			    /**
    			     * A 64-bit word.
    			     */
    			    C_x64.Word = Base.extend({
    			        /**
    			         * Initializes a newly created 64-bit word.
    			         *
    			         * @param {number} high The high 32 bits.
    			         * @param {number} low The low 32 bits.
    			         *
    			         * @example
    			         *
    			         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
    			         */
    			        init: function (high, low) {
    			            this.high = high;
    			            this.low = low;
    			        }

    			        /**
    			         * Bitwise NOTs this word.
    			         *
    			         * @return {X64Word} A new x64-Word object after negating.
    			         *
    			         * @example
    			         *
    			         *     var negated = x64Word.not();
    			         */
    			        // not: function () {
    			            // var high = ~this.high;
    			            // var low = ~this.low;

    			            // return X64Word.create(high, low);
    			        // },

    			        /**
    			         * Bitwise ANDs this word with the passed word.
    			         *
    			         * @param {X64Word} word The x64-Word to AND with this word.
    			         *
    			         * @return {X64Word} A new x64-Word object after ANDing.
    			         *
    			         * @example
    			         *
    			         *     var anded = x64Word.and(anotherX64Word);
    			         */
    			        // and: function (word) {
    			            // var high = this.high & word.high;
    			            // var low = this.low & word.low;

    			            // return X64Word.create(high, low);
    			        // },

    			        /**
    			         * Bitwise ORs this word with the passed word.
    			         *
    			         * @param {X64Word} word The x64-Word to OR with this word.
    			         *
    			         * @return {X64Word} A new x64-Word object after ORing.
    			         *
    			         * @example
    			         *
    			         *     var ored = x64Word.or(anotherX64Word);
    			         */
    			        // or: function (word) {
    			            // var high = this.high | word.high;
    			            // var low = this.low | word.low;

    			            // return X64Word.create(high, low);
    			        // },

    			        /**
    			         * Bitwise XORs this word with the passed word.
    			         *
    			         * @param {X64Word} word The x64-Word to XOR with this word.
    			         *
    			         * @return {X64Word} A new x64-Word object after XORing.
    			         *
    			         * @example
    			         *
    			         *     var xored = x64Word.xor(anotherX64Word);
    			         */
    			        // xor: function (word) {
    			            // var high = this.high ^ word.high;
    			            // var low = this.low ^ word.low;

    			            // return X64Word.create(high, low);
    			        // },

    			        /**
    			         * Shifts this word n bits to the left.
    			         *
    			         * @param {number} n The number of bits to shift.
    			         *
    			         * @return {X64Word} A new x64-Word object after shifting.
    			         *
    			         * @example
    			         *
    			         *     var shifted = x64Word.shiftL(25);
    			         */
    			        // shiftL: function (n) {
    			            // if (n < 32) {
    			                // var high = (this.high << n) | (this.low >>> (32 - n));
    			                // var low = this.low << n;
    			            // } else {
    			                // var high = this.low << (n - 32);
    			                // var low = 0;
    			            // }

    			            // return X64Word.create(high, low);
    			        // },

    			        /**
    			         * Shifts this word n bits to the right.
    			         *
    			         * @param {number} n The number of bits to shift.
    			         *
    			         * @return {X64Word} A new x64-Word object after shifting.
    			         *
    			         * @example
    			         *
    			         *     var shifted = x64Word.shiftR(7);
    			         */
    			        // shiftR: function (n) {
    			            // if (n < 32) {
    			                // var low = (this.low >>> n) | (this.high << (32 - n));
    			                // var high = this.high >>> n;
    			            // } else {
    			                // var low = this.high >>> (n - 32);
    			                // var high = 0;
    			            // }

    			            // return X64Word.create(high, low);
    			        // },

    			        /**
    			         * Rotates this word n bits to the left.
    			         *
    			         * @param {number} n The number of bits to rotate.
    			         *
    			         * @return {X64Word} A new x64-Word object after rotating.
    			         *
    			         * @example
    			         *
    			         *     var rotated = x64Word.rotL(25);
    			         */
    			        // rotL: function (n) {
    			            // return this.shiftL(n).or(this.shiftR(64 - n));
    			        // },

    			        /**
    			         * Rotates this word n bits to the right.
    			         *
    			         * @param {number} n The number of bits to rotate.
    			         *
    			         * @return {X64Word} A new x64-Word object after rotating.
    			         *
    			         * @example
    			         *
    			         *     var rotated = x64Word.rotR(7);
    			         */
    			        // rotR: function (n) {
    			            // return this.shiftR(n).or(this.shiftL(64 - n));
    			        // },

    			        /**
    			         * Adds this word with the passed word.
    			         *
    			         * @param {X64Word} word The x64-Word to add with this word.
    			         *
    			         * @return {X64Word} A new x64-Word object after adding.
    			         *
    			         * @example
    			         *
    			         *     var added = x64Word.add(anotherX64Word);
    			         */
    			        // add: function (word) {
    			            // var low = (this.low + word.low) | 0;
    			            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
    			            // var high = (this.high + word.high + carry) | 0;

    			            // return X64Word.create(high, low);
    			        // }
    			    });

    			    /**
    			     * An array of 64-bit words.
    			     *
    			     * @property {Array} words The array of CryptoJS.x64.Word objects.
    			     * @property {number} sigBytes The number of significant bytes in this word array.
    			     */
    			    C_x64.WordArray = Base.extend({
    			        /**
    			         * Initializes a newly created word array.
    			         *
    			         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
    			         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
    			         *
    			         * @example
    			         *
    			         *     var wordArray = CryptoJS.x64.WordArray.create();
    			         *
    			         *     var wordArray = CryptoJS.x64.WordArray.create([
    			         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
    			         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
    			         *     ]);
    			         *
    			         *     var wordArray = CryptoJS.x64.WordArray.create([
    			         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
    			         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
    			         *     ], 10);
    			         */
    			        init: function (words, sigBytes) {
    			            words = this.words = words || [];

    			            if (sigBytes != undefined$1) {
    			                this.sigBytes = sigBytes;
    			            } else {
    			                this.sigBytes = words.length * 8;
    			            }
    			        },

    			        /**
    			         * Converts this 64-bit word array to a 32-bit word array.
    			         *
    			         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
    			         *
    			         * @example
    			         *
    			         *     var x32WordArray = x64WordArray.toX32();
    			         */
    			        toX32: function () {
    			            // Shortcuts
    			            var x64Words = this.words;
    			            var x64WordsLength = x64Words.length;

    			            // Convert
    			            var x32Words = [];
    			            for (var i = 0; i < x64WordsLength; i++) {
    			                var x64Word = x64Words[i];
    			                x32Words.push(x64Word.high);
    			                x32Words.push(x64Word.low);
    			            }

    			            return X32WordArray.create(x32Words, this.sigBytes);
    			        },

    			        /**
    			         * Creates a copy of this word array.
    			         *
    			         * @return {X64WordArray} The clone.
    			         *
    			         * @example
    			         *
    			         *     var clone = x64WordArray.clone();
    			         */
    			        clone: function () {
    			            var clone = Base.clone.call(this);

    			            // Clone "words" array
    			            var words = clone.words = this.words.slice(0);

    			            // Clone each X64Word object
    			            var wordsLength = words.length;
    			            for (var i = 0; i < wordsLength; i++) {
    			                words[i] = words[i].clone();
    			            }

    			            return clone;
    			        }
    			    });
    			}());


    			return CryptoJS;

    		})); 
    	} (x64Core));
    	return x64Core.exports;
    }

    var libTypedarrays = {exports: {}};

    var hasRequiredLibTypedarrays;

    function requireLibTypedarrays () {
    	if (hasRequiredLibTypedarrays) return libTypedarrays.exports;
    	hasRequiredLibTypedarrays = 1;
    	(function (module, exports) {
    (function (root, factory) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function () {
    			    // Check if typed arrays are supported
    			    if (typeof ArrayBuffer != 'function') {
    			        return;
    			    }

    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var WordArray = C_lib.WordArray;

    			    // Reference original init
    			    var superInit = WordArray.init;

    			    // Augment WordArray.init to handle typed arrays
    			    var subInit = WordArray.init = function (typedArray) {
    			        // Convert buffers to uint8
    			        if (typedArray instanceof ArrayBuffer) {
    			            typedArray = new Uint8Array(typedArray);
    			        }

    			        // Convert other array views to uint8
    			        if (
    			            typedArray instanceof Int8Array ||
    			            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
    			            typedArray instanceof Int16Array ||
    			            typedArray instanceof Uint16Array ||
    			            typedArray instanceof Int32Array ||
    			            typedArray instanceof Uint32Array ||
    			            typedArray instanceof Float32Array ||
    			            typedArray instanceof Float64Array
    			        ) {
    			            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
    			        }

    			        // Handle Uint8Array
    			        if (typedArray instanceof Uint8Array) {
    			            // Shortcut
    			            var typedArrayByteLength = typedArray.byteLength;

    			            // Extract bytes
    			            var words = [];
    			            for (var i = 0; i < typedArrayByteLength; i++) {
    			                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
    			            }

    			            // Initialize this word array
    			            superInit.call(this, words, typedArrayByteLength);
    			        } else {
    			            // Else call normal init
    			            superInit.apply(this, arguments);
    			        }
    			    };

    			    subInit.prototype = WordArray;
    			}());


    			return CryptoJS.lib.WordArray;

    		})); 
    	} (libTypedarrays));
    	return libTypedarrays.exports;
    }

    var encUtf16 = {exports: {}};

    var hasRequiredEncUtf16;

    function requireEncUtf16 () {
    	if (hasRequiredEncUtf16) return encUtf16.exports;
    	hasRequiredEncUtf16 = 1;
    	(function (module, exports) {
    (function (root, factory) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function () {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var WordArray = C_lib.WordArray;
    			    var C_enc = C.enc;

    			    /**
    			     * UTF-16 BE encoding strategy.
    			     */
    			    C_enc.Utf16 = C_enc.Utf16BE = {
    			        /**
    			         * Converts a word array to a UTF-16 BE string.
    			         *
    			         * @param {WordArray} wordArray The word array.
    			         *
    			         * @return {string} The UTF-16 BE string.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
    			         */
    			        stringify: function (wordArray) {
    			            // Shortcuts
    			            var words = wordArray.words;
    			            var sigBytes = wordArray.sigBytes;

    			            // Convert
    			            var utf16Chars = [];
    			            for (var i = 0; i < sigBytes; i += 2) {
    			                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
    			                utf16Chars.push(String.fromCharCode(codePoint));
    			            }

    			            return utf16Chars.join('');
    			        },

    			        /**
    			         * Converts a UTF-16 BE string to a word array.
    			         *
    			         * @param {string} utf16Str The UTF-16 BE string.
    			         *
    			         * @return {WordArray} The word array.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
    			         */
    			        parse: function (utf16Str) {
    			            // Shortcut
    			            var utf16StrLength = utf16Str.length;

    			            // Convert
    			            var words = [];
    			            for (var i = 0; i < utf16StrLength; i++) {
    			                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
    			            }

    			            return WordArray.create(words, utf16StrLength * 2);
    			        }
    			    };

    			    /**
    			     * UTF-16 LE encoding strategy.
    			     */
    			    C_enc.Utf16LE = {
    			        /**
    			         * Converts a word array to a UTF-16 LE string.
    			         *
    			         * @param {WordArray} wordArray The word array.
    			         *
    			         * @return {string} The UTF-16 LE string.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
    			         */
    			        stringify: function (wordArray) {
    			            // Shortcuts
    			            var words = wordArray.words;
    			            var sigBytes = wordArray.sigBytes;

    			            // Convert
    			            var utf16Chars = [];
    			            for (var i = 0; i < sigBytes; i += 2) {
    			                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
    			                utf16Chars.push(String.fromCharCode(codePoint));
    			            }

    			            return utf16Chars.join('');
    			        },

    			        /**
    			         * Converts a UTF-16 LE string to a word array.
    			         *
    			         * @param {string} utf16Str The UTF-16 LE string.
    			         *
    			         * @return {WordArray} The word array.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
    			         */
    			        parse: function (utf16Str) {
    			            // Shortcut
    			            var utf16StrLength = utf16Str.length;

    			            // Convert
    			            var words = [];
    			            for (var i = 0; i < utf16StrLength; i++) {
    			                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
    			            }

    			            return WordArray.create(words, utf16StrLength * 2);
    			        }
    			    };

    			    function swapEndian(word) {
    			        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
    			    }
    			}());


    			return CryptoJS.enc.Utf16;

    		})); 
    	} (encUtf16));
    	return encUtf16.exports;
    }

    var encBase64 = {exports: {}};

    var hasRequiredEncBase64;

    function requireEncBase64 () {
    	if (hasRequiredEncBase64) return encBase64.exports;
    	hasRequiredEncBase64 = 1;
    	(function (module, exports) {
    (function (root, factory) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function () {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var WordArray = C_lib.WordArray;
    			    var C_enc = C.enc;

    			    /**
    			     * Base64 encoding strategy.
    			     */
    			    C_enc.Base64 = {
    			        /**
    			         * Converts a word array to a Base64 string.
    			         *
    			         * @param {WordArray} wordArray The word array.
    			         *
    			         * @return {string} The Base64 string.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
    			         */
    			        stringify: function (wordArray) {
    			            // Shortcuts
    			            var words = wordArray.words;
    			            var sigBytes = wordArray.sigBytes;
    			            var map = this._map;

    			            // Clamp excess bits
    			            wordArray.clamp();

    			            // Convert
    			            var base64Chars = [];
    			            for (var i = 0; i < sigBytes; i += 3) {
    			                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
    			                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
    			                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

    			                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

    			                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
    			                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
    			                }
    			            }

    			            // Add padding
    			            var paddingChar = map.charAt(64);
    			            if (paddingChar) {
    			                while (base64Chars.length % 4) {
    			                    base64Chars.push(paddingChar);
    			                }
    			            }

    			            return base64Chars.join('');
    			        },

    			        /**
    			         * Converts a Base64 string to a word array.
    			         *
    			         * @param {string} base64Str The Base64 string.
    			         *
    			         * @return {WordArray} The word array.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
    			         */
    			        parse: function (base64Str) {
    			            // Shortcuts
    			            var base64StrLength = base64Str.length;
    			            var map = this._map;
    			            var reverseMap = this._reverseMap;

    			            if (!reverseMap) {
    			                    reverseMap = this._reverseMap = [];
    			                    for (var j = 0; j < map.length; j++) {
    			                        reverseMap[map.charCodeAt(j)] = j;
    			                    }
    			            }

    			            // Ignore padding
    			            var paddingChar = map.charAt(64);
    			            if (paddingChar) {
    			                var paddingIndex = base64Str.indexOf(paddingChar);
    			                if (paddingIndex !== -1) {
    			                    base64StrLength = paddingIndex;
    			                }
    			            }

    			            // Convert
    			            return parseLoop(base64Str, base64StrLength, reverseMap);

    			        },

    			        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
    			    };

    			    function parseLoop(base64Str, base64StrLength, reverseMap) {
    			      var words = [];
    			      var nBytes = 0;
    			      for (var i = 0; i < base64StrLength; i++) {
    			          if (i % 4) {
    			              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
    			              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
    			              var bitsCombined = bits1 | bits2;
    			              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);
    			              nBytes++;
    			          }
    			      }
    			      return WordArray.create(words, nBytes);
    			    }
    			}());


    			return CryptoJS.enc.Base64;

    		})); 
    	} (encBase64));
    	return encBase64.exports;
    }

    var encBase64url = {exports: {}};

    var hasRequiredEncBase64url;

    function requireEncBase64url () {
    	if (hasRequiredEncBase64url) return encBase64url.exports;
    	hasRequiredEncBase64url = 1;
    	(function (module, exports) {
    (function (root, factory) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function () {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var WordArray = C_lib.WordArray;
    			    var C_enc = C.enc;

    			    /**
    			     * Base64url encoding strategy.
    			     */
    			    C_enc.Base64url = {
    			        /**
    			         * Converts a word array to a Base64url string.
    			         *
    			         * @param {WordArray} wordArray The word array.
    			         *
    			         * @param {boolean} urlSafe Whether to use url safe
    			         *
    			         * @return {string} The Base64url string.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
    			         */
    			        stringify: function (wordArray, urlSafe) {
    			            if (urlSafe === undefined) {
    			                urlSafe = true;
    			            }
    			            // Shortcuts
    			            var words = wordArray.words;
    			            var sigBytes = wordArray.sigBytes;
    			            var map = urlSafe ? this._safe_map : this._map;

    			            // Clamp excess bits
    			            wordArray.clamp();

    			            // Convert
    			            var base64Chars = [];
    			            for (var i = 0; i < sigBytes; i += 3) {
    			                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
    			                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
    			                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

    			                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

    			                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
    			                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
    			                }
    			            }

    			            // Add padding
    			            var paddingChar = map.charAt(64);
    			            if (paddingChar) {
    			                while (base64Chars.length % 4) {
    			                    base64Chars.push(paddingChar);
    			                }
    			            }

    			            return base64Chars.join('');
    			        },

    			        /**
    			         * Converts a Base64url string to a word array.
    			         *
    			         * @param {string} base64Str The Base64url string.
    			         *
    			         * @param {boolean} urlSafe Whether to use url safe
    			         *
    			         * @return {WordArray} The word array.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
    			         */
    			        parse: function (base64Str, urlSafe) {
    			            if (urlSafe === undefined) {
    			                urlSafe = true;
    			            }

    			            // Shortcuts
    			            var base64StrLength = base64Str.length;
    			            var map = urlSafe ? this._safe_map : this._map;
    			            var reverseMap = this._reverseMap;

    			            if (!reverseMap) {
    			                reverseMap = this._reverseMap = [];
    			                for (var j = 0; j < map.length; j++) {
    			                    reverseMap[map.charCodeAt(j)] = j;
    			                }
    			            }

    			            // Ignore padding
    			            var paddingChar = map.charAt(64);
    			            if (paddingChar) {
    			                var paddingIndex = base64Str.indexOf(paddingChar);
    			                if (paddingIndex !== -1) {
    			                    base64StrLength = paddingIndex;
    			                }
    			            }

    			            // Convert
    			            return parseLoop(base64Str, base64StrLength, reverseMap);

    			        },

    			        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
    			        _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
    			    };

    			    function parseLoop(base64Str, base64StrLength, reverseMap) {
    			        var words = [];
    			        var nBytes = 0;
    			        for (var i = 0; i < base64StrLength; i++) {
    			            if (i % 4) {
    			                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
    			                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
    			                var bitsCombined = bits1 | bits2;
    			                words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);
    			                nBytes++;
    			            }
    			        }
    			        return WordArray.create(words, nBytes);
    			    }
    			}());


    			return CryptoJS.enc.Base64url;

    		})); 
    	} (encBase64url));
    	return encBase64url.exports;
    }

    var md5 = {exports: {}};

    var hasRequiredMd5;

    function requireMd5 () {
    	if (hasRequiredMd5) return md5.exports;
    	hasRequiredMd5 = 1;
    	(function (module, exports) {
    (function (root, factory) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function (Math) {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var WordArray = C_lib.WordArray;
    			    var Hasher = C_lib.Hasher;
    			    var C_algo = C.algo;

    			    // Constants table
    			    var T = [];

    			    // Compute constants
    			    (function () {
    			        for (var i = 0; i < 64; i++) {
    			            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
    			        }
    			    }());

    			    /**
    			     * MD5 hash algorithm.
    			     */
    			    var MD5 = C_algo.MD5 = Hasher.extend({
    			        _doReset: function () {
    			            this._hash = new WordArray.init([
    			                0x67452301, 0xefcdab89,
    			                0x98badcfe, 0x10325476
    			            ]);
    			        },

    			        _doProcessBlock: function (M, offset) {
    			            // Swap endian
    			            for (var i = 0; i < 16; i++) {
    			                // Shortcuts
    			                var offset_i = offset + i;
    			                var M_offset_i = M[offset_i];

    			                M[offset_i] = (
    			                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
    			                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
    			                );
    			            }

    			            // Shortcuts
    			            var H = this._hash.words;

    			            var M_offset_0  = M[offset + 0];
    			            var M_offset_1  = M[offset + 1];
    			            var M_offset_2  = M[offset + 2];
    			            var M_offset_3  = M[offset + 3];
    			            var M_offset_4  = M[offset + 4];
    			            var M_offset_5  = M[offset + 5];
    			            var M_offset_6  = M[offset + 6];
    			            var M_offset_7  = M[offset + 7];
    			            var M_offset_8  = M[offset + 8];
    			            var M_offset_9  = M[offset + 9];
    			            var M_offset_10 = M[offset + 10];
    			            var M_offset_11 = M[offset + 11];
    			            var M_offset_12 = M[offset + 12];
    			            var M_offset_13 = M[offset + 13];
    			            var M_offset_14 = M[offset + 14];
    			            var M_offset_15 = M[offset + 15];

    			            // Working variables
    			            var a = H[0];
    			            var b = H[1];
    			            var c = H[2];
    			            var d = H[3];

    			            // Computation
    			            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
    			            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
    			            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
    			            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
    			            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
    			            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
    			            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
    			            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
    			            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
    			            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
    			            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
    			            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
    			            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
    			            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
    			            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
    			            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

    			            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
    			            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
    			            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
    			            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
    			            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
    			            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
    			            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
    			            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
    			            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
    			            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
    			            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
    			            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
    			            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
    			            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
    			            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
    			            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

    			            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
    			            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
    			            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
    			            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
    			            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
    			            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
    			            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
    			            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
    			            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
    			            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
    			            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
    			            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
    			            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
    			            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
    			            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
    			            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

    			            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
    			            d = II(d, a, b, c, M_offset_7,  10, T[49]);
    			            c = II(c, d, a, b, M_offset_14, 15, T[50]);
    			            b = II(b, c, d, a, M_offset_5,  21, T[51]);
    			            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
    			            d = II(d, a, b, c, M_offset_3,  10, T[53]);
    			            c = II(c, d, a, b, M_offset_10, 15, T[54]);
    			            b = II(b, c, d, a, M_offset_1,  21, T[55]);
    			            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
    			            d = II(d, a, b, c, M_offset_15, 10, T[57]);
    			            c = II(c, d, a, b, M_offset_6,  15, T[58]);
    			            b = II(b, c, d, a, M_offset_13, 21, T[59]);
    			            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
    			            d = II(d, a, b, c, M_offset_11, 10, T[61]);
    			            c = II(c, d, a, b, M_offset_2,  15, T[62]);
    			            b = II(b, c, d, a, M_offset_9,  21, T[63]);

    			            // Intermediate hash value
    			            H[0] = (H[0] + a) | 0;
    			            H[1] = (H[1] + b) | 0;
    			            H[2] = (H[2] + c) | 0;
    			            H[3] = (H[3] + d) | 0;
    			        },

    			        _doFinalize: function () {
    			            // Shortcuts
    			            var data = this._data;
    			            var dataWords = data.words;

    			            var nBitsTotal = this._nDataBytes * 8;
    			            var nBitsLeft = data.sigBytes * 8;

    			            // Add padding
    			            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

    			            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
    			            var nBitsTotalL = nBitsTotal;
    			            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
    			                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
    			                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
    			            );
    			            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
    			                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
    			                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
    			            );

    			            data.sigBytes = (dataWords.length + 1) * 4;

    			            // Hash final blocks
    			            this._process();

    			            // Shortcuts
    			            var hash = this._hash;
    			            var H = hash.words;

    			            // Swap endian
    			            for (var i = 0; i < 4; i++) {
    			                // Shortcut
    			                var H_i = H[i];

    			                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
    			                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
    			            }

    			            // Return final computed hash
    			            return hash;
    			        },

    			        clone: function () {
    			            var clone = Hasher.clone.call(this);
    			            clone._hash = this._hash.clone();

    			            return clone;
    			        }
    			    });

    			    function FF(a, b, c, d, x, s, t) {
    			        var n = a + ((b & c) | (~b & d)) + x + t;
    			        return ((n << s) | (n >>> (32 - s))) + b;
    			    }

    			    function GG(a, b, c, d, x, s, t) {
    			        var n = a + ((b & d) | (c & ~d)) + x + t;
    			        return ((n << s) | (n >>> (32 - s))) + b;
    			    }

    			    function HH(a, b, c, d, x, s, t) {
    			        var n = a + (b ^ c ^ d) + x + t;
    			        return ((n << s) | (n >>> (32 - s))) + b;
    			    }

    			    function II(a, b, c, d, x, s, t) {
    			        var n = a + (c ^ (b | ~d)) + x + t;
    			        return ((n << s) | (n >>> (32 - s))) + b;
    			    }

    			    /**
    			     * Shortcut function to the hasher's object interface.
    			     *
    			     * @param {WordArray|string} message The message to hash.
    			     *
    			     * @return {WordArray} The hash.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var hash = CryptoJS.MD5('message');
    			     *     var hash = CryptoJS.MD5(wordArray);
    			     */
    			    C.MD5 = Hasher._createHelper(MD5);

    			    /**
    			     * Shortcut function to the HMAC's object interface.
    			     *
    			     * @param {WordArray|string} message The message to hash.
    			     * @param {WordArray|string} key The secret key.
    			     *
    			     * @return {WordArray} The HMAC.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var hmac = CryptoJS.HmacMD5(message, key);
    			     */
    			    C.HmacMD5 = Hasher._createHmacHelper(MD5);
    			}(Math));


    			return CryptoJS.MD5;

    		})); 
    	} (md5));
    	return md5.exports;
    }

    var sha1 = {exports: {}};

    var hasRequiredSha1;

    function requireSha1 () {
    	if (hasRequiredSha1) return sha1.exports;
    	hasRequiredSha1 = 1;
    	(function (module, exports) {
    (function (root, factory) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function () {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var WordArray = C_lib.WordArray;
    			    var Hasher = C_lib.Hasher;
    			    var C_algo = C.algo;

    			    // Reusable object
    			    var W = [];

    			    /**
    			     * SHA-1 hash algorithm.
    			     */
    			    var SHA1 = C_algo.SHA1 = Hasher.extend({
    			        _doReset: function () {
    			            this._hash = new WordArray.init([
    			                0x67452301, 0xefcdab89,
    			                0x98badcfe, 0x10325476,
    			                0xc3d2e1f0
    			            ]);
    			        },

    			        _doProcessBlock: function (M, offset) {
    			            // Shortcut
    			            var H = this._hash.words;

    			            // Working variables
    			            var a = H[0];
    			            var b = H[1];
    			            var c = H[2];
    			            var d = H[3];
    			            var e = H[4];

    			            // Computation
    			            for (var i = 0; i < 80; i++) {
    			                if (i < 16) {
    			                    W[i] = M[offset + i] | 0;
    			                } else {
    			                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
    			                    W[i] = (n << 1) | (n >>> 31);
    			                }

    			                var t = ((a << 5) | (a >>> 27)) + e + W[i];
    			                if (i < 20) {
    			                    t += ((b & c) | (~b & d)) + 0x5a827999;
    			                } else if (i < 40) {
    			                    t += (b ^ c ^ d) + 0x6ed9eba1;
    			                } else if (i < 60) {
    			                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
    			                } else /* if (i < 80) */ {
    			                    t += (b ^ c ^ d) - 0x359d3e2a;
    			                }

    			                e = d;
    			                d = c;
    			                c = (b << 30) | (b >>> 2);
    			                b = a;
    			                a = t;
    			            }

    			            // Intermediate hash value
    			            H[0] = (H[0] + a) | 0;
    			            H[1] = (H[1] + b) | 0;
    			            H[2] = (H[2] + c) | 0;
    			            H[3] = (H[3] + d) | 0;
    			            H[4] = (H[4] + e) | 0;
    			        },

    			        _doFinalize: function () {
    			            // Shortcuts
    			            var data = this._data;
    			            var dataWords = data.words;

    			            var nBitsTotal = this._nDataBytes * 8;
    			            var nBitsLeft = data.sigBytes * 8;

    			            // Add padding
    			            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
    			            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
    			            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
    			            data.sigBytes = dataWords.length * 4;

    			            // Hash final blocks
    			            this._process();

    			            // Return final computed hash
    			            return this._hash;
    			        },

    			        clone: function () {
    			            var clone = Hasher.clone.call(this);
    			            clone._hash = this._hash.clone();

    			            return clone;
    			        }
    			    });

    			    /**
    			     * Shortcut function to the hasher's object interface.
    			     *
    			     * @param {WordArray|string} message The message to hash.
    			     *
    			     * @return {WordArray} The hash.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var hash = CryptoJS.SHA1('message');
    			     *     var hash = CryptoJS.SHA1(wordArray);
    			     */
    			    C.SHA1 = Hasher._createHelper(SHA1);

    			    /**
    			     * Shortcut function to the HMAC's object interface.
    			     *
    			     * @param {WordArray|string} message The message to hash.
    			     * @param {WordArray|string} key The secret key.
    			     *
    			     * @return {WordArray} The HMAC.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var hmac = CryptoJS.HmacSHA1(message, key);
    			     */
    			    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
    			}());


    			return CryptoJS.SHA1;

    		})); 
    	} (sha1));
    	return sha1.exports;
    }

    var sha256$1 = {exports: {}};

    var hasRequiredSha256;

    function requireSha256 () {
    	if (hasRequiredSha256) return sha256$1.exports;
    	hasRequiredSha256 = 1;
    	(function (module, exports) {
    (function (root, factory) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function (Math) {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var WordArray = C_lib.WordArray;
    			    var Hasher = C_lib.Hasher;
    			    var C_algo = C.algo;

    			    // Initialization and round constants tables
    			    var H = [];
    			    var K = [];

    			    // Compute constants
    			    (function () {
    			        function isPrime(n) {
    			            var sqrtN = Math.sqrt(n);
    			            for (var factor = 2; factor <= sqrtN; factor++) {
    			                if (!(n % factor)) {
    			                    return false;
    			                }
    			            }

    			            return true;
    			        }

    			        function getFractionalBits(n) {
    			            return ((n - (n | 0)) * 0x100000000) | 0;
    			        }

    			        var n = 2;
    			        var nPrime = 0;
    			        while (nPrime < 64) {
    			            if (isPrime(n)) {
    			                if (nPrime < 8) {
    			                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
    			                }
    			                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

    			                nPrime++;
    			            }

    			            n++;
    			        }
    			    }());

    			    // Reusable object
    			    var W = [];

    			    /**
    			     * SHA-256 hash algorithm.
    			     */
    			    var SHA256 = C_algo.SHA256 = Hasher.extend({
    			        _doReset: function () {
    			            this._hash = new WordArray.init(H.slice(0));
    			        },

    			        _doProcessBlock: function (M, offset) {
    			            // Shortcut
    			            var H = this._hash.words;

    			            // Working variables
    			            var a = H[0];
    			            var b = H[1];
    			            var c = H[2];
    			            var d = H[3];
    			            var e = H[4];
    			            var f = H[5];
    			            var g = H[6];
    			            var h = H[7];

    			            // Computation
    			            for (var i = 0; i < 64; i++) {
    			                if (i < 16) {
    			                    W[i] = M[offset + i] | 0;
    			                } else {
    			                    var gamma0x = W[i - 15];
    			                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
    			                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
    			                                   (gamma0x >>> 3);

    			                    var gamma1x = W[i - 2];
    			                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
    			                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
    			                                   (gamma1x >>> 10);

    			                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
    			                }

    			                var ch  = (e & f) ^ (~e & g);
    			                var maj = (a & b) ^ (a & c) ^ (b & c);

    			                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
    			                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

    			                var t1 = h + sigma1 + ch + K[i] + W[i];
    			                var t2 = sigma0 + maj;

    			                h = g;
    			                g = f;
    			                f = e;
    			                e = (d + t1) | 0;
    			                d = c;
    			                c = b;
    			                b = a;
    			                a = (t1 + t2) | 0;
    			            }

    			            // Intermediate hash value
    			            H[0] = (H[0] + a) | 0;
    			            H[1] = (H[1] + b) | 0;
    			            H[2] = (H[2] + c) | 0;
    			            H[3] = (H[3] + d) | 0;
    			            H[4] = (H[4] + e) | 0;
    			            H[5] = (H[5] + f) | 0;
    			            H[6] = (H[6] + g) | 0;
    			            H[7] = (H[7] + h) | 0;
    			        },

    			        _doFinalize: function () {
    			            // Shortcuts
    			            var data = this._data;
    			            var dataWords = data.words;

    			            var nBitsTotal = this._nDataBytes * 8;
    			            var nBitsLeft = data.sigBytes * 8;

    			            // Add padding
    			            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
    			            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
    			            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
    			            data.sigBytes = dataWords.length * 4;

    			            // Hash final blocks
    			            this._process();

    			            // Return final computed hash
    			            return this._hash;
    			        },

    			        clone: function () {
    			            var clone = Hasher.clone.call(this);
    			            clone._hash = this._hash.clone();

    			            return clone;
    			        }
    			    });

    			    /**
    			     * Shortcut function to the hasher's object interface.
    			     *
    			     * @param {WordArray|string} message The message to hash.
    			     *
    			     * @return {WordArray} The hash.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var hash = CryptoJS.SHA256('message');
    			     *     var hash = CryptoJS.SHA256(wordArray);
    			     */
    			    C.SHA256 = Hasher._createHelper(SHA256);

    			    /**
    			     * Shortcut function to the HMAC's object interface.
    			     *
    			     * @param {WordArray|string} message The message to hash.
    			     * @param {WordArray|string} key The secret key.
    			     *
    			     * @return {WordArray} The HMAC.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var hmac = CryptoJS.HmacSHA256(message, key);
    			     */
    			    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
    			}(Math));


    			return CryptoJS.SHA256;

    		})); 
    	} (sha256$1));
    	return sha256$1.exports;
    }

    var sha224 = {exports: {}};

    var hasRequiredSha224;

    function requireSha224 () {
    	if (hasRequiredSha224) return sha224.exports;
    	hasRequiredSha224 = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireSha256());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function () {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var WordArray = C_lib.WordArray;
    			    var C_algo = C.algo;
    			    var SHA256 = C_algo.SHA256;

    			    /**
    			     * SHA-224 hash algorithm.
    			     */
    			    var SHA224 = C_algo.SHA224 = SHA256.extend({
    			        _doReset: function () {
    			            this._hash = new WordArray.init([
    			                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    			                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
    			            ]);
    			        },

    			        _doFinalize: function () {
    			            var hash = SHA256._doFinalize.call(this);

    			            hash.sigBytes -= 4;

    			            return hash;
    			        }
    			    });

    			    /**
    			     * Shortcut function to the hasher's object interface.
    			     *
    			     * @param {WordArray|string} message The message to hash.
    			     *
    			     * @return {WordArray} The hash.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var hash = CryptoJS.SHA224('message');
    			     *     var hash = CryptoJS.SHA224(wordArray);
    			     */
    			    C.SHA224 = SHA256._createHelper(SHA224);

    			    /**
    			     * Shortcut function to the HMAC's object interface.
    			     *
    			     * @param {WordArray|string} message The message to hash.
    			     * @param {WordArray|string} key The secret key.
    			     *
    			     * @return {WordArray} The HMAC.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var hmac = CryptoJS.HmacSHA224(message, key);
    			     */
    			    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
    			}());


    			return CryptoJS.SHA224;

    		})); 
    	} (sha224));
    	return sha224.exports;
    }

    var sha512$1 = {exports: {}};

    var hasRequiredSha512;

    function requireSha512 () {
    	if (hasRequiredSha512) return sha512$1.exports;
    	hasRequiredSha512 = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireX64Core());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function () {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var Hasher = C_lib.Hasher;
    			    var C_x64 = C.x64;
    			    var X64Word = C_x64.Word;
    			    var X64WordArray = C_x64.WordArray;
    			    var C_algo = C.algo;

    			    function X64Word_create() {
    			        return X64Word.create.apply(X64Word, arguments);
    			    }

    			    // Constants
    			    var K = [
    			        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
    			        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
    			        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
    			        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
    			        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
    			        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
    			        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
    			        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
    			        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
    			        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
    			        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
    			        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
    			        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
    			        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
    			        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
    			        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
    			        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
    			        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
    			        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
    			        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
    			        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
    			        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
    			        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
    			        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
    			        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
    			        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
    			        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
    			        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
    			        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
    			        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
    			        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
    			        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
    			        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
    			        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
    			        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
    			        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
    			        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
    			        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
    			        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
    			        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
    			    ];

    			    // Reusable objects
    			    var W = [];
    			    (function () {
    			        for (var i = 0; i < 80; i++) {
    			            W[i] = X64Word_create();
    			        }
    			    }());

    			    /**
    			     * SHA-512 hash algorithm.
    			     */
    			    var SHA512 = C_algo.SHA512 = Hasher.extend({
    			        _doReset: function () {
    			            this._hash = new X64WordArray.init([
    			                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
    			                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
    			                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
    			                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
    			            ]);
    			        },

    			        _doProcessBlock: function (M, offset) {
    			            // Shortcuts
    			            var H = this._hash.words;

    			            var H0 = H[0];
    			            var H1 = H[1];
    			            var H2 = H[2];
    			            var H3 = H[3];
    			            var H4 = H[4];
    			            var H5 = H[5];
    			            var H6 = H[6];
    			            var H7 = H[7];

    			            var H0h = H0.high;
    			            var H0l = H0.low;
    			            var H1h = H1.high;
    			            var H1l = H1.low;
    			            var H2h = H2.high;
    			            var H2l = H2.low;
    			            var H3h = H3.high;
    			            var H3l = H3.low;
    			            var H4h = H4.high;
    			            var H4l = H4.low;
    			            var H5h = H5.high;
    			            var H5l = H5.low;
    			            var H6h = H6.high;
    			            var H6l = H6.low;
    			            var H7h = H7.high;
    			            var H7l = H7.low;

    			            // Working variables
    			            var ah = H0h;
    			            var al = H0l;
    			            var bh = H1h;
    			            var bl = H1l;
    			            var ch = H2h;
    			            var cl = H2l;
    			            var dh = H3h;
    			            var dl = H3l;
    			            var eh = H4h;
    			            var el = H4l;
    			            var fh = H5h;
    			            var fl = H5l;
    			            var gh = H6h;
    			            var gl = H6l;
    			            var hh = H7h;
    			            var hl = H7l;

    			            // Rounds
    			            for (var i = 0; i < 80; i++) {
    			                var Wil;
    			                var Wih;

    			                // Shortcut
    			                var Wi = W[i];

    			                // Extend message
    			                if (i < 16) {
    			                    Wih = Wi.high = M[offset + i * 2]     | 0;
    			                    Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
    			                } else {
    			                    // Gamma0
    			                    var gamma0x  = W[i - 15];
    			                    var gamma0xh = gamma0x.high;
    			                    var gamma0xl = gamma0x.low;
    			                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
    			                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

    			                    // Gamma1
    			                    var gamma1x  = W[i - 2];
    			                    var gamma1xh = gamma1x.high;
    			                    var gamma1xl = gamma1x.low;
    			                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
    			                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

    			                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    			                    var Wi7  = W[i - 7];
    			                    var Wi7h = Wi7.high;
    			                    var Wi7l = Wi7.low;

    			                    var Wi16  = W[i - 16];
    			                    var Wi16h = Wi16.high;
    			                    var Wi16l = Wi16.low;

    			                    Wil = gamma0l + Wi7l;
    			                    Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
    			                    Wil = Wil + gamma1l;
    			                    Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
    			                    Wil = Wil + Wi16l;
    			                    Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

    			                    Wi.high = Wih;
    			                    Wi.low  = Wil;
    			                }

    			                var chh  = (eh & fh) ^ (~eh & gh);
    			                var chl  = (el & fl) ^ (~el & gl);
    			                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
    			                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

    			                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
    			                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
    			                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
    			                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

    			                // t1 = h + sigma1 + ch + K[i] + W[i]
    			                var Ki  = K[i];
    			                var Kih = Ki.high;
    			                var Kil = Ki.low;

    			                var t1l = hl + sigma1l;
    			                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
    			                var t1l = t1l + chl;
    			                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
    			                var t1l = t1l + Kil;
    			                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
    			                var t1l = t1l + Wil;
    			                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

    			                // t2 = sigma0 + maj
    			                var t2l = sigma0l + majl;
    			                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

    			                // Update working variables
    			                hh = gh;
    			                hl = gl;
    			                gh = fh;
    			                gl = fl;
    			                fh = eh;
    			                fl = el;
    			                el = (dl + t1l) | 0;
    			                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
    			                dh = ch;
    			                dl = cl;
    			                ch = bh;
    			                cl = bl;
    			                bh = ah;
    			                bl = al;
    			                al = (t1l + t2l) | 0;
    			                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
    			            }

    			            // Intermediate hash value
    			            H0l = H0.low  = (H0l + al);
    			            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
    			            H1l = H1.low  = (H1l + bl);
    			            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
    			            H2l = H2.low  = (H2l + cl);
    			            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
    			            H3l = H3.low  = (H3l + dl);
    			            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
    			            H4l = H4.low  = (H4l + el);
    			            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
    			            H5l = H5.low  = (H5l + fl);
    			            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
    			            H6l = H6.low  = (H6l + gl);
    			            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
    			            H7l = H7.low  = (H7l + hl);
    			            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
    			        },

    			        _doFinalize: function () {
    			            // Shortcuts
    			            var data = this._data;
    			            var dataWords = data.words;

    			            var nBitsTotal = this._nDataBytes * 8;
    			            var nBitsLeft = data.sigBytes * 8;

    			            // Add padding
    			            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
    			            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
    			            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
    			            data.sigBytes = dataWords.length * 4;

    			            // Hash final blocks
    			            this._process();

    			            // Convert hash to 32-bit word array before returning
    			            var hash = this._hash.toX32();

    			            // Return final computed hash
    			            return hash;
    			        },

    			        clone: function () {
    			            var clone = Hasher.clone.call(this);
    			            clone._hash = this._hash.clone();

    			            return clone;
    			        },

    			        blockSize: 1024/32
    			    });

    			    /**
    			     * Shortcut function to the hasher's object interface.
    			     *
    			     * @param {WordArray|string} message The message to hash.
    			     *
    			     * @return {WordArray} The hash.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var hash = CryptoJS.SHA512('message');
    			     *     var hash = CryptoJS.SHA512(wordArray);
    			     */
    			    C.SHA512 = Hasher._createHelper(SHA512);

    			    /**
    			     * Shortcut function to the HMAC's object interface.
    			     *
    			     * @param {WordArray|string} message The message to hash.
    			     * @param {WordArray|string} key The secret key.
    			     *
    			     * @return {WordArray} The HMAC.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var hmac = CryptoJS.HmacSHA512(message, key);
    			     */
    			    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
    			}());


    			return CryptoJS.SHA512;

    		})); 
    	} (sha512$1));
    	return sha512$1.exports;
    }

    var sha384 = {exports: {}};

    var hasRequiredSha384;

    function requireSha384 () {
    	if (hasRequiredSha384) return sha384.exports;
    	hasRequiredSha384 = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireX64Core(), requireSha512());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function () {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_x64 = C.x64;
    			    var X64Word = C_x64.Word;
    			    var X64WordArray = C_x64.WordArray;
    			    var C_algo = C.algo;
    			    var SHA512 = C_algo.SHA512;

    			    /**
    			     * SHA-384 hash algorithm.
    			     */
    			    var SHA384 = C_algo.SHA384 = SHA512.extend({
    			        _doReset: function () {
    			            this._hash = new X64WordArray.init([
    			                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
    			                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
    			                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
    			                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
    			            ]);
    			        },

    			        _doFinalize: function () {
    			            var hash = SHA512._doFinalize.call(this);

    			            hash.sigBytes -= 16;

    			            return hash;
    			        }
    			    });

    			    /**
    			     * Shortcut function to the hasher's object interface.
    			     *
    			     * @param {WordArray|string} message The message to hash.
    			     *
    			     * @return {WordArray} The hash.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var hash = CryptoJS.SHA384('message');
    			     *     var hash = CryptoJS.SHA384(wordArray);
    			     */
    			    C.SHA384 = SHA512._createHelper(SHA384);

    			    /**
    			     * Shortcut function to the HMAC's object interface.
    			     *
    			     * @param {WordArray|string} message The message to hash.
    			     * @param {WordArray|string} key The secret key.
    			     *
    			     * @return {WordArray} The HMAC.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var hmac = CryptoJS.HmacSHA384(message, key);
    			     */
    			    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
    			}());


    			return CryptoJS.SHA384;

    		})); 
    	} (sha384));
    	return sha384.exports;
    }

    var sha3 = {exports: {}};

    var hasRequiredSha3;

    function requireSha3 () {
    	if (hasRequiredSha3) return sha3.exports;
    	hasRequiredSha3 = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireX64Core());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function (Math) {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var WordArray = C_lib.WordArray;
    			    var Hasher = C_lib.Hasher;
    			    var C_x64 = C.x64;
    			    var X64Word = C_x64.Word;
    			    var C_algo = C.algo;

    			    // Constants tables
    			    var RHO_OFFSETS = [];
    			    var PI_INDEXES  = [];
    			    var ROUND_CONSTANTS = [];

    			    // Compute Constants
    			    (function () {
    			        // Compute rho offset constants
    			        var x = 1, y = 0;
    			        for (var t = 0; t < 24; t++) {
    			            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

    			            var newX = y % 5;
    			            var newY = (2 * x + 3 * y) % 5;
    			            x = newX;
    			            y = newY;
    			        }

    			        // Compute pi index constants
    			        for (var x = 0; x < 5; x++) {
    			            for (var y = 0; y < 5; y++) {
    			                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
    			            }
    			        }

    			        // Compute round constants
    			        var LFSR = 0x01;
    			        for (var i = 0; i < 24; i++) {
    			            var roundConstantMsw = 0;
    			            var roundConstantLsw = 0;

    			            for (var j = 0; j < 7; j++) {
    			                if (LFSR & 0x01) {
    			                    var bitPosition = (1 << j) - 1;
    			                    if (bitPosition < 32) {
    			                        roundConstantLsw ^= 1 << bitPosition;
    			                    } else /* if (bitPosition >= 32) */ {
    			                        roundConstantMsw ^= 1 << (bitPosition - 32);
    			                    }
    			                }

    			                // Compute next LFSR
    			                if (LFSR & 0x80) {
    			                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
    			                    LFSR = (LFSR << 1) ^ 0x71;
    			                } else {
    			                    LFSR <<= 1;
    			                }
    			            }

    			            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
    			        }
    			    }());

    			    // Reusable objects for temporary values
    			    var T = [];
    			    (function () {
    			        for (var i = 0; i < 25; i++) {
    			            T[i] = X64Word.create();
    			        }
    			    }());

    			    /**
    			     * SHA-3 hash algorithm.
    			     */
    			    var SHA3 = C_algo.SHA3 = Hasher.extend({
    			        /**
    			         * Configuration options.
    			         *
    			         * @property {number} outputLength
    			         *   The desired number of bits in the output hash.
    			         *   Only values permitted are: 224, 256, 384, 512.
    			         *   Default: 512
    			         */
    			        cfg: Hasher.cfg.extend({
    			            outputLength: 512
    			        }),

    			        _doReset: function () {
    			            var state = this._state = [];
    			            for (var i = 0; i < 25; i++) {
    			                state[i] = new X64Word.init();
    			            }

    			            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
    			        },

    			        _doProcessBlock: function (M, offset) {
    			            // Shortcuts
    			            var state = this._state;
    			            var nBlockSizeLanes = this.blockSize / 2;

    			            // Absorb
    			            for (var i = 0; i < nBlockSizeLanes; i++) {
    			                // Shortcuts
    			                var M2i  = M[offset + 2 * i];
    			                var M2i1 = M[offset + 2 * i + 1];

    			                // Swap endian
    			                M2i = (
    			                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
    			                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
    			                );
    			                M2i1 = (
    			                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
    			                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
    			                );

    			                // Absorb message into state
    			                var lane = state[i];
    			                lane.high ^= M2i1;
    			                lane.low  ^= M2i;
    			            }

    			            // Rounds
    			            for (var round = 0; round < 24; round++) {
    			                // Theta
    			                for (var x = 0; x < 5; x++) {
    			                    // Mix column lanes
    			                    var tMsw = 0, tLsw = 0;
    			                    for (var y = 0; y < 5; y++) {
    			                        var lane = state[x + 5 * y];
    			                        tMsw ^= lane.high;
    			                        tLsw ^= lane.low;
    			                    }

    			                    // Temporary values
    			                    var Tx = T[x];
    			                    Tx.high = tMsw;
    			                    Tx.low  = tLsw;
    			                }
    			                for (var x = 0; x < 5; x++) {
    			                    // Shortcuts
    			                    var Tx4 = T[(x + 4) % 5];
    			                    var Tx1 = T[(x + 1) % 5];
    			                    var Tx1Msw = Tx1.high;
    			                    var Tx1Lsw = Tx1.low;

    			                    // Mix surrounding columns
    			                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
    			                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
    			                    for (var y = 0; y < 5; y++) {
    			                        var lane = state[x + 5 * y];
    			                        lane.high ^= tMsw;
    			                        lane.low  ^= tLsw;
    			                    }
    			                }

    			                // Rho Pi
    			                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
    			                    var tMsw;
    			                    var tLsw;

    			                    // Shortcuts
    			                    var lane = state[laneIndex];
    			                    var laneMsw = lane.high;
    			                    var laneLsw = lane.low;
    			                    var rhoOffset = RHO_OFFSETS[laneIndex];

    			                    // Rotate lanes
    			                    if (rhoOffset < 32) {
    			                        tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
    			                        tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
    			                    } else /* if (rhoOffset >= 32) */ {
    			                        tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
    			                        tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
    			                    }

    			                    // Transpose lanes
    			                    var TPiLane = T[PI_INDEXES[laneIndex]];
    			                    TPiLane.high = tMsw;
    			                    TPiLane.low  = tLsw;
    			                }

    			                // Rho pi at x = y = 0
    			                var T0 = T[0];
    			                var state0 = state[0];
    			                T0.high = state0.high;
    			                T0.low  = state0.low;

    			                // Chi
    			                for (var x = 0; x < 5; x++) {
    			                    for (var y = 0; y < 5; y++) {
    			                        // Shortcuts
    			                        var laneIndex = x + 5 * y;
    			                        var lane = state[laneIndex];
    			                        var TLane = T[laneIndex];
    			                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
    			                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

    			                        // Mix rows
    			                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
    			                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
    			                    }
    			                }

    			                // Iota
    			                var lane = state[0];
    			                var roundConstant = ROUND_CONSTANTS[round];
    			                lane.high ^= roundConstant.high;
    			                lane.low  ^= roundConstant.low;
    			            }
    			        },

    			        _doFinalize: function () {
    			            // Shortcuts
    			            var data = this._data;
    			            var dataWords = data.words;
    			            this._nDataBytes * 8;
    			            var nBitsLeft = data.sigBytes * 8;
    			            var blockSizeBits = this.blockSize * 32;

    			            // Add padding
    			            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
    			            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
    			            data.sigBytes = dataWords.length * 4;

    			            // Hash final blocks
    			            this._process();

    			            // Shortcuts
    			            var state = this._state;
    			            var outputLengthBytes = this.cfg.outputLength / 8;
    			            var outputLengthLanes = outputLengthBytes / 8;

    			            // Squeeze
    			            var hashWords = [];
    			            for (var i = 0; i < outputLengthLanes; i++) {
    			                // Shortcuts
    			                var lane = state[i];
    			                var laneMsw = lane.high;
    			                var laneLsw = lane.low;

    			                // Swap endian
    			                laneMsw = (
    			                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
    			                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
    			                );
    			                laneLsw = (
    			                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
    			                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
    			                );

    			                // Squeeze state to retrieve hash
    			                hashWords.push(laneLsw);
    			                hashWords.push(laneMsw);
    			            }

    			            // Return final computed hash
    			            return new WordArray.init(hashWords, outputLengthBytes);
    			        },

    			        clone: function () {
    			            var clone = Hasher.clone.call(this);

    			            var state = clone._state = this._state.slice(0);
    			            for (var i = 0; i < 25; i++) {
    			                state[i] = state[i].clone();
    			            }

    			            return clone;
    			        }
    			    });

    			    /**
    			     * Shortcut function to the hasher's object interface.
    			     *
    			     * @param {WordArray|string} message The message to hash.
    			     *
    			     * @return {WordArray} The hash.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var hash = CryptoJS.SHA3('message');
    			     *     var hash = CryptoJS.SHA3(wordArray);
    			     */
    			    C.SHA3 = Hasher._createHelper(SHA3);

    			    /**
    			     * Shortcut function to the HMAC's object interface.
    			     *
    			     * @param {WordArray|string} message The message to hash.
    			     * @param {WordArray|string} key The secret key.
    			     *
    			     * @return {WordArray} The HMAC.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var hmac = CryptoJS.HmacSHA3(message, key);
    			     */
    			    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
    			}(Math));


    			return CryptoJS.SHA3;

    		})); 
    	} (sha3));
    	return sha3.exports;
    }

    var ripemd160$2 = {exports: {}};

    var hasRequiredRipemd160;

    function requireRipemd160 () {
    	if (hasRequiredRipemd160) return ripemd160$2.exports;
    	hasRequiredRipemd160 = 1;
    	(function (module, exports) {
    (function (root, factory) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			/** @preserve
    			(c) 2012 by CÃ©dric Mesnil. All rights reserved.

    			Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    			    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    			    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

    			THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    			*/

    			(function (Math) {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var WordArray = C_lib.WordArray;
    			    var Hasher = C_lib.Hasher;
    			    var C_algo = C.algo;

    			    // Constants table
    			    var _zl = WordArray.create([
    			        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
    			        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
    			        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
    			        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
    			        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);
    			    var _zr = WordArray.create([
    			        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
    			        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
    			        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
    			        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
    			        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);
    			    var _sl = WordArray.create([
    			         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
    			        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
    			        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
    			          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
    			        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);
    			    var _sr = WordArray.create([
    			        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
    			        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
    			        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
    			        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
    			        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);

    			    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
    			    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

    			    /**
    			     * RIPEMD160 hash algorithm.
    			     */
    			    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
    			        _doReset: function () {
    			            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
    			        },

    			        _doProcessBlock: function (M, offset) {

    			            // Swap endian
    			            for (var i = 0; i < 16; i++) {
    			                // Shortcuts
    			                var offset_i = offset + i;
    			                var M_offset_i = M[offset_i];

    			                // Swap
    			                M[offset_i] = (
    			                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
    			                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
    			                );
    			            }
    			            // Shortcut
    			            var H  = this._hash.words;
    			            var hl = _hl.words;
    			            var hr = _hr.words;
    			            var zl = _zl.words;
    			            var zr = _zr.words;
    			            var sl = _sl.words;
    			            var sr = _sr.words;

    			            // Working variables
    			            var al, bl, cl, dl, el;
    			            var ar, br, cr, dr, er;

    			            ar = al = H[0];
    			            br = bl = H[1];
    			            cr = cl = H[2];
    			            dr = dl = H[3];
    			            er = el = H[4];
    			            // Computation
    			            var t;
    			            for (var i = 0; i < 80; i += 1) {
    			                t = (al +  M[offset+zl[i]])|0;
    			                if (i<16){
    				            t +=  f1(bl,cl,dl) + hl[0];
    			                } else if (i<32) {
    				            t +=  f2(bl,cl,dl) + hl[1];
    			                } else if (i<48) {
    				            t +=  f3(bl,cl,dl) + hl[2];
    			                } else if (i<64) {
    				            t +=  f4(bl,cl,dl) + hl[3];
    			                } else {// if (i<80) {
    				            t +=  f5(bl,cl,dl) + hl[4];
    			                }
    			                t = t|0;
    			                t =  rotl(t,sl[i]);
    			                t = (t+el)|0;
    			                al = el;
    			                el = dl;
    			                dl = rotl(cl, 10);
    			                cl = bl;
    			                bl = t;

    			                t = (ar + M[offset+zr[i]])|0;
    			                if (i<16){
    				            t +=  f5(br,cr,dr) + hr[0];
    			                } else if (i<32) {
    				            t +=  f4(br,cr,dr) + hr[1];
    			                } else if (i<48) {
    				            t +=  f3(br,cr,dr) + hr[2];
    			                } else if (i<64) {
    				            t +=  f2(br,cr,dr) + hr[3];
    			                } else {// if (i<80) {
    				            t +=  f1(br,cr,dr) + hr[4];
    			                }
    			                t = t|0;
    			                t =  rotl(t,sr[i]) ;
    			                t = (t+er)|0;
    			                ar = er;
    			                er = dr;
    			                dr = rotl(cr, 10);
    			                cr = br;
    			                br = t;
    			            }
    			            // Intermediate hash value
    			            t    = (H[1] + cl + dr)|0;
    			            H[1] = (H[2] + dl + er)|0;
    			            H[2] = (H[3] + el + ar)|0;
    			            H[3] = (H[4] + al + br)|0;
    			            H[4] = (H[0] + bl + cr)|0;
    			            H[0] =  t;
    			        },

    			        _doFinalize: function () {
    			            // Shortcuts
    			            var data = this._data;
    			            var dataWords = data.words;

    			            var nBitsTotal = this._nDataBytes * 8;
    			            var nBitsLeft = data.sigBytes * 8;

    			            // Add padding
    			            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
    			            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
    			                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
    			                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
    			            );
    			            data.sigBytes = (dataWords.length + 1) * 4;

    			            // Hash final blocks
    			            this._process();

    			            // Shortcuts
    			            var hash = this._hash;
    			            var H = hash.words;

    			            // Swap endian
    			            for (var i = 0; i < 5; i++) {
    			                // Shortcut
    			                var H_i = H[i];

    			                // Swap
    			                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
    			                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
    			            }

    			            // Return final computed hash
    			            return hash;
    			        },

    			        clone: function () {
    			            var clone = Hasher.clone.call(this);
    			            clone._hash = this._hash.clone();

    			            return clone;
    			        }
    			    });


    			    function f1(x, y, z) {
    			        return ((x) ^ (y) ^ (z));

    			    }

    			    function f2(x, y, z) {
    			        return (((x)&(y)) | ((~x)&(z)));
    			    }

    			    function f3(x, y, z) {
    			        return (((x) | (~(y))) ^ (z));
    			    }

    			    function f4(x, y, z) {
    			        return (((x) & (z)) | ((y)&(~(z))));
    			    }

    			    function f5(x, y, z) {
    			        return ((x) ^ ((y) |(~(z))));

    			    }

    			    function rotl(x,n) {
    			        return (x<<n) | (x>>>(32-n));
    			    }


    			    /**
    			     * Shortcut function to the hasher's object interface.
    			     *
    			     * @param {WordArray|string} message The message to hash.
    			     *
    			     * @return {WordArray} The hash.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var hash = CryptoJS.RIPEMD160('message');
    			     *     var hash = CryptoJS.RIPEMD160(wordArray);
    			     */
    			    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

    			    /**
    			     * Shortcut function to the HMAC's object interface.
    			     *
    			     * @param {WordArray|string} message The message to hash.
    			     * @param {WordArray|string} key The secret key.
    			     *
    			     * @return {WordArray} The HMAC.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
    			     */
    			    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
    			}());


    			return CryptoJS.RIPEMD160;

    		})); 
    	} (ripemd160$2));
    	return ripemd160$2.exports;
    }

    var hmac = {exports: {}};

    var hasRequiredHmac;

    function requireHmac () {
    	if (hasRequiredHmac) return hmac.exports;
    	hasRequiredHmac = 1;
    	(function (module, exports) {
    (function (root, factory) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function () {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var Base = C_lib.Base;
    			    var C_enc = C.enc;
    			    var Utf8 = C_enc.Utf8;
    			    var C_algo = C.algo;

    			    /**
    			     * HMAC algorithm.
    			     */
    			    C_algo.HMAC = Base.extend({
    			        /**
    			         * Initializes a newly created HMAC.
    			         *
    			         * @param {Hasher} hasher The hash algorithm to use.
    			         * @param {WordArray|string} key The secret key.
    			         *
    			         * @example
    			         *
    			         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
    			         */
    			        init: function (hasher, key) {
    			            // Init hasher
    			            hasher = this._hasher = new hasher.init();

    			            // Convert string to WordArray, else assume WordArray already
    			            if (typeof key == 'string') {
    			                key = Utf8.parse(key);
    			            }

    			            // Shortcuts
    			            var hasherBlockSize = hasher.blockSize;
    			            var hasherBlockSizeBytes = hasherBlockSize * 4;

    			            // Allow arbitrary length keys
    			            if (key.sigBytes > hasherBlockSizeBytes) {
    			                key = hasher.finalize(key);
    			            }

    			            // Clamp excess bits
    			            key.clamp();

    			            // Clone key for inner and outer pads
    			            var oKey = this._oKey = key.clone();
    			            var iKey = this._iKey = key.clone();

    			            // Shortcuts
    			            var oKeyWords = oKey.words;
    			            var iKeyWords = iKey.words;

    			            // XOR keys with pad constants
    			            for (var i = 0; i < hasherBlockSize; i++) {
    			                oKeyWords[i] ^= 0x5c5c5c5c;
    			                iKeyWords[i] ^= 0x36363636;
    			            }
    			            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

    			            // Set initial values
    			            this.reset();
    			        },

    			        /**
    			         * Resets this HMAC to its initial state.
    			         *
    			         * @example
    			         *
    			         *     hmacHasher.reset();
    			         */
    			        reset: function () {
    			            // Shortcut
    			            var hasher = this._hasher;

    			            // Reset
    			            hasher.reset();
    			            hasher.update(this._iKey);
    			        },

    			        /**
    			         * Updates this HMAC with a message.
    			         *
    			         * @param {WordArray|string} messageUpdate The message to append.
    			         *
    			         * @return {HMAC} This HMAC instance.
    			         *
    			         * @example
    			         *
    			         *     hmacHasher.update('message');
    			         *     hmacHasher.update(wordArray);
    			         */
    			        update: function (messageUpdate) {
    			            this._hasher.update(messageUpdate);

    			            // Chainable
    			            return this;
    			        },

    			        /**
    			         * Finalizes the HMAC computation.
    			         * Note that the finalize operation is effectively a destructive, read-once operation.
    			         *
    			         * @param {WordArray|string} messageUpdate (Optional) A final message update.
    			         *
    			         * @return {WordArray} The HMAC.
    			         *
    			         * @example
    			         *
    			         *     var hmac = hmacHasher.finalize();
    			         *     var hmac = hmacHasher.finalize('message');
    			         *     var hmac = hmacHasher.finalize(wordArray);
    			         */
    			        finalize: function (messageUpdate) {
    			            // Shortcut
    			            var hasher = this._hasher;

    			            // Compute HMAC
    			            var innerHash = hasher.finalize(messageUpdate);
    			            hasher.reset();
    			            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

    			            return hmac;
    			        }
    			    });
    			}());


    		})); 
    	} (hmac));
    	return hmac.exports;
    }

    var pbkdf2 = {exports: {}};

    var hasRequiredPbkdf2;

    function requirePbkdf2 () {
    	if (hasRequiredPbkdf2) return pbkdf2.exports;
    	hasRequiredPbkdf2 = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireSha256(), requireHmac());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function () {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var Base = C_lib.Base;
    			    var WordArray = C_lib.WordArray;
    			    var C_algo = C.algo;
    			    var SHA256 = C_algo.SHA256;
    			    var HMAC = C_algo.HMAC;

    			    /**
    			     * Password-Based Key Derivation Function 2 algorithm.
    			     */
    			    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
    			        /**
    			         * Configuration options.
    			         *
    			         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
    			         * @property {Hasher} hasher The hasher to use. Default: SHA256
    			         * @property {number} iterations The number of iterations to perform. Default: 250000
    			         */
    			        cfg: Base.extend({
    			            keySize: 128/32,
    			            hasher: SHA256,
    			            iterations: 250000
    			        }),

    			        /**
    			         * Initializes a newly created key derivation function.
    			         *
    			         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
    			         *
    			         * @example
    			         *
    			         *     var kdf = CryptoJS.algo.PBKDF2.create();
    			         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
    			         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
    			         */
    			        init: function (cfg) {
    			            this.cfg = this.cfg.extend(cfg);
    			        },

    			        /**
    			         * Computes the Password-Based Key Derivation Function 2.
    			         *
    			         * @param {WordArray|string} password The password.
    			         * @param {WordArray|string} salt A salt.
    			         *
    			         * @return {WordArray} The derived key.
    			         *
    			         * @example
    			         *
    			         *     var key = kdf.compute(password, salt);
    			         */
    			        compute: function (password, salt) {
    			            // Shortcut
    			            var cfg = this.cfg;

    			            // Init HMAC
    			            var hmac = HMAC.create(cfg.hasher, password);

    			            // Initial values
    			            var derivedKey = WordArray.create();
    			            var blockIndex = WordArray.create([0x00000001]);

    			            // Shortcuts
    			            var derivedKeyWords = derivedKey.words;
    			            var blockIndexWords = blockIndex.words;
    			            var keySize = cfg.keySize;
    			            var iterations = cfg.iterations;

    			            // Generate key
    			            while (derivedKeyWords.length < keySize) {
    			                var block = hmac.update(salt).finalize(blockIndex);
    			                hmac.reset();

    			                // Shortcuts
    			                var blockWords = block.words;
    			                var blockWordsLength = blockWords.length;

    			                // Iterations
    			                var intermediate = block;
    			                for (var i = 1; i < iterations; i++) {
    			                    intermediate = hmac.finalize(intermediate);
    			                    hmac.reset();

    			                    // Shortcut
    			                    var intermediateWords = intermediate.words;

    			                    // XOR intermediate with block
    			                    for (var j = 0; j < blockWordsLength; j++) {
    			                        blockWords[j] ^= intermediateWords[j];
    			                    }
    			                }

    			                derivedKey.concat(block);
    			                blockIndexWords[0]++;
    			            }
    			            derivedKey.sigBytes = keySize * 4;

    			            return derivedKey;
    			        }
    			    });

    			    /**
    			     * Computes the Password-Based Key Derivation Function 2.
    			     *
    			     * @param {WordArray|string} password The password.
    			     * @param {WordArray|string} salt A salt.
    			     * @param {Object} cfg (Optional) The configuration options to use for this computation.
    			     *
    			     * @return {WordArray} The derived key.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var key = CryptoJS.PBKDF2(password, salt);
    			     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
    			     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
    			     */
    			    C.PBKDF2 = function (password, salt, cfg) {
    			        return PBKDF2.create(cfg).compute(password, salt);
    			    };
    			}());


    			return CryptoJS.PBKDF2;

    		})); 
    	} (pbkdf2));
    	return pbkdf2.exports;
    }

    var evpkdf = {exports: {}};

    var hasRequiredEvpkdf;

    function requireEvpkdf () {
    	if (hasRequiredEvpkdf) return evpkdf.exports;
    	hasRequiredEvpkdf = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireSha1(), requireHmac());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function () {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var Base = C_lib.Base;
    			    var WordArray = C_lib.WordArray;
    			    var C_algo = C.algo;
    			    var MD5 = C_algo.MD5;

    			    /**
    			     * This key derivation function is meant to conform with EVP_BytesToKey.
    			     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
    			     */
    			    var EvpKDF = C_algo.EvpKDF = Base.extend({
    			        /**
    			         * Configuration options.
    			         *
    			         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
    			         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
    			         * @property {number} iterations The number of iterations to perform. Default: 1
    			         */
    			        cfg: Base.extend({
    			            keySize: 128/32,
    			            hasher: MD5,
    			            iterations: 1
    			        }),

    			        /**
    			         * Initializes a newly created key derivation function.
    			         *
    			         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
    			         *
    			         * @example
    			         *
    			         *     var kdf = CryptoJS.algo.EvpKDF.create();
    			         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
    			         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
    			         */
    			        init: function (cfg) {
    			            this.cfg = this.cfg.extend(cfg);
    			        },

    			        /**
    			         * Derives a key from a password.
    			         *
    			         * @param {WordArray|string} password The password.
    			         * @param {WordArray|string} salt A salt.
    			         *
    			         * @return {WordArray} The derived key.
    			         *
    			         * @example
    			         *
    			         *     var key = kdf.compute(password, salt);
    			         */
    			        compute: function (password, salt) {
    			            var block;

    			            // Shortcut
    			            var cfg = this.cfg;

    			            // Init hasher
    			            var hasher = cfg.hasher.create();

    			            // Initial values
    			            var derivedKey = WordArray.create();

    			            // Shortcuts
    			            var derivedKeyWords = derivedKey.words;
    			            var keySize = cfg.keySize;
    			            var iterations = cfg.iterations;

    			            // Generate key
    			            while (derivedKeyWords.length < keySize) {
    			                if (block) {
    			                    hasher.update(block);
    			                }
    			                block = hasher.update(password).finalize(salt);
    			                hasher.reset();

    			                // Iterations
    			                for (var i = 1; i < iterations; i++) {
    			                    block = hasher.finalize(block);
    			                    hasher.reset();
    			                }

    			                derivedKey.concat(block);
    			            }
    			            derivedKey.sigBytes = keySize * 4;

    			            return derivedKey;
    			        }
    			    });

    			    /**
    			     * Derives a key from a password.
    			     *
    			     * @param {WordArray|string} password The password.
    			     * @param {WordArray|string} salt A salt.
    			     * @param {Object} cfg (Optional) The configuration options to use for this computation.
    			     *
    			     * @return {WordArray} The derived key.
    			     *
    			     * @static
    			     *
    			     * @example
    			     *
    			     *     var key = CryptoJS.EvpKDF(password, salt);
    			     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
    			     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
    			     */
    			    C.EvpKDF = function (password, salt, cfg) {
    			        return EvpKDF.create(cfg).compute(password, salt);
    			    };
    			}());


    			return CryptoJS.EvpKDF;

    		})); 
    	} (evpkdf));
    	return evpkdf.exports;
    }

    var cipherCore = {exports: {}};

    var hasRequiredCipherCore;

    function requireCipherCore () {
    	if (hasRequiredCipherCore) return cipherCore.exports;
    	hasRequiredCipherCore = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireEvpkdf());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			/**
    			 * Cipher core components.
    			 */
    			CryptoJS.lib.Cipher || (function (undefined$1) {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var Base = C_lib.Base;
    			    var WordArray = C_lib.WordArray;
    			    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
    			    var C_enc = C.enc;
    			    C_enc.Utf8;
    			    var Base64 = C_enc.Base64;
    			    var C_algo = C.algo;
    			    var EvpKDF = C_algo.EvpKDF;

    			    /**
    			     * Abstract base cipher template.
    			     *
    			     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
    			     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
    			     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
    			     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
    			     */
    			    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
    			        /**
    			         * Configuration options.
    			         *
    			         * @property {WordArray} iv The IV to use for this operation.
    			         */
    			        cfg: Base.extend(),

    			        /**
    			         * Creates this cipher in encryption mode.
    			         *
    			         * @param {WordArray} key The key.
    			         * @param {Object} cfg (Optional) The configuration options to use for this operation.
    			         *
    			         * @return {Cipher} A cipher instance.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
    			         */
    			        createEncryptor: function (key, cfg) {
    			            return this.create(this._ENC_XFORM_MODE, key, cfg);
    			        },

    			        /**
    			         * Creates this cipher in decryption mode.
    			         *
    			         * @param {WordArray} key The key.
    			         * @param {Object} cfg (Optional) The configuration options to use for this operation.
    			         *
    			         * @return {Cipher} A cipher instance.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
    			         */
    			        createDecryptor: function (key, cfg) {
    			            return this.create(this._DEC_XFORM_MODE, key, cfg);
    			        },

    			        /**
    			         * Initializes a newly created cipher.
    			         *
    			         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
    			         * @param {WordArray} key The key.
    			         * @param {Object} cfg (Optional) The configuration options to use for this operation.
    			         *
    			         * @example
    			         *
    			         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
    			         */
    			        init: function (xformMode, key, cfg) {
    			            // Apply config defaults
    			            this.cfg = this.cfg.extend(cfg);

    			            // Store transform mode and key
    			            this._xformMode = xformMode;
    			            this._key = key;

    			            // Set initial values
    			            this.reset();
    			        },

    			        /**
    			         * Resets this cipher to its initial state.
    			         *
    			         * @example
    			         *
    			         *     cipher.reset();
    			         */
    			        reset: function () {
    			            // Reset data buffer
    			            BufferedBlockAlgorithm.reset.call(this);

    			            // Perform concrete-cipher logic
    			            this._doReset();
    			        },

    			        /**
    			         * Adds data to be encrypted or decrypted.
    			         *
    			         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
    			         *
    			         * @return {WordArray} The data after processing.
    			         *
    			         * @example
    			         *
    			         *     var encrypted = cipher.process('data');
    			         *     var encrypted = cipher.process(wordArray);
    			         */
    			        process: function (dataUpdate) {
    			            // Append
    			            this._append(dataUpdate);

    			            // Process available blocks
    			            return this._process();
    			        },

    			        /**
    			         * Finalizes the encryption or decryption process.
    			         * Note that the finalize operation is effectively a destructive, read-once operation.
    			         *
    			         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
    			         *
    			         * @return {WordArray} The data after final processing.
    			         *
    			         * @example
    			         *
    			         *     var encrypted = cipher.finalize();
    			         *     var encrypted = cipher.finalize('data');
    			         *     var encrypted = cipher.finalize(wordArray);
    			         */
    			        finalize: function (dataUpdate) {
    			            // Final data update
    			            if (dataUpdate) {
    			                this._append(dataUpdate);
    			            }

    			            // Perform concrete-cipher logic
    			            var finalProcessedData = this._doFinalize();

    			            return finalProcessedData;
    			        },

    			        keySize: 128/32,

    			        ivSize: 128/32,

    			        _ENC_XFORM_MODE: 1,

    			        _DEC_XFORM_MODE: 2,

    			        /**
    			         * Creates shortcut functions to a cipher's object interface.
    			         *
    			         * @param {Cipher} cipher The cipher to create a helper for.
    			         *
    			         * @return {Object} An object with encrypt and decrypt shortcut functions.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
    			         */
    			        _createHelper: (function () {
    			            function selectCipherStrategy(key) {
    			                if (typeof key == 'string') {
    			                    return PasswordBasedCipher;
    			                } else {
    			                    return SerializableCipher;
    			                }
    			            }

    			            return function (cipher) {
    			                return {
    			                    encrypt: function (message, key, cfg) {
    			                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
    			                    },

    			                    decrypt: function (ciphertext, key, cfg) {
    			                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
    			                    }
    			                };
    			            };
    			        }())
    			    });

    			    /**
    			     * Abstract base stream cipher template.
    			     *
    			     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
    			     */
    			    C_lib.StreamCipher = Cipher.extend({
    			        _doFinalize: function () {
    			            // Process partial blocks
    			            var finalProcessedBlocks = this._process(!!'flush');

    			            return finalProcessedBlocks;
    			        },

    			        blockSize: 1
    			    });

    			    /**
    			     * Mode namespace.
    			     */
    			    var C_mode = C.mode = {};

    			    /**
    			     * Abstract base block cipher mode template.
    			     */
    			    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
    			        /**
    			         * Creates this mode for encryption.
    			         *
    			         * @param {Cipher} cipher A block cipher instance.
    			         * @param {Array} iv The IV words.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
    			         */
    			        createEncryptor: function (cipher, iv) {
    			            return this.Encryptor.create(cipher, iv);
    			        },

    			        /**
    			         * Creates this mode for decryption.
    			         *
    			         * @param {Cipher} cipher A block cipher instance.
    			         * @param {Array} iv The IV words.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
    			         */
    			        createDecryptor: function (cipher, iv) {
    			            return this.Decryptor.create(cipher, iv);
    			        },

    			        /**
    			         * Initializes a newly created mode.
    			         *
    			         * @param {Cipher} cipher A block cipher instance.
    			         * @param {Array} iv The IV words.
    			         *
    			         * @example
    			         *
    			         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
    			         */
    			        init: function (cipher, iv) {
    			            this._cipher = cipher;
    			            this._iv = iv;
    			        }
    			    });

    			    /**
    			     * Cipher Block Chaining mode.
    			     */
    			    var CBC = C_mode.CBC = (function () {
    			        /**
    			         * Abstract base CBC mode.
    			         */
    			        var CBC = BlockCipherMode.extend();

    			        /**
    			         * CBC encryptor.
    			         */
    			        CBC.Encryptor = CBC.extend({
    			            /**
    			             * Processes the data block at offset.
    			             *
    			             * @param {Array} words The data words to operate on.
    			             * @param {number} offset The offset where the block starts.
    			             *
    			             * @example
    			             *
    			             *     mode.processBlock(data.words, offset);
    			             */
    			            processBlock: function (words, offset) {
    			                // Shortcuts
    			                var cipher = this._cipher;
    			                var blockSize = cipher.blockSize;

    			                // XOR and encrypt
    			                xorBlock.call(this, words, offset, blockSize);
    			                cipher.encryptBlock(words, offset);

    			                // Remember this block to use with next block
    			                this._prevBlock = words.slice(offset, offset + blockSize);
    			            }
    			        });

    			        /**
    			         * CBC decryptor.
    			         */
    			        CBC.Decryptor = CBC.extend({
    			            /**
    			             * Processes the data block at offset.
    			             *
    			             * @param {Array} words The data words to operate on.
    			             * @param {number} offset The offset where the block starts.
    			             *
    			             * @example
    			             *
    			             *     mode.processBlock(data.words, offset);
    			             */
    			            processBlock: function (words, offset) {
    			                // Shortcuts
    			                var cipher = this._cipher;
    			                var blockSize = cipher.blockSize;

    			                // Remember this block to use with next block
    			                var thisBlock = words.slice(offset, offset + blockSize);

    			                // Decrypt and XOR
    			                cipher.decryptBlock(words, offset);
    			                xorBlock.call(this, words, offset, blockSize);

    			                // This block becomes the previous block
    			                this._prevBlock = thisBlock;
    			            }
    			        });

    			        function xorBlock(words, offset, blockSize) {
    			            var block;

    			            // Shortcut
    			            var iv = this._iv;

    			            // Choose mixing block
    			            if (iv) {
    			                block = iv;

    			                // Remove IV for subsequent blocks
    			                this._iv = undefined$1;
    			            } else {
    			                block = this._prevBlock;
    			            }

    			            // XOR blocks
    			            for (var i = 0; i < blockSize; i++) {
    			                words[offset + i] ^= block[i];
    			            }
    			        }

    			        return CBC;
    			    }());

    			    /**
    			     * Padding namespace.
    			     */
    			    var C_pad = C.pad = {};

    			    /**
    			     * PKCS #5/7 padding strategy.
    			     */
    			    var Pkcs7 = C_pad.Pkcs7 = {
    			        /**
    			         * Pads data using the algorithm defined in PKCS #5/7.
    			         *
    			         * @param {WordArray} data The data to pad.
    			         * @param {number} blockSize The multiple that the data should be padded to.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
    			         */
    			        pad: function (data, blockSize) {
    			            // Shortcut
    			            var blockSizeBytes = blockSize * 4;

    			            // Count padding bytes
    			            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

    			            // Create padding word
    			            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

    			            // Create padding
    			            var paddingWords = [];
    			            for (var i = 0; i < nPaddingBytes; i += 4) {
    			                paddingWords.push(paddingWord);
    			            }
    			            var padding = WordArray.create(paddingWords, nPaddingBytes);

    			            // Add padding
    			            data.concat(padding);
    			        },

    			        /**
    			         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
    			         *
    			         * @param {WordArray} data The data to unpad.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
    			         */
    			        unpad: function (data) {
    			            // Get number of padding bytes from last byte
    			            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

    			            // Remove padding
    			            data.sigBytes -= nPaddingBytes;
    			        }
    			    };

    			    /**
    			     * Abstract base block cipher template.
    			     *
    			     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
    			     */
    			    C_lib.BlockCipher = Cipher.extend({
    			        /**
    			         * Configuration options.
    			         *
    			         * @property {Mode} mode The block mode to use. Default: CBC
    			         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
    			         */
    			        cfg: Cipher.cfg.extend({
    			            mode: CBC,
    			            padding: Pkcs7
    			        }),

    			        reset: function () {
    			            var modeCreator;

    			            // Reset cipher
    			            Cipher.reset.call(this);

    			            // Shortcuts
    			            var cfg = this.cfg;
    			            var iv = cfg.iv;
    			            var mode = cfg.mode;

    			            // Reset block mode
    			            if (this._xformMode == this._ENC_XFORM_MODE) {
    			                modeCreator = mode.createEncryptor;
    			            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
    			                modeCreator = mode.createDecryptor;
    			                // Keep at least one block in the buffer for unpadding
    			                this._minBufferSize = 1;
    			            }

    			            if (this._mode && this._mode.__creator == modeCreator) {
    			                this._mode.init(this, iv && iv.words);
    			            } else {
    			                this._mode = modeCreator.call(mode, this, iv && iv.words);
    			                this._mode.__creator = modeCreator;
    			            }
    			        },

    			        _doProcessBlock: function (words, offset) {
    			            this._mode.processBlock(words, offset);
    			        },

    			        _doFinalize: function () {
    			            var finalProcessedBlocks;

    			            // Shortcut
    			            var padding = this.cfg.padding;

    			            // Finalize
    			            if (this._xformMode == this._ENC_XFORM_MODE) {
    			                // Pad data
    			                padding.pad(this._data, this.blockSize);

    			                // Process final blocks
    			                finalProcessedBlocks = this._process(!!'flush');
    			            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
    			                // Process final blocks
    			                finalProcessedBlocks = this._process(!!'flush');

    			                // Unpad data
    			                padding.unpad(finalProcessedBlocks);
    			            }

    			            return finalProcessedBlocks;
    			        },

    			        blockSize: 128/32
    			    });

    			    /**
    			     * A collection of cipher parameters.
    			     *
    			     * @property {WordArray} ciphertext The raw ciphertext.
    			     * @property {WordArray} key The key to this ciphertext.
    			     * @property {WordArray} iv The IV used in the ciphering operation.
    			     * @property {WordArray} salt The salt used with a key derivation function.
    			     * @property {Cipher} algorithm The cipher algorithm.
    			     * @property {Mode} mode The block mode used in the ciphering operation.
    			     * @property {Padding} padding The padding scheme used in the ciphering operation.
    			     * @property {number} blockSize The block size of the cipher.
    			     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
    			     */
    			    var CipherParams = C_lib.CipherParams = Base.extend({
    			        /**
    			         * Initializes a newly created cipher params object.
    			         *
    			         * @param {Object} cipherParams An object with any of the possible cipher parameters.
    			         *
    			         * @example
    			         *
    			         *     var cipherParams = CryptoJS.lib.CipherParams.create({
    			         *         ciphertext: ciphertextWordArray,
    			         *         key: keyWordArray,
    			         *         iv: ivWordArray,
    			         *         salt: saltWordArray,
    			         *         algorithm: CryptoJS.algo.AES,
    			         *         mode: CryptoJS.mode.CBC,
    			         *         padding: CryptoJS.pad.PKCS7,
    			         *         blockSize: 4,
    			         *         formatter: CryptoJS.format.OpenSSL
    			         *     });
    			         */
    			        init: function (cipherParams) {
    			            this.mixIn(cipherParams);
    			        },

    			        /**
    			         * Converts this cipher params object to a string.
    			         *
    			         * @param {Format} formatter (Optional) The formatting strategy to use.
    			         *
    			         * @return {string} The stringified cipher params.
    			         *
    			         * @throws Error If neither the formatter nor the default formatter is set.
    			         *
    			         * @example
    			         *
    			         *     var string = cipherParams + '';
    			         *     var string = cipherParams.toString();
    			         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
    			         */
    			        toString: function (formatter) {
    			            return (formatter || this.formatter).stringify(this);
    			        }
    			    });

    			    /**
    			     * Format namespace.
    			     */
    			    var C_format = C.format = {};

    			    /**
    			     * OpenSSL formatting strategy.
    			     */
    			    var OpenSSLFormatter = C_format.OpenSSL = {
    			        /**
    			         * Converts a cipher params object to an OpenSSL-compatible string.
    			         *
    			         * @param {CipherParams} cipherParams The cipher params object.
    			         *
    			         * @return {string} The OpenSSL-compatible string.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
    			         */
    			        stringify: function (cipherParams) {
    			            var wordArray;

    			            // Shortcuts
    			            var ciphertext = cipherParams.ciphertext;
    			            var salt = cipherParams.salt;

    			            // Format
    			            if (salt) {
    			                wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
    			            } else {
    			                wordArray = ciphertext;
    			            }

    			            return wordArray.toString(Base64);
    			        },

    			        /**
    			         * Converts an OpenSSL-compatible string to a cipher params object.
    			         *
    			         * @param {string} openSSLStr The OpenSSL-compatible string.
    			         *
    			         * @return {CipherParams} The cipher params object.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
    			         */
    			        parse: function (openSSLStr) {
    			            var salt;

    			            // Parse base64
    			            var ciphertext = Base64.parse(openSSLStr);

    			            // Shortcut
    			            var ciphertextWords = ciphertext.words;

    			            // Test for salt
    			            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
    			                // Extract salt
    			                salt = WordArray.create(ciphertextWords.slice(2, 4));

    			                // Remove salt from ciphertext
    			                ciphertextWords.splice(0, 4);
    			                ciphertext.sigBytes -= 16;
    			            }

    			            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
    			        }
    			    };

    			    /**
    			     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
    			     */
    			    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
    			        /**
    			         * Configuration options.
    			         *
    			         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
    			         */
    			        cfg: Base.extend({
    			            format: OpenSSLFormatter
    			        }),

    			        /**
    			         * Encrypts a message.
    			         *
    			         * @param {Cipher} cipher The cipher algorithm to use.
    			         * @param {WordArray|string} message The message to encrypt.
    			         * @param {WordArray} key The key.
    			         * @param {Object} cfg (Optional) The configuration options to use for this operation.
    			         *
    			         * @return {CipherParams} A cipher params object.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
    			         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
    			         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
    			         */
    			        encrypt: function (cipher, message, key, cfg) {
    			            // Apply config defaults
    			            cfg = this.cfg.extend(cfg);

    			            // Encrypt
    			            var encryptor = cipher.createEncryptor(key, cfg);
    			            var ciphertext = encryptor.finalize(message);

    			            // Shortcut
    			            var cipherCfg = encryptor.cfg;

    			            // Create and return serializable cipher params
    			            return CipherParams.create({
    			                ciphertext: ciphertext,
    			                key: key,
    			                iv: cipherCfg.iv,
    			                algorithm: cipher,
    			                mode: cipherCfg.mode,
    			                padding: cipherCfg.padding,
    			                blockSize: cipher.blockSize,
    			                formatter: cfg.format
    			            });
    			        },

    			        /**
    			         * Decrypts serialized ciphertext.
    			         *
    			         * @param {Cipher} cipher The cipher algorithm to use.
    			         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
    			         * @param {WordArray} key The key.
    			         * @param {Object} cfg (Optional) The configuration options to use for this operation.
    			         *
    			         * @return {WordArray} The plaintext.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
    			         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
    			         */
    			        decrypt: function (cipher, ciphertext, key, cfg) {
    			            // Apply config defaults
    			            cfg = this.cfg.extend(cfg);

    			            // Convert string to CipherParams
    			            ciphertext = this._parse(ciphertext, cfg.format);

    			            // Decrypt
    			            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

    			            return plaintext;
    			        },

    			        /**
    			         * Converts serialized ciphertext to CipherParams,
    			         * else assumed CipherParams already and returns ciphertext unchanged.
    			         *
    			         * @param {CipherParams|string} ciphertext The ciphertext.
    			         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
    			         *
    			         * @return {CipherParams} The unserialized ciphertext.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
    			         */
    			        _parse: function (ciphertext, format) {
    			            if (typeof ciphertext == 'string') {
    			                return format.parse(ciphertext, this);
    			            } else {
    			                return ciphertext;
    			            }
    			        }
    			    });

    			    /**
    			     * Key derivation function namespace.
    			     */
    			    var C_kdf = C.kdf = {};

    			    /**
    			     * OpenSSL key derivation function.
    			     */
    			    var OpenSSLKdf = C_kdf.OpenSSL = {
    			        /**
    			         * Derives a key and IV from a password.
    			         *
    			         * @param {string} password The password to derive from.
    			         * @param {number} keySize The size in words of the key to generate.
    			         * @param {number} ivSize The size in words of the IV to generate.
    			         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
    			         *
    			         * @return {CipherParams} A cipher params object with the key, IV, and salt.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
    			         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
    			         */
    			        execute: function (password, keySize, ivSize, salt, hasher) {
    			            // Generate random salt
    			            if (!salt) {
    			                salt = WordArray.random(64/8);
    			            }

    			            // Derive key and IV
    			            if (!hasher) {
    			                var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
    			            } else {
    			                var key = EvpKDF.create({ keySize: keySize + ivSize, hasher: hasher }).compute(password, salt);
    			            }


    			            // Separate key and IV
    			            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
    			            key.sigBytes = keySize * 4;

    			            // Return params
    			            return CipherParams.create({ key: key, iv: iv, salt: salt });
    			        }
    			    };

    			    /**
    			     * A serializable cipher wrapper that derives the key from a password,
    			     * and returns ciphertext as a serializable cipher params object.
    			     */
    			    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
    			        /**
    			         * Configuration options.
    			         *
    			         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
    			         */
    			        cfg: SerializableCipher.cfg.extend({
    			            kdf: OpenSSLKdf
    			        }),

    			        /**
    			         * Encrypts a message using a password.
    			         *
    			         * @param {Cipher} cipher The cipher algorithm to use.
    			         * @param {WordArray|string} message The message to encrypt.
    			         * @param {string} password The password.
    			         * @param {Object} cfg (Optional) The configuration options to use for this operation.
    			         *
    			         * @return {CipherParams} A cipher params object.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
    			         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
    			         */
    			        encrypt: function (cipher, message, password, cfg) {
    			            // Apply config defaults
    			            cfg = this.cfg.extend(cfg);

    			            // Derive key and other params
    			            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);

    			            // Add IV to config
    			            cfg.iv = derivedParams.iv;

    			            // Encrypt
    			            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

    			            // Mix in derived params
    			            ciphertext.mixIn(derivedParams);

    			            return ciphertext;
    			        },

    			        /**
    			         * Decrypts serialized ciphertext using a password.
    			         *
    			         * @param {Cipher} cipher The cipher algorithm to use.
    			         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
    			         * @param {string} password The password.
    			         * @param {Object} cfg (Optional) The configuration options to use for this operation.
    			         *
    			         * @return {WordArray} The plaintext.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
    			         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
    			         */
    			        decrypt: function (cipher, ciphertext, password, cfg) {
    			            // Apply config defaults
    			            cfg = this.cfg.extend(cfg);

    			            // Convert string to CipherParams
    			            ciphertext = this._parse(ciphertext, cfg.format);

    			            // Derive key and other params
    			            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);

    			            // Add IV to config
    			            cfg.iv = derivedParams.iv;

    			            // Decrypt
    			            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

    			            return plaintext;
    			        }
    			    });
    			}());


    		})); 
    	} (cipherCore));
    	return cipherCore.exports;
    }

    var modeCfb = {exports: {}};

    var hasRequiredModeCfb;

    function requireModeCfb () {
    	if (hasRequiredModeCfb) return modeCfb.exports;
    	hasRequiredModeCfb = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireCipherCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			/**
    			 * Cipher Feedback block mode.
    			 */
    			CryptoJS.mode.CFB = (function () {
    			    var CFB = CryptoJS.lib.BlockCipherMode.extend();

    			    CFB.Encryptor = CFB.extend({
    			        processBlock: function (words, offset) {
    			            // Shortcuts
    			            var cipher = this._cipher;
    			            var blockSize = cipher.blockSize;

    			            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

    			            // Remember this block to use with next block
    			            this._prevBlock = words.slice(offset, offset + blockSize);
    			        }
    			    });

    			    CFB.Decryptor = CFB.extend({
    			        processBlock: function (words, offset) {
    			            // Shortcuts
    			            var cipher = this._cipher;
    			            var blockSize = cipher.blockSize;

    			            // Remember this block to use with next block
    			            var thisBlock = words.slice(offset, offset + blockSize);

    			            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

    			            // This block becomes the previous block
    			            this._prevBlock = thisBlock;
    			        }
    			    });

    			    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
    			        var keystream;

    			        // Shortcut
    			        var iv = this._iv;

    			        // Generate keystream
    			        if (iv) {
    			            keystream = iv.slice(0);

    			            // Remove IV for subsequent blocks
    			            this._iv = undefined;
    			        } else {
    			            keystream = this._prevBlock;
    			        }
    			        cipher.encryptBlock(keystream, 0);

    			        // Encrypt
    			        for (var i = 0; i < blockSize; i++) {
    			            words[offset + i] ^= keystream[i];
    			        }
    			    }

    			    return CFB;
    			}());


    			return CryptoJS.mode.CFB;

    		})); 
    	} (modeCfb));
    	return modeCfb.exports;
    }

    var modeCtr = {exports: {}};

    var hasRequiredModeCtr;

    function requireModeCtr () {
    	if (hasRequiredModeCtr) return modeCtr.exports;
    	hasRequiredModeCtr = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireCipherCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			/**
    			 * Counter block mode.
    			 */
    			CryptoJS.mode.CTR = (function () {
    			    var CTR = CryptoJS.lib.BlockCipherMode.extend();

    			    var Encryptor = CTR.Encryptor = CTR.extend({
    			        processBlock: function (words, offset) {
    			            // Shortcuts
    			            var cipher = this._cipher;
    			            var blockSize = cipher.blockSize;
    			            var iv = this._iv;
    			            var counter = this._counter;

    			            // Generate keystream
    			            if (iv) {
    			                counter = this._counter = iv.slice(0);

    			                // Remove IV for subsequent blocks
    			                this._iv = undefined;
    			            }
    			            var keystream = counter.slice(0);
    			            cipher.encryptBlock(keystream, 0);

    			            // Increment counter
    			            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0;

    			            // Encrypt
    			            for (var i = 0; i < blockSize; i++) {
    			                words[offset + i] ^= keystream[i];
    			            }
    			        }
    			    });

    			    CTR.Decryptor = Encryptor;

    			    return CTR;
    			}());


    			return CryptoJS.mode.CTR;

    		})); 
    	} (modeCtr));
    	return modeCtr.exports;
    }

    var modeCtrGladman = {exports: {}};

    var hasRequiredModeCtrGladman;

    function requireModeCtrGladman () {
    	if (hasRequiredModeCtrGladman) return modeCtrGladman.exports;
    	hasRequiredModeCtrGladman = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireCipherCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			/** @preserve
    			 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
    			 * derived from CryptoJS.mode.CTR
    			 * Jan Hruby jhruby.web@gmail.com
    			 */
    			CryptoJS.mode.CTRGladman = (function () {
    			    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

    				function incWord(word)
    				{
    					if (((word >> 24) & 0xff) === 0xff) { //overflow
    					var b1 = (word >> 16)&0xff;
    					var b2 = (word >> 8)&0xff;
    					var b3 = word & 0xff;

    					if (b1 === 0xff) // overflow b1
    					{
    					b1 = 0;
    					if (b2 === 0xff)
    					{
    						b2 = 0;
    						if (b3 === 0xff)
    						{
    							b3 = 0;
    						}
    						else
    						{
    							++b3;
    						}
    					}
    					else
    					{
    						++b2;
    					}
    					}
    					else
    					{
    					++b1;
    					}

    					word = 0;
    					word += (b1 << 16);
    					word += (b2 << 8);
    					word += b3;
    					}
    					else
    					{
    					word += (0x01 << 24);
    					}
    					return word;
    				}

    				function incCounter(counter)
    				{
    					if ((counter[0] = incWord(counter[0])) === 0)
    					{
    						// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
    						counter[1] = incWord(counter[1]);
    					}
    					return counter;
    				}

    			    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
    			        processBlock: function (words, offset) {
    			            // Shortcuts
    			            var cipher = this._cipher;
    			            var blockSize = cipher.blockSize;
    			            var iv = this._iv;
    			            var counter = this._counter;

    			            // Generate keystream
    			            if (iv) {
    			                counter = this._counter = iv.slice(0);

    			                // Remove IV for subsequent blocks
    			                this._iv = undefined;
    			            }

    						incCounter(counter);

    						var keystream = counter.slice(0);
    			            cipher.encryptBlock(keystream, 0);

    			            // Encrypt
    			            for (var i = 0; i < blockSize; i++) {
    			                words[offset + i] ^= keystream[i];
    			            }
    			        }
    			    });

    			    CTRGladman.Decryptor = Encryptor;

    			    return CTRGladman;
    			}());




    			return CryptoJS.mode.CTRGladman;

    		})); 
    	} (modeCtrGladman));
    	return modeCtrGladman.exports;
    }

    var modeOfb = {exports: {}};

    var hasRequiredModeOfb;

    function requireModeOfb () {
    	if (hasRequiredModeOfb) return modeOfb.exports;
    	hasRequiredModeOfb = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireCipherCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			/**
    			 * Output Feedback block mode.
    			 */
    			CryptoJS.mode.OFB = (function () {
    			    var OFB = CryptoJS.lib.BlockCipherMode.extend();

    			    var Encryptor = OFB.Encryptor = OFB.extend({
    			        processBlock: function (words, offset) {
    			            // Shortcuts
    			            var cipher = this._cipher;
    			            var blockSize = cipher.blockSize;
    			            var iv = this._iv;
    			            var keystream = this._keystream;

    			            // Generate keystream
    			            if (iv) {
    			                keystream = this._keystream = iv.slice(0);

    			                // Remove IV for subsequent blocks
    			                this._iv = undefined;
    			            }
    			            cipher.encryptBlock(keystream, 0);

    			            // Encrypt
    			            for (var i = 0; i < blockSize; i++) {
    			                words[offset + i] ^= keystream[i];
    			            }
    			        }
    			    });

    			    OFB.Decryptor = Encryptor;

    			    return OFB;
    			}());


    			return CryptoJS.mode.OFB;

    		})); 
    	} (modeOfb));
    	return modeOfb.exports;
    }

    var modeEcb = {exports: {}};

    var hasRequiredModeEcb;

    function requireModeEcb () {
    	if (hasRequiredModeEcb) return modeEcb.exports;
    	hasRequiredModeEcb = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireCipherCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			/**
    			 * Electronic Codebook block mode.
    			 */
    			CryptoJS.mode.ECB = (function () {
    			    var ECB = CryptoJS.lib.BlockCipherMode.extend();

    			    ECB.Encryptor = ECB.extend({
    			        processBlock: function (words, offset) {
    			            this._cipher.encryptBlock(words, offset);
    			        }
    			    });

    			    ECB.Decryptor = ECB.extend({
    			        processBlock: function (words, offset) {
    			            this._cipher.decryptBlock(words, offset);
    			        }
    			    });

    			    return ECB;
    			}());


    			return CryptoJS.mode.ECB;

    		})); 
    	} (modeEcb));
    	return modeEcb.exports;
    }

    var padAnsix923 = {exports: {}};

    var hasRequiredPadAnsix923;

    function requirePadAnsix923 () {
    	if (hasRequiredPadAnsix923) return padAnsix923.exports;
    	hasRequiredPadAnsix923 = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireCipherCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			/**
    			 * ANSI X.923 padding strategy.
    			 */
    			CryptoJS.pad.AnsiX923 = {
    			    pad: function (data, blockSize) {
    			        // Shortcuts
    			        var dataSigBytes = data.sigBytes;
    			        var blockSizeBytes = blockSize * 4;

    			        // Count padding bytes
    			        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

    			        // Compute last byte position
    			        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

    			        // Pad
    			        data.clamp();
    			        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
    			        data.sigBytes += nPaddingBytes;
    			    },

    			    unpad: function (data) {
    			        // Get number of padding bytes from last byte
    			        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

    			        // Remove padding
    			        data.sigBytes -= nPaddingBytes;
    			    }
    			};


    			return CryptoJS.pad.Ansix923;

    		})); 
    	} (padAnsix923));
    	return padAnsix923.exports;
    }

    var padIso10126 = {exports: {}};

    var hasRequiredPadIso10126;

    function requirePadIso10126 () {
    	if (hasRequiredPadIso10126) return padIso10126.exports;
    	hasRequiredPadIso10126 = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireCipherCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			/**
    			 * ISO 10126 padding strategy.
    			 */
    			CryptoJS.pad.Iso10126 = {
    			    pad: function (data, blockSize) {
    			        // Shortcut
    			        var blockSizeBytes = blockSize * 4;

    			        // Count padding bytes
    			        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

    			        // Pad
    			        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
    			             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
    			    },

    			    unpad: function (data) {
    			        // Get number of padding bytes from last byte
    			        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

    			        // Remove padding
    			        data.sigBytes -= nPaddingBytes;
    			    }
    			};


    			return CryptoJS.pad.Iso10126;

    		})); 
    	} (padIso10126));
    	return padIso10126.exports;
    }

    var padIso97971 = {exports: {}};

    var hasRequiredPadIso97971;

    function requirePadIso97971 () {
    	if (hasRequiredPadIso97971) return padIso97971.exports;
    	hasRequiredPadIso97971 = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireCipherCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			/**
    			 * ISO/IEC 9797-1 Padding Method 2.
    			 */
    			CryptoJS.pad.Iso97971 = {
    			    pad: function (data, blockSize) {
    			        // Add 0x80 byte
    			        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

    			        // Zero pad the rest
    			        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
    			    },

    			    unpad: function (data) {
    			        // Remove zero padding
    			        CryptoJS.pad.ZeroPadding.unpad(data);

    			        // Remove one more byte -- the 0x80 byte
    			        data.sigBytes--;
    			    }
    			};


    			return CryptoJS.pad.Iso97971;

    		})); 
    	} (padIso97971));
    	return padIso97971.exports;
    }

    var padZeropadding = {exports: {}};

    var hasRequiredPadZeropadding;

    function requirePadZeropadding () {
    	if (hasRequiredPadZeropadding) return padZeropadding.exports;
    	hasRequiredPadZeropadding = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireCipherCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			/**
    			 * Zero padding strategy.
    			 */
    			CryptoJS.pad.ZeroPadding = {
    			    pad: function (data, blockSize) {
    			        // Shortcut
    			        var blockSizeBytes = blockSize * 4;

    			        // Pad
    			        data.clamp();
    			        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
    			    },

    			    unpad: function (data) {
    			        // Shortcut
    			        var dataWords = data.words;

    			        // Unpad
    			        var i = data.sigBytes - 1;
    			        for (var i = data.sigBytes - 1; i >= 0; i--) {
    			            if (((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
    			                data.sigBytes = i + 1;
    			                break;
    			            }
    			        }
    			    }
    			};


    			return CryptoJS.pad.ZeroPadding;

    		})); 
    	} (padZeropadding));
    	return padZeropadding.exports;
    }

    var padNopadding = {exports: {}};

    var hasRequiredPadNopadding;

    function requirePadNopadding () {
    	if (hasRequiredPadNopadding) return padNopadding.exports;
    	hasRequiredPadNopadding = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireCipherCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			/**
    			 * A noop padding strategy.
    			 */
    			CryptoJS.pad.NoPadding = {
    			    pad: function () {
    			    },

    			    unpad: function () {
    			    }
    			};


    			return CryptoJS.pad.NoPadding;

    		})); 
    	} (padNopadding));
    	return padNopadding.exports;
    }

    var formatHex = {exports: {}};

    var hasRequiredFormatHex;

    function requireFormatHex () {
    	if (hasRequiredFormatHex) return formatHex.exports;
    	hasRequiredFormatHex = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireCipherCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function (undefined$1) {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var CipherParams = C_lib.CipherParams;
    			    var C_enc = C.enc;
    			    var Hex = C_enc.Hex;
    			    var C_format = C.format;

    			    C_format.Hex = {
    			        /**
    			         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
    			         *
    			         * @param {CipherParams} cipherParams The cipher params object.
    			         *
    			         * @return {string} The hexadecimally encoded string.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
    			         */
    			        stringify: function (cipherParams) {
    			            return cipherParams.ciphertext.toString(Hex);
    			        },

    			        /**
    			         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
    			         *
    			         * @param {string} input The hexadecimally encoded string.
    			         *
    			         * @return {CipherParams} The cipher params object.
    			         *
    			         * @static
    			         *
    			         * @example
    			         *
    			         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
    			         */
    			        parse: function (input) {
    			            var ciphertext = Hex.parse(input);
    			            return CipherParams.create({ ciphertext: ciphertext });
    			        }
    			    };
    			}());


    			return CryptoJS.format.Hex;

    		})); 
    	} (formatHex));
    	return formatHex.exports;
    }

    var aes = {exports: {}};

    (function (module, exports) {
    (function (root, factory, undef) {
    		{
    			// CommonJS
    			module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
    		}
    	}(commonjsGlobal, function (CryptoJS) {

    		(function () {
    		    // Shortcuts
    		    var C = CryptoJS;
    		    var C_lib = C.lib;
    		    var BlockCipher = C_lib.BlockCipher;
    		    var C_algo = C.algo;

    		    // Lookup tables
    		    var SBOX = [];
    		    var INV_SBOX = [];
    		    var SUB_MIX_0 = [];
    		    var SUB_MIX_1 = [];
    		    var SUB_MIX_2 = [];
    		    var SUB_MIX_3 = [];
    		    var INV_SUB_MIX_0 = [];
    		    var INV_SUB_MIX_1 = [];
    		    var INV_SUB_MIX_2 = [];
    		    var INV_SUB_MIX_3 = [];

    		    // Compute lookup tables
    		    (function () {
    		        // Compute double table
    		        var d = [];
    		        for (var i = 0; i < 256; i++) {
    		            if (i < 128) {
    		                d[i] = i << 1;
    		            } else {
    		                d[i] = (i << 1) ^ 0x11b;
    		            }
    		        }

    		        // Walk GF(2^8)
    		        var x = 0;
    		        var xi = 0;
    		        for (var i = 0; i < 256; i++) {
    		            // Compute sbox
    		            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
    		            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
    		            SBOX[x] = sx;
    		            INV_SBOX[sx] = x;

    		            // Compute multiplication
    		            var x2 = d[x];
    		            var x4 = d[x2];
    		            var x8 = d[x4];

    		            // Compute sub bytes, mix columns tables
    		            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
    		            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
    		            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
    		            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
    		            SUB_MIX_3[x] = t;

    		            // Compute inv sub bytes, inv mix columns tables
    		            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
    		            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
    		            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
    		            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
    		            INV_SUB_MIX_3[sx] = t;

    		            // Compute next counter
    		            if (!x) {
    		                x = xi = 1;
    		            } else {
    		                x = x2 ^ d[d[d[x8 ^ x2]]];
    		                xi ^= d[d[xi]];
    		            }
    		        }
    		    }());

    		    // Precomputed Rcon lookup
    		    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

    		    /**
    		     * AES block cipher algorithm.
    		     */
    		    var AES = C_algo.AES = BlockCipher.extend({
    		        _doReset: function () {
    		            var t;

    		            // Skip reset of nRounds has been set before and key did not change
    		            if (this._nRounds && this._keyPriorReset === this._key) {
    		                return;
    		            }

    		            // Shortcuts
    		            var key = this._keyPriorReset = this._key;
    		            var keyWords = key.words;
    		            var keySize = key.sigBytes / 4;

    		            // Compute number of rounds
    		            var nRounds = this._nRounds = keySize + 6;

    		            // Compute number of key schedule rows
    		            var ksRows = (nRounds + 1) * 4;

    		            // Compute key schedule
    		            var keySchedule = this._keySchedule = [];
    		            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
    		                if (ksRow < keySize) {
    		                    keySchedule[ksRow] = keyWords[ksRow];
    		                } else {
    		                    t = keySchedule[ksRow - 1];

    		                    if (!(ksRow % keySize)) {
    		                        // Rot word
    		                        t = (t << 8) | (t >>> 24);

    		                        // Sub word
    		                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

    		                        // Mix Rcon
    		                        t ^= RCON[(ksRow / keySize) | 0] << 24;
    		                    } else if (keySize > 6 && ksRow % keySize == 4) {
    		                        // Sub word
    		                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
    		                    }

    		                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
    		                }
    		            }

    		            // Compute inv key schedule
    		            var invKeySchedule = this._invKeySchedule = [];
    		            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    		                var ksRow = ksRows - invKsRow;

    		                if (invKsRow % 4) {
    		                    var t = keySchedule[ksRow];
    		                } else {
    		                    var t = keySchedule[ksRow - 4];
    		                }

    		                if (invKsRow < 4 || ksRow <= 4) {
    		                    invKeySchedule[invKsRow] = t;
    		                } else {
    		                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
    		                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
    		                }
    		            }
    		        },

    		        encryptBlock: function (M, offset) {
    		            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
    		        },

    		        decryptBlock: function (M, offset) {
    		            // Swap 2nd and 4th rows
    		            var t = M[offset + 1];
    		            M[offset + 1] = M[offset + 3];
    		            M[offset + 3] = t;

    		            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

    		            // Inv swap 2nd and 4th rows
    		            var t = M[offset + 1];
    		            M[offset + 1] = M[offset + 3];
    		            M[offset + 3] = t;
    		        },

    		        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
    		            // Shortcut
    		            var nRounds = this._nRounds;

    		            // Get input, add round key
    		            var s0 = M[offset]     ^ keySchedule[0];
    		            var s1 = M[offset + 1] ^ keySchedule[1];
    		            var s2 = M[offset + 2] ^ keySchedule[2];
    		            var s3 = M[offset + 3] ^ keySchedule[3];

    		            // Key schedule row counter
    		            var ksRow = 4;

    		            // Rounds
    		            for (var round = 1; round < nRounds; round++) {
    		                // Shift rows, sub bytes, mix columns, add round key
    		                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
    		                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
    		                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
    		                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

    		                // Update state
    		                s0 = t0;
    		                s1 = t1;
    		                s2 = t2;
    		                s3 = t3;
    		            }

    		            // Shift rows, sub bytes, add round key
    		            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
    		            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
    		            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
    		            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

    		            // Set output
    		            M[offset]     = t0;
    		            M[offset + 1] = t1;
    		            M[offset + 2] = t2;
    		            M[offset + 3] = t3;
    		        },

    		        keySize: 256/32
    		    });

    		    /**
    		     * Shortcut functions to the cipher's object interface.
    		     *
    		     * @example
    		     *
    		     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
    		     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
    		     */
    		    C.AES = BlockCipher._createHelper(AES);
    		}());


    		return CryptoJS.AES;

    	})); 
    } (aes));

    var aesExports = aes.exports;
    var AES = /*@__PURE__*/getDefaultExportFromCjs(aesExports);

    var tripledes = {exports: {}};

    var hasRequiredTripledes;

    function requireTripledes () {
    	if (hasRequiredTripledes) return tripledes.exports;
    	hasRequiredTripledes = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function () {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var WordArray = C_lib.WordArray;
    			    var BlockCipher = C_lib.BlockCipher;
    			    var C_algo = C.algo;

    			    // Permuted Choice 1 constants
    			    var PC1 = [
    			        57, 49, 41, 33, 25, 17, 9,  1,
    			        58, 50, 42, 34, 26, 18, 10, 2,
    			        59, 51, 43, 35, 27, 19, 11, 3,
    			        60, 52, 44, 36, 63, 55, 47, 39,
    			        31, 23, 15, 7,  62, 54, 46, 38,
    			        30, 22, 14, 6,  61, 53, 45, 37,
    			        29, 21, 13, 5,  28, 20, 12, 4
    			    ];

    			    // Permuted Choice 2 constants
    			    var PC2 = [
    			        14, 17, 11, 24, 1,  5,
    			        3,  28, 15, 6,  21, 10,
    			        23, 19, 12, 4,  26, 8,
    			        16, 7,  27, 20, 13, 2,
    			        41, 52, 31, 37, 47, 55,
    			        30, 40, 51, 45, 33, 48,
    			        44, 49, 39, 56, 34, 53,
    			        46, 42, 50, 36, 29, 32
    			    ];

    			    // Cumulative bit shift constants
    			    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

    			    // SBOXes and round permutation constants
    			    var SBOX_P = [
    			        {
    			            0x0: 0x808200,
    			            0x10000000: 0x8000,
    			            0x20000000: 0x808002,
    			            0x30000000: 0x2,
    			            0x40000000: 0x200,
    			            0x50000000: 0x808202,
    			            0x60000000: 0x800202,
    			            0x70000000: 0x800000,
    			            0x80000000: 0x202,
    			            0x90000000: 0x800200,
    			            0xa0000000: 0x8200,
    			            0xb0000000: 0x808000,
    			            0xc0000000: 0x8002,
    			            0xd0000000: 0x800002,
    			            0xe0000000: 0x0,
    			            0xf0000000: 0x8202,
    			            0x8000000: 0x0,
    			            0x18000000: 0x808202,
    			            0x28000000: 0x8202,
    			            0x38000000: 0x8000,
    			            0x48000000: 0x808200,
    			            0x58000000: 0x200,
    			            0x68000000: 0x808002,
    			            0x78000000: 0x2,
    			            0x88000000: 0x800200,
    			            0x98000000: 0x8200,
    			            0xa8000000: 0x808000,
    			            0xb8000000: 0x800202,
    			            0xc8000000: 0x800002,
    			            0xd8000000: 0x8002,
    			            0xe8000000: 0x202,
    			            0xf8000000: 0x800000,
    			            0x1: 0x8000,
    			            0x10000001: 0x2,
    			            0x20000001: 0x808200,
    			            0x30000001: 0x800000,
    			            0x40000001: 0x808002,
    			            0x50000001: 0x8200,
    			            0x60000001: 0x200,
    			            0x70000001: 0x800202,
    			            0x80000001: 0x808202,
    			            0x90000001: 0x808000,
    			            0xa0000001: 0x800002,
    			            0xb0000001: 0x8202,
    			            0xc0000001: 0x202,
    			            0xd0000001: 0x800200,
    			            0xe0000001: 0x8002,
    			            0xf0000001: 0x0,
    			            0x8000001: 0x808202,
    			            0x18000001: 0x808000,
    			            0x28000001: 0x800000,
    			            0x38000001: 0x200,
    			            0x48000001: 0x8000,
    			            0x58000001: 0x800002,
    			            0x68000001: 0x2,
    			            0x78000001: 0x8202,
    			            0x88000001: 0x8002,
    			            0x98000001: 0x800202,
    			            0xa8000001: 0x202,
    			            0xb8000001: 0x808200,
    			            0xc8000001: 0x800200,
    			            0xd8000001: 0x0,
    			            0xe8000001: 0x8200,
    			            0xf8000001: 0x808002
    			        },
    			        {
    			            0x0: 0x40084010,
    			            0x1000000: 0x4000,
    			            0x2000000: 0x80000,
    			            0x3000000: 0x40080010,
    			            0x4000000: 0x40000010,
    			            0x5000000: 0x40084000,
    			            0x6000000: 0x40004000,
    			            0x7000000: 0x10,
    			            0x8000000: 0x84000,
    			            0x9000000: 0x40004010,
    			            0xa000000: 0x40000000,
    			            0xb000000: 0x84010,
    			            0xc000000: 0x80010,
    			            0xd000000: 0x0,
    			            0xe000000: 0x4010,
    			            0xf000000: 0x40080000,
    			            0x800000: 0x40004000,
    			            0x1800000: 0x84010,
    			            0x2800000: 0x10,
    			            0x3800000: 0x40004010,
    			            0x4800000: 0x40084010,
    			            0x5800000: 0x40000000,
    			            0x6800000: 0x80000,
    			            0x7800000: 0x40080010,
    			            0x8800000: 0x80010,
    			            0x9800000: 0x0,
    			            0xa800000: 0x4000,
    			            0xb800000: 0x40080000,
    			            0xc800000: 0x40000010,
    			            0xd800000: 0x84000,
    			            0xe800000: 0x40084000,
    			            0xf800000: 0x4010,
    			            0x10000000: 0x0,
    			            0x11000000: 0x40080010,
    			            0x12000000: 0x40004010,
    			            0x13000000: 0x40084000,
    			            0x14000000: 0x40080000,
    			            0x15000000: 0x10,
    			            0x16000000: 0x84010,
    			            0x17000000: 0x4000,
    			            0x18000000: 0x4010,
    			            0x19000000: 0x80000,
    			            0x1a000000: 0x80010,
    			            0x1b000000: 0x40000010,
    			            0x1c000000: 0x84000,
    			            0x1d000000: 0x40004000,
    			            0x1e000000: 0x40000000,
    			            0x1f000000: 0x40084010,
    			            0x10800000: 0x84010,
    			            0x11800000: 0x80000,
    			            0x12800000: 0x40080000,
    			            0x13800000: 0x4000,
    			            0x14800000: 0x40004000,
    			            0x15800000: 0x40084010,
    			            0x16800000: 0x10,
    			            0x17800000: 0x40000000,
    			            0x18800000: 0x40084000,
    			            0x19800000: 0x40000010,
    			            0x1a800000: 0x40004010,
    			            0x1b800000: 0x80010,
    			            0x1c800000: 0x0,
    			            0x1d800000: 0x4010,
    			            0x1e800000: 0x40080010,
    			            0x1f800000: 0x84000
    			        },
    			        {
    			            0x0: 0x104,
    			            0x100000: 0x0,
    			            0x200000: 0x4000100,
    			            0x300000: 0x10104,
    			            0x400000: 0x10004,
    			            0x500000: 0x4000004,
    			            0x600000: 0x4010104,
    			            0x700000: 0x4010000,
    			            0x800000: 0x4000000,
    			            0x900000: 0x4010100,
    			            0xa00000: 0x10100,
    			            0xb00000: 0x4010004,
    			            0xc00000: 0x4000104,
    			            0xd00000: 0x10000,
    			            0xe00000: 0x4,
    			            0xf00000: 0x100,
    			            0x80000: 0x4010100,
    			            0x180000: 0x4010004,
    			            0x280000: 0x0,
    			            0x380000: 0x4000100,
    			            0x480000: 0x4000004,
    			            0x580000: 0x10000,
    			            0x680000: 0x10004,
    			            0x780000: 0x104,
    			            0x880000: 0x4,
    			            0x980000: 0x100,
    			            0xa80000: 0x4010000,
    			            0xb80000: 0x10104,
    			            0xc80000: 0x10100,
    			            0xd80000: 0x4000104,
    			            0xe80000: 0x4010104,
    			            0xf80000: 0x4000000,
    			            0x1000000: 0x4010100,
    			            0x1100000: 0x10004,
    			            0x1200000: 0x10000,
    			            0x1300000: 0x4000100,
    			            0x1400000: 0x100,
    			            0x1500000: 0x4010104,
    			            0x1600000: 0x4000004,
    			            0x1700000: 0x0,
    			            0x1800000: 0x4000104,
    			            0x1900000: 0x4000000,
    			            0x1a00000: 0x4,
    			            0x1b00000: 0x10100,
    			            0x1c00000: 0x4010000,
    			            0x1d00000: 0x104,
    			            0x1e00000: 0x10104,
    			            0x1f00000: 0x4010004,
    			            0x1080000: 0x4000000,
    			            0x1180000: 0x104,
    			            0x1280000: 0x4010100,
    			            0x1380000: 0x0,
    			            0x1480000: 0x10004,
    			            0x1580000: 0x4000100,
    			            0x1680000: 0x100,
    			            0x1780000: 0x4010004,
    			            0x1880000: 0x10000,
    			            0x1980000: 0x4010104,
    			            0x1a80000: 0x10104,
    			            0x1b80000: 0x4000004,
    			            0x1c80000: 0x4000104,
    			            0x1d80000: 0x4010000,
    			            0x1e80000: 0x4,
    			            0x1f80000: 0x10100
    			        },
    			        {
    			            0x0: 0x80401000,
    			            0x10000: 0x80001040,
    			            0x20000: 0x401040,
    			            0x30000: 0x80400000,
    			            0x40000: 0x0,
    			            0x50000: 0x401000,
    			            0x60000: 0x80000040,
    			            0x70000: 0x400040,
    			            0x80000: 0x80000000,
    			            0x90000: 0x400000,
    			            0xa0000: 0x40,
    			            0xb0000: 0x80001000,
    			            0xc0000: 0x80400040,
    			            0xd0000: 0x1040,
    			            0xe0000: 0x1000,
    			            0xf0000: 0x80401040,
    			            0x8000: 0x80001040,
    			            0x18000: 0x40,
    			            0x28000: 0x80400040,
    			            0x38000: 0x80001000,
    			            0x48000: 0x401000,
    			            0x58000: 0x80401040,
    			            0x68000: 0x0,
    			            0x78000: 0x80400000,
    			            0x88000: 0x1000,
    			            0x98000: 0x80401000,
    			            0xa8000: 0x400000,
    			            0xb8000: 0x1040,
    			            0xc8000: 0x80000000,
    			            0xd8000: 0x400040,
    			            0xe8000: 0x401040,
    			            0xf8000: 0x80000040,
    			            0x100000: 0x400040,
    			            0x110000: 0x401000,
    			            0x120000: 0x80000040,
    			            0x130000: 0x0,
    			            0x140000: 0x1040,
    			            0x150000: 0x80400040,
    			            0x160000: 0x80401000,
    			            0x170000: 0x80001040,
    			            0x180000: 0x80401040,
    			            0x190000: 0x80000000,
    			            0x1a0000: 0x80400000,
    			            0x1b0000: 0x401040,
    			            0x1c0000: 0x80001000,
    			            0x1d0000: 0x400000,
    			            0x1e0000: 0x40,
    			            0x1f0000: 0x1000,
    			            0x108000: 0x80400000,
    			            0x118000: 0x80401040,
    			            0x128000: 0x0,
    			            0x138000: 0x401000,
    			            0x148000: 0x400040,
    			            0x158000: 0x80000000,
    			            0x168000: 0x80001040,
    			            0x178000: 0x40,
    			            0x188000: 0x80000040,
    			            0x198000: 0x1000,
    			            0x1a8000: 0x80001000,
    			            0x1b8000: 0x80400040,
    			            0x1c8000: 0x1040,
    			            0x1d8000: 0x80401000,
    			            0x1e8000: 0x400000,
    			            0x1f8000: 0x401040
    			        },
    			        {
    			            0x0: 0x80,
    			            0x1000: 0x1040000,
    			            0x2000: 0x40000,
    			            0x3000: 0x20000000,
    			            0x4000: 0x20040080,
    			            0x5000: 0x1000080,
    			            0x6000: 0x21000080,
    			            0x7000: 0x40080,
    			            0x8000: 0x1000000,
    			            0x9000: 0x20040000,
    			            0xa000: 0x20000080,
    			            0xb000: 0x21040080,
    			            0xc000: 0x21040000,
    			            0xd000: 0x0,
    			            0xe000: 0x1040080,
    			            0xf000: 0x21000000,
    			            0x800: 0x1040080,
    			            0x1800: 0x21000080,
    			            0x2800: 0x80,
    			            0x3800: 0x1040000,
    			            0x4800: 0x40000,
    			            0x5800: 0x20040080,
    			            0x6800: 0x21040000,
    			            0x7800: 0x20000000,
    			            0x8800: 0x20040000,
    			            0x9800: 0x0,
    			            0xa800: 0x21040080,
    			            0xb800: 0x1000080,
    			            0xc800: 0x20000080,
    			            0xd800: 0x21000000,
    			            0xe800: 0x1000000,
    			            0xf800: 0x40080,
    			            0x10000: 0x40000,
    			            0x11000: 0x80,
    			            0x12000: 0x20000000,
    			            0x13000: 0x21000080,
    			            0x14000: 0x1000080,
    			            0x15000: 0x21040000,
    			            0x16000: 0x20040080,
    			            0x17000: 0x1000000,
    			            0x18000: 0x21040080,
    			            0x19000: 0x21000000,
    			            0x1a000: 0x1040000,
    			            0x1b000: 0x20040000,
    			            0x1c000: 0x40080,
    			            0x1d000: 0x20000080,
    			            0x1e000: 0x0,
    			            0x1f000: 0x1040080,
    			            0x10800: 0x21000080,
    			            0x11800: 0x1000000,
    			            0x12800: 0x1040000,
    			            0x13800: 0x20040080,
    			            0x14800: 0x20000000,
    			            0x15800: 0x1040080,
    			            0x16800: 0x80,
    			            0x17800: 0x21040000,
    			            0x18800: 0x40080,
    			            0x19800: 0x21040080,
    			            0x1a800: 0x0,
    			            0x1b800: 0x21000000,
    			            0x1c800: 0x1000080,
    			            0x1d800: 0x40000,
    			            0x1e800: 0x20040000,
    			            0x1f800: 0x20000080
    			        },
    			        {
    			            0x0: 0x10000008,
    			            0x100: 0x2000,
    			            0x200: 0x10200000,
    			            0x300: 0x10202008,
    			            0x400: 0x10002000,
    			            0x500: 0x200000,
    			            0x600: 0x200008,
    			            0x700: 0x10000000,
    			            0x800: 0x0,
    			            0x900: 0x10002008,
    			            0xa00: 0x202000,
    			            0xb00: 0x8,
    			            0xc00: 0x10200008,
    			            0xd00: 0x202008,
    			            0xe00: 0x2008,
    			            0xf00: 0x10202000,
    			            0x80: 0x10200000,
    			            0x180: 0x10202008,
    			            0x280: 0x8,
    			            0x380: 0x200000,
    			            0x480: 0x202008,
    			            0x580: 0x10000008,
    			            0x680: 0x10002000,
    			            0x780: 0x2008,
    			            0x880: 0x200008,
    			            0x980: 0x2000,
    			            0xa80: 0x10002008,
    			            0xb80: 0x10200008,
    			            0xc80: 0x0,
    			            0xd80: 0x10202000,
    			            0xe80: 0x202000,
    			            0xf80: 0x10000000,
    			            0x1000: 0x10002000,
    			            0x1100: 0x10200008,
    			            0x1200: 0x10202008,
    			            0x1300: 0x2008,
    			            0x1400: 0x200000,
    			            0x1500: 0x10000000,
    			            0x1600: 0x10000008,
    			            0x1700: 0x202000,
    			            0x1800: 0x202008,
    			            0x1900: 0x0,
    			            0x1a00: 0x8,
    			            0x1b00: 0x10200000,
    			            0x1c00: 0x2000,
    			            0x1d00: 0x10002008,
    			            0x1e00: 0x10202000,
    			            0x1f00: 0x200008,
    			            0x1080: 0x8,
    			            0x1180: 0x202000,
    			            0x1280: 0x200000,
    			            0x1380: 0x10000008,
    			            0x1480: 0x10002000,
    			            0x1580: 0x2008,
    			            0x1680: 0x10202008,
    			            0x1780: 0x10200000,
    			            0x1880: 0x10202000,
    			            0x1980: 0x10200008,
    			            0x1a80: 0x2000,
    			            0x1b80: 0x202008,
    			            0x1c80: 0x200008,
    			            0x1d80: 0x0,
    			            0x1e80: 0x10000000,
    			            0x1f80: 0x10002008
    			        },
    			        {
    			            0x0: 0x100000,
    			            0x10: 0x2000401,
    			            0x20: 0x400,
    			            0x30: 0x100401,
    			            0x40: 0x2100401,
    			            0x50: 0x0,
    			            0x60: 0x1,
    			            0x70: 0x2100001,
    			            0x80: 0x2000400,
    			            0x90: 0x100001,
    			            0xa0: 0x2000001,
    			            0xb0: 0x2100400,
    			            0xc0: 0x2100000,
    			            0xd0: 0x401,
    			            0xe0: 0x100400,
    			            0xf0: 0x2000000,
    			            0x8: 0x2100001,
    			            0x18: 0x0,
    			            0x28: 0x2000401,
    			            0x38: 0x2100400,
    			            0x48: 0x100000,
    			            0x58: 0x2000001,
    			            0x68: 0x2000000,
    			            0x78: 0x401,
    			            0x88: 0x100401,
    			            0x98: 0x2000400,
    			            0xa8: 0x2100000,
    			            0xb8: 0x100001,
    			            0xc8: 0x400,
    			            0xd8: 0x2100401,
    			            0xe8: 0x1,
    			            0xf8: 0x100400,
    			            0x100: 0x2000000,
    			            0x110: 0x100000,
    			            0x120: 0x2000401,
    			            0x130: 0x2100001,
    			            0x140: 0x100001,
    			            0x150: 0x2000400,
    			            0x160: 0x2100400,
    			            0x170: 0x100401,
    			            0x180: 0x401,
    			            0x190: 0x2100401,
    			            0x1a0: 0x100400,
    			            0x1b0: 0x1,
    			            0x1c0: 0x0,
    			            0x1d0: 0x2100000,
    			            0x1e0: 0x2000001,
    			            0x1f0: 0x400,
    			            0x108: 0x100400,
    			            0x118: 0x2000401,
    			            0x128: 0x2100001,
    			            0x138: 0x1,
    			            0x148: 0x2000000,
    			            0x158: 0x100000,
    			            0x168: 0x401,
    			            0x178: 0x2100400,
    			            0x188: 0x2000001,
    			            0x198: 0x2100000,
    			            0x1a8: 0x0,
    			            0x1b8: 0x2100401,
    			            0x1c8: 0x100401,
    			            0x1d8: 0x400,
    			            0x1e8: 0x2000400,
    			            0x1f8: 0x100001
    			        },
    			        {
    			            0x0: 0x8000820,
    			            0x1: 0x20000,
    			            0x2: 0x8000000,
    			            0x3: 0x20,
    			            0x4: 0x20020,
    			            0x5: 0x8020820,
    			            0x6: 0x8020800,
    			            0x7: 0x800,
    			            0x8: 0x8020000,
    			            0x9: 0x8000800,
    			            0xa: 0x20800,
    			            0xb: 0x8020020,
    			            0xc: 0x820,
    			            0xd: 0x0,
    			            0xe: 0x8000020,
    			            0xf: 0x20820,
    			            0x80000000: 0x800,
    			            0x80000001: 0x8020820,
    			            0x80000002: 0x8000820,
    			            0x80000003: 0x8000000,
    			            0x80000004: 0x8020000,
    			            0x80000005: 0x20800,
    			            0x80000006: 0x20820,
    			            0x80000007: 0x20,
    			            0x80000008: 0x8000020,
    			            0x80000009: 0x820,
    			            0x8000000a: 0x20020,
    			            0x8000000b: 0x8020800,
    			            0x8000000c: 0x0,
    			            0x8000000d: 0x8020020,
    			            0x8000000e: 0x8000800,
    			            0x8000000f: 0x20000,
    			            0x10: 0x20820,
    			            0x11: 0x8020800,
    			            0x12: 0x20,
    			            0x13: 0x800,
    			            0x14: 0x8000800,
    			            0x15: 0x8000020,
    			            0x16: 0x8020020,
    			            0x17: 0x20000,
    			            0x18: 0x0,
    			            0x19: 0x20020,
    			            0x1a: 0x8020000,
    			            0x1b: 0x8000820,
    			            0x1c: 0x8020820,
    			            0x1d: 0x20800,
    			            0x1e: 0x820,
    			            0x1f: 0x8000000,
    			            0x80000010: 0x20000,
    			            0x80000011: 0x800,
    			            0x80000012: 0x8020020,
    			            0x80000013: 0x20820,
    			            0x80000014: 0x20,
    			            0x80000015: 0x8020000,
    			            0x80000016: 0x8000000,
    			            0x80000017: 0x8000820,
    			            0x80000018: 0x8020820,
    			            0x80000019: 0x8000020,
    			            0x8000001a: 0x8000800,
    			            0x8000001b: 0x0,
    			            0x8000001c: 0x20800,
    			            0x8000001d: 0x820,
    			            0x8000001e: 0x20020,
    			            0x8000001f: 0x8020800
    			        }
    			    ];

    			    // Masks that select the SBOX input
    			    var SBOX_MASK = [
    			        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
    			        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
    			    ];

    			    /**
    			     * DES block cipher algorithm.
    			     */
    			    var DES = C_algo.DES = BlockCipher.extend({
    			        _doReset: function () {
    			            // Shortcuts
    			            var key = this._key;
    			            var keyWords = key.words;

    			            // Select 56 bits according to PC1
    			            var keyBits = [];
    			            for (var i = 0; i < 56; i++) {
    			                var keyBitPos = PC1[i] - 1;
    			                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
    			            }

    			            // Assemble 16 subkeys
    			            var subKeys = this._subKeys = [];
    			            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
    			                // Create subkey
    			                var subKey = subKeys[nSubKey] = [];

    			                // Shortcut
    			                var bitShift = BIT_SHIFTS[nSubKey];

    			                // Select 48 bits according to PC2
    			                for (var i = 0; i < 24; i++) {
    			                    // Select from the left 28 key bits
    			                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

    			                    // Select from the right 28 key bits
    			                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
    			                }

    			                // Since each subkey is applied to an expanded 32-bit input,
    			                // the subkey can be broken into 8 values scaled to 32-bits,
    			                // which allows the key to be used without expansion
    			                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
    			                for (var i = 1; i < 7; i++) {
    			                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
    			                }
    			                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
    			            }

    			            // Compute inverse subkeys
    			            var invSubKeys = this._invSubKeys = [];
    			            for (var i = 0; i < 16; i++) {
    			                invSubKeys[i] = subKeys[15 - i];
    			            }
    			        },

    			        encryptBlock: function (M, offset) {
    			            this._doCryptBlock(M, offset, this._subKeys);
    			        },

    			        decryptBlock: function (M, offset) {
    			            this._doCryptBlock(M, offset, this._invSubKeys);
    			        },

    			        _doCryptBlock: function (M, offset, subKeys) {
    			            // Get input
    			            this._lBlock = M[offset];
    			            this._rBlock = M[offset + 1];

    			            // Initial permutation
    			            exchangeLR.call(this, 4,  0x0f0f0f0f);
    			            exchangeLR.call(this, 16, 0x0000ffff);
    			            exchangeRL.call(this, 2,  0x33333333);
    			            exchangeRL.call(this, 8,  0x00ff00ff);
    			            exchangeLR.call(this, 1,  0x55555555);

    			            // Rounds
    			            for (var round = 0; round < 16; round++) {
    			                // Shortcuts
    			                var subKey = subKeys[round];
    			                var lBlock = this._lBlock;
    			                var rBlock = this._rBlock;

    			                // Feistel function
    			                var f = 0;
    			                for (var i = 0; i < 8; i++) {
    			                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
    			                }
    			                this._lBlock = rBlock;
    			                this._rBlock = lBlock ^ f;
    			            }

    			            // Undo swap from last round
    			            var t = this._lBlock;
    			            this._lBlock = this._rBlock;
    			            this._rBlock = t;

    			            // Final permutation
    			            exchangeLR.call(this, 1,  0x55555555);
    			            exchangeRL.call(this, 8,  0x00ff00ff);
    			            exchangeRL.call(this, 2,  0x33333333);
    			            exchangeLR.call(this, 16, 0x0000ffff);
    			            exchangeLR.call(this, 4,  0x0f0f0f0f);

    			            // Set output
    			            M[offset] = this._lBlock;
    			            M[offset + 1] = this._rBlock;
    			        },

    			        keySize: 64/32,

    			        ivSize: 64/32,

    			        blockSize: 64/32
    			    });

    			    // Swap bits across the left and right words
    			    function exchangeLR(offset, mask) {
    			        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
    			        this._rBlock ^= t;
    			        this._lBlock ^= t << offset;
    			    }

    			    function exchangeRL(offset, mask) {
    			        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
    			        this._lBlock ^= t;
    			        this._rBlock ^= t << offset;
    			    }

    			    /**
    			     * Shortcut functions to the cipher's object interface.
    			     *
    			     * @example
    			     *
    			     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
    			     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
    			     */
    			    C.DES = BlockCipher._createHelper(DES);

    			    /**
    			     * Triple-DES block cipher algorithm.
    			     */
    			    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
    			        _doReset: function () {
    			            // Shortcuts
    			            var key = this._key;
    			            var keyWords = key.words;
    			            // Make sure the key length is valid (64, 128 or >= 192 bit)
    			            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
    			                throw new Error('Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.');
    			            }

    			            // Extend the key according to the keying options defined in 3DES standard
    			            var key1 = keyWords.slice(0, 2);
    			            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
    			            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);

    			            // Create DES instances
    			            this._des1 = DES.createEncryptor(WordArray.create(key1));
    			            this._des2 = DES.createEncryptor(WordArray.create(key2));
    			            this._des3 = DES.createEncryptor(WordArray.create(key3));
    			        },

    			        encryptBlock: function (M, offset) {
    			            this._des1.encryptBlock(M, offset);
    			            this._des2.decryptBlock(M, offset);
    			            this._des3.encryptBlock(M, offset);
    			        },

    			        decryptBlock: function (M, offset) {
    			            this._des3.decryptBlock(M, offset);
    			            this._des2.encryptBlock(M, offset);
    			            this._des1.decryptBlock(M, offset);
    			        },

    			        keySize: 192/32,

    			        ivSize: 64/32,

    			        blockSize: 64/32
    			    });

    			    /**
    			     * Shortcut functions to the cipher's object interface.
    			     *
    			     * @example
    			     *
    			     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
    			     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
    			     */
    			    C.TripleDES = BlockCipher._createHelper(TripleDES);
    			}());


    			return CryptoJS.TripleDES;

    		})); 
    	} (tripledes));
    	return tripledes.exports;
    }

    var rc4 = {exports: {}};

    var hasRequiredRc4;

    function requireRc4 () {
    	if (hasRequiredRc4) return rc4.exports;
    	hasRequiredRc4 = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function () {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var StreamCipher = C_lib.StreamCipher;
    			    var C_algo = C.algo;

    			    /**
    			     * RC4 stream cipher algorithm.
    			     */
    			    var RC4 = C_algo.RC4 = StreamCipher.extend({
    			        _doReset: function () {
    			            // Shortcuts
    			            var key = this._key;
    			            var keyWords = key.words;
    			            var keySigBytes = key.sigBytes;

    			            // Init sbox
    			            var S = this._S = [];
    			            for (var i = 0; i < 256; i++) {
    			                S[i] = i;
    			            }

    			            // Key setup
    			            for (var i = 0, j = 0; i < 256; i++) {
    			                var keyByteIndex = i % keySigBytes;
    			                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

    			                j = (j + S[i] + keyByte) % 256;

    			                // Swap
    			                var t = S[i];
    			                S[i] = S[j];
    			                S[j] = t;
    			            }

    			            // Counters
    			            this._i = this._j = 0;
    			        },

    			        _doProcessBlock: function (M, offset) {
    			            M[offset] ^= generateKeystreamWord.call(this);
    			        },

    			        keySize: 256/32,

    			        ivSize: 0
    			    });

    			    function generateKeystreamWord() {
    			        // Shortcuts
    			        var S = this._S;
    			        var i = this._i;
    			        var j = this._j;

    			        // Generate keystream word
    			        var keystreamWord = 0;
    			        for (var n = 0; n < 4; n++) {
    			            i = (i + 1) % 256;
    			            j = (j + S[i]) % 256;

    			            // Swap
    			            var t = S[i];
    			            S[i] = S[j];
    			            S[j] = t;

    			            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
    			        }

    			        // Update counters
    			        this._i = i;
    			        this._j = j;

    			        return keystreamWord;
    			    }

    			    /**
    			     * Shortcut functions to the cipher's object interface.
    			     *
    			     * @example
    			     *
    			     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
    			     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
    			     */
    			    C.RC4 = StreamCipher._createHelper(RC4);

    			    /**
    			     * Modified RC4 stream cipher algorithm.
    			     */
    			    var RC4Drop = C_algo.RC4Drop = RC4.extend({
    			        /**
    			         * Configuration options.
    			         *
    			         * @property {number} drop The number of keystream words to drop. Default 192
    			         */
    			        cfg: RC4.cfg.extend({
    			            drop: 192
    			        }),

    			        _doReset: function () {
    			            RC4._doReset.call(this);

    			            // Drop
    			            for (var i = this.cfg.drop; i > 0; i--) {
    			                generateKeystreamWord.call(this);
    			            }
    			        }
    			    });

    			    /**
    			     * Shortcut functions to the cipher's object interface.
    			     *
    			     * @example
    			     *
    			     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
    			     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
    			     */
    			    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
    			}());


    			return CryptoJS.RC4;

    		})); 
    	} (rc4));
    	return rc4.exports;
    }

    var rabbit = {exports: {}};

    var hasRequiredRabbit;

    function requireRabbit () {
    	if (hasRequiredRabbit) return rabbit.exports;
    	hasRequiredRabbit = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function () {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var StreamCipher = C_lib.StreamCipher;
    			    var C_algo = C.algo;

    			    // Reusable objects
    			    var S  = [];
    			    var C_ = [];
    			    var G  = [];

    			    /**
    			     * Rabbit stream cipher algorithm
    			     */
    			    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
    			        _doReset: function () {
    			            // Shortcuts
    			            var K = this._key.words;
    			            var iv = this.cfg.iv;

    			            // Swap endian
    			            for (var i = 0; i < 4; i++) {
    			                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |
    			                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);
    			            }

    			            // Generate initial state values
    			            var X = this._X = [
    			                K[0], (K[3] << 16) | (K[2] >>> 16),
    			                K[1], (K[0] << 16) | (K[3] >>> 16),
    			                K[2], (K[1] << 16) | (K[0] >>> 16),
    			                K[3], (K[2] << 16) | (K[1] >>> 16)
    			            ];

    			            // Generate initial counter values
    			            var C = this._C = [
    			                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
    			                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
    			                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
    			                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
    			            ];

    			            // Carry bit
    			            this._b = 0;

    			            // Iterate the system four times
    			            for (var i = 0; i < 4; i++) {
    			                nextState.call(this);
    			            }

    			            // Modify the counters
    			            for (var i = 0; i < 8; i++) {
    			                C[i] ^= X[(i + 4) & 7];
    			            }

    			            // IV setup
    			            if (iv) {
    			                // Shortcuts
    			                var IV = iv.words;
    			                var IV_0 = IV[0];
    			                var IV_1 = IV[1];

    			                // Generate four subvectors
    			                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
    			                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
    			                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
    			                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

    			                // Modify counter values
    			                C[0] ^= i0;
    			                C[1] ^= i1;
    			                C[2] ^= i2;
    			                C[3] ^= i3;
    			                C[4] ^= i0;
    			                C[5] ^= i1;
    			                C[6] ^= i2;
    			                C[7] ^= i3;

    			                // Iterate the system four times
    			                for (var i = 0; i < 4; i++) {
    			                    nextState.call(this);
    			                }
    			            }
    			        },

    			        _doProcessBlock: function (M, offset) {
    			            // Shortcut
    			            var X = this._X;

    			            // Iterate the system
    			            nextState.call(this);

    			            // Generate four keystream words
    			            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
    			            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
    			            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
    			            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

    			            for (var i = 0; i < 4; i++) {
    			                // Swap endian
    			                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
    			                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

    			                // Encrypt
    			                M[offset + i] ^= S[i];
    			            }
    			        },

    			        blockSize: 128/32,

    			        ivSize: 64/32
    			    });

    			    function nextState() {
    			        // Shortcuts
    			        var X = this._X;
    			        var C = this._C;

    			        // Save old counter values
    			        for (var i = 0; i < 8; i++) {
    			            C_[i] = C[i];
    			        }

    			        // Calculate new counter values
    			        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
    			        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
    			        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
    			        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
    			        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
    			        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
    			        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
    			        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
    			        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

    			        // Calculate the g-values
    			        for (var i = 0; i < 8; i++) {
    			            var gx = X[i] + C[i];

    			            // Construct high and low argument for squaring
    			            var ga = gx & 0xffff;
    			            var gb = gx >>> 16;

    			            // Calculate high and low result of squaring
    			            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
    			            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

    			            // High XOR low
    			            G[i] = gh ^ gl;
    			        }

    			        // Calculate new state values
    			        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
    			        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
    			        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
    			        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
    			        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
    			        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
    			        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
    			        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
    			    }

    			    /**
    			     * Shortcut functions to the cipher's object interface.
    			     *
    			     * @example
    			     *
    			     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
    			     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
    			     */
    			    C.Rabbit = StreamCipher._createHelper(Rabbit);
    			}());


    			return CryptoJS.Rabbit;

    		})); 
    	} (rabbit));
    	return rabbit.exports;
    }

    var rabbitLegacy = {exports: {}};

    var hasRequiredRabbitLegacy;

    function requireRabbitLegacy () {
    	if (hasRequiredRabbitLegacy) return rabbitLegacy.exports;
    	hasRequiredRabbitLegacy = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function () {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var StreamCipher = C_lib.StreamCipher;
    			    var C_algo = C.algo;

    			    // Reusable objects
    			    var S  = [];
    			    var C_ = [];
    			    var G  = [];

    			    /**
    			     * Rabbit stream cipher algorithm.
    			     *
    			     * This is a legacy version that neglected to convert the key to little-endian.
    			     * This error doesn't affect the cipher's security,
    			     * but it does affect its compatibility with other implementations.
    			     */
    			    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
    			        _doReset: function () {
    			            // Shortcuts
    			            var K = this._key.words;
    			            var iv = this.cfg.iv;

    			            // Generate initial state values
    			            var X = this._X = [
    			                K[0], (K[3] << 16) | (K[2] >>> 16),
    			                K[1], (K[0] << 16) | (K[3] >>> 16),
    			                K[2], (K[1] << 16) | (K[0] >>> 16),
    			                K[3], (K[2] << 16) | (K[1] >>> 16)
    			            ];

    			            // Generate initial counter values
    			            var C = this._C = [
    			                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
    			                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
    			                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
    			                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
    			            ];

    			            // Carry bit
    			            this._b = 0;

    			            // Iterate the system four times
    			            for (var i = 0; i < 4; i++) {
    			                nextState.call(this);
    			            }

    			            // Modify the counters
    			            for (var i = 0; i < 8; i++) {
    			                C[i] ^= X[(i + 4) & 7];
    			            }

    			            // IV setup
    			            if (iv) {
    			                // Shortcuts
    			                var IV = iv.words;
    			                var IV_0 = IV[0];
    			                var IV_1 = IV[1];

    			                // Generate four subvectors
    			                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
    			                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
    			                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
    			                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

    			                // Modify counter values
    			                C[0] ^= i0;
    			                C[1] ^= i1;
    			                C[2] ^= i2;
    			                C[3] ^= i3;
    			                C[4] ^= i0;
    			                C[5] ^= i1;
    			                C[6] ^= i2;
    			                C[7] ^= i3;

    			                // Iterate the system four times
    			                for (var i = 0; i < 4; i++) {
    			                    nextState.call(this);
    			                }
    			            }
    			        },

    			        _doProcessBlock: function (M, offset) {
    			            // Shortcut
    			            var X = this._X;

    			            // Iterate the system
    			            nextState.call(this);

    			            // Generate four keystream words
    			            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
    			            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
    			            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
    			            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

    			            for (var i = 0; i < 4; i++) {
    			                // Swap endian
    			                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
    			                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

    			                // Encrypt
    			                M[offset + i] ^= S[i];
    			            }
    			        },

    			        blockSize: 128/32,

    			        ivSize: 64/32
    			    });

    			    function nextState() {
    			        // Shortcuts
    			        var X = this._X;
    			        var C = this._C;

    			        // Save old counter values
    			        for (var i = 0; i < 8; i++) {
    			            C_[i] = C[i];
    			        }

    			        // Calculate new counter values
    			        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
    			        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
    			        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
    			        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
    			        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
    			        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
    			        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
    			        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
    			        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

    			        // Calculate the g-values
    			        for (var i = 0; i < 8; i++) {
    			            var gx = X[i] + C[i];

    			            // Construct high and low argument for squaring
    			            var ga = gx & 0xffff;
    			            var gb = gx >>> 16;

    			            // Calculate high and low result of squaring
    			            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
    			            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

    			            // High XOR low
    			            G[i] = gh ^ gl;
    			        }

    			        // Calculate new state values
    			        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
    			        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
    			        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
    			        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
    			        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
    			        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
    			        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
    			        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
    			    }

    			    /**
    			     * Shortcut functions to the cipher's object interface.
    			     *
    			     * @example
    			     *
    			     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
    			     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
    			     */
    			    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
    			}());


    			return CryptoJS.RabbitLegacy;

    		})); 
    	} (rabbitLegacy));
    	return rabbitLegacy.exports;
    }

    var blowfish = {exports: {}};

    var hasRequiredBlowfish;

    function requireBlowfish () {
    	if (hasRequiredBlowfish) return blowfish.exports;
    	hasRequiredBlowfish = 1;
    	(function (module, exports) {
    (function (root, factory, undef) {
    			{
    				// CommonJS
    				module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
    			}
    		}(commonjsGlobal, function (CryptoJS) {

    			(function () {
    			    // Shortcuts
    			    var C = CryptoJS;
    			    var C_lib = C.lib;
    			    var BlockCipher = C_lib.BlockCipher;
    			    var C_algo = C.algo;

    			    const N = 16;

    			    //Origin pbox and sbox, derived from PI
    			    const ORIG_P = [
    			        0x243F6A88, 0x85A308D3, 0x13198A2E, 0x03707344,
    			        0xA4093822, 0x299F31D0, 0x082EFA98, 0xEC4E6C89,
    			        0x452821E6, 0x38D01377, 0xBE5466CF, 0x34E90C6C,
    			        0xC0AC29B7, 0xC97C50DD, 0x3F84D5B5, 0xB5470917,
    			        0x9216D5D9, 0x8979FB1B
    			    ];

    			    const ORIG_S = [
    			        [   0xD1310BA6, 0x98DFB5AC, 0x2FFD72DB, 0xD01ADFB7,
    			            0xB8E1AFED, 0x6A267E96, 0xBA7C9045, 0xF12C7F99,
    			            0x24A19947, 0xB3916CF7, 0x0801F2E2, 0x858EFC16,
    			            0x636920D8, 0x71574E69, 0xA458FEA3, 0xF4933D7E,
    			            0x0D95748F, 0x728EB658, 0x718BCD58, 0x82154AEE,
    			            0x7B54A41D, 0xC25A59B5, 0x9C30D539, 0x2AF26013,
    			            0xC5D1B023, 0x286085F0, 0xCA417918, 0xB8DB38EF,
    			            0x8E79DCB0, 0x603A180E, 0x6C9E0E8B, 0xB01E8A3E,
    			            0xD71577C1, 0xBD314B27, 0x78AF2FDA, 0x55605C60,
    			            0xE65525F3, 0xAA55AB94, 0x57489862, 0x63E81440,
    			            0x55CA396A, 0x2AAB10B6, 0xB4CC5C34, 0x1141E8CE,
    			            0xA15486AF, 0x7C72E993, 0xB3EE1411, 0x636FBC2A,
    			            0x2BA9C55D, 0x741831F6, 0xCE5C3E16, 0x9B87931E,
    			            0xAFD6BA33, 0x6C24CF5C, 0x7A325381, 0x28958677,
    			            0x3B8F4898, 0x6B4BB9AF, 0xC4BFE81B, 0x66282193,
    			            0x61D809CC, 0xFB21A991, 0x487CAC60, 0x5DEC8032,
    			            0xEF845D5D, 0xE98575B1, 0xDC262302, 0xEB651B88,
    			            0x23893E81, 0xD396ACC5, 0x0F6D6FF3, 0x83F44239,
    			            0x2E0B4482, 0xA4842004, 0x69C8F04A, 0x9E1F9B5E,
    			            0x21C66842, 0xF6E96C9A, 0x670C9C61, 0xABD388F0,
    			            0x6A51A0D2, 0xD8542F68, 0x960FA728, 0xAB5133A3,
    			            0x6EEF0B6C, 0x137A3BE4, 0xBA3BF050, 0x7EFB2A98,
    			            0xA1F1651D, 0x39AF0176, 0x66CA593E, 0x82430E88,
    			            0x8CEE8619, 0x456F9FB4, 0x7D84A5C3, 0x3B8B5EBE,
    			            0xE06F75D8, 0x85C12073, 0x401A449F, 0x56C16AA6,
    			            0x4ED3AA62, 0x363F7706, 0x1BFEDF72, 0x429B023D,
    			            0x37D0D724, 0xD00A1248, 0xDB0FEAD3, 0x49F1C09B,
    			            0x075372C9, 0x80991B7B, 0x25D479D8, 0xF6E8DEF7,
    			            0xE3FE501A, 0xB6794C3B, 0x976CE0BD, 0x04C006BA,
    			            0xC1A94FB6, 0x409F60C4, 0x5E5C9EC2, 0x196A2463,
    			            0x68FB6FAF, 0x3E6C53B5, 0x1339B2EB, 0x3B52EC6F,
    			            0x6DFC511F, 0x9B30952C, 0xCC814544, 0xAF5EBD09,
    			            0xBEE3D004, 0xDE334AFD, 0x660F2807, 0x192E4BB3,
    			            0xC0CBA857, 0x45C8740F, 0xD20B5F39, 0xB9D3FBDB,
    			            0x5579C0BD, 0x1A60320A, 0xD6A100C6, 0x402C7279,
    			            0x679F25FE, 0xFB1FA3CC, 0x8EA5E9F8, 0xDB3222F8,
    			            0x3C7516DF, 0xFD616B15, 0x2F501EC8, 0xAD0552AB,
    			            0x323DB5FA, 0xFD238760, 0x53317B48, 0x3E00DF82,
    			            0x9E5C57BB, 0xCA6F8CA0, 0x1A87562E, 0xDF1769DB,
    			            0xD542A8F6, 0x287EFFC3, 0xAC6732C6, 0x8C4F5573,
    			            0x695B27B0, 0xBBCA58C8, 0xE1FFA35D, 0xB8F011A0,
    			            0x10FA3D98, 0xFD2183B8, 0x4AFCB56C, 0x2DD1D35B,
    			            0x9A53E479, 0xB6F84565, 0xD28E49BC, 0x4BFB9790,
    			            0xE1DDF2DA, 0xA4CB7E33, 0x62FB1341, 0xCEE4C6E8,
    			            0xEF20CADA, 0x36774C01, 0xD07E9EFE, 0x2BF11FB4,
    			            0x95DBDA4D, 0xAE909198, 0xEAAD8E71, 0x6B93D5A0,
    			            0xD08ED1D0, 0xAFC725E0, 0x8E3C5B2F, 0x8E7594B7,
    			            0x8FF6E2FB, 0xF2122B64, 0x8888B812, 0x900DF01C,
    			            0x4FAD5EA0, 0x688FC31C, 0xD1CFF191, 0xB3A8C1AD,
    			            0x2F2F2218, 0xBE0E1777, 0xEA752DFE, 0x8B021FA1,
    			            0xE5A0CC0F, 0xB56F74E8, 0x18ACF3D6, 0xCE89E299,
    			            0xB4A84FE0, 0xFD13E0B7, 0x7CC43B81, 0xD2ADA8D9,
    			            0x165FA266, 0x80957705, 0x93CC7314, 0x211A1477,
    			            0xE6AD2065, 0x77B5FA86, 0xC75442F5, 0xFB9D35CF,
    			            0xEBCDAF0C, 0x7B3E89A0, 0xD6411BD3, 0xAE1E7E49,
    			            0x00250E2D, 0x2071B35E, 0x226800BB, 0x57B8E0AF,
    			            0x2464369B, 0xF009B91E, 0x5563911D, 0x59DFA6AA,
    			            0x78C14389, 0xD95A537F, 0x207D5BA2, 0x02E5B9C5,
    			            0x83260376, 0x6295CFA9, 0x11C81968, 0x4E734A41,
    			            0xB3472DCA, 0x7B14A94A, 0x1B510052, 0x9A532915,
    			            0xD60F573F, 0xBC9BC6E4, 0x2B60A476, 0x81E67400,
    			            0x08BA6FB5, 0x571BE91F, 0xF296EC6B, 0x2A0DD915,
    			            0xB6636521, 0xE7B9F9B6, 0xFF34052E, 0xC5855664,
    			            0x53B02D5D, 0xA99F8FA1, 0x08BA4799, 0x6E85076A   ],
    			        [   0x4B7A70E9, 0xB5B32944, 0xDB75092E, 0xC4192623,
    			            0xAD6EA6B0, 0x49A7DF7D, 0x9CEE60B8, 0x8FEDB266,
    			            0xECAA8C71, 0x699A17FF, 0x5664526C, 0xC2B19EE1,
    			            0x193602A5, 0x75094C29, 0xA0591340, 0xE4183A3E,
    			            0x3F54989A, 0x5B429D65, 0x6B8FE4D6, 0x99F73FD6,
    			            0xA1D29C07, 0xEFE830F5, 0x4D2D38E6, 0xF0255DC1,
    			            0x4CDD2086, 0x8470EB26, 0x6382E9C6, 0x021ECC5E,
    			            0x09686B3F, 0x3EBAEFC9, 0x3C971814, 0x6B6A70A1,
    			            0x687F3584, 0x52A0E286, 0xB79C5305, 0xAA500737,
    			            0x3E07841C, 0x7FDEAE5C, 0x8E7D44EC, 0x5716F2B8,
    			            0xB03ADA37, 0xF0500C0D, 0xF01C1F04, 0x0200B3FF,
    			            0xAE0CF51A, 0x3CB574B2, 0x25837A58, 0xDC0921BD,
    			            0xD19113F9, 0x7CA92FF6, 0x94324773, 0x22F54701,
    			            0x3AE5E581, 0x37C2DADC, 0xC8B57634, 0x9AF3DDA7,
    			            0xA9446146, 0x0FD0030E, 0xECC8C73E, 0xA4751E41,
    			            0xE238CD99, 0x3BEA0E2F, 0x3280BBA1, 0x183EB331,
    			            0x4E548B38, 0x4F6DB908, 0x6F420D03, 0xF60A04BF,
    			            0x2CB81290, 0x24977C79, 0x5679B072, 0xBCAF89AF,
    			            0xDE9A771F, 0xD9930810, 0xB38BAE12, 0xDCCF3F2E,
    			            0x5512721F, 0x2E6B7124, 0x501ADDE6, 0x9F84CD87,
    			            0x7A584718, 0x7408DA17, 0xBC9F9ABC, 0xE94B7D8C,
    			            0xEC7AEC3A, 0xDB851DFA, 0x63094366, 0xC464C3D2,
    			            0xEF1C1847, 0x3215D908, 0xDD433B37, 0x24C2BA16,
    			            0x12A14D43, 0x2A65C451, 0x50940002, 0x133AE4DD,
    			            0x71DFF89E, 0x10314E55, 0x81AC77D6, 0x5F11199B,
    			            0x043556F1, 0xD7A3C76B, 0x3C11183B, 0x5924A509,
    			            0xF28FE6ED, 0x97F1FBFA, 0x9EBABF2C, 0x1E153C6E,
    			            0x86E34570, 0xEAE96FB1, 0x860E5E0A, 0x5A3E2AB3,
    			            0x771FE71C, 0x4E3D06FA, 0x2965DCB9, 0x99E71D0F,
    			            0x803E89D6, 0x5266C825, 0x2E4CC978, 0x9C10B36A,
    			            0xC6150EBA, 0x94E2EA78, 0xA5FC3C53, 0x1E0A2DF4,
    			            0xF2F74EA7, 0x361D2B3D, 0x1939260F, 0x19C27960,
    			            0x5223A708, 0xF71312B6, 0xEBADFE6E, 0xEAC31F66,
    			            0xE3BC4595, 0xA67BC883, 0xB17F37D1, 0x018CFF28,
    			            0xC332DDEF, 0xBE6C5AA5, 0x65582185, 0x68AB9802,
    			            0xEECEA50F, 0xDB2F953B, 0x2AEF7DAD, 0x5B6E2F84,
    			            0x1521B628, 0x29076170, 0xECDD4775, 0x619F1510,
    			            0x13CCA830, 0xEB61BD96, 0x0334FE1E, 0xAA0363CF,
    			            0xB5735C90, 0x4C70A239, 0xD59E9E0B, 0xCBAADE14,
    			            0xEECC86BC, 0x60622CA7, 0x9CAB5CAB, 0xB2F3846E,
    			            0x648B1EAF, 0x19BDF0CA, 0xA02369B9, 0x655ABB50,
    			            0x40685A32, 0x3C2AB4B3, 0x319EE9D5, 0xC021B8F7,
    			            0x9B540B19, 0x875FA099, 0x95F7997E, 0x623D7DA8,
    			            0xF837889A, 0x97E32D77, 0x11ED935F, 0x16681281,
    			            0x0E358829, 0xC7E61FD6, 0x96DEDFA1, 0x7858BA99,
    			            0x57F584A5, 0x1B227263, 0x9B83C3FF, 0x1AC24696,
    			            0xCDB30AEB, 0x532E3054, 0x8FD948E4, 0x6DBC3128,
    			            0x58EBF2EF, 0x34C6FFEA, 0xFE28ED61, 0xEE7C3C73,
    			            0x5D4A14D9, 0xE864B7E3, 0x42105D14, 0x203E13E0,
    			            0x45EEE2B6, 0xA3AAABEA, 0xDB6C4F15, 0xFACB4FD0,
    			            0xC742F442, 0xEF6ABBB5, 0x654F3B1D, 0x41CD2105,
    			            0xD81E799E, 0x86854DC7, 0xE44B476A, 0x3D816250,
    			            0xCF62A1F2, 0x5B8D2646, 0xFC8883A0, 0xC1C7B6A3,
    			            0x7F1524C3, 0x69CB7492, 0x47848A0B, 0x5692B285,
    			            0x095BBF00, 0xAD19489D, 0x1462B174, 0x23820E00,
    			            0x58428D2A, 0x0C55F5EA, 0x1DADF43E, 0x233F7061,
    			            0x3372F092, 0x8D937E41, 0xD65FECF1, 0x6C223BDB,
    			            0x7CDE3759, 0xCBEE7460, 0x4085F2A7, 0xCE77326E,
    			            0xA6078084, 0x19F8509E, 0xE8EFD855, 0x61D99735,
    			            0xA969A7AA, 0xC50C06C2, 0x5A04ABFC, 0x800BCADC,
    			            0x9E447A2E, 0xC3453484, 0xFDD56705, 0x0E1E9EC9,
    			            0xDB73DBD3, 0x105588CD, 0x675FDA79, 0xE3674340,
    			            0xC5C43465, 0x713E38D8, 0x3D28F89E, 0xF16DFF20,
    			            0x153E21E7, 0x8FB03D4A, 0xE6E39F2B, 0xDB83ADF7   ],
    			        [   0xE93D5A68, 0x948140F7, 0xF64C261C, 0x94692934,
    			            0x411520F7, 0x7602D4F7, 0xBCF46B2E, 0xD4A20068,
    			            0xD4082471, 0x3320F46A, 0x43B7D4B7, 0x500061AF,
    			            0x1E39F62E, 0x97244546, 0x14214F74, 0xBF8B8840,
    			            0x4D95FC1D, 0x96B591AF, 0x70F4DDD3, 0x66A02F45,
    			            0xBFBC09EC, 0x03BD9785, 0x7FAC6DD0, 0x31CB8504,
    			            0x96EB27B3, 0x55FD3941, 0xDA2547E6, 0xABCA0A9A,
    			            0x28507825, 0x530429F4, 0x0A2C86DA, 0xE9B66DFB,
    			            0x68DC1462, 0xD7486900, 0x680EC0A4, 0x27A18DEE,
    			            0x4F3FFEA2, 0xE887AD8C, 0xB58CE006, 0x7AF4D6B6,
    			            0xAACE1E7C, 0xD3375FEC, 0xCE78A399, 0x406B2A42,
    			            0x20FE9E35, 0xD9F385B9, 0xEE39D7AB, 0x3B124E8B,
    			            0x1DC9FAF7, 0x4B6D1856, 0x26A36631, 0xEAE397B2,
    			            0x3A6EFA74, 0xDD5B4332, 0x6841E7F7, 0xCA7820FB,
    			            0xFB0AF54E, 0xD8FEB397, 0x454056AC, 0xBA489527,
    			            0x55533A3A, 0x20838D87, 0xFE6BA9B7, 0xD096954B,
    			            0x55A867BC, 0xA1159A58, 0xCCA92963, 0x99E1DB33,
    			            0xA62A4A56, 0x3F3125F9, 0x5EF47E1C, 0x9029317C,
    			            0xFDF8E802, 0x04272F70, 0x80BB155C, 0x05282CE3,
    			            0x95C11548, 0xE4C66D22, 0x48C1133F, 0xC70F86DC,
    			            0x07F9C9EE, 0x41041F0F, 0x404779A4, 0x5D886E17,
    			            0x325F51EB, 0xD59BC0D1, 0xF2BCC18F, 0x41113564,
    			            0x257B7834, 0x602A9C60, 0xDFF8E8A3, 0x1F636C1B,
    			            0x0E12B4C2, 0x02E1329E, 0xAF664FD1, 0xCAD18115,
    			            0x6B2395E0, 0x333E92E1, 0x3B240B62, 0xEEBEB922,
    			            0x85B2A20E, 0xE6BA0D99, 0xDE720C8C, 0x2DA2F728,
    			            0xD0127845, 0x95B794FD, 0x647D0862, 0xE7CCF5F0,
    			            0x5449A36F, 0x877D48FA, 0xC39DFD27, 0xF33E8D1E,
    			            0x0A476341, 0x992EFF74, 0x3A6F6EAB, 0xF4F8FD37,
    			            0xA812DC60, 0xA1EBDDF8, 0x991BE14C, 0xDB6E6B0D,
    			            0xC67B5510, 0x6D672C37, 0x2765D43B, 0xDCD0E804,
    			            0xF1290DC7, 0xCC00FFA3, 0xB5390F92, 0x690FED0B,
    			            0x667B9FFB, 0xCEDB7D9C, 0xA091CF0B, 0xD9155EA3,
    			            0xBB132F88, 0x515BAD24, 0x7B9479BF, 0x763BD6EB,
    			            0x37392EB3, 0xCC115979, 0x8026E297, 0xF42E312D,
    			            0x6842ADA7, 0xC66A2B3B, 0x12754CCC, 0x782EF11C,
    			            0x6A124237, 0xB79251E7, 0x06A1BBE6, 0x4BFB6350,
    			            0x1A6B1018, 0x11CAEDFA, 0x3D25BDD8, 0xE2E1C3C9,
    			            0x44421659, 0x0A121386, 0xD90CEC6E, 0xD5ABEA2A,
    			            0x64AF674E, 0xDA86A85F, 0xBEBFE988, 0x64E4C3FE,
    			            0x9DBC8057, 0xF0F7C086, 0x60787BF8, 0x6003604D,
    			            0xD1FD8346, 0xF6381FB0, 0x7745AE04, 0xD736FCCC,
    			            0x83426B33, 0xF01EAB71, 0xB0804187, 0x3C005E5F,
    			            0x77A057BE, 0xBDE8AE24, 0x55464299, 0xBF582E61,
    			            0x4E58F48F, 0xF2DDFDA2, 0xF474EF38, 0x8789BDC2,
    			            0x5366F9C3, 0xC8B38E74, 0xB475F255, 0x46FCD9B9,
    			            0x7AEB2661, 0x8B1DDF84, 0x846A0E79, 0x915F95E2,
    			            0x466E598E, 0x20B45770, 0x8CD55591, 0xC902DE4C,
    			            0xB90BACE1, 0xBB8205D0, 0x11A86248, 0x7574A99E,
    			            0xB77F19B6, 0xE0A9DC09, 0x662D09A1, 0xC4324633,
    			            0xE85A1F02, 0x09F0BE8C, 0x4A99A025, 0x1D6EFE10,
    			            0x1AB93D1D, 0x0BA5A4DF, 0xA186F20F, 0x2868F169,
    			            0xDCB7DA83, 0x573906FE, 0xA1E2CE9B, 0x4FCD7F52,
    			            0x50115E01, 0xA70683FA, 0xA002B5C4, 0x0DE6D027,
    			            0x9AF88C27, 0x773F8641, 0xC3604C06, 0x61A806B5,
    			            0xF0177A28, 0xC0F586E0, 0x006058AA, 0x30DC7D62,
    			            0x11E69ED7, 0x2338EA63, 0x53C2DD94, 0xC2C21634,
    			            0xBBCBEE56, 0x90BCB6DE, 0xEBFC7DA1, 0xCE591D76,
    			            0x6F05E409, 0x4B7C0188, 0x39720A3D, 0x7C927C24,
    			            0x86E3725F, 0x724D9DB9, 0x1AC15BB4, 0xD39EB8FC,
    			            0xED545578, 0x08FCA5B5, 0xD83D7CD3, 0x4DAD0FC4,
    			            0x1E50EF5E, 0xB161E6F8, 0xA28514D9, 0x6C51133C,
    			            0x6FD5C7E7, 0x56E14EC4, 0x362ABFCE, 0xDDC6C837,
    			            0xD79A3234, 0x92638212, 0x670EFA8E, 0x406000E0  ],
    			        [   0x3A39CE37, 0xD3FAF5CF, 0xABC27737, 0x5AC52D1B,
    			            0x5CB0679E, 0x4FA33742, 0xD3822740, 0x99BC9BBE,
    			            0xD5118E9D, 0xBF0F7315, 0xD62D1C7E, 0xC700C47B,
    			            0xB78C1B6B, 0x21A19045, 0xB26EB1BE, 0x6A366EB4,
    			            0x5748AB2F, 0xBC946E79, 0xC6A376D2, 0x6549C2C8,
    			            0x530FF8EE, 0x468DDE7D, 0xD5730A1D, 0x4CD04DC6,
    			            0x2939BBDB, 0xA9BA4650, 0xAC9526E8, 0xBE5EE304,
    			            0xA1FAD5F0, 0x6A2D519A, 0x63EF8CE2, 0x9A86EE22,
    			            0xC089C2B8, 0x43242EF6, 0xA51E03AA, 0x9CF2D0A4,
    			            0x83C061BA, 0x9BE96A4D, 0x8FE51550, 0xBA645BD6,
    			            0x2826A2F9, 0xA73A3AE1, 0x4BA99586, 0xEF5562E9,
    			            0xC72FEFD3, 0xF752F7DA, 0x3F046F69, 0x77FA0A59,
    			            0x80E4A915, 0x87B08601, 0x9B09E6AD, 0x3B3EE593,
    			            0xE990FD5A, 0x9E34D797, 0x2CF0B7D9, 0x022B8B51,
    			            0x96D5AC3A, 0x017DA67D, 0xD1CF3ED6, 0x7C7D2D28,
    			            0x1F9F25CF, 0xADF2B89B, 0x5AD6B472, 0x5A88F54C,
    			            0xE029AC71, 0xE019A5E6, 0x47B0ACFD, 0xED93FA9B,
    			            0xE8D3C48D, 0x283B57CC, 0xF8D56629, 0x79132E28,
    			            0x785F0191, 0xED756055, 0xF7960E44, 0xE3D35E8C,
    			            0x15056DD4, 0x88F46DBA, 0x03A16125, 0x0564F0BD,
    			            0xC3EB9E15, 0x3C9057A2, 0x97271AEC, 0xA93A072A,
    			            0x1B3F6D9B, 0x1E6321F5, 0xF59C66FB, 0x26DCF319,
    			            0x7533D928, 0xB155FDF5, 0x03563482, 0x8ABA3CBB,
    			            0x28517711, 0xC20AD9F8, 0xABCC5167, 0xCCAD925F,
    			            0x4DE81751, 0x3830DC8E, 0x379D5862, 0x9320F991,
    			            0xEA7A90C2, 0xFB3E7BCE, 0x5121CE64, 0x774FBE32,
    			            0xA8B6E37E, 0xC3293D46, 0x48DE5369, 0x6413E680,
    			            0xA2AE0810, 0xDD6DB224, 0x69852DFD, 0x09072166,
    			            0xB39A460A, 0x6445C0DD, 0x586CDECF, 0x1C20C8AE,
    			            0x5BBEF7DD, 0x1B588D40, 0xCCD2017F, 0x6BB4E3BB,
    			            0xDDA26A7E, 0x3A59FF45, 0x3E350A44, 0xBCB4CDD5,
    			            0x72EACEA8, 0xFA6484BB, 0x8D6612AE, 0xBF3C6F47,
    			            0xD29BE463, 0x542F5D9E, 0xAEC2771B, 0xF64E6370,
    			            0x740E0D8D, 0xE75B1357, 0xF8721671, 0xAF537D5D,
    			            0x4040CB08, 0x4EB4E2CC, 0x34D2466A, 0x0115AF84,
    			            0xE1B00428, 0x95983A1D, 0x06B89FB4, 0xCE6EA048,
    			            0x6F3F3B82, 0x3520AB82, 0x011A1D4B, 0x277227F8,
    			            0x611560B1, 0xE7933FDC, 0xBB3A792B, 0x344525BD,
    			            0xA08839E1, 0x51CE794B, 0x2F32C9B7, 0xA01FBAC9,
    			            0xE01CC87E, 0xBCC7D1F6, 0xCF0111C3, 0xA1E8AAC7,
    			            0x1A908749, 0xD44FBD9A, 0xD0DADECB, 0xD50ADA38,
    			            0x0339C32A, 0xC6913667, 0x8DF9317C, 0xE0B12B4F,
    			            0xF79E59B7, 0x43F5BB3A, 0xF2D519FF, 0x27D9459C,
    			            0xBF97222C, 0x15E6FC2A, 0x0F91FC71, 0x9B941525,
    			            0xFAE59361, 0xCEB69CEB, 0xC2A86459, 0x12BAA8D1,
    			            0xB6C1075E, 0xE3056A0C, 0x10D25065, 0xCB03A442,
    			            0xE0EC6E0E, 0x1698DB3B, 0x4C98A0BE, 0x3278E964,
    			            0x9F1F9532, 0xE0D392DF, 0xD3A0342B, 0x8971F21E,
    			            0x1B0A7441, 0x4BA3348C, 0xC5BE7120, 0xC37632D8,
    			            0xDF359F8D, 0x9B992F2E, 0xE60B6F47, 0x0FE3F11D,
    			            0xE54CDA54, 0x1EDAD891, 0xCE6279CF, 0xCD3E7E6F,
    			            0x1618B166, 0xFD2C1D05, 0x848FD2C5, 0xF6FB2299,
    			            0xF523F357, 0xA6327623, 0x93A83531, 0x56CCCD02,
    			            0xACF08162, 0x5A75EBB5, 0x6E163697, 0x88D273CC,
    			            0xDE966292, 0x81B949D0, 0x4C50901B, 0x71C65614,
    			            0xE6C6C7BD, 0x327A140A, 0x45E1D006, 0xC3F27B9A,
    			            0xC9AA53FD, 0x62A80F00, 0xBB25BFE2, 0x35BDD2F6,
    			            0x71126905, 0xB2040222, 0xB6CBCF7C, 0xCD769C2B,
    			            0x53113EC0, 0x1640E3D3, 0x38ABBD60, 0x2547ADF0,
    			            0xBA38209C, 0xF746CE76, 0x77AFA1C5, 0x20756060,
    			            0x85CBFE4E, 0x8AE88DD8, 0x7AAAF9B0, 0x4CF9AA7E,
    			            0x1948C25C, 0x02FB8A8C, 0x01C36AE4, 0xD6EBE1F9,
    			            0x90D4F869, 0xA65CDEA0, 0x3F09252D, 0xC208E69F,
    			            0xB74E6132, 0xCE77E25B, 0x578FDFE3, 0x3AC372E6  ]
    			    ];

    			    var BLOWFISH_CTX = {
    			        pbox: [],
    			        sbox: []
    			    };

    			    function F(ctx, x){
    			        let a = (x >> 24) & 0xFF;
    			        let b = (x >> 16) & 0xFF;
    			        let c = (x >> 8) & 0xFF;
    			        let d = x & 0xFF;

    			        let y = ctx.sbox[0][a] + ctx.sbox[1][b];
    			        y = y ^ ctx.sbox[2][c];
    			        y = y + ctx.sbox[3][d];

    			        return y;
    			    }

    			    function BlowFish_Encrypt(ctx, left, right){
    			        let Xl = left;
    			        let Xr = right;
    			        let temp;

    			        for(let i = 0; i < N; ++i){
    			            Xl = Xl ^ ctx.pbox[i];
    			            Xr = F(ctx, Xl) ^ Xr;

    			            temp = Xl;
    			            Xl = Xr;
    			            Xr = temp;
    			        }

    			        temp = Xl;
    			        Xl = Xr;
    			        Xr = temp;

    			        Xr = Xr ^ ctx.pbox[N];
    			        Xl = Xl ^ ctx.pbox[N + 1];

    			        return {left: Xl, right: Xr};
    			    }

    			    function BlowFish_Decrypt(ctx, left, right){
    			        let Xl = left;
    			        let Xr = right;
    			        let temp;

    			        for(let i = N + 1; i > 1; --i){
    			            Xl = Xl ^ ctx.pbox[i];
    			            Xr = F(ctx, Xl) ^ Xr;

    			            temp = Xl;
    			            Xl = Xr;
    			            Xr = temp;
    			        }

    			        temp = Xl;
    			        Xl = Xr;
    			        Xr = temp;

    			        Xr = Xr ^ ctx.pbox[1];
    			        Xl = Xl ^ ctx.pbox[0];

    			        return {left: Xl, right: Xr};
    			    }

    			    /**
    			     * Initialization ctx's pbox and sbox.
    			     *
    			     * @param {Object} ctx The object has pbox and sbox.
    			     * @param {Array} key An array of 32-bit words.
    			     * @param {int} keysize The length of the key.
    			     *
    			     * @example
    			     *
    			     *     BlowFishInit(BLOWFISH_CTX, key, 128/32);
    			     */
    			    function BlowFishInit(ctx, key, keysize)
    			    {
    			        for(let Row = 0; Row < 4; Row++)
    			        {
    			            ctx.sbox[Row] = [];
    			            for(let Col = 0; Col < 256; Col++)
    			            {
    			                ctx.sbox[Row][Col] = ORIG_S[Row][Col];
    			            }
    			        }

    			        let keyIndex = 0;
    			        for(let index = 0; index < N + 2; index++)
    			        {
    			            ctx.pbox[index] = ORIG_P[index] ^ key[keyIndex];
    			            keyIndex++;
    			            if(keyIndex >= keysize)
    			            {
    			                keyIndex = 0;
    			            }
    			        }

    			        let Data1 = 0;
    			        let Data2 = 0;
    			        let res = 0;
    			        for(let i = 0; i < N + 2; i += 2)
    			        {
    			            res = BlowFish_Encrypt(ctx, Data1, Data2);
    			            Data1 = res.left;
    			            Data2 = res.right;
    			            ctx.pbox[i] = Data1;
    			            ctx.pbox[i + 1] = Data2;
    			        }

    			        for(let i = 0; i < 4; i++)
    			        {
    			            for(let j = 0; j < 256; j += 2)
    			            {
    			                res = BlowFish_Encrypt(ctx, Data1, Data2);
    			                Data1 = res.left;
    			                Data2 = res.right;
    			                ctx.sbox[i][j] = Data1;
    			                ctx.sbox[i][j + 1] = Data2;
    			            }
    			        }

    			        return true;
    			    }

    			    /**
    			     * Blowfish block cipher algorithm.
    			     */
    			    var Blowfish = C_algo.Blowfish = BlockCipher.extend({
    			        _doReset: function () {
    			            // Skip reset of nRounds has been set before and key did not change
    			            if (this._keyPriorReset === this._key) {
    			                return;
    			            }

    			            // Shortcuts
    			            var key = this._keyPriorReset = this._key;
    			            var keyWords = key.words;
    			            var keySize = key.sigBytes / 4;

    			            //Initialization pbox and sbox
    			            BlowFishInit(BLOWFISH_CTX, keyWords, keySize);
    			        },

    			        encryptBlock: function (M, offset) {
    			            var res = BlowFish_Encrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
    			            M[offset] = res.left;
    			            M[offset + 1] = res.right;
    			        },

    			        decryptBlock: function (M, offset) {
    			            var res = BlowFish_Decrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
    			            M[offset] = res.left;
    			            M[offset + 1] = res.right;
    			        },

    			        blockSize: 64/32,

    			        keySize: 128/32,

    			        ivSize: 64/32
    			    });

    			    /**
    			     * Shortcut functions to the cipher's object interface.
    			     *
    			     * @example
    			     *
    			     *     var ciphertext = CryptoJS.Blowfish.encrypt(message, key, cfg);
    			     *     var plaintext  = CryptoJS.Blowfish.decrypt(ciphertext, key, cfg);
    			     */
    			    C.Blowfish = BlockCipher._createHelper(Blowfish);
    			}());


    			return CryptoJS.Blowfish;

    		})); 
    	} (blowfish));
    	return blowfish.exports;
    }

    (function (module, exports) {
    (function (root, factory, undef) {
    		{
    			// CommonJS
    			module.exports = factory(requireCore(), requireX64Core(), requireLibTypedarrays(), requireEncUtf16(), requireEncBase64(), requireEncBase64url(), requireMd5(), requireSha1(), requireSha256(), requireSha224(), requireSha512(), requireSha384(), requireSha3(), requireRipemd160(), requireHmac(), requirePbkdf2(), requireEvpkdf(), requireCipherCore(), requireModeCfb(), requireModeCtr(), requireModeCtrGladman(), requireModeOfb(), requireModeEcb(), requirePadAnsix923(), requirePadIso10126(), requirePadIso97971(), requirePadZeropadding(), requirePadNopadding(), requireFormatHex(), aesExports, requireTripledes(), requireRc4(), requireRabbit(), requireRabbitLegacy(), requireBlowfish());
    		}
    	}(commonjsGlobal, function (CryptoJS) {

    		return CryptoJS;

    	})); 
    } (cryptoJs));

    var cryptoJsExports = cryptoJs.exports;
    var CryptoJS = /*@__PURE__*/getDefaultExportFromCjs(cryptoJsExports);

    /* Import modules. */
    const debug$8 = debugFactory('nexa:crypto:decrypt');

    /**
     * Decrypt
     *
     * Performs AES decryption on the encrypted body provided to the function.
     */
    var _decrypt = (_params, _key) => {
        debug$8(`Decrypt (params): [ ${JSON.stringify(_params, null, 2)} ]`);

        let bodyType;
        let key;
        let plainBody;
        let encryptedBody;

        /* Set plain body. */
        encryptedBody = _params?.body;

        /* Validate plain body. */
        if (typeof encryptedBody === 'string' || encryptedBody instanceof String) {
            bodyType = 'string';

            // encryptedBody = encryptedBody
        }

        /* Set (password) key. */
        // key = _params?.key || _params?.password
        key = _key;

        /* Validate body type. */
        if (!bodyType) {
            try {
                /* Parse plain body. */
                encryptedBody = JSON.stringify(JSON.parse(encryptedBody));

                /* Set body type. */
                bodyType = 'json';
            } catch (e) { /* do nothing */ }
        }

        /* Encrypt plain body. */
        plainBody = AES.decrypt(encryptedBody, key);
        debug$8(`Plain body (formatted): [ ${plainBody} ]`);
        debug$8(`Encrypted body: [ ${encryptedBody} ]`);

        /* Return encrypted body. */
        return plainBody.toString(CryptoJS.enc.Utf8)
    };

    /* Import modules. */
    const debug$7 = debugFactory('nexa:crypto:encrypt');

    CryptoJS.pad.NoPadding = { pad: function(){}, unpad: function(){} };

    /**
     * AES Encrypt
     */
    const _aesEncrypt = (_plainBody, _key, _iv) => {
        /* Encrypt plain body. */
        const encryptedBody = AES.encrypt(_plainBody, _key);

        // // const text = "My Secret text\0\0"
        // const text = "My Secret text\0\0"
        // const key  = CryptoJS.enc.Hex.parse("253d3fb468a0e24677c28a624be0f939")
        // const iv   = CryptoJS.enc.Hex.parse("00000000000000000000000000000000")
        //
        // const encrypted = CryptoJS.AES.encrypt(text, key, { iv })
        // // var encrypted = CryptoJS.AES.encrypt(text, key);
        //
        // console.log(encrypted.toString());

        debug$7(`Plain body (formatted): [ ${_plainBody} ]`);
        debug$7(`Encrypted body: [ ${encryptedBody} ]`);

        /* Return encrypted body. */
        return encryptedBody
    };

    /**
     * Encrypt
     *
     * Performs AES encryption on the plain body provided to the function.
     *
     * Parameters:
     *   - body (required)
     *   - key | password (required)
     */
    var _encrypt = (_params, _key) => {
        debug$7(`Encrypt (params): [ ${JSON.stringify(_params, null, 2)} ]`);

        let bodyType;
        let key;
        let plainBody;

        /* Set plain body. */
        plainBody = _params?.body;

        /* Validate plain body. */
        if (!plainBody) {
            throw new Error(`Oops! You're missing a BODY in your parameters.`)
        }

        /* Validate (String) body. */
        if (typeof plainBody === 'string' || plainBody instanceof String) {
            bodyType = 'string';

            // plainBody = plainBody
        }

        /* Validate body type. */
        if (!bodyType) {
            try {
                /* Parse plain body. */
                plainBody = JSON.stringify(JSON.parse(plainBody));

                /* Set body type. */
                bodyType = 'json';
            } catch (e) { /* do nothing */ }
        }

        /* Set (password) key. */
        // key = _params?.key || _params?.password
        key = _key;

        /* Validate (password) key. */
        if (!key) {
            throw new Error(`Oops! You're missing a KEY or PASSWORD in your parameters.`)
        }

        /* Return encrypted body. */
        return _aesEncrypt(plainBody, key)
    };

    /* Import modules. */
    const debug$6 = debugFactory('nexa:crypto:gethmac');

    var _getHmac = (_body, _secret) => {
        const signature = CryptoJS.HmacSHA512(_body, _secret).toString();
        debug$6(`HMAC-512 signature: [ ${signature} ]`);

        return signature
    };

    /**
     * Encode a positive BigInt as little-endian Uint8Array. Negative values will
     * return the same result as `0`.
     *
     * @param value - the number to encode
     */
    var bigIntToBinUintLE$2 = (value) => {
        const baseUint8Array = 256;
        const base = BigInt(baseUint8Array);
        const result = [];
        // eslint-disable-next-line functional/no-let
        let remaining = value;
        // eslint-disable-next-line functional/no-loop-statement
        while (remaining >= base) {
            // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
            result.push(Number(remaining % base));
            // eslint-disable-next-line functional/no-expression-statement
            remaining /= base;
        }
        // eslint-disable-next-line functional/no-conditional-statement, functional/no-expression-statement, functional/immutable-data
        if (remaining > BigInt(0)) result.push(Number(remaining));

        return Uint8Array.from(result.length > 0 ? result : [0])
    };

    /**
     * Fill a new Uint8Array of a specific byte-length with the contents of a given
     * Uint8Array, truncating or padding the Uint8Array with zeros.
     *
     * @param bin - the Uint8Array to resize
     * @param bytes - the desired byte-length
     */
    var binToFixedLength$2 = (bin, bytes) => {
        const fixedBytes = new Uint8Array(bytes);
        const maxValue = 255;
        // eslint-disable-next-line functional/no-expression-statement
        bin.length > bytes ? fixedBytes.fill(maxValue) : fixedBytes.set(bin);
        // TODO: re-enable eslint-disable-next-line @typescript-eslint/no-unused-expressions
        return fixedBytes
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint16LE Uint8Array, clamping the
     * results. (Values exceeding `0xffff` return the same result as
     * `0xffff`, negative values return the same result as `0`.)
     *
     * @param value - the number to encode
     */
    var bigIntToBinUint16LEClamped$2 = (value) => {
        const uint16 = 2;
        return binToFixedLength$2(bigIntToBinUintLE$2(value), uint16)
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint16LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffff`.
     *
     * @param value - the number to encode
     */
    var _bigIntToBinUint16LE$2 = (value) => {
        const uint16LengthInBits = 16;
        const valueAsUint16 = BigInt.asUintN(uint16LengthInBits, value);
        const fixedLengthBin = bigIntToBinUint16LEClamped$2(valueAsUint16);
        return fixedLengthBin
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint32LE Uint8Array, clamping the
     * results. (Values exceeding `0xffff_ffff` return the same result as
     * `0xffff_ffff`, negative values return the same result as `0`.)
     *
     * @param value - the number to encode
     */
    var bigIntToBinUint32LEClamped$2 = (value) => {
        const uint32 = 4;
        return binToFixedLength$2(bigIntToBinUintLE$2(value), uint32)
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint32LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffff_ffff`.
     *
     * @param value - the number to encode
     */
    var _bigIntToBinUint32LE$2 = (value) => {
        const uint32LengthInBits = 32;
        const valueAsUint32 = BigInt.asUintN(uint32LengthInBits, value);
        const fixedLengthBin = bigIntToBinUint32LEClamped$2(valueAsUint32);
        return fixedLengthBin
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint64LE Uint8Array, clamping the
     * results. (Values exceeding `0xffff_ffff_ffff_ffff` return the same result as
     * `0xffff_ffff_ffff_ffff`, negative values return the same result as `0`.)
     *
     * @param value - the number to encode
     */
    var bigIntToBinUint64LEClamped$2 = (value) => {
        const uint64 = 8;
        return binToFixedLength$2(bigIntToBinUintLE$2(value), uint64)
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint64LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffff_ffff_ffff_ffff`.
     *
     * @param value - the number to encode
     */
    var _bigIntToBinUint64LE$2 = (value) => {
        const uint64LengthInBits = 64;
        const valueAsUint64 = BigInt.asUintN(uint64LengthInBits, value);
        const fixedLengthBin = bigIntToBinUint64LEClamped$2(valueAsUint64);
        return fixedLengthBin
    };

    var CompactUint$2 = {
        uint8MaxValue:  0xfc,
        uint16Prefix:   0xfd,
        uint16MaxValue: 0xffff,
        uint32Prefix:   0xfe,
        uint32MaxValue: 0xffffffff,
        uint64Prefix:   0xff,
        uint8:          1,
        uint16:         2,
        uint32:         4,
        uint64:         8,
    };

    /**
     * Encode a positive integer as a 2-byte Uint16LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffff`.
     *
     * @param value - the number to encode
     */
    var _numberToBinUint16LE$2 = (value) => {
        const uint16Length = 2;
        const bin = new Uint8Array(uint16Length);
        const writeAsLittleEndian = true;
        const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);
        // eslint-disable-next-line functional/no-expression-statement
        view.setUint16(0, value, writeAsLittleEndian);
        return bin
    };

    /**
     * Encode a positive number as a 4-byte Uint32LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffffffff`.
     *
     * @param value - the number to encode
     */
    var _numberToBinUint32LE$2 = (value) => {
        const uint32Length = 4;
        const bin = new Uint8Array(uint32Length);
        const writeAsLittleEndian = true;
        const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);
        // eslint-disable-next-line functional/no-expression-statement
        view.setUint32(0, value, writeAsLittleEndian);
        return bin
    };

    // TODO Add test for BigInt

    var _bigIntToCompactUint$2 = (value) =>
        value <= BigInt(CompactUint$2.uint8MaxValue)
            ? Uint8Array.of(Number(value))
            : value <= BigInt(CompactUint$2.uint16MaxValue)
                ? Uint8Array.from([
                    CompactUint$2.uint16Prefix,
                    ..._numberToBinUint16LE$2(Number(value)),
                ])
                : value <= BigInt(CompactUint$2.uint32MaxValue)
                    ? Uint8Array.from([
                        CompactUint$2.uint32Prefix,
                        ..._numberToBinUint32LE$2(Number(value)),
                    ])
                    : Uint8Array.from([
                        CompactUint$2.uint64Prefix,
                        ..._bigIntToBinUint64LE$2(value),
                    ]);

    const hexByteWidth$5 = 2;
    const hexadecimal$5 = 16;

    /**
     * Encode a Uint8Array into a hexadecimal-encoded string.
     *
     * E.g.: `binToHex(new Uint8Array([42, 100, 255]))` â†’ `'2a64ff'`
     *
     * @param bytes - a Uint8Array to encode
     */
    var _binToHex$2 = (bytes) =>
        bytes.reduce(
            (str, byte) => str + byte.toString(hexadecimal$5).padStart(hexByteWidth$5, '0'),
            ''
        );

    /**
     * Returns an array of incrementing values starting at `begin` and incrementing by one for `length`.
     *
     * E.g.: `range(3)` â†’ `[0, 1, 2]` and `range(3, 1)` â†’ `[1, 2, 3]`
     *
     * @param length - the number of elements in the array
     * @param begin - the index at which the range starts (default: `0`)
     */
    var range$2 = (length, begin = 0) =>
        Array.from({ length }, (_, index) => begin + index);

    /**
     * Split a string into an array of `chunkLength` strings. The final string may have a length between 1 and `chunkLength`.
     *
     * E.g.: `splitEvery('abcde', 2)` â†’ `['ab', 'cd', 'e']`
     */
    var splitEvery$2 = (input, chunkLength) =>
        range$2(Math.ceil(input.length / chunkLength))
            .map((index) => index * chunkLength)
            .map((begin) => input.slice(begin, begin + chunkLength));

    const hexByteWidth$4 = 2;
    const hexadecimal$4 = 16;

    /**
     * Decode a hexadecimal-encoded string into a Uint8Array.
     *
     * E.g.: `hexToBin('2a64ff')` â†’ `new Uint8Array([42, 100, 255])`
     *
     * Note, this method always completes. If `validHex` is not divisible by 2,
     * the final byte will be parsed as if it were prepended with a `0` (e.g. `aaa`
     * is interpreted as `aa0a`). If `validHex` is potentially malformed, check
     * it with `isHex` before calling this method.
     *
     * @param validHex - a string of valid, hexadecimal-encoded data
     */
    var _hexToBin$2 = (validHex) =>
        Uint8Array.from(
            splitEvery$2(validHex, hexByteWidth$4).map((byte) =>
                parseInt(byte, hexadecimal$4)
            )
        );

    /**
     * Reverse (Hex) Bytes
     *
     * Reverse the bytes of a HEX string.
     */
    var _reverseHex$1 = (_bytes) => {
        return _bytes.match(/[a-fA-F0-9]{2}/g).reverse().join('')
    };

    /**
     * Sleep
     *
     * Delay execution for the specified number of milliseconds.
     */
    function _sleep$1 (_milliseconds) {
        return new Promise(r => setTimeout(r, _milliseconds))
    }

    /* Setup (non-ESM) debugger. */
    debugFactory('nexa:utils');

    /* Export (local) modules. */
    const bigIntToBinUint16LE$2 = _bigIntToBinUint16LE$2;
    const bigIntToBinUint32LE$2 = _bigIntToBinUint32LE$2;
    const bigIntToBinUint64LE$2 = _bigIntToBinUint64LE$2;
    const bigIntToCompactUint$2 = _bigIntToCompactUint$2;
    const binToHex$2 = _binToHex$2;
    const hexToBin$2 = _hexToBin$2;
    const numberToBinUint16LE$3 = _numberToBinUint16LE$2;
    const numberToBinUint32LE$3 = _numberToBinUint32LE$2;
    const reverseHex$2 = _reverseHex$1;
    const sleep$1 = _sleep$1;


    /**
     * Utils Class
     *
     * A suite of useful utilities.
     */
    let Utils$2 = class Utils {
        // NOTE: We won't use a constructor, as this is a "pure" class.

        static reverseHex(_bytes) {
            return reverseHex$2(_bytes)
        }

        static sleep(_milliseconds) {
            return sleep$1(_milliseconds)
        }
    };


    /* Initialize (globalThis) Nexa class. */
    const Nexa$6 = {};

    /* Initialize Utilities class. */
    Nexa$6.Utils = Utils$2;

    /* Initialize Utilities modules. */
    Nexa$6.bigIntToBinUint16LE = bigIntToBinUint16LE$2;
    Nexa$6.bigIntToBinUint32LE = bigIntToBinUint32LE$2;
    Nexa$6.bigIntToBinUint64LE = bigIntToBinUint64LE$2;
    Nexa$6.bigIntToCompactUint = bigIntToCompactUint$2;
    Nexa$6.binToHex = binToHex$2;
    Nexa$6.hexToBin = hexToBin$2;
    Nexa$6.numberToBinUint16LE = numberToBinUint16LE$3;
    Nexa$6.numberToBinUint32LE = numberToBinUint32LE$3;
    Nexa$6.reverseHex = reverseHex$2;
    Nexa$6.sleep = sleep$1;

    /* Export Nexa to globalThis. */
    // NOTE: We merge to avoid conflict with other libraries.
    globalThis.Nexa = {
        ...globalThis.Nexa, // preserve Nexa object
        ...Nexa$6, // extend Nexa object
    };

    /* Import modules. */
    const debug$5 = debugFactory('nexa:crypto:ripemd160');

    /**
     * SHA-512
     *
     * Performs hashing on the body provided to the function.
     *
     * Allows specification of the response format.
     */
    var _ripemd160 = (_body, _format) => {
        debug$5(`Decrypt (params): [ ${JSON.stringify(_body, null, 2)} ]`);

        /* Initialize locals. */
        let body;
        let format;
        let hash;

        /* Validate body. */
        if (typeof _body === 'string') {
            format = _format || 'hex';
            body = CryptoJS.enc.Utf8.parse(_body);
        } else {
            format = _format || 'binary';
            body = CryptoJS.enc.Hex.parse(binToHex$2(_body));
        }

        /* Hash body. */
        hash = CryptoJS.RIPEMD160(body).toString();
        debug$5(`Hashed: [ ${hash} ]`);

        /* Handle format conversion. */
        if (format === 'binary') {
            hash = hexToBin$2(hash);
        }

        /* Return hash. */
        return hash
    };

    /* Import modules. */
    const debug$4 = debugFactory('nexa:crypto:sha256');

    /**
     * SHA-256
     *
     * Performs hashing on the body provided to the function.
     *
     * Allows specification of the response format.
     */
    var _sha256 = (_body, _format) => {
        debug$4(`Decrypt (params): [ ${JSON.stringify(_body, null, 2)} ]`);

        /* Initialize locals. */
        let body;
        let format;
        let hash;

        /* Validate body. */
        if (typeof _body === 'string') {
            format = _format || 'hex';
            body = CryptoJS.enc.Utf8.parse(_body);
        } else {
            format = _format || 'binary';
            body = CryptoJS.enc.Hex.parse(binToHex$2(_body));
        }

        /* Hash body. */
        hash = CryptoJS.SHA256(body).toString();
        debug$4(`Hashed: [ ${hash} ]`);

        /* Handle format conversion. */
        if (format === 'binary') {
            hash = hexToBin$2(hash);
        }

        /* Return hash. */
        return hash
    };

    /* Import modules. */
    const debug$3 = debugFactory('nexa:crypto:sha512');

    /**
     * SHA-512
     *
     * Performs hashing on the body provided to the function.
     *
     * Allows specification of the response format.
     */
    var _sha512 = (_body, _format) => {
        debug$3(`Decrypt (params): [ ${JSON.stringify(_body, null, 2)} ]`);

        /* Initialize locals. */
        let body;
        let format;
        let hash;

        /* Validate body. */
        if (typeof _body === 'string') {
            format = _format || 'hex';
            body = CryptoJS.enc.Utf8.parse(_body);
        } else {
            format = _format || 'binary';
            body = CryptoJS.enc.Hex.parse(binToHex$2(_body));
        }

        /* Hash body. */
        hash = CryptoJS.SHA512(body).toString();
        debug$3(`Hashed: [ ${hash} ]`);

        /* Handle format conversion. */
        if (format === 'binary') {
            hash = hexToBin$2(hash);
        }

        /* Return hash. */
        return hash
    };

    const version$2 = "logger/5.7.0";

    let _permanentCensorErrors = false;
    let _censorErrors = false;
    const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
    let _logLevel = LogLevels["default"];
    let _globalLogger = null;
    function _checkNormalize() {
        try {
            const missing = [];
            // Make sure all forms of normalization are supported
            ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
                try {
                    if ("test".normalize(form) !== "test") {
                        throw new Error("bad normalize");
                    }
                    ;
                }
                catch (error) {
                    missing.push(form);
                }
            });
            if (missing.length) {
                throw new Error("missing " + missing.join(", "));
            }
            if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
                throw new Error("broken implementation");
            }
        }
        catch (error) {
            return error.message;
        }
        return null;
    }
    const _normalizeError = _checkNormalize();
    var LogLevel;
    (function (LogLevel) {
        LogLevel["DEBUG"] = "DEBUG";
        LogLevel["INFO"] = "INFO";
        LogLevel["WARNING"] = "WARNING";
        LogLevel["ERROR"] = "ERROR";
        LogLevel["OFF"] = "OFF";
    })(LogLevel || (LogLevel = {}));
    var ErrorCode;
    (function (ErrorCode) {
        ///////////////////
        // Generic Errors
        // Unknown Error
        ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        // Not Implemented
        ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        // Unsupported Operation
        //   - operation
        ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
        //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
        ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
        // Some sort of bad response from the server
        ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
        // Timeout
        ErrorCode["TIMEOUT"] = "TIMEOUT";
        ///////////////////
        // Operational  Errors
        // Buffer Overrun
        ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        // Numeric Fault
        //   - operation: the operation being executed
        //   - fault: the reason this faulted
        ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ///////////////////
        // Argument Errors
        // Missing new operator to an object
        //  - name: The name of the class
        ErrorCode["MISSING_NEW"] = "MISSING_NEW";
        // Invalid argument (e.g. value is incompatible with type) to a function:
        //   - argument: The argument name that was invalid
        //   - value: The value of the argument
        ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        // Missing argument to a function:
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        // Too many arguments
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ///////////////////
        // Blockchain Errors
        // Call exception
        //  - transaction: the transaction
        //  - address?: the contract address
        //  - args?: The arguments passed into the function
        //  - method?: The Solidity method signature
        //  - errorSignature?: The EIP848 error signature
        //  - errorArgs?: The EIP848 error parameters
        //  - reason: The reason (only for EIP848 "Error(string)")
        ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        // Insufficient funds (< value + gasLimit * gasPrice)
        //   - transaction: the transaction attempted
        ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        // Nonce has already been used
        //   - transaction: the transaction attempted
        ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        // The replacement fee for the transaction is too low
        //   - transaction: the transaction attempted
        ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        // The gas limit could not be estimated
        //   - transaction: the transaction passed to estimateGas
        ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        // The transaction was replaced by one with a higher gas price
        //   - reason: "cancelled", "replaced" or "repriced"
        //   - cancelled: true if reason == "cancelled" or reason == "replaced")
        //   - hash: original transaction hash
        //   - replacement: the full TransactionsResponse for the replacement
        //   - receipt: the receipt of the replacement
        ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
        ///////////////////
        // Interaction Errors
        // The user rejected the action, such as signing a message or sending
        // a transaction
        ErrorCode["ACTION_REJECTED"] = "ACTION_REJECTED";
    })(ErrorCode || (ErrorCode = {}));
    const HEX = "0123456789abcdef";
    class Logger {
        constructor(version) {
            Object.defineProperty(this, "version", {
                enumerable: true,
                value: version,
                writable: false
            });
        }
        _log(logLevel, args) {
            const level = logLevel.toLowerCase();
            if (LogLevels[level] == null) {
                this.throwArgumentError("invalid log level name", "logLevel", logLevel);
            }
            if (_logLevel > LogLevels[level]) {
                return;
            }
            console.log.apply(console, args);
        }
        debug(...args) {
            this._log(Logger.levels.DEBUG, args);
        }
        info(...args) {
            this._log(Logger.levels.INFO, args);
        }
        warn(...args) {
            this._log(Logger.levels.WARNING, args);
        }
        makeError(message, code, params) {
            // Errors are being censored
            if (_censorErrors) {
                return this.makeError("censored error", code, {});
            }
            if (!code) {
                code = Logger.errors.UNKNOWN_ERROR;
            }
            if (!params) {
                params = {};
            }
            const messageDetails = [];
            Object.keys(params).forEach((key) => {
                const value = params[key];
                try {
                    if (value instanceof Uint8Array) {
                        let hex = "";
                        for (let i = 0; i < value.length; i++) {
                            hex += HEX[value[i] >> 4];
                            hex += HEX[value[i] & 0x0f];
                        }
                        messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
                    }
                    else {
                        messageDetails.push(key + "=" + JSON.stringify(value));
                    }
                }
                catch (error) {
                    messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
                }
            });
            messageDetails.push(`code=${code}`);
            messageDetails.push(`version=${this.version}`);
            const reason = message;
            let url = "";
            switch (code) {
                case ErrorCode.NUMERIC_FAULT: {
                    url = "NUMERIC_FAULT";
                    const fault = message;
                    switch (fault) {
                        case "overflow":
                        case "underflow":
                        case "division-by-zero":
                            url += "-" + fault;
                            break;
                        case "negative-power":
                        case "negative-width":
                            url += "-unsupported";
                            break;
                        case "unbound-bitwise-result":
                            url += "-unbound-result";
                            break;
                    }
                    break;
                }
                case ErrorCode.CALL_EXCEPTION:
                case ErrorCode.INSUFFICIENT_FUNDS:
                case ErrorCode.MISSING_NEW:
                case ErrorCode.NONCE_EXPIRED:
                case ErrorCode.REPLACEMENT_UNDERPRICED:
                case ErrorCode.TRANSACTION_REPLACED:
                case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
                    url = code;
                    break;
            }
            if (url) {
                message += " [ See: https:/\/links.ethers.org/v5-errors-" + url + " ]";
            }
            if (messageDetails.length) {
                message += " (" + messageDetails.join(", ") + ")";
            }
            // @TODO: Any??
            const error = new Error(message);
            error.reason = reason;
            error.code = code;
            Object.keys(params).forEach(function (key) {
                error[key] = params[key];
            });
            return error;
        }
        throwError(message, code, params) {
            throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name, value) {
            return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
                argument: name,
                value: value
            });
        }
        assert(condition, message, code, params) {
            if (!!condition) {
                return;
            }
            this.throwError(message, code, params);
        }
        assertArgument(condition, message, name, value) {
            if (!!condition) {
                return;
            }
            this.throwArgumentError(message, name, value);
        }
        checkNormalize(message) {
            if (_normalizeError) {
                this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "String.prototype.normalize", form: _normalizeError
                });
            }
        }
        checkSafeUint53(value, message) {
            if (typeof (value) !== "number") {
                return;
            }
            if (message == null) {
                message = "value not safe";
            }
            if (value < 0 || value >= 0x1fffffffffffff) {
                this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "out-of-safe-range",
                    value: value
                });
            }
            if (value % 1) {
                this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "non-integer",
                    value: value
                });
            }
        }
        checkArgumentCount(count, expectedCount, message) {
            if (message) {
                message = ": " + message;
            }
            else {
                message = "";
            }
            if (count < expectedCount) {
                this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
            if (count > expectedCount) {
                this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
        }
        checkNew(target, kind) {
            if (target === Object || target == null) {
                this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
            }
        }
        checkAbstract(target, kind) {
            if (target === kind) {
                this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
            }
            else if (target === Object || target == null) {
                this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
            }
        }
        static globalLogger() {
            if (!_globalLogger) {
                _globalLogger = new Logger(version$2);
            }
            return _globalLogger;
        }
        static setCensorship(censorship, permanent) {
            if (!censorship && permanent) {
                this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                });
            }
            if (_permanentCensorErrors) {
                if (!censorship) {
                    return;
                }
                this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                });
            }
            _censorErrors = !!censorship;
            _permanentCensorErrors = !!permanent;
        }
        static setLogLevel(logLevel) {
            const level = LogLevels[logLevel.toLowerCase()];
            if (level == null) {
                Logger.globalLogger().warn("invalid log level - " + logLevel);
                return;
            }
            _logLevel = level;
        }
        static from(version) {
            return new Logger(version);
        }
    }
    Logger.errors = ErrorCode;
    Logger.levels = LogLevel;

    const version$1 = "bytes/5.7.0";

    const logger$1 = new Logger(version$1);
    ///////////////////////////////
    function isHexable(value) {
        return !!(value.toHexString);
    }
    function addSlice(array) {
        if (array.slice) {
            return array;
        }
        array.slice = function () {
            const args = Array.prototype.slice.call(arguments);
            return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
        };
        return array;
    }
    function isInteger(value) {
        return (typeof (value) === "number" && value == value && (value % 1) === 0);
    }
    function isBytes(value) {
        if (value == null) {
            return false;
        }
        if (value.constructor === Uint8Array) {
            return true;
        }
        if (typeof (value) === "string") {
            return false;
        }
        if (!isInteger(value.length) || value.length < 0) {
            return false;
        }
        for (let i = 0; i < value.length; i++) {
            const v = value[i];
            if (!isInteger(v) || v < 0 || v >= 256) {
                return false;
            }
        }
        return true;
    }
    function arrayify(value, options) {
        if (!options) {
            options = {};
        }
        if (typeof (value) === "number") {
            logger$1.checkSafeUint53(value, "invalid arrayify value");
            const result = [];
            while (value) {
                result.unshift(value & 0xff);
                value = parseInt(String(value / 256));
            }
            if (result.length === 0) {
                result.push(0);
            }
            return addSlice(new Uint8Array(result));
        }
        if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        if (isHexable(value)) {
            value = value.toHexString();
        }
        if (isHexString(value)) {
            let hex = value.substring(2);
            if (hex.length % 2) {
                if (options.hexPad === "left") {
                    hex = "0" + hex;
                }
                else if (options.hexPad === "right") {
                    hex += "0";
                }
                else {
                    logger$1.throwArgumentError("hex data is odd-length", "value", value);
                }
            }
            const result = [];
            for (let i = 0; i < hex.length; i += 2) {
                result.push(parseInt(hex.substring(i, i + 2), 16));
            }
            return addSlice(new Uint8Array(result));
        }
        if (isBytes(value)) {
            return addSlice(new Uint8Array(value));
        }
        return logger$1.throwArgumentError("invalid arrayify value", "value", value);
    }
    function isHexString(value, length) {
        if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
        }
        return true;
    }

    const version = "random/5.7.0";

    const logger = new Logger(version);
    // Debugging line for testing browser lib in node
    //const window = { crypto: { getRandomValues: () => { } } };
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
    function getGlobal() {
        if (typeof self !== 'undefined') {
            return self;
        }
        if (typeof window !== 'undefined') {
            return window;
        }
        if (typeof global !== 'undefined') {
            return global;
        }
        throw new Error('unable to locate global object');
    }
    const anyGlobal = getGlobal();
    let crypto$1 = anyGlobal.crypto || anyGlobal.msCrypto;
    if (!crypto$1 || !crypto$1.getRandomValues) {
        logger.warn("WARNING: Missing strong random number source");
        crypto$1 = {
            getRandomValues: function (buffer) {
                return logger.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "crypto.getRandomValues"
                });
            }
        };
    }
    function randomBytes$2(length) {
        if (length <= 0 || length > 1024 || (length % 1) || length != length) {
            logger.throwArgumentError("invalid length", "length", length);
        }
        const result = new Uint8Array(length);
        crypto$1.getRandomValues(result);
        return arrayify(result);
    }

    /* Setup (non-ESM) debugger. */
    const debug$2 = debugFactory('nexa:crypto');

    /* Export (local) modules. */
    const decrypt = _decrypt;
    const encrypt = _encrypt;
    // export const passwordToSafu = _passwordToSafu
    const getHmac = _getHmac;
    const ripemd160$1 = _ripemd160;
    const sha256 = _sha256;
    const sha512 = _sha512;
    const randomBytes$1 = randomBytes$2;


    /**
     * Crypto Class
     *
     * Manages crypto functions.
     */
    class Crypto extends EventEmitter$1 {
        constructor(_params) {
            /* Initialize Crypto class. */
            debug$2('Initializing Crypto...');
            debug$2(JSON.stringify(_params, null, 2));
            super();

            // TBD
        }

        test() {
            return 'Crypto (Instance) is working!'
        }
        static test() {
            return 'Crypto (Static) is working!'
        }
    }


    /* Initialize (globalThis) Nexa class. */
    const Nexa$5 = {};

    /* Initialize Crypto class. */
    Nexa$5.Crypto = Crypto;

    /* Initialize Crypto modules. */
    Nexa$5.decrypt = decrypt;
    Nexa$5.encrypt = encrypt;
    // Nexa.passwordToSafu = passwordToSafu
    Nexa$5.getHmac = getHmac;
    Nexa$5.randomBytes = randomBytes$1;
    Nexa$5.ripemd160 = ripemd160$1;
    Nexa$5.sha256 = sha256;
    Nexa$5.sha512 = sha512;

    /* Export Nexa to globalThis. */
    // NOTE: We merge to avoid conflict with other libraries.
    globalThis.Nexa = {
        ...globalThis.Nexa, // preserve Nexa object
        ...Nexa$5, // extend Nexa object
    };

    /**
     * Decode Null Data
     *
     * Decodes data from OP_RETURN null data field.
     */
    var _decodeNullData = (_data) => {
        // TODO
    };

    // base64 encode/decode derived from: https://github.com/niklasvh/base64-arraybuffer
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    /* eslint-disable functional/no-expression-statement, functional/immutable-data, @typescript-eslint/no-magic-numbers, no-bitwise, no-plusplus */
    /**
     * Convert a base64-encoded string to a Uint8Array.
     *
     * Note, this method always completes. If `validBase64` is not valid base64, an
     * incorrect result will be returned. If `validBase64` is potentially malformed,
     * check it with `isBase64` before calling this method.
     *
     * @param validBase64 - a valid base64-encoded string to decode
     */
    const base64ToBin = (validBase64) => {
        const lookup = new Uint8Array(123);
        // eslint-disable-next-line functional/no-let, functional/no-loop-statement
        for (let i = 0; i < chars.length; i++) {
            lookup[chars.charCodeAt(i)] = i;
        }
        const bufferLengthEstimate = validBase64.length * 0.75;
        const stringLength = validBase64.length;
        const bufferLength = validBase64[validBase64.length - 1] === '=' // eslint-disable-line @typescript-eslint/prefer-string-starts-ends-with
            ? validBase64[validBase64.length - 2] === '='
                ? bufferLengthEstimate - 2
                : bufferLengthEstimate - 1
            : bufferLengthEstimate;
        const buffer = new ArrayBuffer(bufferLength);
        const bytes = new Uint8Array(buffer);
        // eslint-disable-next-line functional/no-let
        let p = 0;
        // eslint-disable-next-line functional/no-let, functional/no-loop-statement
        for (let i = 0; i < stringLength; i += 4) {
            const encoded1 = lookup[validBase64.charCodeAt(i)];
            const encoded2 = lookup[validBase64.charCodeAt(i + 1)];
            const encoded3 = lookup[validBase64.charCodeAt(i + 2)];
            const encoded4 = lookup[validBase64.charCodeAt(i + 3)];
            bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
            bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
            bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
        }
        return bytes;
    };
    /* eslint-enable functional/no-expression-statement, functional/immutable-data, @typescript-eslint/no-magic-numbers, no-bitwise, no-plusplus */

    /**
     * Encode a positive integer as a little-endian Uint8Array. For values exceeding
     * `Number.MAX_SAFE_INTEGER` (`9007199254740991`), use `bigIntToBinUintLE`.
     * Negative values will return the same result as `0`.
     *
     * @param value - the number to encode
     */
    /**
     * Encode a positive integer as a 2-byte Uint16LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffff`.
     *
     * @param value - the number to encode
     */
    const numberToBinUint16LE$2 = (value) => {
        const uint16Length = 2;
        const bin = new Uint8Array(uint16Length);
        const writeAsLittleEndian = true;
        const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);
        // eslint-disable-next-line functional/no-expression-statement
        view.setUint16(0, value, writeAsLittleEndian);
        return bin;
    };
    /**
     * Encode a positive number as a 4-byte Uint32LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffffffff`.
     *
     * @param value - the number to encode
     */
    const numberToBinUint32LE$2 = (value) => {
        const uint32Length = 4;
        const bin = new Uint8Array(uint32Length);
        const writeAsLittleEndian = true;
        const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);
        // eslint-disable-next-line functional/no-expression-statement
        view.setUint32(0, value, writeAsLittleEndian);
        return bin;
    };

    /* eslint-disable functional/no-conditional-statement, functional/no-let, functional/no-expression-statement, no-underscore-dangle, functional/no-try-statement, @typescript-eslint/no-magic-numbers, max-params, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment */
    /**
     * Note, most of this method is translated and boiled-down from the wasm-pack
     * workflow. Significant changes to wasm-bindgen or wasm-pack build will likely
     * require modifications to this method.
     */
    const instantiateRustWasm = async (webassemblyBytes, expectedImportModuleName, hashExportName, initExportName, updateExportName, finalExportName) => {
        const wasm = (await WebAssembly.instantiate(webassemblyBytes, {
            [expectedImportModuleName]: {
                /**
                 * This would only be called in cases where a `__wbindgen_malloc` failed.
                 * Since `__wbindgen_malloc` isn't exposed to consumers, this error
                 * can only be encountered if the code below is broken.
                 */
                // eslint-disable-next-line camelcase, @typescript-eslint/naming-convention
                __wbindgen_throw: /* istanbul ignore next */ (ptr, len) => {
                    // eslint-disable-next-line functional/no-throw-statement
                    throw new Error(
                    // eslint-disable-next-line @typescript-eslint/no-use-before-define
                    Array.from(getUint8Memory().subarray(ptr, ptr + len))
                        .map((num) => String.fromCharCode(num))
                        .join(''));
                },
            },
        })).instance.exports; // eslint-disable-line @typescript-eslint/no-explicit-any
        let cachedUint8Memory; // eslint-disable-line @typescript-eslint/init-declarations
        let cachedUint32Memory; // eslint-disable-line @typescript-eslint/init-declarations
        let cachedGlobalArgumentPtr; // eslint-disable-line @typescript-eslint/init-declarations
        const globalArgumentPtr = () => {
            if (cachedGlobalArgumentPtr === undefined) {
                cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();
            }
            return cachedGlobalArgumentPtr;
        };
        /**
         * Must be hoisted for `__wbindgen_throw`.
         */
        // eslint-disable-next-line func-style
        function getUint8Memory() {
            if (cachedUint8Memory === undefined ||
                cachedUint8Memory.buffer !== wasm.memory.buffer) {
                cachedUint8Memory = new Uint8Array(wasm.memory.buffer);
            }
            return cachedUint8Memory;
        }
        const getUint32Memory = () => {
            if (cachedUint32Memory === undefined ||
                cachedUint32Memory.buffer !== wasm.memory.buffer) {
                cachedUint32Memory = new Uint32Array(wasm.memory.buffer);
            }
            return cachedUint32Memory;
        };
        const passArray8ToWasm = (array) => {
            const ptr = wasm.__wbindgen_malloc(array.length);
            getUint8Memory().set(array, ptr);
            return [ptr, array.length];
        };
        const getArrayU8FromWasm = (ptr, len) => getUint8Memory().subarray(ptr, ptr + len);
        const hash = (input) => {
            const [ptr0, len0] = passArray8ToWasm(input);
            const retPtr = globalArgumentPtr();
            try {
                wasm[hashExportName](retPtr, ptr0, len0);
                const mem = getUint32Memory();
                const ptr = mem[retPtr / 4];
                const len = mem[retPtr / 4 + 1];
                const realRet = getArrayU8FromWasm(ptr, len).slice();
                wasm.__wbindgen_free(ptr, len);
                return realRet;
            }
            finally {
                wasm.__wbindgen_free(ptr0, len0);
            }
        };
        const init = () => {
            const retPtr = globalArgumentPtr();
            wasm[initExportName](retPtr);
            const mem = getUint32Memory();
            const ptr = mem[retPtr / 4];
            const len = mem[retPtr / 4 + 1];
            const realRet = getArrayU8FromWasm(ptr, len).slice();
            wasm.__wbindgen_free(ptr, len);
            return realRet;
        };
        const update = (rawState, input) => {
            const [ptr0, len0] = passArray8ToWasm(rawState);
            const [ptr1, len1] = passArray8ToWasm(input);
            const retPtr = globalArgumentPtr();
            try {
                wasm[updateExportName](retPtr, ptr0, len0, ptr1, len1);
                const mem = getUint32Memory();
                const ptr = mem[retPtr / 4];
                const len = mem[retPtr / 4 + 1];
                const realRet = getArrayU8FromWasm(ptr, len).slice();
                wasm.__wbindgen_free(ptr, len);
                return realRet;
            }
            finally {
                rawState.set(getUint8Memory().subarray(ptr0 / 1, ptr0 / 1 + len0));
                wasm.__wbindgen_free(ptr0, len0);
                wasm.__wbindgen_free(ptr1, len1);
            }
        };
        const final = (rawState) => {
            const [ptr0, len0] = passArray8ToWasm(rawState);
            const retPtr = globalArgumentPtr();
            try {
                wasm[finalExportName](retPtr, ptr0, len0);
                const mem = getUint32Memory();
                const ptr = mem[retPtr / 4];
                const len = mem[retPtr / 4 + 1];
                const realRet = getArrayU8FromWasm(ptr, len).slice();
                wasm.__wbindgen_free(ptr, len);
                return realRet;
            }
            finally {
                rawState.set(getUint8Memory().subarray(ptr0 / 1, ptr0 / 1 + len0));
                wasm.__wbindgen_free(ptr0, len0);
            }
        };
        return {
            final,
            hash,
            init,
            update,
        };
    };
    /* eslint-enable functional/no-conditional-statement, functional/no-let, functional/no-expression-statement, no-underscore-dangle, functional/no-try-statement, @typescript-eslint/no-magic-numbers, max-params, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment */

    /* eslint-disable tsdoc/syntax */
    /**
     * @hidden
     */
    // prettier-ignore
    const ripemd160Base64Bytes = '';

    /**
     * The most performant way to instantiate ripemd160 functionality. To avoid
     * using Node.js or DOM-specific APIs, you can use `instantiateRipemd160`.
     *
     * @param webassemblyBytes - A buffer containing the ripemd160 binary.
     */
    const instantiateRipemd160Bytes = async (webassemblyBytes) => {
        const wasm = await instantiateRustWasm(webassemblyBytes, './ripemd160', 'ripemd160', 'ripemd160_init', 'ripemd160_update', 'ripemd160_final');
        return {
            final: wasm.final,
            hash: wasm.hash,
            init: wasm.init,
            update: wasm.update,
        };
    };
    const getEmbeddedRipemd160Binary = () => base64ToBin(ripemd160Base64Bytes).buffer;
    const cachedRipemd160 = {};
    /**
     * An ultimately-portable (but slower) version of `instantiateRipemd160Bytes`
     * which does not require the consumer to provide the ripemd160 binary buffer.
     */
    const instantiateRipemd160 = async () => {
        if (cachedRipemd160.cache !== undefined) {
            return cachedRipemd160.cache;
        }
        const result = instantiateRipemd160Bytes(getEmbeddedRipemd160Binary());
        // eslint-disable-next-line functional/immutable-data, functional/no-expression-statement
        cachedRipemd160.cache = result;
        return result;
    };

    /* Import modules. */

    const PushOperationConstants = {
        OP_0: 0,
        /**
         * OP_PUSHBYTES_75
         */
        maximumPushByteOperationSize: 0x4b,
        OP_PUSHDATA_1: 0x4c,
        OP_PUSHDATA_2: 0x4d,
        OP_PUSHDATA_4: 0x4e,
        /**
         * OP_PUSHDATA_4
         */
        highestPushDataOpcode: 0x4e,
        /**
         * For OP_1 to OP_16, `opcode` is the number offset by `0x50` (80):
         *
         * `OP_N: 0x50 + N`
         *
         * OP_0 is really OP_PUSHBYTES_0 (`0x00`), so it does not follow this pattern.
         */
        pushNumberOpcodesOffset: 0x50,
        /** OP_1 through OP_16 */
        pushNumberOpcodes: 16,
        negativeOne: 0x81,
        OP_1NEGATE: 79,
        /**
         * 256 - 1
         */
        maximumPushData1Size: 255,
        /**
         * Standard consensus parameter for most Bitcoin forks.
         */
        maximumPushSize: 520,
        /**
         * 256 ** 2 - 1
         */
        maximumPushData2Size: 65535,
        /**
         * 256 ** 4 - 1
         */
        maximumPushData4Size: 4294967295,
    };

    /**
     * Encode Data Push
     */
    var _encodeDataPush = (_data) => {
        return _data.length <= PushOperationConstants.maximumPushByteOperationSize
            ? _data.length === 0
                ? Uint8Array.of(0)
                : _data.length === 1
                ? _data[0] !== 0 && _data[0] <= PushOperationConstants.pushNumberOpcodes
                    ? Uint8Array.of(
                        _data[0] + PushOperationConstants.pushNumberOpcodesOffset
                    )
                    : _data[0] === PushOperationConstants.negativeOne
                    ? Uint8Array.of(PushOperationConstants.OP_1NEGATE)
                    : Uint8Array.from([1, ..._data])
                : Uint8Array.from([_data.length, ..._data])
            : _data.length <= PushOperationConstants.maximumPushData1Size
            ? Uint8Array.from([
                PushOperationConstants.OP_PUSHDATA_1,
                _data.length,
                ..._data,
            ])
            : _data.length <= PushOperationConstants.maximumPushData2Size
            ? Uint8Array.from([
                PushOperationConstants.OP_PUSHDATA_2,
                ...numberToBinUint16LE$2(_data.length),
                ..._data,
            ])
            : Uint8Array.from([
                PushOperationConstants.OP_PUSHDATA_4,
                ...numberToBinUint32LE$2(_data.length),
                ..._data,
            ])
    };

    /**
     * Encode a positive BigInt as little-endian Uint8Array. Negative values will
     * return the same result as `0`.
     *
     * @param value - the number to encode
     */
    var bigIntToBinUintLE$1 = (value) => {
        const baseUint8Array = 256;
        const base = BigInt(baseUint8Array);
        const result = [];
        // eslint-disable-next-line functional/no-let
        let remaining = value;
        // eslint-disable-next-line functional/no-loop-statement
        while (remaining >= base) {
            // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
            result.push(Number(remaining % base));
            // eslint-disable-next-line functional/no-expression-statement
            remaining /= base;
        }
        // eslint-disable-next-line functional/no-conditional-statement, functional/no-expression-statement, functional/immutable-data
        if (remaining > BigInt(0)) result.push(Number(remaining));

        return Uint8Array.from(result.length > 0 ? result : [0])
    };

    /**
     * Fill a new Uint8Array of a specific byte-length with the contents of a given
     * Uint8Array, truncating or padding the Uint8Array with zeros.
     *
     * @param bin - the Uint8Array to resize
     * @param bytes - the desired byte-length
     */
    var binToFixedLength$1 = (bin, bytes) => {
        const fixedBytes = new Uint8Array(bytes);
        const maxValue = 255;
        // eslint-disable-next-line functional/no-expression-statement
        bin.length > bytes ? fixedBytes.fill(maxValue) : fixedBytes.set(bin);
        // TODO: re-enable eslint-disable-next-line @typescript-eslint/no-unused-expressions
        return fixedBytes
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint16LE Uint8Array, clamping the
     * results. (Values exceeding `0xffff` return the same result as
     * `0xffff`, negative values return the same result as `0`.)
     *
     * @param value - the number to encode
     */
    var bigIntToBinUint16LEClamped$1 = (value) => {
        const uint16 = 2;
        return binToFixedLength$1(bigIntToBinUintLE$1(value), uint16)
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint16LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffff`.
     *
     * @param value - the number to encode
     */
    var _bigIntToBinUint16LE$1 = (value) => {
        const uint16LengthInBits = 16;
        const valueAsUint16 = BigInt.asUintN(uint16LengthInBits, value);
        const fixedLengthBin = bigIntToBinUint16LEClamped$1(valueAsUint16);
        return fixedLengthBin
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint32LE Uint8Array, clamping the
     * results. (Values exceeding `0xffff_ffff` return the same result as
     * `0xffff_ffff`, negative values return the same result as `0`.)
     *
     * @param value - the number to encode
     */
    var bigIntToBinUint32LEClamped$1 = (value) => {
        const uint32 = 4;
        return binToFixedLength$1(bigIntToBinUintLE$1(value), uint32)
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint32LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffff_ffff`.
     *
     * @param value - the number to encode
     */
    var _bigIntToBinUint32LE$1 = (value) => {
        const uint32LengthInBits = 32;
        const valueAsUint32 = BigInt.asUintN(uint32LengthInBits, value);
        const fixedLengthBin = bigIntToBinUint32LEClamped$1(valueAsUint32);
        return fixedLengthBin
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint64LE Uint8Array, clamping the
     * results. (Values exceeding `0xffff_ffff_ffff_ffff` return the same result as
     * `0xffff_ffff_ffff_ffff`, negative values return the same result as `0`.)
     *
     * @param value - the number to encode
     */
    var bigIntToBinUint64LEClamped$1 = (value) => {
        const uint64 = 8;
        return binToFixedLength$1(bigIntToBinUintLE$1(value), uint64)
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint64LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffff_ffff_ffff_ffff`.
     *
     * @param value - the number to encode
     */
    var _bigIntToBinUint64LE$1 = (value) => {
        const uint64LengthInBits = 64;
        const valueAsUint64 = BigInt.asUintN(uint64LengthInBits, value);
        const fixedLengthBin = bigIntToBinUint64LEClamped$1(valueAsUint64);
        return fixedLengthBin
    };

    var CompactUint$1 = {
        uint8MaxValue:  0xfc,
        uint16Prefix:   0xfd,
        uint16MaxValue: 0xffff,
        uint32Prefix:   0xfe,
        uint32MaxValue: 0xffffffff,
        uint64Prefix:   0xff,
        uint8:          1,
        uint16:         2,
        uint32:         4,
        uint64:         8,
    };

    /**
     * Encode a positive integer as a 2-byte Uint16LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffff`.
     *
     * @param value - the number to encode
     */
    var _numberToBinUint16LE$1 = (value) => {
        const uint16Length = 2;
        const bin = new Uint8Array(uint16Length);
        const writeAsLittleEndian = true;
        const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);
        // eslint-disable-next-line functional/no-expression-statement
        view.setUint16(0, value, writeAsLittleEndian);
        return bin
    };

    /**
     * Encode a positive number as a 4-byte Uint32LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffffffff`.
     *
     * @param value - the number to encode
     */
    var _numberToBinUint32LE$1 = (value) => {
        const uint32Length = 4;
        const bin = new Uint8Array(uint32Length);
        const writeAsLittleEndian = true;
        const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);
        // eslint-disable-next-line functional/no-expression-statement
        view.setUint32(0, value, writeAsLittleEndian);
        return bin
    };

    // TODO Add test for BigInt

    var _bigIntToCompactUint$1 = (value) =>
        value <= BigInt(CompactUint$1.uint8MaxValue)
            ? Uint8Array.of(Number(value))
            : value <= BigInt(CompactUint$1.uint16MaxValue)
                ? Uint8Array.from([
                    CompactUint$1.uint16Prefix,
                    ..._numberToBinUint16LE$1(Number(value)),
                ])
                : value <= BigInt(CompactUint$1.uint32MaxValue)
                    ? Uint8Array.from([
                        CompactUint$1.uint32Prefix,
                        ..._numberToBinUint32LE$1(Number(value)),
                    ])
                    : Uint8Array.from([
                        CompactUint$1.uint64Prefix,
                        ..._bigIntToBinUint64LE$1(value),
                    ]);

    const hexByteWidth$3 = 2;
    const hexadecimal$3 = 16;

    /**
     * Encode a Uint8Array into a hexadecimal-encoded string.
     *
     * E.g.: `binToHex(new Uint8Array([42, 100, 255]))` â†’ `'2a64ff'`
     *
     * @param bytes - a Uint8Array to encode
     */
    var _binToHex$1 = (bytes) =>
        bytes.reduce(
            (str, byte) => str + byte.toString(hexadecimal$3).padStart(hexByteWidth$3, '0'),
            ''
        );

    /**
     * Returns an array of incrementing values starting at `begin` and incrementing by one for `length`.
     *
     * E.g.: `range(3)` â†’ `[0, 1, 2]` and `range(3, 1)` â†’ `[1, 2, 3]`
     *
     * @param length - the number of elements in the array
     * @param begin - the index at which the range starts (default: `0`)
     */
    var range$1 = (length, begin = 0) =>
        Array.from({ length }, (_, index) => begin + index);

    /**
     * Split a string into an array of `chunkLength` strings. The final string may have a length between 1 and `chunkLength`.
     *
     * E.g.: `splitEvery('abcde', 2)` â†’ `['ab', 'cd', 'e']`
     */
    var splitEvery$1 = (input, chunkLength) =>
        range$1(Math.ceil(input.length / chunkLength))
            .map((index) => index * chunkLength)
            .map((begin) => input.slice(begin, begin + chunkLength));

    const hexByteWidth$2 = 2;
    const hexadecimal$2 = 16;

    /**
     * Decode a hexadecimal-encoded string into a Uint8Array.
     *
     * E.g.: `hexToBin('2a64ff')` â†’ `new Uint8Array([42, 100, 255])`
     *
     * Note, this method always completes. If `validHex` is not divisible by 2,
     * the final byte will be parsed as if it were prepended with a `0` (e.g. `aaa`
     * is interpreted as `aa0a`). If `validHex` is potentially malformed, check
     * it with `isHex` before calling this method.
     *
     * @param validHex - a string of valid, hexadecimal-encoded data
     */
    var _hexToBin$1 = (validHex) =>
        Uint8Array.from(
            splitEvery$1(validHex, hexByteWidth$2).map((byte) =>
                parseInt(byte, hexadecimal$2)
            )
        );

    /* Setup (non-ESM) debugger. */
    debugFactory('nexa:utils');

    /* Export (local) modules. */
    const bigIntToBinUint16LE$1 = _bigIntToBinUint16LE$1;
    const bigIntToBinUint32LE$1 = _bigIntToBinUint32LE$1;
    const bigIntToBinUint64LE$1 = _bigIntToBinUint64LE$1;
    const bigIntToCompactUint$1 = _bigIntToCompactUint$1;
    const binToHex$1 = _binToHex$1;
    const hexToBin$1 = _hexToBin$1;
    const numberToBinUint16LE$1 = _numberToBinUint16LE$1;
    const numberToBinUint32LE$1 = _numberToBinUint32LE$1;


    /**
     * Reverse Bytes
     *
     * Reverse the bytes of a HEX string.
     */
    const reverseHex$1 = (_bytes) => {
        return _bytes.match(/[a-fA-F0-9]{2}/g).reverse().join('')
    };


    /**
     * Utils Class
     *
     * A suite of useful utilities.
     */
    let Utils$1 = class Utils {
        // NOTE: We won't use a constructor, as this is a "pure" class.

        static reverseHex(_bytes) {
            return reverseHex$1(_bytes)
        }
    };


    /* Initialize (globalThis) Nexa class. */
    const Nexa$4 = {};

    /* Initialize Utilities class. */
    Nexa$4.Utils = Utils$1;

    /* Initialize Utilities modules. */
    Nexa$4.bigIntToBinUint16LE = bigIntToBinUint16LE$1;
    Nexa$4.bigIntToBinUint32LE = bigIntToBinUint32LE$1;
    Nexa$4.bigIntToBinUint64LE = bigIntToBinUint64LE$1;
    Nexa$4.bigIntToCompactUint = bigIntToCompactUint$1;
    Nexa$4.binToHex = binToHex$1;
    Nexa$4.hexToBin = hexToBin$1;
    Nexa$4.numberToBinUint16LE = numberToBinUint16LE$1;
    Nexa$4.numberToBinUint32LE = numberToBinUint32LE$1;
    Nexa$4.reverseHex = reverseHex$1;

    /* Export Nexa to globalThis. */
    // NOTE: We merge to avoid conflict with other libraries.
    globalThis.Nexa = {
        ...globalThis.Nexa, // preserve Nexa object
        ...Nexa$4, // extend Nexa object
    };

    /* Import modules. */

    const isHex = (_maybeHex) =>
        _maybeHex.length % 2 === 0 && !/[^a-fA-F0-9]/u.test(_maybeHex);

    /**
     * Encode Null Data
     *
     * Encodes data for insertion into OP_RETURN null data field.
     *
     * Supported formats include:
     *   1. String (text)
     *   2. Hexadecimal (text)
     *   3. TypedArray (binary)
     *
     * NOTE: Data may be provided as a single element OR as an array of elements.
     */
    var _encodeNullData = (_data) => {
        /* Initialize locals. */
        let binData;
        let binPart;
        let code;
        let hexPart;
        let part;
        let parts;

        /* Validate array. */
        if (!Array.isArray(_data)) {
            parts = [_data];
        } else {
            parts = _data;
        }

        /* Initialize binary data. */
        binData = new Uint8Array(0);

        /* Handle parts. */
        for (let i = 0; i < parts.length; i++) {
            /* Initialize hex (data) part. */
            hexPart = '';

            /* Set (data) part. */
            part = parts[i];

            if (typeof part === 'string') {
                /* Validate hexadecimal data. */
                if (isHex(part)) {
                    /* Set part as hexadecimal. */
                    hexPart = part;
                } else {
                    /* Convert user data (string) to hex. */
                    for (let j = 0; j < part.length; j++) {
                        /* Convert to hex code. */
                        code = part
                            .charCodeAt(j)
                            .toString(16)
                            .padStart(2, '0');

                        /* Add hex code to string. */
                        hexPart += code;
                    }
                }

                /* Convert to binary (data) part. */
                binPart = encodeDataPush(hexToBin$1(hexPart));
            } else {
                /* Set binary part (from TypedArray). */
                binPart = encodeDataPush(part);
            }

            /* Append binary part. */
            binData = new Uint8Array([
                ...binData,
                ...binPart,
            ]);
        }

        /* Return (binary) script data. */
        return new Uint8Array([
            OP.RETURN,
            ...binData,
        ])
    };

    /* Import modules. */

    /**
     * Get Opcode
     *
     * Searches the OPs database by ID.
     */
    var _getOpcode = (_opid) => {
        /* Find the OP by ID. */
        const op = Object.keys(OP).find(_op => {
            return OP[_op] === _opid
        });

        /* Return OP. */
        return op
    };

    /**
     * The `BCH_2023_05` instruction set.
     */

    var _OP = {
      /**
       * A.K.A. `FALSE` or `PUSHBYTES_0`
       */
      _0: 0x00,
      ZERO: 0x00,
      PUSHBYTES_1: 0x01,
      PUSHBYTES_2: 0x02,
      PUSHBYTES_3: 0x03,
      PUSHBYTES_4: 0x04,
      PUSHBYTES_5: 0x05,
      PUSHBYTES_6: 0x06,
      PUSHBYTES_7: 0x07,
      PUSHBYTES_8: 0x08,
      PUSHBYTES_9: 0x09,
      PUSHBYTES_10: 0x0a,
      PUSHBYTES_11: 0x0b,
      PUSHBYTES_12: 0x0c,
      PUSHBYTES_13: 0x0d,
      PUSHBYTES_14: 0x0e,
      PUSHBYTES_15: 0x0f,
      PUSHBYTES_16: 0x10,
      PUSHBYTES_17: 0x11,
      PUSHBYTES_18: 0x12,
      PUSHBYTES_19: 0x13,
      PUSHBYTES_20: 0x14,
      PUSHBYTES_21: 0x15,
      PUSHBYTES_22: 0x16,
      PUSHBYTES_23: 0x17,
      PUSHBYTES_24: 0x18,
      PUSHBYTES_25: 0x19,
      PUSHBYTES_26: 0x1a,
      PUSHBYTES_27: 0x1b,
      PUSHBYTES_28: 0x1c,
      PUSHBYTES_29: 0x1d,
      PUSHBYTES_30: 0x1e,
      PUSHBYTES_31: 0x1f,
      PUSHBYTES_32: 0x20,
      PUSHBYTES_33: 0x21,
      PUSHBYTES_34: 0x22,
      PUSHBYTES_35: 0x23,
      PUSHBYTES_36: 0x24,
      PUSHBYTES_37: 0x25,
      PUSHBYTES_38: 0x26,
      PUSHBYTES_39: 0x27,
      PUSHBYTES_40: 0x28,
      PUSHBYTES_41: 0x29,
      PUSHBYTES_42: 0x2a,
      PUSHBYTES_43: 0x2b,
      PUSHBYTES_44: 0x2c,
      PUSHBYTES_45: 0x2d,
      PUSHBYTES_46: 0x2e,
      PUSHBYTES_47: 0x2f,
      PUSHBYTES_48: 0x30,
      PUSHBYTES_49: 0x31,
      PUSHBYTES_50: 0x32,
      PUSHBYTES_51: 0x33,
      PUSHBYTES_52: 0x34,
      PUSHBYTES_53: 0x35,
      PUSHBYTES_54: 0x36,
      PUSHBYTES_55: 0x37,
      PUSHBYTES_56: 0x38,
      PUSHBYTES_57: 0x39,
      PUSHBYTES_58: 0x3a,
      PUSHBYTES_59: 0x3b,
      PUSHBYTES_60: 0x3c,
      PUSHBYTES_61: 0x3d,
      PUSHBYTES_62: 0x3e,
      PUSHBYTES_63: 0x3f,
      PUSHBYTES_64: 0x40,
      PUSHBYTES_65: 0x41,
      PUSHBYTES_66: 0x42,
      PUSHBYTES_67: 0x43,
      PUSHBYTES_68: 0x44,
      PUSHBYTES_69: 0x45,
      PUSHBYTES_70: 0x46,
      PUSHBYTES_71: 0x47,
      PUSHBYTES_72: 0x48,
      PUSHBYTES_73: 0x49,
      PUSHBYTES_74: 0x4a,
      PUSHBYTES_75: 0x4b,
      PUSHDATA_1: 0x4c,
      PUSHDATA_2: 0x4d,
      PUSHDATA_4: 0x4e,
      _1NEGATE: 0x4f,
      RESERVED: 0x50,
      /**
       * A.K.A. `TRUE`
       */
      _1: 0x51,
      ONE: 0x51,
      _2: 0x52,
      TWO: 0x52,
      _3: 0x53,
      THREE: 0x53,
      _4: 0x54,
      FOUR: 0x54,
      _5: 0x55,
      FIVE: 0x55,
      _6: 0x56,
      SIX: 0x56,
      _7: 0x57,
      SEVEN: 0x57,
      _8: 0x58,
      EIGHT: 0x58,
      _9: 0x59,
      NINE: 0x59,
      _10: 0x5a,
      TEN: 0x5a,
      _11: 0x5b,
      ELEVEN: 0x5b,
      _12: 0x5c,
      TWELVE: 0x5c,
      _13: 0x5d,
      THIRTEEN: 0x5d,
      _14: 0x5e,
      FOURTEEN: 0x5e,
      _15: 0x5f,
      FIFTEEN: 0x5f,
      _16: 0x60,
      SIXTEEN: 0x60,
      NOP: 0x61,
      VER: 0x62,
      IF: 0x63,
      NOTIF: 0x64,
      VERIF: 0x65,
      VERNOTIF: 0x66,
      ELSE: 0x67,
      ENDIF: 0x68,
      VERIFY: 0x69,
      RETURN: 0x6a,
      TOALTSTACK: 0x6b,
      FROMALTSTACK: 0x6c,
      _2DROP: 0x6d,
      TWODROP: 0x6d,
      _2DUP: 0x6e,
      TWODUP: 0x6e,
      _3DUP: 0x6f,
      THREEDUP: 0x6f,
      _2OVER: 0x70,
      TWOOVER: 0x70,
      _2ROT: 0x71,
      TWOROT: 0x71,
      _2SWAP: 0x72,
      TWOSWAP: 0x72,
      IFDUP: 0x73,
      DEPTH: 0x74,
      DROP: 0x75,
      DUP: 0x76,
      NIP: 0x77,
      OVER: 0x78,
      PICK: 0x79,
      ROLL: 0x7a,
      ROT: 0x7b,
      SWAP: 0x7c,
      TUCK: 0x7d,
      CAT: 0x7e,
      SPLIT: 0x7f,
      NUM2BIN: 0x80,
      BIN2NUM: 0x81,
      SIZE: 0x82,
      INVERT: 0x83,
      AND: 0x84,
      OR: 0x85,
      XOR: 0x86,
      EQUAL: 0x87,
      EQUALVERIFY: 0x88,
      RESERVED1: 0x89,
      RESERVED2: 0x8a,
      _1ADD: 0x8b,
      ONEADD: 0x8b,
      _1SUB: 0x8c,
      ONESUB: 0x8c,
      _2MUL: 0x8d,
      TWOMUL: 0x8d,
      _2DIV: 0x8e,
      TWODIV: 0x8e,
      NEGATE: 0x8f,
      ABS: 0x90,
      NOT: 0x91,
      _0NOTEQUAL: 0x92,
      ZERONOTEQUAL: 0x92,
      ADD: 0x93,
      SUB: 0x94,
      MUL: 0x95,
      DIV: 0x96,
      MOD: 0x97,
      LSHIFT: 0x98,
      RSHIFT: 0x99,
      BOOLAND: 0x9a,
      BOOLOR: 0x9b,
      NUMEQUAL: 0x9c,
      NUMEQUALVERIFY: 0x9d,
      NUMNOTEQUAL: 0x9e,
      LESSTHAN: 0x9f,
      GREATERTHAN: 0xa0,
      LESSTHANOREQUAL: 0xa1,
      GREATERTHANOREQUAL: 0xa2,
      MIN: 0xa3,
      MAX: 0xa4,
      WITHIN: 0xa5,
      RIPEMD160: 0xa6,
      SHA1: 0xa7,
      SHA256: 0xa8,
      HASH160: 0xa9,
      HASH256: 0xaa,
      CODESEPARATOR: 0xab,
      CHECKSIG: 0xac,
      CHECKSIGVERIFY: 0xad,
      CHECKMULTISIG: 0xae,
      CHECKMULTISIGVERIFY: 0xaf,
      NOP1: 0xb0,
      CHECKLOCKTIMEVERIFY: 0xb1,
      CHECKSEQUENCEVERIFY: 0xb2,
      NOP4: 0xb3,
      NOP5: 0xb4,
      NOP6: 0xb5,
      NOP7: 0xb6,
      NOP8: 0xb7,
      NOP9: 0xb8,
      NOP10: 0xb9,
      CHECKDATASIG: 0xba,
      CHECKDATASIGVERIFY: 0xbb,
      REVERSEBYTES: 0xbc,
      /**
       * First codepoint left undefined before nullary introspection operations.
       */
      UNKNOWN189: 0xbd,
      UNKNOWN190: 0xbe,
      /**
       * Last codepoint left undefined before nullary introspection operations.
       */
      UNKNOWN191: 0xbf,
      INPUTINDEX: 0xc0,
      ACTIVEBYTECODE: 0xc1,
      TXVERSION: 0xc2,
      TXINPUTCOUNT: 0xc3,
      TXOUTPUTCOUNT: 0xc4,
      TXLOCKTIME: 0xc5,
      UTXOVALUE: 0xc6,
      UTXOBYTECODE: 0xc7,
      OUTPOINTTXHASH: 0xc8,
      OUTPOINTINDEX: 0xc9,
      INPUTBYTECODE: 0xca,
      INPUTSEQUENCENUMBER: 0xcb,
      OUTPUTVALUE: 0xcc,
      OUTPUTBYTECODE: 0xcd,
      UNKNOWN206: 0xce,
      UNKNOWN207: 0xcf,
      UNKNOWN208: 0xd0,
      UNKNOWN209: 0xd1,
      UNKNOWN210: 0xd2,
      UNKNOWN211: 0xd3,
      UNKNOWN212: 0xd4,
      UNKNOWN213: 0xd5,
      UNKNOWN214: 0xd6,
      UNKNOWN215: 0xd7,
      UNKNOWN216: 0xd8,
      UNKNOWN217: 0xd9,
      UNKNOWN218: 0xda,
      UNKNOWN219: 0xdb,
      UNKNOWN220: 0xdc,
      UNKNOWN221: 0xdd,
      UNKNOWN222: 0xde,
      UNKNOWN223: 0xdf,
      UNKNOWN224: 0xe0,
      UNKNOWN225: 0xe1,
      UNKNOWN226: 0xe2,
      UNKNOWN227: 0xe3,
      UNKNOWN228: 0xe4,
      UNKNOWN229: 0xe5,
      UNKNOWN230: 0xe6,
      UNKNOWN231: 0xe7,
      UNKNOWN232: 0xe8,
      PLACE: 0xe9,
      PUSH_TX_STATE: 0xea,
      SETBMD: 0xeb,
      BIN2BIGNUM: 0xec,
      EXEC: 0xed,
      UNKNOWN238: 0xee,
      UNKNOWN239: 0xef,
      /**
       * A.K.A. `PREFIX_BEGIN`
       */
      UNKNOWN240: 0xf0,
      UNKNOWN241: 0xf1,
      UNKNOWN242: 0xf2,
      UNKNOWN243: 0xf3,
      UNKNOWN244: 0xf4,
      UNKNOWN245: 0xf5,
      UNKNOWN246: 0xf6,
      /**
       * A.K.A. `PREFIX_END`
       */
      UNKNOWN247: 0xf7,
      UNKNOWN248: 0xf8,
      UNKNOWN249: 0xf9,
      UNKNOWN250: 0xfa,
      UNKNOWN251: 0xfb,
      UNKNOWN252: 0xfc,
      UNKNOWN253: 0xfd,
      UNKNOWN254: 0xfe,
      UNKNOWN255: 0xff,
    };

    /* Setup (non-ESM) debugger. */
    const debug$1 = debugFactory('nexa:script');

    /* Export (local) modules. */
    const decodeNullData = _decodeNullData;
    const encodeDataPush = _encodeDataPush;
    const encodeNullData = _encodeNullData;
    const getOpcode = _getOpcode;
    const OP = _OP;


    /**
     * Script Class
     *
     * Manages script functions.
     */
    class Script {
        constructor(_params) {
            /* Initialize Script class. */
            debug$1('Initializing Script...');
            debug$1(JSON.stringify(_params, null, 2));

            this._data = null;

            if (_params) {
                this._data = _params;
            }

            return this
        }

        test() {
            return 'Script (Instance) is working!'
        }

        static test() {
            return 'Script (Static) is working!'
        }

        static empty() {
            const initialData = [];

            return new Script(initialData) // For method chaining.
        }

        get chunks() {
            return this.data // alias for `data`
        }

        get data() {
            return this._data
        }

        get length() {
            return this._data.length
        }

        get raw() {
            return this.data // alias for `data`
        }

        add(_data) {
            /* Initailize data holder. */
            let data;

            if (_data instanceof Uint8Array) {
                data = _data;
            } else if (Array.isArray(_data)) {
                data = new Uint8Array(_data);
            } else {
                data = new Uint8Array([_data]);
            }

            /* Add data to existing array. */
            this._data = new Uint8Array([
                ...this._data,
                ...data,
            ]);

            return this // For method chaining.
        }

        toString() {
            /* Initialize OPs. */
            const ops = [];

            this.data.forEach(_code => {
                ops.push(getOpcode(_code));
            });

            return ops.join(' ')
        }
    }


    /* Initialize (globalThis) Nexa class. */
    const Nexa$3 = {};

    /* Initialize Script class. */
    Nexa$3.Script = Script;

    /* Initialize Script modules. */
    Nexa$3.decodeNullData = decodeNullData;
    Nexa$3.encodeDataPush = encodeDataPush;
    Nexa$3.encodeNullData = encodeNullData;
    Nexa$3.getOpcode = getOpcode;
    Nexa$3.OP = OP;

    /* Export Nexa to globalThis. */
    // NOTE: We merge to avoid conflict with other libraries.
    globalThis.Nexa = {
        ...globalThis.Nexa, // preserve Nexa object
        ...Nexa$3, // extend Nexa object
    };

    /**
     * Encode a positive BigInt as little-endian Uint8Array. Negative values will
     * return the same result as `0`.
     *
     * @param value - the number to encode
     */
    var bigIntToBinUintLE = (value) => {
        const baseUint8Array = 256;
        const base = BigInt(baseUint8Array);
        const result = [];
        // eslint-disable-next-line functional/no-let
        let remaining = value;
        // eslint-disable-next-line functional/no-loop-statement
        while (remaining >= base) {
            // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
            result.push(Number(remaining % base));
            // eslint-disable-next-line functional/no-expression-statement
            remaining /= base;
        }
        // eslint-disable-next-line functional/no-conditional-statement, functional/no-expression-statement, functional/immutable-data
        if (remaining > BigInt(0)) result.push(Number(remaining));

        return Uint8Array.from(result.length > 0 ? result : [0])
    };

    /**
     * Fill a new Uint8Array of a specific byte-length with the contents of a given
     * Uint8Array, truncating or padding the Uint8Array with zeros.
     *
     * @param bin - the Uint8Array to resize
     * @param bytes - the desired byte-length
     */
    var binToFixedLength = (bin, bytes) => {
        const fixedBytes = new Uint8Array(bytes);
        const maxValue = 255;
        // eslint-disable-next-line functional/no-expression-statement
        bin.length > bytes ? fixedBytes.fill(maxValue) : fixedBytes.set(bin);
        // TODO: re-enable eslint-disable-next-line @typescript-eslint/no-unused-expressions
        return fixedBytes
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint16LE Uint8Array, clamping the
     * results. (Values exceeding `0xffff` return the same result as
     * `0xffff`, negative values return the same result as `0`.)
     *
     * @param value - the number to encode
     */
    var bigIntToBinUint16LEClamped = (value) => {
        const uint16 = 2;
        return binToFixedLength(bigIntToBinUintLE(value), uint16)
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint16LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffff`.
     *
     * @param value - the number to encode
     */
    var _bigIntToBinUint16LE = (value) => {
        const uint16LengthInBits = 16;
        const valueAsUint16 = BigInt.asUintN(uint16LengthInBits, value);
        const fixedLengthBin = bigIntToBinUint16LEClamped(valueAsUint16);
        return fixedLengthBin
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint32LE Uint8Array, clamping the
     * results. (Values exceeding `0xffff_ffff` return the same result as
     * `0xffff_ffff`, negative values return the same result as `0`.)
     *
     * @param value - the number to encode
     */
    var bigIntToBinUint32LEClamped = (value) => {
        const uint32 = 4;
        return binToFixedLength(bigIntToBinUintLE(value), uint32)
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint32LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffff_ffff`.
     *
     * @param value - the number to encode
     */
    var _bigIntToBinUint32LE = (value) => {
        const uint32LengthInBits = 32;
        const valueAsUint32 = BigInt.asUintN(uint32LengthInBits, value);
        const fixedLengthBin = bigIntToBinUint32LEClamped(valueAsUint32);
        return fixedLengthBin
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint64LE Uint8Array, clamping the
     * results. (Values exceeding `0xffff_ffff_ffff_ffff` return the same result as
     * `0xffff_ffff_ffff_ffff`, negative values return the same result as `0`.)
     *
     * @param value - the number to encode
     */
    var bigIntToBinUint64LEClamped = (value) => {
        const uint64 = 8;
        return binToFixedLength(bigIntToBinUintLE(value), uint64)
    };

    /**
     * Encode a positive BigInt as an 8-byte Uint64LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffff_ffff_ffff_ffff`.
     *
     * @param value - the number to encode
     */
    var _bigIntToBinUint64LE = (value) => {
        const uint64LengthInBits = 64;
        const valueAsUint64 = BigInt.asUintN(uint64LengthInBits, value);
        const fixedLengthBin = bigIntToBinUint64LEClamped(valueAsUint64);
        return fixedLengthBin
    };

    var CompactUint = {
        uint8MaxValue:  0xfc,
        uint16Prefix:   0xfd,
        uint16MaxValue: 0xffff,
        uint32Prefix:   0xfe,
        uint32MaxValue: 0xffffffff,
        uint64Prefix:   0xff,
        uint8:          1,
        uint16:         2,
        uint32:         4,
        uint64:         8,
    };

    /**
     * Encode a positive integer as a 2-byte Uint16LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffff`.
     *
     * @param value - the number to encode
     */
    var _numberToBinUint16LE = (value) => {
        const uint16Length = 2;
        const bin = new Uint8Array(uint16Length);
        const writeAsLittleEndian = true;
        const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);
        // eslint-disable-next-line functional/no-expression-statement
        view.setUint16(0, value, writeAsLittleEndian);
        return bin
    };

    /**
     * Encode a positive number as a 4-byte Uint32LE Uint8Array.
     *
     * This method will return an incorrect result for values outside of the range
     * `0` to `0xffffffff`.
     *
     * @param value - the number to encode
     */
    var _numberToBinUint32LE = (value) => {
        const uint32Length = 4;
        const bin = new Uint8Array(uint32Length);
        const writeAsLittleEndian = true;
        const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);
        // eslint-disable-next-line functional/no-expression-statement
        view.setUint32(0, value, writeAsLittleEndian);
        return bin
    };

    // TODO Add test for BigInt

    var _bigIntToCompactUint = (value) =>
        value <= BigInt(CompactUint.uint8MaxValue)
            ? Uint8Array.of(Number(value))
            : value <= BigInt(CompactUint.uint16MaxValue)
                ? Uint8Array.from([
                    CompactUint.uint16Prefix,
                    ..._numberToBinUint16LE(Number(value)),
                ])
                : value <= BigInt(CompactUint.uint32MaxValue)
                    ? Uint8Array.from([
                        CompactUint.uint32Prefix,
                        ..._numberToBinUint32LE(Number(value)),
                    ])
                    : Uint8Array.from([
                        CompactUint.uint64Prefix,
                        ..._bigIntToBinUint64LE(value),
                    ]);

    const hexByteWidth$1 = 2;
    const hexadecimal$1 = 16;

    /**
     * Encode a Uint8Array into a hexadecimal-encoded string.
     *
     * E.g.: `binToHex(new Uint8Array([42, 100, 255]))` â†’ `'2a64ff'`
     *
     * @param bytes - a Uint8Array to encode
     */
    var _binToHex = (bytes) =>
        bytes.reduce(
            (str, byte) => str + byte.toString(hexadecimal$1).padStart(hexByteWidth$1, '0'),
            ''
        );

    /**
     * Returns an array of incrementing values starting at `begin` and incrementing by one for `length`.
     *
     * E.g.: `range(3)` â†’ `[0, 1, 2]` and `range(3, 1)` â†’ `[1, 2, 3]`
     *
     * @param length - the number of elements in the array
     * @param begin - the index at which the range starts (default: `0`)
     */
    var range = (length, begin = 0) =>
        Array.from({ length }, (_, index) => begin + index);

    /**
     * Split a string into an array of `chunkLength` strings. The final string may have a length between 1 and `chunkLength`.
     *
     * E.g.: `splitEvery('abcde', 2)` â†’ `['ab', 'cd', 'e']`
     */
    var splitEvery = (input, chunkLength) =>
        range(Math.ceil(input.length / chunkLength))
            .map((index) => index * chunkLength)
            .map((begin) => input.slice(begin, begin + chunkLength));

    const hexByteWidth = 2;
    const hexadecimal = 16;

    /**
     * Decode a hexadecimal-encoded string into a Uint8Array.
     *
     * E.g.: `hexToBin('2a64ff')` â†’ `new Uint8Array([42, 100, 255])`
     *
     * Note, this method always completes. If `validHex` is not divisible by 2,
     * the final byte will be parsed as if it were prepended with a `0` (e.g. `aaa`
     * is interpreted as `aa0a`). If `validHex` is potentially malformed, check
     * it with `isHex` before calling this method.
     *
     * @param validHex - a string of valid, hexadecimal-encoded data
     */
    var _hexToBin = (validHex) =>
        Uint8Array.from(
            splitEvery(validHex, hexByteWidth).map((byte) =>
                parseInt(byte, hexadecimal)
            )
        );

    /**
     * Reverse (Hex) Bytes
     *
     * Reverse the bytes of a HEX string.
     */
    var _reverseHex = (_bytes) => {
        return _bytes.match(/[a-fA-F0-9]{2}/g).reverse().join('')
    };

    /**
     * Sleep
     *
     * Delay execution for the specified number of milliseconds.
     */
    function _sleep (_milliseconds) {
        return new Promise(r => setTimeout(r, _milliseconds))
    }

    /* Import (local) modules. */

    /* Export (local) modules. */
    const bigIntToBinUint16LE = _bigIntToBinUint16LE;
    const bigIntToBinUint32LE = _bigIntToBinUint32LE;
    const bigIntToBinUint64LE = _bigIntToBinUint64LE;
    const bigIntToCompactUint = _bigIntToCompactUint;
    const binToHex = _binToHex;
    const hexToBin = _hexToBin;
    const numberToBinUint16LE = _numberToBinUint16LE;
    const numberToBinUint32LE = _numberToBinUint32LE;
    const reverseHex = _reverseHex;
    const sleep = _sleep;


    /**
     * Utils Class
     *
     * A suite of useful utilities.
     */
    class Utils {
        // NOTE: We won't use a constructor, as this is a "pure" class.

        static reverseHex(_bytes) {
            return reverseHex(_bytes)
        }

        static sleep(_milliseconds) {
            return sleep(_milliseconds)
        }
    }


    /* Initialize (globalThis) Nexa class. */
    const Nexa$2 = {};

    /* Initialize Utilities class. */
    Nexa$2.Utils = Utils;

    /* Initialize Utilities modules. */
    Nexa$2.bigIntToBinUint16LE = bigIntToBinUint16LE;
    Nexa$2.bigIntToBinUint32LE = bigIntToBinUint32LE;
    Nexa$2.bigIntToBinUint64LE = bigIntToBinUint64LE;
    Nexa$2.bigIntToCompactUint = bigIntToCompactUint;
    Nexa$2.binToHex = binToHex;
    Nexa$2.hexToBin = hexToBin;
    Nexa$2.numberToBinUint16LE = numberToBinUint16LE;
    Nexa$2.numberToBinUint32LE = numberToBinUint32LE;
    Nexa$2.reverseHex = reverseHex;
    Nexa$2.sleep = sleep;

    /* Export Nexa to globalThis. */
    // NOTE: We merge to avoid conflict with other libraries.
    globalThis.Nexa = {
        ...globalThis.Nexa, // preserve Nexa object
        ...Nexa$2, // extend Nexa object
    };

    /* Import modules. */

    let ripemd160

    ;(async () => {
        ripemd160 = await instantiateRipemd160();
    })();

    /**
     * Get Sender
     *
     * Retrieves the address of the Sender of an Input.
     */
    var _getSender = (_input) => {
        /* Retrieve the FIRST script signature. */
        const scriptSig = _input.scriptSig.hex;

        /* Parse public key from script signature. */
        const publicKey = hexToBin(scriptSig.slice(4, 70));

        /* Hash the public key hash according to the P2PKH/P2PKT scheme. */
        const scriptPushPubKey = encodeDataPush(publicKey);

        /* Generate public key hash. */
        const publicKeyHash = ripemd160.hash(sha256(scriptPushPubKey));

        /* Generate public key hash script. */
        const pkhScript = new Uint8Array([
            OP.ZERO,
            OP.ONE,
            ...encodeDataPush(publicKeyHash),
        ]);

        /* Generate address. */
        const address = encodeAddress('nexa', 'TEMPLATE', pkhScript);

        /* Return (sender) address. */
        return address
    };

    // Unique ID creation requires a high quality random # generator. In the browser we therefore
    // require the crypto API and do not support built-in fallback to lower quality random number
    // generators (like Math.random()).
    let getRandomValues;
    const rnds8 = new Uint8Array(16);
    function rng() {
      // lazy load so that environments that need to polyfill have a chance to do so
      if (!getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
        getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

        if (!getRandomValues) {
          throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
        }
      }

      return getRandomValues(rnds8);
    }

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */

    const byteToHex = [];

    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 0x100).toString(16).slice(1));
    }

    function unsafeStringify(arr, offset = 0) {
      // Note: Be careful editing this code!  It's been tuned for performance
      // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
      return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
    }

    const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
    var native = {
      randomUUID
    };

    function v4(options, buf, offset) {
      if (native.randomUUID && !buf && !options) {
        return native.randomUUID();
      }

      options = options || {};
      const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

      rnds[6] = rnds[6] & 0x0f | 0x40;
      rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

      return unsafeStringify(rnds);
    }

    /* Import modules. */

    /**
     * Make Request
     */
    function makeRequest (_request, _id, _callback) {
        /* Generate a new (request) id. */
        const id = _id || v4();

        /* Set method. */
        const method = _request.method;

        /* Set parameters. */
        const params = _request.params;

        /* Create request. */
        const request = {
            id,
            method,
            params,
        };

        /* Validate Rostrum (module) status. */
        // if (this._connMgr?.isReady && this._connMgr?.isOpen) {
        if (this._connMgr?.isReady) {
            /* Validate connection. */
            if (
                this._connMgr.status[0].isOpen ||
                this._connMgr.status[1].isOpen ||
                this._connMgr.status[2].isOpen
            ) {
                for (let i = 0; i < this._connMgr.pool.length; i++) {
                    if (this._connMgr.status[i].isOpen) {
                        /* Send request. */
                        this._connMgr.pool[i]
                            .send(JSON.stringify(request) + '\n'); // NOTE: We MUST include the "new line".
                        // console.log('SENT REQUEST', i, request)
                    }
                }
            } else {
                /* Add new request. */
                this._requestQueue.push(request);
                // console.log('ADDED REQUEST TO QUEUE', request)
            }
        } else {
            /* Add new request. */
            this._requestQueue.push(request);
            // console.log('ADDED REQUEST TO QUEUE', request)
        }

        const self = this;

        /* Return a promise. */
        return new Promise(function (_resolve, _reject) {
            /* Initialize (request) promise. */
            self._connMgr.requests[id] = {};

            /* Set resolve. */
            self._connMgr.requests[id].callback = _callback;

            /* Set resolve. */
            self._connMgr.requests[id].resolve = _resolve;

            /* Set reject. */
            self._connMgr.requests[id].reject = _reject;

            /* Set (connection) ready flag. */
            self._connMgr.isReady = true;
        })
    }

    /* Import modules. */

    /**
     * (Blockchain) Address Balance
     *
     * Return the confirmed and unconfirmed balances of a Bitcoin Cash address.
     *
     * Version added: 1.4.3
     */
    async function _getAddressBalance (_address, _filter = 'include_tokens') {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getAddressBalance(_address, _filter)
        }

        /* Set method. */
        method = 'blockchain.address.get_balance';

        /* Set parameters. */
        params = [
            _address,
            _filter, // NOTE: Filter what utxos are included in the query.
        ];

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
     * (Blockchain) Decode Remote Address
     *
     * Decode a Bitcoin Cash or a Nexa address to its raw payload. This method is
     * potentially useful for clients needing to see the encoded contents of a
     * address but lacking the local libraries necessary to decode them.
     *
     * Version added: Rostrum 7.0
     */
    async function _decodeRemoteAddress (_address) {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.decodeRemoteAddress(_address)
        }

        /* Set method. */
        method = 'blockchain.address.decode';

        /* Set parameters. */
        params = [ _address ];

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
     * (Blockchain) Address First Use
     *
     * Returns a first occurance of usage of scripthash as ouput on the blockchain.
     *
     * Version added: Rostrum 1.2
     */
    async function _getAddressFirstUse (_address, _filter = 'include_tokens') {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getAddressFirstUse(_address, _filter)
        }

        /* Set method. */
        method = 'blockchain.address.get_first_use';

        /* Set parameters. */
        params = [
            _address,
            _filter,
        ];

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
     * (Blockchain) Address History
     *
     * Return the confirmed and unconfirmed history of a Bitcoin Cash
     * or Nexa address.
     *
     * Version added: Rostrum 1.4.3
     */
    async function _getAddressHistory (_address, _filter = 'include_tokens') {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getAddressHistory(_address, _filter)
        }

        /* Set method. */
        method = 'blockchain.address.get_history';

        /* Set parameters. */
        params = [
            _address,
            _filter,
        ];

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
     * (Blockchain) Address History
     *
     * Return the unconfirmed transactions of a Bitcoin Cash or Nexa address.
     *
     * Version added: Rostrum 1.4.3
     */
    async function _getAddressMempool (_address, _filter = 'include_tokens') {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getAddressMempool(_address, _filter)
        }

        /* Set method. */
        method = 'blockchain.address.get_mempool';

        /* Set parameters. */
        params = [
            _address,
            _filter,
        ];

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
     * (Blockchain) Address Script Hash
     *
     * Translate a Bitcoin Cash or a Nexa address to a script hash. This method is
     * potentially useful for clients preferring to work with script hashes but
     * lacking the local libraries necessary to generate them.
     *
     * Version added: Rostrum 1.4.3
     */
    async function _getAddressScriptHash (_address) {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getAddressScriptHash(_address)
        }

        /* Set method. */
        method = 'blockchain.address.get_scripthash';

        /* Set parameters. */
        params = [ _address ];

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
     * (Blockchain) Address List Unspent
     *
     * Return an ordered list of UTXOs sent to a Bitcoin Cash or Nexa address.
     *
     * Version added: Rostrum 1.4.3
     */
    async function _getAddressUnspent (_address) {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getAddressUnspent(_address)
        }

        /* Set method. */
        method = 'blockchain.address.listunspent';

        /* Set parameters. */
        params = [
            _address
        ];

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
     * (Blockchain) Get Block (Info)
     *
     * Return an the FULL block details.
     *
     * Version added: Rostrum 8.1
     */
    async function _getBlock (_hash_or_height) {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getBlock(_hash_or_height)
        }

        /* Set method. */
        method = 'blockchain.block.get';

        /* Set parameters. */
        params = [ _hash_or_height ];

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
     * (Blockchain) Get Transaction (Info)
     *
     * Return an the FULL transaction details.
     *
     * Version added: ??
     */
    async function _getTransaction (_id, _verbose = true) {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getTransaction(_id)
        }

        /* Set method. */
        method = 'blockchain.transaction.get';

        /* Set parameters. */
        params = [
            _id,
            _verbose,
        ];

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
    * (Token) Address Balance
    *
    * Return the confirmed and unconfirmed balances of tokens in a Bitcoin Cash or Nexa address.
    *
    * Version added: Rostrum 6.0
    */
    async function _getAddressTokenBalance (_address, _cursor, _tokenid) {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getAddressTokenBalance(_address, _cursor, _tokenid)
        }

        /* Set method. */
        method = 'token.address.get_balance';

        /* Set parameters. */
        if (_cursor) {
            params = [
                _address,
                _cursor,
                _tokenid,
            ];
        } else {
            params = [
                _address,
                _tokenid,
            ];
        }

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
    * (Token) Address History
    *
    * Return the confirmed and unconfirmed token history of a Nexa or Bitcoin Cash address.
    *
    * Version added: Rostrum 6.0
    */
    async function _getAddressTokenHistory (_address, _cursor, _tokenid) {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getAddressTokenHistory(_address, _cursor, _tokenid)
        }

        /* Set method. */
        method = 'token.address.get_history';

        /* Set parameters. */
        if (_cursor) {
            params = [
                _address,
                _cursor,
                _tokenid,
            ];
        } else {
            params = [
                _address,
                _tokenid,
            ];
        }

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
    * (Token) Address Mempool
    *
    * Return the unconfirmed token transactions of a Nexa or Bitcoin Cash address.
    *
    * Version added: Rostrum 6.0
    */
    async function _getAddressTokenMempool (_address, _cursor, _tokenid) {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getAddressTokenMempool(_address, _cursor, _tokenid)
        }

        /* Set method. */
        method = 'token.address.get_mempool';

        /* Set parameters. */
        if (_cursor) {
            params = [
                _address,
                _cursor,
                _tokenid,
            ];
        } else {
            params = [
                _address,
                _tokenid,
            ];
        }

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
    * (Token) Address Unspent
    *
    * Return an list of token UTXOs sent to a Nexa or Bitcoin Cash address.
    *
    * Version added: Rostrum 6.0
    */
    async function _getAddressTokenUnspent (_address, _cursor, _tokenid) {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getAddressTokenUnspent(_address, _cursor, _tokenid)
        }

        /* Set method. */
        method = 'token.address.listunspent';

        /* Set parameters. */
        if (_cursor) {
            params = [
                _address,
                _cursor,
                _tokenid,
            ];
        } else {
            params = [
                _address,
                _tokenid,
            ];
        }

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
     * (NFT) List
     *
     * Return list of all NFT's minted from a specified parent token.
     *
     * Version added: Rostrum 7.0
     */
    async function _getNftList (_tokenid, _cursor) {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getNftList(_tokenid, _cursor)
        }

        /* Set method. */
        method = 'token.nft.list';

        /* Set parameters. */
        if (_cursor) {
            params = [
                _tokenid,
                _cursor,
            ];
        } else {
            params = [ _tokenid ];
        }

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
     * (Blockchain) Get Outpoint (Info)
     *
     * Returns data on a specified output of specific transaction. Returns error if
     * transaction or output does not exist.
     *
     * If the output is spent, information about the spender is provided. This
     * allows a SPV client to call blockchain.transaction.get\_merkle to generate a
     * merkle branch, proving that it is spent.
     *
     * Version added: Rostrum 7.0
     *
     * Update Rostrum 8.1: Add group details and scriptpukey
     */
    async function _getOutpoint (_outpoint_hash) {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getOutpoint(_outpoint_hash)
        }

        /* Set method. */
        method = 'blockchain.utxo.get';

        /* Set parameters. */
        params = [
            _outpoint_hash,
        ];

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
     * (Blockchain) Get Headers Tip
     *
     * Get the latest block header (tip of the blockchain).
     *
     * Added: Rostrum 7.0
     */
    async function _getTip () {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getTip()
        }

        /* Set method. */
        method = 'blockchain.headers.tip';

        /* Set parameters. */
        params = [];

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
     * (Token) History
     *
     * Return all confirmed and unconfirmed token transaction history of a given token.
     *
     * Version added: Rostrum 6.0
     */
    async function _getTokenHistory (_address, _cursor, _tokenid) {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getTokenHistory(_address, _cursor, _tokenid)
        }

        /* Set method. */
        method = 'token.transaction.get_history';

        /* Set parameters. */
        if (_cursor) {
            params = [
                _address,
                _cursor,
                _tokenid,
            ];
        } else {
            params = [
                _address,
                _tokenid,
            ];
        }

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
     * (Token) Genesis Info
     *
     * Info from token creation transaction.
     *
     * Version added: Rostrum 6.0
     */
    async function _getGenesisInfo (_tokenid) {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.getGenesisInfo(_tokenid)
        }

        /* Set method. */
        method = 'token.genesis.info';

        /* Set parameters. */
        params = [ _tokenid ];

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import modules. */

    /**
     * (Blockchain) Subscribe Address
     *
     * Subscibe for updates on ALL address activity.
     *
     * Version added: Rostrum 1.4.3
     */
    async function _subscribeAddress (_address, _handler) {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.subscribeAddress(_address, _handler)
        }

        /* Set method. */
        method = 'blockchain.address.subscribe';

        /* Set parameters. */
        params = [ _address ];

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request, _address, _handler)
    }

    /* Import modules. */

    /**
     * (Server) Ping
     *
     * Ping the server to ensure it is responding, and to keep the session alive.
     * The server may disconnect clients that have sent no requests
     * for roughly 10 minutes.
     *
     * Version added: 1.2
     */
    async function ping () {
        /* Initialize locals. */
        let method;
        let params;
        let request;
        let rostrum;

        /* Validate instance. */
        if (typeof this === 'undefined') {
            /* Initialize Rostrum instance. */
            rostrum = await Rostrum.init();

            /* Call self (via instance). */
            return rostrum.ping()
        }

        /* Set method. */
        method = 'server.ping';

        /* Set parameters. */
        params = [];

        /* Build request. */
        request = {
            method,
            params,
        };

        /* Return (async) request. */
        return makeRequest.bind(this)(request)
    }

    /* Import request handler. */
    // import makeRequest from './src/makeRequest.js'

    /* Set active connection id. */
    // NOTE: Official node is currently accepting ZERO-fee txs.
    const DEFAULT_CONN_ID = 0;

    /* Initialize constants. */
    const RECONNECTION_DELAY = 3000; // default is 3 seconds
    const PING_INTERVAL = 60000; // every 1 minute
    const ROSTRUM_DEFAULT_MAINNET = 'wss://rostrum.nexa.sh:20004';
    const ROSTRUM_OFFICIAL_MAINNET = 'wss://electrum.nexa.org:20004';
    const ROSTRUM_FALLBACK_MAINNET = 'wss://rostrum.apecs.dev:20004';
    const ROSTRUM_DEFAULT_TESTNET = 'wss://rostrum.test-nexa.sh:30004';

    /* Export Rostrum methods. */
    const getAddressBalance = _getAddressBalance;
    const decodeRemoteAddress = _decodeRemoteAddress;
    const getAddressFirstUse = _getAddressFirstUse;
    const getAddressHistory = _getAddressHistory;
    const getAddressMempool = _getAddressMempool;
    const getAddressScriptHash = _getAddressScriptHash;
    const getAddressUnspent = _getAddressUnspent;
    const getBlock = _getBlock;
    const getTransaction = _getTransaction;
    const getAddressTokenBalance = _getAddressTokenBalance;
    const getAddressTokenHistory = _getAddressTokenHistory;
    const getAddressTokenMempool = _getAddressTokenMempool;
    const getAddressTokenUnspent = _getAddressTokenUnspent;
    const getNftList = _getNftList;
    const getOutpoint = _getOutpoint;
    const getTip = _getTip;
    const getTokenHistory = _getTokenHistory;
    const getGenesisInfo = _getGenesisInfo;
    const getTokenInfo = getGenesisInfo; // Export alias.
    const subscribeAddress = _subscribeAddress;

    /**
     * Get Connection
     *
     * Returns a new connection to a remote Rostrum server.
     */
    const getConnection = async function (_connid) {
        /* Import WebSocket. */
        // NOTE: MUST BE EXCLUDED WHEN BUILDING FOR BROWSER VIA USING ROLLUP.
        // const WebSocket = (await import('isomorphic-ws')).default

        /* Handle environment variables. */
        if (typeof browser$1$1 !== 'undefined' && browser$1$1?.env?.ROSTRUM) {
            /* Return (user-defined) Rostrum provider. */
            return new WebSocket(browser$1$1.env.ROSTRUM)
        } else if (typeof browser$1$1 !== 'undefined' && browser$1$1?.env?.TESTNET) {
            /* Return default (Testnet) provider. */
            return new WebSocket(ROSTRUM_DEFAULT_TESTNET)
        }

    // return new WebSocket('ws://0.0.0.0:30003')
    // return new WebSocket('ws://0.0.0.0:30404')

        /* Handle connection selection. */
        switch(_connid) {
        case 0:
            return new WebSocket(ROSTRUM_DEFAULT_MAINNET)
        case 1:
            return new WebSocket(ROSTRUM_OFFICIAL_MAINNET)
        case 2:
            return new WebSocket(ROSTRUM_FALLBACK_MAINNET)
        // TODO Add 2 more production-ready Rostrum servers (for a min of 5)
        default:
            return new WebSocket(ROSTRUM_DEFAULT_MAINNET)
        }
    };

    const initConnection = function (_connid) {
        // console.log(`Initializing connection [ ${_connid} ]`)

        /* Handle open connection. */
        this._connMgr.pool[_connid].onopen = () => {
            // TODO Show (IP Address) instead of Conn ID.
            console.info('Connected to Rostrum ->', _connid, new Date().getTime());

            /* Set (connection) ready flag. */
            // this._connMgr.isOpen = true
            this._connMgr.status[_connid].isOpen = true;

            /* Handle (pending) queue. */
            this._requestQueue.forEach(_request => {
                /* Send request. */
                this._connMgr.pool[_connid]
                    .send(JSON.stringify(_request) + '\n'); // NOTE: We MUST include the "new line".
            });
        };

        /* Handle message. */
        this._connMgr.pool[_connid].onmessage = async (_msg) => {
            let json;
            let id;

            const data = _msg?.data;

            try {
                /* Decode data. */
                json = JSON.parse(data);
                // console.log('JSON', json)

                id = data.id;

                // NOTE: Reject this promise.
                if (json?.error) {
                    return this._connMgr.requests[id]?.reject({ error: json.error?.message })
                }
            } catch (err) {
                return this._connMgr.requests[id]?.reject(err)
            }

            /* Validate message data. */
            if (_msg?.data) {
                try {
                    /* Parse JSON data. */
                    const data = JSON.parse(_msg.data);
                    // console.log('JSON (data):', data)

                    /* Validate message id. */
                    if (data?.id) {
                        // console.log('JSON (result):', data.id, data.result)

                        /* Set message id. */
                        id = data.id;

                        /* Resolve (async) request. */
                        this._connMgr.requests[id]?.resolve(data.result);
                    }

                    /* Validate message parameters. */
                    if (data?.params) {
                        // console.log('JSON (params):', data.params)

                        /* Validate message id. */
                        if (id) {
                            /* Resolve (async) request. */
                            this._connMgr.requests[id]?.resolve(data.params);
                        } else {
                            /* Update message id. */
                            id = data.params[0];

                            /* Make callback. */
                            this._connMgr.requests[id]?.callback(data.params);
                        }
                    }
                } catch (err) {
                    console.error(err);
                    this._connMgr.requests[id]?.reject(err);
                }
            }

        };

        /* Handle connection close. */
        // NOTE: We currently NEVER allow this connect to be closed.
        //       We will ALWAYS attempt to re-connect.
        // TODO: Allow connection to be "manually" closed.
        this._connMgr.pool[_connid].onclose = () => {
            console.log('CONNECTION CLOSED', _connid, new Date().getTime());

            /* Validate connection status. */
            if (this._connMgr.status[_connid].isOpen) {
                /* Set (connection) ready flag. */
                this._connMgr.status[_connid].isOpen = false;
            }

            console.info(`Waiting (${RECONNECTION_DELAY} ms) to reconnect...`);

            // NOTE: Add re-try delay and max attempts.
            setTimeout(async () => {
                /* Re-establish connection to remote server(s). */
                this._connMgr.pool[_connid] = await getConnection.bind(this)(_connid);

                /* Re-initialize connection. */
                initConnection.bind(this)(_connid);
            }, RECONNECTION_DELAY);
        };

        /* Handle connection error. */
        this._connMgr.pool[_connid].onerror = (e) => {
            console.error('ERROR! [ %s ]:', _connid, new Date().getTime(), e);
        };
    };

    /**
     * Rostrum Class
     *
     * Manages a connection and its requests to a Rostrum server.
     */
    class Rostrum extends EventEmitter$1 {
        constructor(_params) {
            /* Initialize Rostrum class. */
            console.info('Initializing Rostrum...');
            console.log(JSON.stringify(_params, null, 2));
            super();

            // TODO Allow customization of data providers using `_params`.

            /* Initialize request queue. */
            this._requestQueue = [];

            /* Initialize connection manager. */
            this._connMgr = null;
        }

        /**
         * Initialization
         *
         * Create a new Rostrum instance (passing optional parameters).
         */
        static init(_params) {
            return (async function () {
                /* Create new instance. */
                const rostrum = new Rostrum(_params);

                // Do async stuff
                await rostrum._connect();

                // Return instance
                return rostrum
            })()
        }

        async _connect() {
            /* Validate (global-shared) connection manager. */
            if (globalThis.Nexa.Rostrum._connMgr) {
                /* Use existing (global-shared) connection. */
                this._connMgr = globalThis.Nexa.Rostrum._connMgr;

                // console.log('Connected to SHARED Rostrum connection...')
                return
            }

            /* Initialize connections manager. */
            this._connMgr = {
                pool: [
                    await getConnection.bind(this)(DEFAULT_CONN_ID),       // nexa.sh
                    // NOTE: Official node is currently accepting ZERO-fee txs.
                    await getConnection.bind(this)(DEFAULT_CONN_ID + 1),   // nexa.org
                    await getConnection.bind(this)(DEFAULT_CONN_ID + 2),   // apecs.dev
                ],
                status: [
                    {
                        isOpen: false,
                    },
                    {
                        isOpen: false,
                    },
                    {
                        isOpen: false,
                    },
                ],
                requests: {},
                isReady: false,
            };

            /* Validate (global) Nexa object. */
            if (!globalThis.Nexa) {
                globalThis.Nexa = {};
            }

            /* Validate (global) Rostrum object. */
            if (!globalThis.Nexa.Rostrum) {
                globalThis.Nexa.Rostrum = {};
            }

            /* Set (global-shared) connection manager. */
            globalThis.Nexa.Rostrum._connMgr = this._connMgr;

            /* Initialize connection handlers. */
            for (let i = 0; i < this._connMgr.pool.length; i++) {
                /* Initialize connection(s). */
                initConnection.bind(this)(i);
            }

            /* Manage session keep-alive. */
            // NOTE: Requires arrow func to "fix" (this) context issue??
            //       (source: https://developer.mozilla.org/en-US/docs/Web/API/setInterval#a_possible_solution)
            setInterval(() => this.ping(), PING_INTERVAL);
        }

        get status() {
            return {
                requestQueue: this?._requestQueue,
                // isOpen: this?._connMgr?.isOpen,
                isReady: this?._connMgr?.isReady,
            }
        }

        getAddressBalance(address, filter) {
            return getAddressBalance.bind(this)(address, filter)
        }

        decodeRemoteAddress(address) {
            return decodeRemoteAddress.bind(this)(address)
        }

        getAddressFirstUse(address, filter) {
            return getAddressFirstUse.bind(this)(address, filter)
        }

        getAddressHistory(address, filter) {
            return getAddressHistory.bind(this)(address, filter)
        }

        getAddressMempool(address, filter) {
            return getAddressMempool.bind(this)(address, filter)
        }

        getAddressScriptHash(params) {
            return getAddressScriptHash.bind(this)(params)
        }

        getAddressUnspent(params) {
            return getAddressUnspent.bind(this)(params)
        }

        getBlock(id) {
            return getBlock.bind(this)(id)
        }

        getTransaction(id, verbose) {
            return getTransaction.bind(this)(id, verbose)
        }

        getGenesisInfo(params) {
            return getGenesisInfo.bind(this)(params)
        }

        getTokenInfo(params) {
            return getTokenInfo.bind(this)(params)
        }

        getAddressTokenBalance(address, cursor, tokenid) {
            return getAddressTokenBalance.bind(this)(address, cursor, tokenid)
        }

        getAddressTokenHistory(address, cursor, tokenid) {
            return getAddressTokenHistory.bind(this)(address, cursor, tokenid)
        }

        getAddressTokenMempool(address, cursor, tokenid) {
            return getAddressTokenMempool.bind(this)(address, cursor, tokenid)
        }

        getAddressTokenUnspent(address, cursor, tokenid) {
            return getAddressTokenUnspent.bind(this)(address, cursor, tokenid)
        }

        getNftList(tokenid, cursor) {
            return getNftList.bind(this)(tokenid, cursor)
        }

        getOutpoint(outpoint_hash) {
            return getOutpoint.bind(this)(outpoint_hash)
        }

        getTip() {
            return getTip.bind(this)()
        }

        getTokenHistory(address, cursor, tokenid) {
            return getTokenHistory.bind(this)(address, cursor, tokenid)
        }

        subscribeAddress(params, handler) {
            return subscribeAddress.bind(this)(params, handler)
        }

        ping() {
            return ping.bind(this)()
        }
    }


    /* Initialize (globalThis) Nexa class. */
    const Nexa$1 = {};

    /* Initialize Rostrum class. */
    Nexa$1.Rostrum = Rostrum;

    /* Initialize Rostrum modules. */
    Nexa$1.getAddressBalance = getAddressBalance;
    Nexa$1.decodeRemoteAddress = decodeRemoteAddress;
    Nexa$1.getAddressFirstUse = getAddressFirstUse;
    Nexa$1.getAddressHistory = getAddressHistory;
    Nexa$1.getAddressMempool = getAddressMempool;
    Nexa$1.getAddressScriptHash = getAddressScriptHash;
    Nexa$1.getAddressUnspent = getAddressUnspent;
    // ...
    Nexa$1.getGenesisInfo = getGenesisInfo;
    Nexa$1.getTokenInfo = getTokenInfo; // alias for `getGenesisInfo`
    Nexa$1.getAddressTokenBalance = getAddressTokenBalance;
    Nexa$1.getAddressTokenHistory = getAddressTokenHistory;
    Nexa$1.getAddressTokenMempool = getAddressTokenMempool;
    Nexa$1.getAddressTokenUnspent = getAddressTokenUnspent;
    Nexa$1.getNftList = getNftList;
    Nexa$1.getOutpoint = getOutpoint;
    Nexa$1.getTip = getTip;
    Nexa$1.getTokenHistory = getTokenHistory;
    // ...
    Nexa$1.subscribeAddress = subscribeAddress;
    Nexa$1.subscribeOwner = subscribeAddress; // alias for `subscribeAddress`

    /* Export Nexa to globalThis. */
    // NOTE: We merge to avoid conflict with other libraries.
    globalThis.Nexa = {
        ...globalThis.Nexa, // preserve Nexa object
        ...Nexa$1, // extend Nexa object
    };

    /* Import modules. */

    /* Set API endpoints. */
    const BCH_ENDPOINT = 'https://insomnia.fountainhead.cash/v1';

    /**
     * List Unspent Outputs
     *
     * Returns an array of Unspent Transaction Outputs (UTXOs).
     *
     * @param {String} _address Address used to query for UTXOs.
     * @returns {Array} Returns a list of UTXOs.
     */
    var _listUnspent = async (_address) => {
        let utxos;

        /* Handle address formats. */
        if (_address.includes('nexa')) {
            utxos = await listNexaUnspent(_address);
        } else if (_address.includes('bitcoincash')) { // TODO: Confirm "test" and "reg" formats.
            utxos = await listBCHUnspent(_address);
        } else {
            throw new Error('Oops! That address format is NOT currently supported by NEXA.js.')
        }

        /* Return UTXOs. */
        return utxos
    };

    const listBCHUnspent = async (_address) => {
        let body;
        let target;
        let response;
        let utxos;

        /* Set target. */
        target = `${BCH_ENDPOINT}/address/utxos/${_address}`;

        /* Make API request. */
        response = await fetch(target, {
            /* Set (request) headers. */
            headers: {
                'Content-Type': 'application/json',
              }
        })
        .catch(err => {
            console.error(err);
            // TODO Handle error

            /* Set error. */
            // error = err
        });

        body = await response
            .json()
            .catch(err => console.error(err));
        // console.log('getUnspentOutputs (body):', body)

        utxos = body.utxos;
        // console.log('getUnspentOutputs (utxos):', utxos)

        /* Return UTXOs. */
        return utxos
    };

    const listNexaUnspent = async (_address) => {
        /* Initialize locals. */
        let token;
        let unspentCoins;
        let unspentTokens;

        /* Request unspent coins. */
        unspentCoins = await getAddressUnspent(_address);

        /* Request unspent tokens. */
        unspentTokens = (await getAddressTokenUnspent(_address)).unspent;

        /* Aggregate asset lists. */
        return unspentCoins.map(_unspent => {
            /* Search for token info. */
            token = unspentTokens.find(_token => {
                return _token.outpoint_hash === _unspent.outpoint_hash
            });

            /* Validate token. */
            if (token) {
                return {
                    height: _unspent.height,
                    outpoint: _unspent.outpoint_hash,
                    txid: _unspent.tx_hash,
                    pos: _unspent.tx_pos,
                    amount: parseFloat(_unspent.value / 100.0),
                    satoshis: BigInt(_unspent.value),
                    tokenid: token.group,
                    tokenidHex: token.token_id_hex,
                    tokens: BigInt(token.token_amount),
                    hasToken: true,
                }
            } else {
                return {
                    height: _unspent.height,
                    outpoint: _unspent.outpoint_hash,
                    txid: _unspent.tx_hash,
                    pos: _unspent.tx_pos,
                    amount: parseFloat(_unspent.value / 100.0),
                    satoshis: BigInt(_unspent.value),
                    hasToken: false,
                }
            }
        })
    };

    /** @private */
    function extendedTypeof(val) {
        if (val === null) {
            return 'null';
        }
        if (Array.isArray(val)) {
            return 'array';
        }
        return typeof val;
    }
    /** @private */
    function isObject(val) {
        return extendedTypeof(val) === 'object';
    }
    /** @private */
    function areGraphQLErrors(obj) {
        return (Array.isArray(obj) &&
            // must be at least one error
            obj.length > 0 &&
            // error has at least a message
            obj.every((ob) => 'message' in ob));
    }
    /**
     * Limits the WebSocket close event reason to not exceed a length of one frame.
     * Reference: https://datatracker.ietf.org/doc/html/rfc6455#section-5.2.
     *
     * @private
     */
    function limitCloseReason(reason, whenTooLong) {
        return reason.length < 124 ? reason : whenTooLong;
    }

    /**
     *
     * common
     *
     */
    /**
     * The WebSocket sub-protocol used for the [GraphQL over WebSocket Protocol](/PROTOCOL.md).
     *
     * @category Common
     */
    const GRAPHQL_TRANSPORT_WS_PROTOCOL = 'graphql-transport-ws';
    /**
     * `graphql-ws` expected and standard close codes of the [GraphQL over WebSocket Protocol](/PROTOCOL.md).
     *
     * @category Common
     */
    var CloseCode;
    (function (CloseCode) {
        CloseCode[CloseCode["InternalServerError"] = 4500] = "InternalServerError";
        CloseCode[CloseCode["InternalClientError"] = 4005] = "InternalClientError";
        CloseCode[CloseCode["BadRequest"] = 4400] = "BadRequest";
        CloseCode[CloseCode["BadResponse"] = 4004] = "BadResponse";
        /** Tried subscribing before connect ack */
        CloseCode[CloseCode["Unauthorized"] = 4401] = "Unauthorized";
        CloseCode[CloseCode["Forbidden"] = 4403] = "Forbidden";
        CloseCode[CloseCode["SubprotocolNotAcceptable"] = 4406] = "SubprotocolNotAcceptable";
        CloseCode[CloseCode["ConnectionInitialisationTimeout"] = 4408] = "ConnectionInitialisationTimeout";
        CloseCode[CloseCode["ConnectionAcknowledgementTimeout"] = 4504] = "ConnectionAcknowledgementTimeout";
        /** Subscriber distinction is very important */
        CloseCode[CloseCode["SubscriberAlreadyExists"] = 4409] = "SubscriberAlreadyExists";
        CloseCode[CloseCode["TooManyInitialisationRequests"] = 4429] = "TooManyInitialisationRequests";
    })(CloseCode || (CloseCode = {}));
    /**
     * Types of messages allowed to be sent by the client/server over the WS protocol.
     *
     * @category Common
     */
    var MessageType;
    (function (MessageType) {
        MessageType["ConnectionInit"] = "connection_init";
        MessageType["ConnectionAck"] = "connection_ack";
        MessageType["Ping"] = "ping";
        MessageType["Pong"] = "pong";
        MessageType["Subscribe"] = "subscribe";
        MessageType["Next"] = "next";
        MessageType["Error"] = "error";
        MessageType["Complete"] = "complete";
    })(MessageType || (MessageType = {}));
    /**
     * Validates the message against the GraphQL over WebSocket Protocol.
     *
     * Invalid messages will throw descriptive errors.
     *
     * @category Common
     */
    function validateMessage(val) {
        if (!isObject(val)) {
            throw new Error(`Message is expected to be an object, but got ${extendedTypeof(val)}`);
        }
        if (!val.type) {
            throw new Error(`Message is missing the 'type' property`);
        }
        if (typeof val.type !== 'string') {
            throw new Error(`Message is expects the 'type' property to be a string, but got ${extendedTypeof(val.type)}`);
        }
        switch (val.type) {
            case MessageType.ConnectionInit:
            case MessageType.ConnectionAck:
            case MessageType.Ping:
            case MessageType.Pong: {
                if (val.payload != null && !isObject(val.payload)) {
                    throw new Error(`"${val.type}" message expects the 'payload' property to be an object or nullish or missing, but got "${val.payload}"`);
                }
                break;
            }
            case MessageType.Subscribe: {
                if (typeof val.id !== 'string') {
                    throw new Error(`"${val.type}" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);
                }
                if (!val.id) {
                    throw new Error(`"${val.type}" message requires a non-empty 'id' property`);
                }
                if (!isObject(val.payload)) {
                    throw new Error(`"${val.type}" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);
                }
                if (typeof val.payload.query !== 'string') {
                    throw new Error(`"${val.type}" message payload expects the 'query' property to be a string, but got ${extendedTypeof(val.payload.query)}`);
                }
                if (val.payload.variables != null && !isObject(val.payload.variables)) {
                    throw new Error(`"${val.type}" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.variables)}`);
                }
                if (val.payload.operationName != null &&
                    extendedTypeof(val.payload.operationName) !== 'string') {
                    throw new Error(`"${val.type}" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${extendedTypeof(val.payload.operationName)}`);
                }
                if (val.payload.extensions != null && !isObject(val.payload.extensions)) {
                    throw new Error(`"${val.type}" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.extensions)}`);
                }
                break;
            }
            case MessageType.Next: {
                if (typeof val.id !== 'string') {
                    throw new Error(`"${val.type}" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);
                }
                if (!val.id) {
                    throw new Error(`"${val.type}" message requires a non-empty 'id' property`);
                }
                if (!isObject(val.payload)) {
                    throw new Error(`"${val.type}" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);
                }
                break;
            }
            case MessageType.Error: {
                if (typeof val.id !== 'string') {
                    throw new Error(`"${val.type}" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);
                }
                if (!val.id) {
                    throw new Error(`"${val.type}" message requires a non-empty 'id' property`);
                }
                if (!areGraphQLErrors(val.payload)) {
                    throw new Error(`"${val.type}" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(val.payload)}`);
                }
                break;
            }
            case MessageType.Complete: {
                if (typeof val.id !== 'string') {
                    throw new Error(`"${val.type}" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);
                }
                if (!val.id) {
                    throw new Error(`"${val.type}" message requires a non-empty 'id' property`);
                }
                break;
            }
            default:
                throw new Error(`Invalid message 'type' property "${val.type}"`);
        }
        return val;
    }
    /**
     * Parses the raw websocket message data to a valid message.
     *
     * @category Common
     */
    function parseMessage(data, reviver) {
        return validateMessage(typeof data === 'string' ? JSON.parse(data, reviver) : data);
    }
    /**
     * Stringifies a valid message ready to be sent through the socket.
     *
     * @category Common
     */
    function stringifyMessage(msg, replacer) {
        validateMessage(msg);
        return JSON.stringify(msg, replacer);
    }

    /**
     *
     * client
     *
     */
    /**
     * Creates a disposable GraphQL over WebSocket client.
     *
     * @category Client
     */
    function createClient(options) {
        const { url, connectionParams, lazy = true, onNonLazyError = console.error, lazyCloseTimeout: lazyCloseTimeoutMs = 0, keepAlive = 0, disablePong, connectionAckWaitTimeout = 0, retryAttempts = 5, retryWait = async function randomisedExponentialBackoff(retries) {
            let retryDelay = 1000; // start with 1s delay
            for (let i = 0; i < retries; i++) {
                retryDelay *= 2;
            }
            await new Promise((resolve) => setTimeout(resolve, retryDelay +
                // add random timeout from 300ms to 3s
                Math.floor(Math.random() * (3000 - 300) + 300)));
        }, shouldRetry = isLikeCloseEvent, isFatalConnectionProblem, on, webSocketImpl, 
        /**
         * Generates a v4 UUID to be used as the ID using `Math`
         * as the random number generator. Supply your own generator
         * in case you need more uniqueness.
         *
         * Reference: https://gist.github.com/jed/982883
         */
        generateID = function generateUUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
                const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;
                return v.toString(16);
            });
        }, jsonMessageReplacer: replacer, jsonMessageReviver: reviver, } = options;
        let ws;
        if (webSocketImpl) {
            if (!isWebSocket(webSocketImpl)) {
                throw new Error('Invalid WebSocket implementation provided');
            }
            ws = webSocketImpl;
        }
        else if (typeof WebSocket !== 'undefined') {
            ws = WebSocket;
        }
        else if (typeof global !== 'undefined') {
            ws =
                global.WebSocket ||
                    // @ts-expect-error: Support more browsers
                    global.MozWebSocket;
        }
        else if (typeof window !== 'undefined') {
            ws =
                window.WebSocket ||
                    // @ts-expect-error: Support more browsers
                    window.MozWebSocket;
        }
        if (!ws)
            throw new Error("WebSocket implementation missing; on Node you can `import WebSocket from 'ws';` and pass `webSocketImpl: WebSocket` to `createClient`");
        const WebSocketImpl = ws;
        // websocket status emitter, subscriptions are handled differently
        const emitter = (() => {
            const message = (() => {
                const listeners = {};
                return {
                    on(id, listener) {
                        listeners[id] = listener;
                        return () => {
                            delete listeners[id];
                        };
                    },
                    emit(message) {
                        var _a;
                        if ('id' in message)
                            (_a = listeners[message.id]) === null || _a === void 0 ? void 0 : _a.call(listeners, message);
                    },
                };
            })();
            const listeners = {
                connecting: (on === null || on === void 0 ? void 0 : on.connecting) ? [on.connecting] : [],
                opened: (on === null || on === void 0 ? void 0 : on.opened) ? [on.opened] : [],
                connected: (on === null || on === void 0 ? void 0 : on.connected) ? [on.connected] : [],
                ping: (on === null || on === void 0 ? void 0 : on.ping) ? [on.ping] : [],
                pong: (on === null || on === void 0 ? void 0 : on.pong) ? [on.pong] : [],
                message: (on === null || on === void 0 ? void 0 : on.message) ? [message.emit, on.message] : [message.emit],
                closed: (on === null || on === void 0 ? void 0 : on.closed) ? [on.closed] : [],
                error: (on === null || on === void 0 ? void 0 : on.error) ? [on.error] : [],
            };
            return {
                onMessage: message.on,
                on(event, listener) {
                    const l = listeners[event];
                    l.push(listener);
                    return () => {
                        l.splice(l.indexOf(listener), 1);
                    };
                },
                emit(event, ...args) {
                    // we copy the listeners so that unlistens dont "pull the rug under our feet"
                    for (const listener of [...listeners[event]]) {
                        // @ts-expect-error: The args should fit
                        listener(...args);
                    }
                },
            };
        })();
        // invokes the callback either when an error or closed event is emitted,
        // first one that gets called prevails, other emissions are ignored
        function errorOrClosed(cb) {
            const listening = [
                // errors are fatal and more critical than close events, throw them first
                emitter.on('error', (err) => {
                    listening.forEach((unlisten) => unlisten());
                    cb(err);
                }),
                // closes can be graceful and not fatal, throw them second (if error didnt throw)
                emitter.on('closed', (event) => {
                    listening.forEach((unlisten) => unlisten());
                    cb(event);
                }),
            ];
        }
        let connecting, locks = 0, lazyCloseTimeout, retrying = false, retries = 0, disposed = false;
        async function connect() {
            // clear the lazy close timeout immediatelly so that close gets debounced
            // see: https://github.com/enisdenjo/graphql-ws/issues/388
            clearTimeout(lazyCloseTimeout);
            const [socket, throwOnClose] = await (connecting !== null && connecting !== void 0 ? connecting : (connecting = new Promise((connected, denied) => (async () => {
                if (retrying) {
                    await retryWait(retries);
                    // subscriptions might complete while waiting for retry
                    if (!locks) {
                        connecting = undefined;
                        return denied({ code: 1000, reason: 'All Subscriptions Gone' });
                    }
                    retries++;
                }
                emitter.emit('connecting');
                const socket = new WebSocketImpl(typeof url === 'function' ? await url() : url, GRAPHQL_TRANSPORT_WS_PROTOCOL);
                let connectionAckTimeout, queuedPing;
                function enqueuePing() {
                    if (isFinite(keepAlive) && keepAlive > 0) {
                        clearTimeout(queuedPing); // in case where a pong was received before a ping (this is valid behaviour)
                        queuedPing = setTimeout(() => {
                            if (socket.readyState === WebSocketImpl.OPEN) {
                                socket.send(stringifyMessage({ type: MessageType.Ping }));
                                emitter.emit('ping', false, undefined);
                            }
                        }, keepAlive);
                    }
                }
                errorOrClosed((errOrEvent) => {
                    connecting = undefined;
                    clearTimeout(connectionAckTimeout);
                    clearTimeout(queuedPing);
                    denied(errOrEvent);
                    if (isLikeCloseEvent(errOrEvent) && errOrEvent.code === 4499) {
                        socket.close(4499, 'Terminated'); // close event is artificial and emitted manually, see `Client.terminate()` below
                        socket.onerror = null;
                        socket.onclose = null;
                    }
                });
                socket.onerror = (err) => emitter.emit('error', err);
                socket.onclose = (event) => emitter.emit('closed', event);
                socket.onopen = async () => {
                    try {
                        emitter.emit('opened', socket);
                        const payload = typeof connectionParams === 'function'
                            ? await connectionParams()
                            : connectionParams;
                        // connectionParams might take too long causing the server to kick off the client
                        // the necessary error/close event is already reported - simply stop execution
                        if (socket.readyState !== WebSocketImpl.OPEN)
                            return;
                        socket.send(stringifyMessage(payload
                            ? {
                                type: MessageType.ConnectionInit,
                                payload,
                            }
                            : {
                                type: MessageType.ConnectionInit,
                                // payload is completely absent if not provided
                            }, replacer));
                        if (isFinite(connectionAckWaitTimeout) &&
                            connectionAckWaitTimeout > 0) {
                            connectionAckTimeout = setTimeout(() => {
                                socket.close(CloseCode.ConnectionAcknowledgementTimeout, 'Connection acknowledgement timeout');
                            }, connectionAckWaitTimeout);
                        }
                        enqueuePing(); // enqueue ping (noop if disabled)
                    }
                    catch (err) {
                        emitter.emit('error', err);
                        socket.close(CloseCode.InternalClientError, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, 'Internal client error'));
                    }
                };
                let acknowledged = false;
                socket.onmessage = ({ data }) => {
                    try {
                        const message = parseMessage(data, reviver);
                        emitter.emit('message', message);
                        if (message.type === 'ping' || message.type === 'pong') {
                            emitter.emit(message.type, true, message.payload); // received
                            if (message.type === 'pong') {
                                enqueuePing(); // enqueue next ping (noop if disabled)
                            }
                            else if (!disablePong) {
                                // respond with pong on ping
                                socket.send(stringifyMessage(message.payload
                                    ? {
                                        type: MessageType.Pong,
                                        payload: message.payload,
                                    }
                                    : {
                                        type: MessageType.Pong,
                                        // payload is completely absent if not provided
                                    }));
                                emitter.emit('pong', false, message.payload);
                            }
                            return; // ping and pongs can be received whenever
                        }
                        if (acknowledged)
                            return; // already connected and acknowledged
                        if (message.type !== MessageType.ConnectionAck)
                            throw new Error(`First message cannot be of type ${message.type}`);
                        clearTimeout(connectionAckTimeout);
                        acknowledged = true;
                        emitter.emit('connected', socket, message.payload); // connected = socket opened + acknowledged
                        retrying = false; // future lazy connects are not retries
                        retries = 0; // reset the retries on connect
                        connected([
                            socket,
                            new Promise((_, reject) => errorOrClosed(reject)),
                        ]);
                    }
                    catch (err) {
                        socket.onmessage = null; // stop reading messages as soon as reading breaks once
                        emitter.emit('error', err);
                        socket.close(CloseCode.BadResponse, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, 'Bad response'));
                    }
                };
            })())));
            // if the provided socket is in a closing state, wait for the throw on close
            if (socket.readyState === WebSocketImpl.CLOSING)
                await throwOnClose;
            let release = () => {
                // releases this connection
            };
            const released = new Promise((resolve) => (release = resolve));
            return [
                socket,
                release,
                Promise.race([
                    // wait for
                    released.then(() => {
                        if (!locks) {
                            // and if no more locks are present, complete the connection
                            const complete = () => socket.close(1000, 'Normal Closure');
                            if (isFinite(lazyCloseTimeoutMs) && lazyCloseTimeoutMs > 0) {
                                // if the keepalive is set, allow for the specified calmdown time and
                                // then complete if the socket is still open.
                                lazyCloseTimeout = setTimeout(() => {
                                    if (socket.readyState === WebSocketImpl.OPEN)
                                        complete();
                                }, lazyCloseTimeoutMs);
                            }
                            else {
                                // otherwise complete immediately
                                complete();
                            }
                        }
                    }),
                    // or
                    throwOnClose,
                ]),
            ];
        }
        /**
         * Checks the `connect` problem and evaluates if the client should retry.
         */
        function shouldRetryConnectOrThrow(errOrCloseEvent) {
            // some close codes are worth reporting immediately
            if (isLikeCloseEvent(errOrCloseEvent) &&
                (isFatalInternalCloseCode(errOrCloseEvent.code) ||
                    [
                        CloseCode.InternalServerError,
                        CloseCode.InternalClientError,
                        CloseCode.BadRequest,
                        CloseCode.BadResponse,
                        CloseCode.Unauthorized,
                        // CloseCode.Forbidden, might grant access out after retry
                        CloseCode.SubprotocolNotAcceptable,
                        // CloseCode.ConnectionInitialisationTimeout, might not time out after retry
                        // CloseCode.ConnectionAcknowledgementTimeout, might not time out after retry
                        CloseCode.SubscriberAlreadyExists,
                        CloseCode.TooManyInitialisationRequests,
                        // 4499, // Terminated, probably because the socket froze, we want to retry
                    ].includes(errOrCloseEvent.code)))
                throw errOrCloseEvent;
            // client was disposed, no retries should proceed regardless
            if (disposed)
                return false;
            // normal closure (possibly all subscriptions have completed)
            // if no locks were acquired in the meantime, shouldnt try again
            if (isLikeCloseEvent(errOrCloseEvent) && errOrCloseEvent.code === 1000)
                return locks > 0;
            // retries are not allowed or we tried to many times, report error
            if (!retryAttempts || retries >= retryAttempts)
                throw errOrCloseEvent;
            // throw non-retryable connection problems
            if (!shouldRetry(errOrCloseEvent))
                throw errOrCloseEvent;
            // @deprecated throw fatal connection problems immediately
            if (isFatalConnectionProblem === null || isFatalConnectionProblem === void 0 ? void 0 : isFatalConnectionProblem(errOrCloseEvent))
                throw errOrCloseEvent;
            // looks good, start retrying
            return (retrying = true);
        }
        // in non-lazy (hot?) mode always hold one connection lock to persist the socket
        if (!lazy) {
            (async () => {
                locks++;
                for (;;) {
                    try {
                        const [, , throwOnClose] = await connect();
                        await throwOnClose; // will always throw because releaser is not used
                    }
                    catch (errOrCloseEvent) {
                        try {
                            if (!shouldRetryConnectOrThrow(errOrCloseEvent))
                                return;
                        }
                        catch (errOrCloseEvent) {
                            // report thrown error, no further retries
                            return onNonLazyError === null || onNonLazyError === void 0 ? void 0 : onNonLazyError(errOrCloseEvent);
                        }
                    }
                }
            })();
        }
        return {
            on: emitter.on,
            subscribe(payload, sink) {
                const id = generateID(payload);
                let done = false, errored = false, releaser = () => {
                    // for handling completions before connect
                    locks--;
                    done = true;
                };
                (async () => {
                    locks++;
                    for (;;) {
                        try {
                            const [socket, release, waitForReleaseOrThrowOnClose] = await connect();
                            // if done while waiting for connect, release the connection lock right away
                            if (done)
                                return release();
                            const unlisten = emitter.onMessage(id, (message) => {
                                switch (message.type) {
                                    case MessageType.Next: {
                                        // eslint-disable-next-line @typescript-eslint/no-explicit-any -- payload will fit type
                                        sink.next(message.payload);
                                        return;
                                    }
                                    case MessageType.Error: {
                                        (errored = true), (done = true);
                                        sink.error(message.payload);
                                        releaser();
                                        return;
                                    }
                                    case MessageType.Complete: {
                                        done = true;
                                        releaser(); // release completes the sink
                                        return;
                                    }
                                }
                            });
                            socket.send(stringifyMessage({
                                id,
                                type: MessageType.Subscribe,
                                payload,
                            }, replacer));
                            releaser = () => {
                                if (!done && socket.readyState === WebSocketImpl.OPEN)
                                    // if not completed already and socket is open, send complete message to server on release
                                    socket.send(stringifyMessage({
                                        id,
                                        type: MessageType.Complete,
                                    }, replacer));
                                locks--;
                                done = true;
                                release();
                            };
                            // either the releaser will be called, connection completed and
                            // the promise resolved or the socket closed and the promise rejected.
                            // whatever happens though, we want to stop listening for messages
                            await waitForReleaseOrThrowOnClose.finally(unlisten);
                            return; // completed, shouldnt try again
                        }
                        catch (errOrCloseEvent) {
                            if (!shouldRetryConnectOrThrow(errOrCloseEvent))
                                return;
                        }
                    }
                })()
                    .then(() => {
                    // delivering either an error or a complete terminates the sequence
                    if (!errored)
                        sink.complete();
                }) // resolves on release or normal closure
                    .catch((err) => {
                    sink.error(err);
                }); // rejects on close events and errors
                return () => {
                    // dispose only of active subscriptions
                    if (!done)
                        releaser();
                };
            },
            async dispose() {
                disposed = true;
                if (connecting) {
                    // if there is a connection, close it
                    const [socket] = await connecting;
                    socket.close(1000, 'Normal Closure');
                }
            },
            terminate() {
                if (connecting) {
                    // only if there is a connection
                    emitter.emit('closed', {
                        code: 4499,
                        reason: 'Terminated',
                        wasClean: false,
                    });
                }
            },
        };
    }
    function isLikeCloseEvent(val) {
        return isObject(val) && 'code' in val && 'reason' in val;
    }
    function isFatalInternalCloseCode(code) {
        if ([
            1000,
            1001,
            1006,
            1005,
            1012,
            1013,
            1013, // Bad Gateway
        ].includes(code))
            return false;
        // all other internal errors are fatal
        return code >= 1000 && code <= 1999;
    }
    function isWebSocket(val) {
        return (typeof val === 'function' &&
            'constructor' in val &&
            'CLOSED' in val &&
            'CLOSING' in val &&
            'CONNECTING' in val &&
            'OPEN' in val);
    }

    function BufferList() {
      this.head = null;
      this.tail = null;
      this.length = 0;
    }

    BufferList.prototype.push = function (v) {
      var entry = { data: v, next: null };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    };

    BufferList.prototype.unshift = function (v) {
      var entry = { data: v, next: this.head };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    };

    BufferList.prototype.shift = function () {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    };

    BufferList.prototype.clear = function () {
      this.head = this.tail = null;
      this.length = 0;
    };

    BufferList.prototype.join = function (s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) {
        ret += s + p.data;
      }return ret;
    };

    BufferList.prototype.concat = function (n) {
      if (this.length === 0) return Buffer.alloc(0);
      if (this.length === 1) return this.head.data;
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        p.data.copy(ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    };

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    var isBufferEncoding = Buffer.isEncoding
      || function(encoding) {
           switch (encoding && encoding.toLowerCase()) {
             case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
             default: return false;
           }
         };


    function assertEncoding(encoding) {
      if (encoding && !isBufferEncoding(encoding)) {
        throw new Error('Unknown encoding: ' + encoding);
      }
    }

    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters. CESU-8 is handled as part of the UTF-8 encoding.
    //
    // @TODO Handling all encodings inside a single object makes it very difficult
    // to reason about this code, so it should be split up in the future.
    // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
    // points as used by CESU-8.
    function StringDecoder(encoding) {
      this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
      assertEncoding(encoding);
      switch (this.encoding) {
        case 'utf8':
          // CESU-8 represents each of Surrogate Pair by 3-bytes
          this.surrogateSize = 3;
          break;
        case 'ucs2':
        case 'utf16le':
          // UTF-16 represents each of Surrogate Pair by 2-bytes
          this.surrogateSize = 2;
          this.detectIncompleteChar = utf16DetectIncompleteChar;
          break;
        case 'base64':
          // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
          this.surrogateSize = 3;
          this.detectIncompleteChar = base64DetectIncompleteChar;
          break;
        default:
          this.write = passThroughWrite;
          return;
      }

      // Enough space to store all bytes of a single character. UTF-8 needs 4
      // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
      this.charBuffer = new Buffer(6);
      // Number of bytes received for the current incomplete multi-byte character.
      this.charReceived = 0;
      // Number of bytes expected for the current incomplete multi-byte character.
      this.charLength = 0;
    }

    // write decodes the given buffer and returns it as JS string that is
    // guaranteed to not contain any partial multi-byte characters. Any partial
    // character found at the end of the buffer is buffered up, and will be
    // returned when calling write again with the remaining bytes.
    //
    // Note: Converting a Buffer containing an orphan surrogate to a String
    // currently works, but converting a String to a Buffer (via `new Buffer`, or
    // Buffer#write) will replace incomplete surrogates with the unicode
    // replacement character. See https://codereview.chromium.org/121173009/ .
    StringDecoder.prototype.write = function(buffer) {
      var charStr = '';
      // if our last write ended with an incomplete multibyte character
      while (this.charLength) {
        // determine how many remaining bytes this buffer has to offer for this char
        var available = (buffer.length >= this.charLength - this.charReceived) ?
            this.charLength - this.charReceived :
            buffer.length;

        // add the new bytes to the char buffer
        buffer.copy(this.charBuffer, this.charReceived, 0, available);
        this.charReceived += available;

        if (this.charReceived < this.charLength) {
          // still not enough chars in this buffer? wait for more ...
          return '';
        }

        // remove bytes belonging to the current character from the buffer
        buffer = buffer.slice(available, buffer.length);

        // get the character that was split
        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

        // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
        var charCode = charStr.charCodeAt(charStr.length - 1);
        if (charCode >= 0xD800 && charCode <= 0xDBFF) {
          this.charLength += this.surrogateSize;
          charStr = '';
          continue;
        }
        this.charReceived = this.charLength = 0;

        // if there are no more bytes in this buffer, just emit our char
        if (buffer.length === 0) {
          return charStr;
        }
        break;
      }

      // determine and set charLength / charReceived
      this.detectIncompleteChar(buffer);

      var end = buffer.length;
      if (this.charLength) {
        // buffer the incomplete character bytes we got
        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
        end -= this.charReceived;
      }

      charStr += buffer.toString(this.encoding, 0, end);

      var end = charStr.length - 1;
      var charCode = charStr.charCodeAt(end);
      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        var size = this.surrogateSize;
        this.charLength += size;
        this.charReceived += size;
        this.charBuffer.copy(this.charBuffer, size, 0, size);
        buffer.copy(this.charBuffer, 0, 0, size);
        return charStr.substring(0, end);
      }

      // or just emit the charStr
      return charStr;
    };

    // detectIncompleteChar determines if there is an incomplete UTF-8 character at
    // the end of the given buffer. If so, it sets this.charLength to the byte
    // length that character, and sets this.charReceived to the number of bytes
    // that are available for this character.
    StringDecoder.prototype.detectIncompleteChar = function(buffer) {
      // determine how many bytes we have to check at the end of this buffer
      var i = (buffer.length >= 3) ? 3 : buffer.length;

      // Figure out if one of the last i bytes of our buffer announces an
      // incomplete char.
      for (; i > 0; i--) {
        var c = buffer[buffer.length - i];

        // See http://en.wikipedia.org/wiki/UTF-8#Description

        // 110XXXXX
        if (i == 1 && c >> 5 == 0x06) {
          this.charLength = 2;
          break;
        }

        // 1110XXXX
        if (i <= 2 && c >> 4 == 0x0E) {
          this.charLength = 3;
          break;
        }

        // 11110XXX
        if (i <= 3 && c >> 3 == 0x1E) {
          this.charLength = 4;
          break;
        }
      }
      this.charReceived = i;
    };

    StringDecoder.prototype.end = function(buffer) {
      var res = '';
      if (buffer && buffer.length)
        res = this.write(buffer);

      if (this.charReceived) {
        var cr = this.charReceived;
        var buf = this.charBuffer;
        var enc = this.encoding;
        res += buf.slice(0, cr).toString(enc);
      }

      return res;
    };

    function passThroughWrite(buffer) {
      return buffer.toString(this.encoding);
    }

    function utf16DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 2;
      this.charLength = this.charReceived ? 2 : 0;
    }

    function base64DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 3;
      this.charLength = this.charReceived ? 3 : 0;
    }

    Readable.ReadableState = ReadableState;

    var debug = debuglog('stream');
    inherits$1(Readable, EventEmitter$1);

    function prependListener(emitter, event, fn) {
      // Sadly this is not cacheable as some libraries bundle their own
      // event emitter implementation with them.
      if (typeof emitter.prependListener === 'function') {
        return emitter.prependListener(event, fn);
      } else {
        // This is a hack to make sure that our error handler is attached before any
        // userland ones.  NEVER DO THIS. This is here only because this code needs
        // to continue to work with older versions of Node.js that do not include
        // the prependListener() method. The goal is to eventually remove this hack.
        if (!emitter._events || !emitter._events[event])
          emitter.on(event, fn);
        else if (Array.isArray(emitter._events[event]))
          emitter._events[event].unshift(fn);
        else
          emitter._events[event] = [fn, emitter._events[event]];
      }
    }
    function listenerCount (emitter, type) {
      return emitter.listeners(type).length;
    }
    function ReadableState(options, stream) {

      options = options || {};

      // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away
      this.objectMode = !!options.objectMode;

      if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

      // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"
      var hwm = options.highWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

      // cast to ints.
      this.highWaterMark = ~ ~this.highWaterMark;

      // A linked list is used to store data chunks instead of an array because the
      // linked list can remove elements from the beginning faster than
      // array.shift()
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // when piping, we only care about 'readable' events that happen
      // after read()ing all the bytes and not getting any pushback.
      this.ranOut = false;

      // the number of writers that are awaiting a drain event in .pipe()s
      this.awaitDrain = 0;

      // if true, a maybeReadMore has been scheduled
      this.readingMore = false;

      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {

      if (!(this instanceof Readable)) return new Readable(options);

      this._readableState = new ReadableState(options, this);

      // legacy
      this.readable = true;

      if (options && typeof options.read === 'function') this._read = options.read;

      EventEmitter$1.call(this);
    }

    // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.
    Readable.prototype.push = function (chunk, encoding) {
      var state = this._readableState;

      if (!state.objectMode && typeof chunk === 'string') {
        encoding = encoding || state.defaultEncoding;
        if (encoding !== state.encoding) {
          chunk = Buffer.from(chunk, encoding);
          encoding = '';
        }
      }

      return readableAddChunk(this, state, chunk, encoding, false);
    };

    // Unshift should *always* be something directly out of read()
    Readable.prototype.unshift = function (chunk) {
      var state = this._readableState;
      return readableAddChunk(this, state, chunk, '', true);
    };

    Readable.prototype.isPaused = function () {
      return this._readableState.flowing === false;
    };

    function readableAddChunk(stream, state, chunk, encoding, addToFront) {
      var er = chunkInvalid(state, chunk);
      if (er) {
        stream.emit('error', er);
      } else if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (state.ended && !addToFront) {
          var e = new Error('stream.push() after EOF');
          stream.emit('error', e);
        } else if (state.endEmitted && addToFront) {
          var _e = new Error('stream.unshift() after end event');
          stream.emit('error', _e);
        } else {
          var skipAdd;
          if (state.decoder && !addToFront && !encoding) {
            chunk = state.decoder.write(chunk);
            skipAdd = !state.objectMode && chunk.length === 0;
          }

          if (!addToFront) state.reading = false;

          // Don't add to the buffer if we've decoded to an empty string chunk and
          // we're not in object mode
          if (!skipAdd) {
            // if we want the data now, just emit it.
            if (state.flowing && state.length === 0 && !state.sync) {
              stream.emit('data', chunk);
              stream.read(0);
            } else {
              // update the buffer info.
              state.length += state.objectMode ? 1 : chunk.length;
              if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

              if (state.needReadable) emitReadable(stream);
            }
          }

          maybeReadMore(stream, state);
        }
      } else if (!addToFront) {
        state.reading = false;
      }

      return needMoreData(state);
    }

    // if it's past the high water mark, we can push in some more.
    // Also, if we have no data yet, we can stand some
    // more bytes.  This is to work around cases where hwm=0,
    // such as the repl.  Also, if the push() triggered a
    // readable event, and the user called read(largeNumber) such that
    // needReadable was set, then we ought to push more, so that another
    // 'readable' event will be triggered.
    function needMoreData(state) {
      return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
    }

    // backwards compatibility.
    Readable.prototype.setEncoding = function (enc) {
      this._readableState.decoder = new StringDecoder(enc);
      this._readableState.encoding = enc;
      return this;
    };

    // Don't raise the hwm > 8MB
    var MAX_HWM = 0x800000;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }

    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;
      if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
      }
      // If we're asking for more than the current hwm, then raise the hwm.
      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length) return n;
      // Don't have enough
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }

    // you can override either this method, or the async _read(n) below.
    Readable.prototype.read = function (n) {
      debug('read', n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;

      if (n !== 0) state.emittedReadable = false;

      // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.
      if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
        return null;
      }

      n = howMuchToRead(n, state);

      // if we've ended, and we're now clear, then finish it up.
      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      }

      // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.

      // if we need a readable event, then we need to do some reading.
      var doRead = state.needReadable;
      debug('need readable', doRead);

      // if we currently have less than the highWaterMark, then also read some
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
      }

      // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.
      if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
      } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
      }

      var ret;
      if (n > 0) ret = fromList(n, state);else ret = null;

      if (ret === null) {
        state.needReadable = true;
        n = 0;
      } else {
        state.length -= n;
      }

      if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;

        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
      }

      if (ret !== null) this.emit('data', ret);

      return ret;
    };

    function chunkInvalid(state, chunk) {
      var er = null;
      if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      return er;
    }

    function onEofChunk(stream, state) {
      if (state.ended) return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;

      // emit 'readable' now to make sure it gets picked up.
      emitReadable(stream);
    }

    // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.
    function emitReadable(stream) {
      var state = stream._readableState;
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
      }
    }

    function emitReadable_(stream) {
      debug('emit readable');
      stream.emit('readable');
      flow(stream);
    }

    // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        nextTick(maybeReadMore_, stream, state);
      }
    }

    function maybeReadMore_(stream, state) {
      var len = state.length;
      while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length)
          // didn't get any data, stop spinning.
          break;else len = state.length;
      }
      state.readingMore = false;
    }

    // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.
    Readable.prototype._read = function (n) {
      this.emit('error', new Error('not implemented'));
    };

    Readable.prototype.pipe = function (dest, pipeOpts) {
      var src = this;
      var state = this._readableState;

      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

      var doEnd = (!pipeOpts || pipeOpts.end !== false);

      var endFn = doEnd ? onend : cleanup;
      if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

      dest.on('unpipe', onunpipe);
      function onunpipe(readable) {
        debug('onunpipe');
        if (readable === src) {
          cleanup();
        }
      }

      function onend() {
        debug('onend');
        dest.end();
      }

      // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.
      var ondrain = pipeOnDrain(src);
      dest.on('drain', ondrain);

      var cleanedUp = false;
      function cleanup() {
        debug('cleanup');
        // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', cleanup);
        src.removeListener('data', ondata);

        cleanedUp = true;

        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }

      // If the user pushes more data while we're writing to dest then we'll end up
      // in ondata again. However, we only want to increase awaitDrain once because
      // dest will only emit one 'drain' event for the multiple writes.
      // => Introduce a guard on increasing awaitDrain.
      var increasedAwaitDrain = false;
      src.on('data', ondata);
      function ondata(chunk) {
        debug('ondata');
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (false === ret && !increasedAwaitDrain) {
          // If the user unpiped during `dest.write()`, it is possible
          // to get stuck in a permanently paused state if that write
          // also returned false.
          // => Check whether `dest` is still a piping destination.
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug('false write response, pause', src._readableState.awaitDrain);
            src._readableState.awaitDrain++;
            increasedAwaitDrain = true;
          }
          src.pause();
        }
      }

      // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.
      function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (listenerCount(dest, 'error') === 0) dest.emit('error', er);
      }

      // Make sure our error handler is attached before userland ones.
      prependListener(dest, 'error', onerror);

      // Both close and finish should trigger unpipe, but only once.
      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }
      dest.once('close', onclose);
      function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }
      dest.once('finish', onfinish);

      function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
      }

      // tell the dest that it's being piped to
      dest.emit('pipe', src);

      // start the flow if it hasn't been started already.
      if (!state.flowing) {
        debug('pipe resume');
        src.resume();
      }

      return dest;
    };

    function pipeOnDrain(src) {
      return function () {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && src.listeners('data').length) {
          state.flowing = true;
          flow(src);
        }
      };
    }

    Readable.prototype.unpipe = function (dest) {
      var state = this._readableState;

      // if we're not piping anywhere, then do nothing.
      if (state.pipesCount === 0) return this;

      // just one destination.  most common case.
      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;

        if (!dest) dest = state.pipes;

        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this);
        return this;
      }

      // slow case. multiple pipe destinations.

      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;

        for (var _i = 0; _i < len; _i++) {
          dests[_i].emit('unpipe', this);
        }return this;
      }

      // try to find the right one.
      var i = indexOf(state.pipes, dest);
      if (i === -1) return this;

      state.pipes.splice(i, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];

      dest.emit('unpipe', this);

      return this;
    };

    // set up data events if they are asked for
    // Ensure readable listeners eventually get something
    Readable.prototype.on = function (ev, fn) {
      var res = EventEmitter$1.prototype.on.call(this, ev, fn);

      if (ev === 'data') {
        // Start flowing on next tick if stream isn't explicitly paused
        if (this._readableState.flowing !== false) this.resume();
      } else if (ev === 'readable') {
        var state = this._readableState;
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.emittedReadable = false;
          if (!state.reading) {
            nextTick(nReadingNextTick, this);
          } else if (state.length) {
            emitReadable(this);
          }
        }
      }

      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;

    function nReadingNextTick(self) {
      debug('readable nexttick read 0');
      self.read(0);
    }

    // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.
    Readable.prototype.resume = function () {
      var state = this._readableState;
      if (!state.flowing) {
        debug('resume');
        state.flowing = true;
        resume$1(this, state);
      }
      return this;
    };

    function resume$1(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        nextTick(resume_, stream, state);
      }
    }

    function resume_(stream, state) {
      if (!state.reading) {
        debug('resume read 0');
        stream.read(0);
      }

      state.resumeScheduled = false;
      state.awaitDrain = 0;
      stream.emit('resume');
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }

    Readable.prototype.pause = function () {
      debug('call pause flowing=%j', this._readableState.flowing);
      if (false !== this._readableState.flowing) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }
      return this;
    };

    function flow(stream) {
      var state = stream._readableState;
      debug('flow', state.flowing);
      while (state.flowing && stream.read() !== null) {}
    }

    // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.
    Readable.prototype.wrap = function (stream) {
      var state = this._readableState;
      var paused = false;

      var self = this;
      stream.on('end', function () {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) self.push(chunk);
        }

        self.push(null);
      });

      stream.on('data', function (chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk);

        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

        var ret = self.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });

      // proxy all the other methods.
      // important when wrapping filters and duplexes.
      for (var i in stream) {
        if (this[i] === undefined && typeof stream[i] === 'function') {
          this[i] = function (method) {
            return function () {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }

      // proxy certain important events.
      var events = ['error', 'close', 'destroy', 'pause', 'resume'];
      forEach(events, function (ev) {
        stream.on(ev, self.emit.bind(self, ev));
      });

      // when we try to consume some more bytes, simply unpause the
      // underlying stream.
      self._read = function (n) {
        debug('wrapped _read', n);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };

      return self;
    };

    // exposed for testing purposes only.
    Readable._fromList = fromList;

    // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromList(n, state) {
      // nothing buffered
      if (state.length === 0) return null;

      var ret;
      if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        // read part of list
        ret = fromListPartial(n, state.buffer, state.decoder);
      }

      return ret;
    }

    // Extracts only enough buffered data to satisfy the amount requested.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromListPartial(n, list, hasStrings) {
      var ret;
      if (n < list.head.data.length) {
        // slice is the same for buffers and strings
        ret = list.head.data.slice(0, n);
        list.head.data = list.head.data.slice(n);
      } else if (n === list.head.data.length) {
        // first chunk is a perfect match
        ret = list.shift();
      } else {
        // result spans more than one buffer
        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
      }
      return ret;
    }

    // Copies a specified amount of characters from the list of buffered data
    // chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBufferString(n, list) {
      var p = list.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }

    // Copies a specified amount of bytes from the list of buffered data chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBuffer(n, list) {
      var ret = Buffer.allocUnsafe(n);
      var p = list.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }

    function endReadable(stream) {
      var state = stream._readableState;

      // If we get here before consuming all the bytes, then that is a
      // bug in node.  Should never happen.
      if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

      if (!state.endEmitted) {
        state.ended = true;
        nextTick(endReadableNT, state, stream);
      }
    }

    function endReadableNT(state, stream) {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    }

    function forEach(xs, f) {
      for (var i = 0, l = xs.length; i < l; i++) {
        f(xs[i], i);
      }
    }

    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }
      return -1;
    }

    // A bit simpler than readable streams.
    // Implement an async ._write(chunk, encoding, cb), and it'll handle all
    // the drain event emission and buffering.

    Writable$1.WritableState = WritableState;
    inherits$1(Writable$1, EventEmitter$1);

    function nop() {}

    function WriteReq(chunk, encoding, cb) {
      this.chunk = chunk;
      this.encoding = encoding;
      this.callback = cb;
      this.next = null;
    }

    function WritableState(options, stream) {
      Object.defineProperty(this, 'buffer', {
        get: deprecate(function () {
          return this.getBuffer();
        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
      });
      options = options || {};

      // object stream flag to indicate whether or not this stream
      // contains buffers or objects.
      this.objectMode = !!options.objectMode;

      if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

      // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()
      var hwm = options.highWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

      // cast to ints.
      this.highWaterMark = ~ ~this.highWaterMark;

      this.needDrain = false;
      // at the start of calling end()
      this.ending = false;
      // when end() has been called, and returned
      this.ended = false;
      // when 'finish' is emitted
      this.finished = false;

      // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.
      this.length = 0;

      // a flag to see when we're in the middle of a write.
      this.writing = false;

      // when true all writes will be buffered until .uncork() call
      this.corked = 0;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.
      this.bufferProcessing = false;

      // the callback that's passed to _write(chunk,cb)
      this.onwrite = function (er) {
        onwrite(stream, er);
      };

      // the callback that the user supplies to write(chunk,encoding,cb)
      this.writecb = null;

      // the amount that is being written when _write is called.
      this.writelen = 0;

      this.bufferedRequest = null;
      this.lastBufferedRequest = null;

      // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted
      this.pendingcb = 0;

      // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams
      this.prefinished = false;

      // True if the error was already emitted and should not be thrown again
      this.errorEmitted = false;

      // count buffered requests
      this.bufferedRequestCount = 0;

      // allocate the first CorkedRequest, there is always
      // one allocated and free to use, and we maintain at most two
      this.corkedRequestsFree = new CorkedRequest(this);
    }

    WritableState.prototype.getBuffer = function writableStateGetBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    function Writable$1(options) {

      // Writable ctor is applied to Duplexes, though they're not
      // instanceof Writable, they're instanceof Readable.
      if (!(this instanceof Writable$1) && !(this instanceof Duplex)) return new Writable$1(options);

      this._writableState = new WritableState(options, this);

      // legacy.
      this.writable = true;

      if (options) {
        if (typeof options.write === 'function') this._write = options.write;

        if (typeof options.writev === 'function') this._writev = options.writev;
      }

      EventEmitter$1.call(this);
    }

    // Otherwise people can pipe Writable streams, which is just wrong.
    Writable$1.prototype.pipe = function () {
      this.emit('error', new Error('Cannot pipe, not readable'));
    };

    function writeAfterEnd(stream, cb) {
      var er = new Error('write after end');
      // TODO: defer error events consistently everywhere, not just the cb
      stream.emit('error', er);
      nextTick(cb, er);
    }

    // If we get something that is not a buffer, string, null, or undefined,
    // and we're not in objectMode, then that's an error.
    // Otherwise stream chunks are all considered to be of length=1, and the
    // watermarks determine how many objects to keep in the buffer, rather than
    // how many bytes or characters.
    function validChunk(stream, state, chunk, cb) {
      var valid = true;
      var er = false;
      // Always throw error if a null is written
      // if we are not in object mode then throw
      // if it is not a buffer, string, or undefined.
      if (chunk === null) {
        er = new TypeError('May not write null values to stream');
      } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      if (er) {
        stream.emit('error', er);
        nextTick(cb, er);
        valid = false;
      }
      return valid;
    }

    Writable$1.prototype.write = function (chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;

      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

      if (typeof cb !== 'function') cb = nop;

      if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, chunk, encoding, cb);
      }

      return ret;
    };

    Writable$1.prototype.cork = function () {
      var state = this._writableState;

      state.corked++;
    };

    Writable$1.prototype.uncork = function () {
      var state = this._writableState;

      if (state.corked) {
        state.corked--;

        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };

    Writable$1.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      // node::ParseEncoding() requires lower case.
      if (typeof encoding === 'string') encoding = encoding.toLowerCase();
      if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };

    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = Buffer.from(chunk, encoding);
      }
      return chunk;
    }

    // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.
    function writeOrBuffer(stream, state, chunk, encoding, cb) {
      chunk = decodeChunk(state, chunk, encoding);

      if (Buffer.isBuffer(chunk)) encoding = 'buffer';
      var len = state.objectMode ? 1 : chunk.length;

      state.length += len;

      var ret = state.length < state.highWaterMark;
      // we must ensure that previous needDrain will not be reset to false.
      if (!ret) state.needDrain = true;

      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }

      return ret;
    }

    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }

    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) nextTick(cb, er);else cb(er);

      stream._writableState.errorEmitted = true;
      stream.emit('error', er);
    }

    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }

    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;

      onwriteStateUpdate(state);

      if (er) onwriteError(stream, state, sync, er, cb);else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state);

        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }

        if (sync) {
          /*<replacement>*/
            nextTick(afterWrite, stream, state, finished, cb);
          /*</replacement>*/
        } else {
            afterWrite(stream, state, finished, cb);
          }
      }
    }

    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }

    // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    }

    // if there's something in the buffer waiting, then process it
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;

      if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;

        var count = 0;
        while (entry) {
          buffer[count] = entry;
          entry = entry.next;
          count += 1;
        }

        doWrite(stream, state, true, state.length, buffer, '', holder.finish);

        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
      } else {
        // Slow case, write chunks one-by-one
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;

          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.
          if (state.writing) {
            break;
          }
        }

        if (entry === null) state.lastBufferedRequest = null;
      }

      state.bufferedRequestCount = 0;
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }

    Writable$1.prototype._write = function (chunk, encoding, cb) {
      cb(new Error('not implemented'));
    };

    Writable$1.prototype._writev = null;

    Writable$1.prototype.end = function (chunk, encoding, cb) {
      var state = this._writableState;

      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

      // .end() fully uncorks
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }

      // ignore unnecessary end() calls.
      if (!state.ending && !state.finished) endWritable(this, state, cb);
    };

    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }

    function prefinish(stream, state) {
      if (!state.prefinished) {
        state.prefinished = true;
        stream.emit('prefinish');
      }
    }

    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        if (state.pendingcb === 0) {
          prefinish(stream, state);
          state.finished = true;
          stream.emit('finish');
        } else {
          prefinish(stream, state);
        }
      }
      return need;
    }

    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished) nextTick(cb);else stream.once('finish', cb);
      }
      state.ended = true;
      stream.writable = false;
    }

    // It seems a linked list but it is not
    // there will be only 2 of these for each stream
    function CorkedRequest(state) {
      var _this = this;

      this.next = null;
      this.entry = null;

      this.finish = function (err) {
        var entry = _this.entry;
        _this.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err);
          entry = entry.next;
        }
        if (state.corkedRequestsFree) {
          state.corkedRequestsFree.next = _this;
        } else {
          state.corkedRequestsFree = _this;
        }
      };
    }

    inherits$1(Duplex, Readable);

    var keys = Object.keys(Writable$1.prototype);
    for (var v = 0; v < keys.length; v++) {
      var method = keys[v];
      if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable$1.prototype[method];
    }
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);

      Readable.call(this, options);
      Writable$1.call(this, options);

      if (options && options.readable === false) this.readable = false;

      if (options && options.writable === false) this.writable = false;

      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

      this.once('end', onend);
    }

    // the no-half-open enforcer
    function onend() {
      // if we allow half-open state, or if the writable side ended,
      // then we're ok.
      if (this.allowHalfOpen || this._writableState.ended) return;

      // no more data can be written.
      // But allow more writes to happen in this tick.
      nextTick(onEndNT, this);
    }

    function onEndNT(self) {
      self.end();
    }

    // a transform stream is a readable/writable stream where you do
    // something with the data.  Sometimes it's called a "filter",
    // but that's not a great name for it, since that implies a thing where
    // some bits pass through, and others are simply ignored.  (That would
    // be a valid example of a transform, of course.)
    //
    // While the output is causally related to the input, it's not a
    // necessarily symmetric or synchronous transformation.  For example,
    // a zlib stream might take multiple plain-text writes(), and then
    // emit a single compressed chunk some time in the future.
    //
    // Here's how this works:
    //
    // The Transform stream has all the aspects of the readable and writable
    // stream classes.  When you write(chunk), that calls _write(chunk,cb)
    // internally, and returns false if there's a lot of pending writes
    // buffered up.  When you call read(), that calls _read(n) until
    // there's enough pending readable data buffered up.
    //
    // In a transform stream, the written data is placed in a buffer.  When
    // _read(n) is called, it transforms the queued up data, calling the
    // buffered _write cb's as it consumes chunks.  If consuming a single
    // written chunk would result in multiple output chunks, then the first
    // outputted bit calls the readcb, and subsequent chunks just go into
    // the read buffer, and will cause it to emit 'readable' if necessary.
    //
    // This way, back-pressure is actually determined by the reading side,
    // since _read has to be called to start processing a new chunk.  However,
    // a pathological inflate type of transform can cause excessive buffering
    // here.  For example, imagine a stream where every byte of input is
    // interpreted as an integer from 0-255, and then results in that many
    // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
    // 1kb of data being output.  In this case, you could write a very small
    // amount of input, and end up with a very large amount of output.  In
    // such a pathological inflating mechanism, there'd be no way to tell
    // the system to stop doing the transform.  A single 4MB write could
    // cause the system to run out of memory.
    //
    // However, even in such a pathological case, only a single written chunk
    // would be consumed, and then the rest would wait (un-transformed) until
    // the results of the previous transformed chunk were consumed.

    inherits$1(Transform, Duplex);

    function TransformState(stream) {
      this.afterTransform = function (er, data) {
        return afterTransform(stream, er, data);
      };

      this.needTransform = false;
      this.transforming = false;
      this.writecb = null;
      this.writechunk = null;
      this.writeencoding = null;
    }

    function afterTransform(stream, er, data) {
      var ts = stream._transformState;
      ts.transforming = false;

      var cb = ts.writecb;

      if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

      ts.writechunk = null;
      ts.writecb = null;

      if (data !== null && data !== undefined) stream.push(data);

      cb(er);

      var rs = stream._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        stream._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);

      Duplex.call(this, options);

      this._transformState = new TransformState(this);

      // when the writable side finishes, then flush out anything remaining.
      var stream = this;

      // start out asking for a readable event once data is transformed.
      this._readableState.needReadable = true;

      // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.
      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;

        if (typeof options.flush === 'function') this._flush = options.flush;
      }

      this.once('prefinish', function () {
        if (typeof this._flush === 'function') this._flush(function (er) {
          done(stream, er);
        });else done(stream);
      });
    }

    Transform.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };

    // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.
    Transform.prototype._transform = function (chunk, encoding, cb) {
      throw new Error('Not implemented');
    };

    Transform.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };

    // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.
    Transform.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    function done(stream, er) {
      if (er) return stream.emit('error', er);

      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided
      var ws = stream._writableState;
      var ts = stream._transformState;

      if (ws.length) throw new Error('Calling transform done when ws.length != 0');

      if (ts.transforming) throw new Error('Calling transform done when still transforming');

      return stream.push(null);
    }

    inherits$1(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);

      Transform.call(this, options);
    }

    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };

    inherits$1(Stream, EventEmitter$1);
    Stream.Readable = Readable;
    Stream.Writable = Writable$1;
    Stream.Duplex = Duplex;
    Stream.Transform = Transform;
    Stream.PassThrough = PassThrough;

    // Backwards-compat with node 0.4.x
    Stream.Stream = Stream;

    // old-style streams.  Note that the pipe method (the only relevant
    // part of this class) is overridden in the Readable class.

    function Stream() {
      EventEmitter$1.call(this);
    }

    Stream.prototype.pipe = function(dest, options) {
      var source = this;

      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }

      source.on('data', ondata);

      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }

      dest.on('drain', ondrain);

      // If the 'end' option is not supplied, dest.end() will be called when
      // source gets the 'end' or 'close' events.  Only dest.end() once.
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
      }

      var didOnEnd = false;
      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;

        dest.end();
      }


      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;

        if (typeof dest.destroy === 'function') dest.destroy();
      }

      // don't leave dangling pipes when there are errors.
      function onerror(er) {
        cleanup();
        if (EventEmitter$1.listenerCount(this, 'error') === 0) {
          throw er; // Unhandled stream error in pipe.
        }
      }

      source.on('error', onerror);
      dest.on('error', onerror);

      // remove all the event listeners that were added.
      function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);

        source.removeListener('end', onend);
        source.removeListener('close', onclose);

        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);

        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);

        dest.removeListener('close', cleanup);
      }

      source.on('end', cleanup);
      source.on('close', cleanup);

      dest.on('close', cleanup);

      dest.emit('pipe', source);

      // Allow for unix-like usage: A.pipe(B).pipe(C)
      return dest;
    };

    var _polyfillNode_stream = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Duplex: Duplex,
        PassThrough: PassThrough,
        Readable: Readable,
        Stream: Stream,
        Transform: Transform,
        Writable: Writable$1,
        default: Stream
    });

    var require$$6 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_stream);

    var msg = {
      2:      'need dictionary',     /* Z_NEED_DICT       2  */
      1:      'stream end',          /* Z_STREAM_END      1  */
      0:      '',                    /* Z_OK              0  */
      '-1':   'file error',          /* Z_ERRNO         (-1) */
      '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
      '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
      '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
      '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
      '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
    };

    function ZStream() {
      /* next input byte */
      this.input = null; // JS specific, because we have no pointers
      this.next_in = 0;
      /* number of bytes available at input */
      this.avail_in = 0;
      /* total number of input bytes read so far */
      this.total_in = 0;
      /* next output byte should be put there */
      this.output = null; // JS specific, because we have no pointers
      this.next_out = 0;
      /* remaining free space at output */
      this.avail_out = 0;
      /* total number of bytes output so far */
      this.total_out = 0;
      /* last error message, NULL if no error */
      this.msg = ''/*Z_NULL*/;
      /* not visible by applications */
      this.state = null;
      /* best guess about the data type: binary or text */
      this.data_type = 2/*Z_UNKNOWN*/;
      /* adler32 value of the uncompressed data */
      this.adler = 0;
    }

    function arraySet(dest, src, src_offs, len, dest_offs) {
      if (src.subarray && dest.subarray) {
        dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
        return;
      }
      // Fallback to ordinary array
      for (var i = 0; i < len; i++) {
        dest[dest_offs + i] = src[src_offs + i];
      }
    }


    var Buf8 = Uint8Array;
    var Buf16 = Uint16Array;
    var Buf32 = Int32Array;
    // Enable/Disable typed arrays use, for testing
    //

    /* Public constants ==========================================================*/
    /* ===========================================================================*/


    //var Z_FILTERED          = 1;
    //var Z_HUFFMAN_ONLY      = 2;
    //var Z_RLE               = 3;
    var Z_FIXED$2 = 4;
    //var Z_DEFAULT_STRATEGY  = 0;

    /* Possible values of the data_type field (though see inflate()) */
    var Z_BINARY$1 = 0;
    var Z_TEXT$1 = 1;
    //var Z_ASCII             = 1; // = Z_TEXT
    var Z_UNKNOWN$2 = 2;

    /*============================================================================*/


    function zero$1(buf) {
      var len = buf.length;
      while (--len >= 0) {
        buf[len] = 0;
      }
    }

    // From zutil.h

    var STORED_BLOCK = 0;
    var STATIC_TREES = 1;
    var DYN_TREES = 2;
    /* The three kinds of block type */

    var MIN_MATCH$1 = 3;
    var MAX_MATCH$1 = 258;
    /* The minimum and maximum match lengths */

    // From deflate.h
    /* ===========================================================================
     * Internal compression state.
     */

    var LENGTH_CODES$1 = 29;
    /* number of length codes, not counting the special END_BLOCK code */

    var LITERALS$1 = 256;
    /* number of literal bytes 0..255 */

    var L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;
    /* number of Literal or Length codes, including the END_BLOCK code */

    var D_CODES$1 = 30;
    /* number of distance codes */

    var BL_CODES$1 = 19;
    /* number of codes used to transfer the bit lengths */

    var HEAP_SIZE$1 = 2 * L_CODES$1 + 1;
    /* maximum heap size */

    var MAX_BITS$1 = 15;
    /* All codes must not exceed MAX_BITS bits */

    var Buf_size = 16;
    /* size of bit buffer in bi_buf */


    /* ===========================================================================
     * Constants
     */

    var MAX_BL_BITS = 7;
    /* Bit length codes must not exceed MAX_BL_BITS bits */

    var END_BLOCK = 256;
    /* end of block literal code */

    var REP_3_6 = 16;
    /* repeat previous bit length 3-6 times (2 bits of repeat count) */

    var REPZ_3_10 = 17;
    /* repeat a zero length 3-10 times  (3 bits of repeat count) */

    var REPZ_11_138 = 18;
    /* repeat a zero length 11-138 times  (7 bits of repeat count) */

    /* eslint-disable comma-spacing,array-bracket-spacing */
    var extra_lbits = /* extra bits for each length code */ [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];

    var extra_dbits = /* extra bits for each distance code */ [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];

    var extra_blbits = /* extra bits for each bit length code */ [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];

    var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    /* eslint-enable comma-spacing,array-bracket-spacing */

    /* The lengths of the bit length codes are sent in order of decreasing
     * probability, to avoid transmitting the lengths for unused bit length codes.
     */

    /* ===========================================================================
     * Local data. These are initialized only once.
     */

    // We pre-fill arrays with 0 to avoid uninitialized gaps

    var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

    // !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
    var static_ltree = new Array((L_CODES$1 + 2) * 2);
    zero$1(static_ltree);
    /* The static literal tree. Since the bit lengths are imposed, there is no
     * need for the L_CODES extra codes used during heap construction. However
     * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
     * below).
     */

    var static_dtree = new Array(D_CODES$1 * 2);
    zero$1(static_dtree);
    /* The static distance tree. (Actually a trivial tree since all codes use
     * 5 bits.)
     */

    var _dist_code = new Array(DIST_CODE_LEN);
    zero$1(_dist_code);
    /* Distance codes. The first 256 values correspond to the distances
     * 3 .. 258, the last 256 values correspond to the top 8 bits of
     * the 15 bit distances.
     */

    var _length_code = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
    zero$1(_length_code);
    /* length code for each normalized match length (0 == MIN_MATCH) */

    var base_length = new Array(LENGTH_CODES$1);
    zero$1(base_length);
    /* First normalized length for each code (0 = MIN_MATCH) */

    var base_dist = new Array(D_CODES$1);
    zero$1(base_dist);
    /* First normalized distance for each code (0 = distance of 1) */


    function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

      this.static_tree = static_tree; /* static tree or NULL */
      this.extra_bits = extra_bits; /* extra bits for each code or NULL */
      this.extra_base = extra_base; /* base index for extra_bits */
      this.elems = elems; /* max number of elements in the tree */
      this.max_length = max_length; /* max bit length for the codes */

      // show if `static_tree` has data or dummy - needed for monomorphic objects
      this.has_stree = static_tree && static_tree.length;
    }


    var static_l_desc;
    var static_d_desc;
    var static_bl_desc;


    function TreeDesc(dyn_tree, stat_desc) {
      this.dyn_tree = dyn_tree; /* the dynamic tree */
      this.max_code = 0; /* largest code with non zero frequency */
      this.stat_desc = stat_desc; /* the corresponding static tree */
    }



    function d_code(dist) {
      return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
    }


    /* ===========================================================================
     * Output a short LSB first on the stream.
     * IN assertion: there is enough room in pendingBuf.
     */
    function put_short(s, w) {
      //    put_byte(s, (uch)((w) & 0xff));
      //    put_byte(s, (uch)((ush)(w) >> 8));
      s.pending_buf[s.pending++] = (w) & 0xff;
      s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
    }


    /* ===========================================================================
     * Send a value on a given number of bits.
     * IN assertion: length <= 16 and value fits in length bits.
     */
    function send_bits(s, value, length) {
      if (s.bi_valid > (Buf_size - length)) {
        s.bi_buf |= (value << s.bi_valid) & 0xffff;
        put_short(s, s.bi_buf);
        s.bi_buf = value >> (Buf_size - s.bi_valid);
        s.bi_valid += length - Buf_size;
      } else {
        s.bi_buf |= (value << s.bi_valid) & 0xffff;
        s.bi_valid += length;
      }
    }


    function send_code(s, c, tree) {
      send_bits(s, tree[c * 2] /*.Code*/ , tree[c * 2 + 1] /*.Len*/ );
    }


    /* ===========================================================================
     * Reverse the first len bits of a code, using straightforward code (a faster
     * method would use a table)
     * IN assertion: 1 <= len <= 15
     */
    function bi_reverse(code, len) {
      var res = 0;
      do {
        res |= code & 1;
        code >>>= 1;
        res <<= 1;
      } while (--len > 0);
      return res >>> 1;
    }


    /* ===========================================================================
     * Flush the bit buffer, keeping at most 7 bits in it.
     */
    function bi_flush(s) {
      if (s.bi_valid === 16) {
        put_short(s, s.bi_buf);
        s.bi_buf = 0;
        s.bi_valid = 0;

      } else if (s.bi_valid >= 8) {
        s.pending_buf[s.pending++] = s.bi_buf & 0xff;
        s.bi_buf >>= 8;
        s.bi_valid -= 8;
      }
    }


    /* ===========================================================================
     * Compute the optimal bit lengths for a tree and update the total bit length
     * for the current block.
     * IN assertion: the fields freq and dad are set, heap[heap_max] and
     *    above are the tree nodes sorted by increasing frequency.
     * OUT assertions: the field len is set to the optimal bit length, the
     *     array bl_count contains the frequencies for each bit length.
     *     The length opt_len is updated; static_len is also updated if stree is
     *     not null.
     */
    function gen_bitlen(s, desc) {
    //    deflate_state *s;
    //    tree_desc *desc;    /* the tree descriptor */
      var tree = desc.dyn_tree;
      var max_code = desc.max_code;
      var stree = desc.stat_desc.static_tree;
      var has_stree = desc.stat_desc.has_stree;
      var extra = desc.stat_desc.extra_bits;
      var base = desc.stat_desc.extra_base;
      var max_length = desc.stat_desc.max_length;
      var h; /* heap index */
      var n, m; /* iterate over the tree elements */
      var bits; /* bit length */
      var xbits; /* extra bits */
      var f; /* frequency */
      var overflow = 0; /* number of elements with bit length too large */

      for (bits = 0; bits <= MAX_BITS$1; bits++) {
        s.bl_count[bits] = 0;
      }

      /* In a first pass, compute the optimal bit lengths (which may
       * overflow in the case of the bit length tree).
       */
      tree[s.heap[s.heap_max] * 2 + 1] /*.Len*/ = 0; /* root of the heap */

      for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
        n = s.heap[h];
        bits = tree[tree[n * 2 + 1] /*.Dad*/ * 2 + 1] /*.Len*/ + 1;
        if (bits > max_length) {
          bits = max_length;
          overflow++;
        }
        tree[n * 2 + 1] /*.Len*/ = bits;
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) {
          continue;
        } /* not a leaf node */

        s.bl_count[bits]++;
        xbits = 0;
        if (n >= base) {
          xbits = extra[n - base];
        }
        f = tree[n * 2] /*.Freq*/ ;
        s.opt_len += f * (bits + xbits);
        if (has_stree) {
          s.static_len += f * (stree[n * 2 + 1] /*.Len*/ + xbits);
        }
      }
      if (overflow === 0) {
        return;
      }

      // Trace((stderr,"\nbit length overflow\n"));
      /* This happens for example on obj2 and pic of the Calgary corpus */

      /* Find the first bit length which could increase: */
      do {
        bits = max_length - 1;
        while (s.bl_count[bits] === 0) {
          bits--;
        }
        s.bl_count[bits]--; /* move one leaf down the tree */
        s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
        s.bl_count[max_length]--;
        /* The brother of the overflow item also moves one step up,
         * but this does not affect bl_count[max_length]
         */
        overflow -= 2;
      } while (overflow > 0);

      /* Now recompute all bit lengths, scanning in increasing frequency.
       * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
       * lengths instead of fixing only the wrong ones. This idea is taken
       * from 'ar' written by Haruhiko Okumura.)
       */
      for (bits = max_length; bits !== 0; bits--) {
        n = s.bl_count[bits];
        while (n !== 0) {
          m = s.heap[--h];
          if (m > max_code) {
            continue;
          }
          if (tree[m * 2 + 1] /*.Len*/ !== bits) {
            // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
            s.opt_len += (bits - tree[m * 2 + 1] /*.Len*/ ) * tree[m * 2] /*.Freq*/ ;
            tree[m * 2 + 1] /*.Len*/ = bits;
          }
          n--;
        }
      }
    }


    /* ===========================================================================
     * Generate the codes for a given tree and bit counts (which need not be
     * optimal).
     * IN assertion: the array bl_count contains the bit length statistics for
     * the given tree and the field len is set for all tree elements.
     * OUT assertion: the field code is set for all tree elements of non
     *     zero code length.
     */
    function gen_codes(tree, max_code, bl_count) {
    //    ct_data *tree;             /* the tree to decorate */
    //    int max_code;              /* largest code with non zero frequency */
    //    ushf *bl_count;            /* number of codes at each bit length */

      var next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */
      var code = 0; /* running code value */
      var bits; /* bit index */
      var n; /* code index */

      /* The distribution counts are first used to generate the code values
       * without bit reversal.
       */
      for (bits = 1; bits <= MAX_BITS$1; bits++) {
        next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
      }
      /* Check that the bit counts in bl_count are consistent. The last code
       * must be all ones.
       */
      //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
      //        "inconsistent bit counts");
      //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

      for (n = 0; n <= max_code; n++) {
        var len = tree[n * 2 + 1] /*.Len*/ ;
        if (len === 0) {
          continue;
        }
        /* Now reverse the bits */
        tree[n * 2] /*.Code*/ = bi_reverse(next_code[len]++, len);

        //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
        //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
      }
    }


    /* ===========================================================================
     * Initialize the various 'constant' tables.
     */
    function tr_static_init() {
      var n; /* iterates over tree elements */
      var bits; /* bit counter */
      var length; /* length value */
      var code; /* code value */
      var dist; /* distance index */
      var bl_count = new Array(MAX_BITS$1 + 1);
      /* number of codes at each bit length for an optimal tree */

      // do check in _tr_init()
      //if (static_init_done) return;

      /* For some embedded targets, global variables are not initialized: */
      /*#ifdef NO_INIT_GLOBAL_POINTERS
        static_l_desc.static_tree = static_ltree;
        static_l_desc.extra_bits = extra_lbits;
        static_d_desc.static_tree = static_dtree;
        static_d_desc.extra_bits = extra_dbits;
        static_bl_desc.extra_bits = extra_blbits;
      #endif*/

      /* Initialize the mapping length (0..255) -> length code (0..28) */
      length = 0;
      for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
        base_length[code] = length;
        for (n = 0; n < (1 << extra_lbits[code]); n++) {
          _length_code[length++] = code;
        }
      }
      //Assert (length == 256, "tr_static_init: length != 256");
      /* Note that the length 255 (match length 258) can be represented
       * in two different ways: code 284 + 5 bits or code 285, so we
       * overwrite length_code[255] to use the best encoding:
       */
      _length_code[length - 1] = code;

      /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
      dist = 0;
      for (code = 0; code < 16; code++) {
        base_dist[code] = dist;
        for (n = 0; n < (1 << extra_dbits[code]); n++) {
          _dist_code[dist++] = code;
        }
      }
      //Assert (dist == 256, "tr_static_init: dist != 256");
      dist >>= 7; /* from now on, all distances are divided by 128 */
      for (; code < D_CODES$1; code++) {
        base_dist[code] = dist << 7;
        for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
          _dist_code[256 + dist++] = code;
        }
      }
      //Assert (dist == 256, "tr_static_init: 256+dist != 512");

      /* Construct the codes of the static literal tree */
      for (bits = 0; bits <= MAX_BITS$1; bits++) {
        bl_count[bits] = 0;
      }

      n = 0;
      while (n <= 143) {
        static_ltree[n * 2 + 1] /*.Len*/ = 8;
        n++;
        bl_count[8]++;
      }
      while (n <= 255) {
        static_ltree[n * 2 + 1] /*.Len*/ = 9;
        n++;
        bl_count[9]++;
      }
      while (n <= 279) {
        static_ltree[n * 2 + 1] /*.Len*/ = 7;
        n++;
        bl_count[7]++;
      }
      while (n <= 287) {
        static_ltree[n * 2 + 1] /*.Len*/ = 8;
        n++;
        bl_count[8]++;
      }
      /* Codes 286 and 287 do not exist, but we must include them in the
       * tree construction to get a canonical Huffman tree (longest code
       * all ones)
       */
      gen_codes(static_ltree, L_CODES$1 + 1, bl_count);

      /* The static distance tree is trivial: */
      for (n = 0; n < D_CODES$1; n++) {
        static_dtree[n * 2 + 1] /*.Len*/ = 5;
        static_dtree[n * 2] /*.Code*/ = bi_reverse(n, 5);
      }

      // Now data ready and we can init static trees
      static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
      static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES$1, MAX_BITS$1);
      static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES$1, MAX_BL_BITS);

      //static_init_done = true;
    }


    /* ===========================================================================
     * Initialize a new block.
     */
    function init_block(s) {
      var n; /* iterates over tree elements */

      /* Initialize the trees. */
      for (n = 0; n < L_CODES$1; n++) {
        s.dyn_ltree[n * 2] /*.Freq*/ = 0;
      }
      for (n = 0; n < D_CODES$1; n++) {
        s.dyn_dtree[n * 2] /*.Freq*/ = 0;
      }
      for (n = 0; n < BL_CODES$1; n++) {
        s.bl_tree[n * 2] /*.Freq*/ = 0;
      }

      s.dyn_ltree[END_BLOCK * 2] /*.Freq*/ = 1;
      s.opt_len = s.static_len = 0;
      s.last_lit = s.matches = 0;
    }


    /* ===========================================================================
     * Flush the bit buffer and align the output on a byte boundary
     */
    function bi_windup(s) {
      if (s.bi_valid > 8) {
        put_short(s, s.bi_buf);
      } else if (s.bi_valid > 0) {
        //put_byte(s, (Byte)s->bi_buf);
        s.pending_buf[s.pending++] = s.bi_buf;
      }
      s.bi_buf = 0;
      s.bi_valid = 0;
    }

    /* ===========================================================================
     * Copy a stored block, storing first the length and its
     * one's complement if requested.
     */
    function copy_block(s, buf, len, header) {
    //DeflateState *s;
    //charf    *buf;    /* the input data */
    //unsigned len;     /* its length */
    //int      header;  /* true if block header must be written */

      bi_windup(s); /* align on byte boundary */

      {
        put_short(s, len);
        put_short(s, ~len);
      }
      //  while (len--) {
      //    put_byte(s, *buf++);
      //  }
      arraySet(s.pending_buf, s.window, buf, len, s.pending);
      s.pending += len;
    }

    /* ===========================================================================
     * Compares to subtrees, using the tree depth as tie breaker when
     * the subtrees have equal frequency. This minimizes the worst case length.
     */
    function smaller(tree, n, m, depth) {
      var _n2 = n * 2;
      var _m2 = m * 2;
      return (tree[_n2] /*.Freq*/ < tree[_m2] /*.Freq*/ ||
        (tree[_n2] /*.Freq*/ === tree[_m2] /*.Freq*/ && depth[n] <= depth[m]));
    }

    /* ===========================================================================
     * Restore the heap property by moving down the tree starting at node k,
     * exchanging a node with the smallest of its two sons if necessary, stopping
     * when the heap property is re-established (each father smaller than its
     * two sons).
     */
    function pqdownheap(s, tree, k)
    //    deflate_state *s;
    //    ct_data *tree;  /* the tree to restore */
    //    int k;               /* node to move down */
    {
      var v = s.heap[k];
      var j = k << 1; /* left son of k */
      while (j <= s.heap_len) {
        /* Set j to the smallest of the two sons: */
        if (j < s.heap_len &&
          smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
          j++;
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s.heap[j], s.depth)) {
          break;
        }

        /* Exchange v with the smallest son */
        s.heap[k] = s.heap[j];
        k = j;

        /* And continue down the tree, setting j to the left son of k */
        j <<= 1;
      }
      s.heap[k] = v;
    }


    // inlined manually
    // var SMALLEST = 1;

    /* ===========================================================================
     * Send the block data compressed using the given Huffman trees
     */
    function compress_block(s, ltree, dtree)
    //    deflate_state *s;
    //    const ct_data *ltree; /* literal tree */
    //    const ct_data *dtree; /* distance tree */
    {
      var dist; /* distance of matched string */
      var lc; /* match length or unmatched char (if dist == 0) */
      var lx = 0; /* running index in l_buf */
      var code; /* the code to send */
      var extra; /* number of extra bits to send */

      if (s.last_lit !== 0) {
        do {
          dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
          lc = s.pending_buf[s.l_buf + lx];
          lx++;

          if (dist === 0) {
            send_code(s, lc, ltree); /* send a literal byte */
            //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
          } else {
            /* Here, lc is the match length - MIN_MATCH */
            code = _length_code[lc];
            send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */
            extra = extra_lbits[code];
            if (extra !== 0) {
              lc -= base_length[code];
              send_bits(s, lc, extra); /* send the extra length bits */
            }
            dist--; /* dist is now the match distance - 1 */
            code = d_code(dist);
            //Assert (code < D_CODES, "bad d_code");

            send_code(s, code, dtree); /* send the distance code */
            extra = extra_dbits[code];
            if (extra !== 0) {
              dist -= base_dist[code];
              send_bits(s, dist, extra); /* send the extra distance bits */
            }
          } /* literal or match pair ? */

          /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
          //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
          //       "pendingBuf overflow");

        } while (lx < s.last_lit);
      }

      send_code(s, END_BLOCK, ltree);
    }


    /* ===========================================================================
     * Construct one Huffman tree and assigns the code bit strings and lengths.
     * Update the total bit length for the current block.
     * IN assertion: the field freq is set for all tree elements.
     * OUT assertions: the fields len and code are set to the optimal bit length
     *     and corresponding code. The length opt_len is updated; static_len is
     *     also updated if stree is not null. The field max_code is set.
     */
    function build_tree(s, desc)
    //    deflate_state *s;
    //    tree_desc *desc; /* the tree descriptor */
    {
      var tree = desc.dyn_tree;
      var stree = desc.stat_desc.static_tree;
      var has_stree = desc.stat_desc.has_stree;
      var elems = desc.stat_desc.elems;
      var n, m; /* iterate over heap elements */
      var max_code = -1; /* largest code with non zero frequency */
      var node; /* new node being created */

      /* Construct the initial heap, with least frequent element in
       * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
       * heap[0] is not used.
       */
      s.heap_len = 0;
      s.heap_max = HEAP_SIZE$1;

      for (n = 0; n < elems; n++) {
        if (tree[n * 2] /*.Freq*/ !== 0) {
          s.heap[++s.heap_len] = max_code = n;
          s.depth[n] = 0;

        } else {
          tree[n * 2 + 1] /*.Len*/ = 0;
        }
      }

      /* The pkzip format requires that at least one distance code exists,
       * and that at least one bit should be sent even if there is only one
       * possible code. So to avoid special checks later on we force at least
       * two codes of non zero frequency.
       */
      while (s.heap_len < 2) {
        node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
        tree[node * 2] /*.Freq*/ = 1;
        s.depth[node] = 0;
        s.opt_len--;

        if (has_stree) {
          s.static_len -= stree[node * 2 + 1] /*.Len*/ ;
        }
        /* node is 0 or 1 so it does not have extra bits */
      }
      desc.max_code = max_code;

      /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
       * establish sub-heaps of increasing lengths:
       */
      for (n = (s.heap_len >> 1 /*int /2*/ ); n >= 1; n--) {
        pqdownheap(s, tree, n);
      }

      /* Construct the Huffman tree by repeatedly combining the least two
       * frequent nodes.
       */
      node = elems; /* next internal node of the tree */
      do {
        //pqremove(s, tree, n);  /* n = node of least frequency */
        /*** pqremove ***/
        n = s.heap[1 /*SMALLEST*/ ];
        s.heap[1 /*SMALLEST*/ ] = s.heap[s.heap_len--];
        pqdownheap(s, tree, 1 /*SMALLEST*/ );
        /***/

        m = s.heap[1 /*SMALLEST*/ ]; /* m = node of next least frequency */

        s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
        s.heap[--s.heap_max] = m;

        /* Create a new node father of n and m */
        tree[node * 2] /*.Freq*/ = tree[n * 2] /*.Freq*/ + tree[m * 2] /*.Freq*/ ;
        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
        tree[n * 2 + 1] /*.Dad*/ = tree[m * 2 + 1] /*.Dad*/ = node;

        /* and insert the new node in the heap */
        s.heap[1 /*SMALLEST*/ ] = node++;
        pqdownheap(s, tree, 1 /*SMALLEST*/ );

      } while (s.heap_len >= 2);

      s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/ ];

      /* At this point, the fields freq and dad are set. We can now
       * generate the bit lengths.
       */
      gen_bitlen(s, desc);

      /* The field len is now set, we can generate the bit codes */
      gen_codes(tree, max_code, s.bl_count);
    }


    /* ===========================================================================
     * Scan a literal or distance tree to determine the frequencies of the codes
     * in the bit length tree.
     */
    function scan_tree(s, tree, max_code)
    //    deflate_state *s;
    //    ct_data *tree;   /* the tree to be scanned */
    //    int max_code;    /* and its largest code of non zero frequency */
    {
      var n; /* iterates over all tree elements */
      var prevlen = -1; /* last emitted length */
      var curlen; /* length of current code */

      var nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */

      var count = 0; /* repeat count of the current code */
      var max_count = 7; /* max repeat count */
      var min_count = 4; /* min repeat count */

      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }
      tree[(max_code + 1) * 2 + 1] /*.Len*/ = 0xffff; /* guard */

      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;

        if (++count < max_count && curlen === nextlen) {
          continue;

        } else if (count < min_count) {
          s.bl_tree[curlen * 2] /*.Freq*/ += count;

        } else if (curlen !== 0) {

          if (curlen !== prevlen) {
            s.bl_tree[curlen * 2] /*.Freq*/ ++;
          }
          s.bl_tree[REP_3_6 * 2] /*.Freq*/ ++;

        } else if (count <= 10) {
          s.bl_tree[REPZ_3_10 * 2] /*.Freq*/ ++;

        } else {
          s.bl_tree[REPZ_11_138 * 2] /*.Freq*/ ++;
        }

        count = 0;
        prevlen = curlen;

        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;

        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;

        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    }


    /* ===========================================================================
     * Send a literal or distance tree in compressed form, using the codes in
     * bl_tree.
     */
    function send_tree(s, tree, max_code)
    //    deflate_state *s;
    //    ct_data *tree; /* the tree to be scanned */
    //    int max_code;       /* and its largest code of non zero frequency */
    {
      var n; /* iterates over all tree elements */
      var prevlen = -1; /* last emitted length */
      var curlen; /* length of current code */

      var nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */

      var count = 0; /* repeat count of the current code */
      var max_count = 7; /* max repeat count */
      var min_count = 4; /* min repeat count */

      /* tree[max_code+1].Len = -1; */
      /* guard already set */
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }

      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;

        if (++count < max_count && curlen === nextlen) {
          continue;

        } else if (count < min_count) {
          do {
            send_code(s, curlen, s.bl_tree);
          } while (--count !== 0);

        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            send_code(s, curlen, s.bl_tree);
            count--;
          }
          //Assert(count >= 3 && count <= 6, " 3_6?");
          send_code(s, REP_3_6, s.bl_tree);
          send_bits(s, count - 3, 2);

        } else if (count <= 10) {
          send_code(s, REPZ_3_10, s.bl_tree);
          send_bits(s, count - 3, 3);

        } else {
          send_code(s, REPZ_11_138, s.bl_tree);
          send_bits(s, count - 11, 7);
        }

        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;

        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;

        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    }


    /* ===========================================================================
     * Construct the Huffman tree for the bit lengths and return the index in
     * bl_order of the last bit length code to send.
     */
    function build_bl_tree(s) {
      var max_blindex; /* index of last bit length code of non zero freq */

      /* Determine the bit length frequencies for literal and distance trees */
      scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
      scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

      /* Build the bit length tree: */
      build_tree(s, s.bl_desc);
      /* opt_len now includes the length of the tree representations, except
       * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
       */

      /* Determine the number of bit length codes to send. The pkzip format
       * requires that at least 4 bit length codes be sent. (appnote.txt says
       * 3 but the actual value used is 4.)
       */
      for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
        if (s.bl_tree[bl_order[max_blindex] * 2 + 1] /*.Len*/ !== 0) {
          break;
        }
      }
      /* Update opt_len to include the bit length tree and counts */
      s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
      //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
      //        s->opt_len, s->static_len));

      return max_blindex;
    }


    /* ===========================================================================
     * Send the header for a block using dynamic Huffman trees: the counts, the
     * lengths of the bit length codes, the literal tree and the distance tree.
     * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
     */
    function send_all_trees(s, lcodes, dcodes, blcodes)
    //    deflate_state *s;
    //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
    {
      var rank; /* index in bl_order */

      //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
      //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
      //        "too many codes");
      //Tracev((stderr, "\nbl counts: "));
      send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
      send_bits(s, dcodes - 1, 5);
      send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */
      for (rank = 0; rank < blcodes; rank++) {
        //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
        send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1] /*.Len*/ , 3);
      }
      //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

      send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
      //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

      send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
      //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
    }


    /* ===========================================================================
     * Check if the data type is TEXT or BINARY, using the following algorithm:
     * - TEXT if the two conditions below are satisfied:
     *    a) There are no non-portable control characters belonging to the
     *       "black list" (0..6, 14..25, 28..31).
     *    b) There is at least one printable character belonging to the
     *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
     * - BINARY otherwise.
     * - The following partially-portable control characters form a
     *   "gray list" that is ignored in this detection algorithm:
     *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
     * IN assertion: the fields Freq of dyn_ltree are set.
     */
    function detect_data_type(s) {
      /* black_mask is the bit mask of black-listed bytes
       * set bits 0..6, 14..25, and 28..31
       * 0xf3ffc07f = binary 11110011111111111100000001111111
       */
      var black_mask = 0xf3ffc07f;
      var n;

      /* Check for non-textual ("black-listed") bytes. */
      for (n = 0; n <= 31; n++, black_mask >>>= 1) {
        if ((black_mask & 1) && (s.dyn_ltree[n * 2] /*.Freq*/ !== 0)) {
          return Z_BINARY$1;
        }
      }

      /* Check for textual ("white-listed") bytes. */
      if (s.dyn_ltree[9 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[10 * 2] /*.Freq*/ !== 0 ||
        s.dyn_ltree[13 * 2] /*.Freq*/ !== 0) {
        return Z_TEXT$1;
      }
      for (n = 32; n < LITERALS$1; n++) {
        if (s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
          return Z_TEXT$1;
        }
      }

      /* There are no "black-listed" or "white-listed" bytes:
       * this stream either is empty or has tolerated ("gray-listed") bytes only.
       */
      return Z_BINARY$1;
    }


    var static_init_done = false;

    /* ===========================================================================
     * Initialize the tree data structures for a new zlib stream.
     */
    function _tr_init(s) {

      if (!static_init_done) {
        tr_static_init();
        static_init_done = true;
      }

      s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
      s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
      s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

      s.bi_buf = 0;
      s.bi_valid = 0;

      /* Initialize the first block of the first file: */
      init_block(s);
    }


    /* ===========================================================================
     * Send a stored block
     */
    function _tr_stored_block(s, buf, stored_len, last)
    //DeflateState *s;
    //charf *buf;       /* input block */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    {
      send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */
      copy_block(s, buf, stored_len); /* with header */
    }


    /* ===========================================================================
     * Send one empty static block to give enough lookahead for inflate.
     * This takes 10 bits, of which 7 may remain in the bit buffer.
     */
    function _tr_align(s) {
      send_bits(s, STATIC_TREES << 1, 3);
      send_code(s, END_BLOCK, static_ltree);
      bi_flush(s);
    }


    /* ===========================================================================
     * Determine the best encoding for the current block: dynamic trees, static
     * trees or store, and output the encoded block to the zip file.
     */
    function _tr_flush_block(s, buf, stored_len, last)
    //DeflateState *s;
    //charf *buf;       /* input block, or NULL if too old */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    {
      var opt_lenb, static_lenb; /* opt_len and static_len in bytes */
      var max_blindex = 0; /* index of last bit length code of non zero freq */

      /* Build the Huffman trees unless a stored block is forced */
      if (s.level > 0) {

        /* Check if the file is binary or text */
        if (s.strm.data_type === Z_UNKNOWN$2) {
          s.strm.data_type = detect_data_type(s);
        }

        /* Construct the literal and distance trees */
        build_tree(s, s.l_desc);
        // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));

        build_tree(s, s.d_desc);
        // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));
        /* At this point, opt_len and static_len are the total bit lengths of
         * the compressed block data, excluding the tree representations.
         */

        /* Build the bit length tree for the above two trees, and get the index
         * in bl_order of the last bit length code to send.
         */
        max_blindex = build_bl_tree(s);

        /* Determine the best encoding. Compute the block lengths in bytes. */
        opt_lenb = (s.opt_len + 3 + 7) >>> 3;
        static_lenb = (s.static_len + 3 + 7) >>> 3;

        // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
        //        s->last_lit));

        if (static_lenb <= opt_lenb) {
          opt_lenb = static_lenb;
        }

      } else {
        // Assert(buf != (char*)0, "lost buf");
        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
      }

      if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
        /* 4: two words for the lengths */

        /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
         * Otherwise we can't have processed more than WSIZE input bytes since
         * the last block flush, because compression would have been
         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
         * transform a block into a stored block.
         */
        _tr_stored_block(s, buf, stored_len, last);

      } else if (s.strategy === Z_FIXED$2 || static_lenb === opt_lenb) {

        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
        compress_block(s, static_ltree, static_dtree);

      } else {
        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
        send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
        compress_block(s, s.dyn_ltree, s.dyn_dtree);
      }
      // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
      /* The above check is made mod 2^32, for files larger than 512 MB
       * and uLong implemented on 32 bits.
       */
      init_block(s);

      if (last) {
        bi_windup(s);
      }
      // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
      //       s->compressed_len-7*last));
    }

    /* ===========================================================================
     * Save the match info and tally the frequency counts. Return true if
     * the current block must be flushed.
     */
    function _tr_tally(s, dist, lc)
    //    deflate_state *s;
    //    unsigned dist;  /* distance of matched string */
    //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
    {
      //var out_length, in_length, dcode;

      s.pending_buf[s.d_buf + s.last_lit * 2] = (dist >>> 8) & 0xff;
      s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

      s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
      s.last_lit++;

      if (dist === 0) {
        /* lc is the unmatched char */
        s.dyn_ltree[lc * 2] /*.Freq*/ ++;
      } else {
        s.matches++;
        /* Here, lc is the match length - MIN_MATCH */
        dist--; /* dist = match distance - 1 */
        //Assert((ush)dist < (ush)MAX_DIST(s) &&
        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
        //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

        s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2] /*.Freq*/ ++;
        s.dyn_dtree[d_code(dist) * 2] /*.Freq*/ ++;
      }

      // (!) This block is disabled in zlib defailts,
      // don't enable it for binary compatibility

      //#ifdef TRUNCATE_BLOCK
      //  /* Try to guess if it is profitable to stop the current block here */
      //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
      //    /* Compute an upper bound for the compressed length */
      //    out_length = s.last_lit*8;
      //    in_length = s.strstart - s.block_start;
      //
      //    for (dcode = 0; dcode < D_CODES; dcode++) {
      //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
      //    }
      //    out_length >>>= 3;
      //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
      //    //       s->last_lit, in_length, out_length,
      //    //       100L - out_length*100L/in_length));
      //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
      //      return true;
      //    }
      //  }
      //#endif

      return (s.last_lit === s.lit_bufsize - 1);
      /* We avoid equality with lit_bufsize because of wraparound at 64K
       * on 16 bit machines and because stored blocks are restricted to
       * 64K-1 bytes.
       */
    }

    // Note: adler32 takes 12% for level 0 and 2% for level 6.
    // It doesn't worth to make additional optimizationa as in original.
    // Small size is preferable.

    function adler32(adler, buf, len, pos) {
      var s1 = (adler & 0xffff) |0,
          s2 = ((adler >>> 16) & 0xffff) |0,
          n = 0;

      while (len !== 0) {
        // Set limit ~ twice less than 5552, to keep
        // s2 in 31-bits, because we force signed ints.
        // in other case %= will fail.
        n = len > 2000 ? 2000 : len;
        len -= n;

        do {
          s1 = (s1 + buf[pos++]) |0;
          s2 = (s2 + s1) |0;
        } while (--n);

        s1 %= 65521;
        s2 %= 65521;
      }

      return (s1 | (s2 << 16)) |0;
    }

    // Note: we can't get significant speed boost here.
    // So write code to minimize size - no pregenerated tables
    // and array tools dependencies.


    // Use ordinary array, since untyped makes no boost here
    function makeTable() {
      var c, table = [];

      for (var n = 0; n < 256; n++) {
        c = n;
        for (var k = 0; k < 8; k++) {
          c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        table[n] = c;
      }

      return table;
    }

    // Create table on load. Just 255 signed longs. Not a problem.
    var crcTable = makeTable();


    function crc32(crc, buf, len, pos) {
      var t = crcTable,
          end = pos + len;

      crc ^= -1;

      for (var i = pos; i < end; i++) {
        crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
      }

      return (crc ^ (-1)); // >>> 0;
    }

    /* Public constants ==========================================================*/
    /* ===========================================================================*/


    /* Allowed flush values; see deflate() and inflate() below for details */
    var Z_NO_FLUSH$1 = 0;
    var Z_PARTIAL_FLUSH$1 = 1;
    //var Z_SYNC_FLUSH    = 2;
    var Z_FULL_FLUSH$1 = 3;
    var Z_FINISH$2 = 4;
    var Z_BLOCK$2 = 5;
    //var Z_TREES         = 6;


    /* Return codes for the compression/decompression functions. Negative values
     * are errors, positive values are used for special but normal events.
     */
    var Z_OK$2 = 0;
    var Z_STREAM_END$2 = 1;
    //var Z_NEED_DICT     = 2;
    //var Z_ERRNO         = -1;
    var Z_STREAM_ERROR$2 = -2;
    var Z_DATA_ERROR$2 = -3;
    //var Z_MEM_ERROR     = -4;
    var Z_BUF_ERROR$2 = -5;
    //var Z_VERSION_ERROR = -6;


    /* compression levels */
    //var Z_NO_COMPRESSION      = 0;
    //var Z_BEST_SPEED          = 1;
    //var Z_BEST_COMPRESSION    = 9;
    var Z_DEFAULT_COMPRESSION$1 = -1;


    var Z_FILTERED$1 = 1;
    var Z_HUFFMAN_ONLY$1 = 2;
    var Z_RLE$1 = 3;
    var Z_FIXED$1 = 4;

    /* Possible values of the data_type field (though see inflate()) */
    //var Z_BINARY              = 0;
    //var Z_TEXT                = 1;
    //var Z_ASCII               = 1; // = Z_TEXT
    var Z_UNKNOWN$1 = 2;


    /* The deflate compression method */
    var Z_DEFLATED$2 = 8;

    /*============================================================================*/


    var MAX_MEM_LEVEL = 9;


    var LENGTH_CODES = 29;
    /* number of length codes, not counting the special END_BLOCK code */
    var LITERALS = 256;
    /* number of literal bytes 0..255 */
    var L_CODES = LITERALS + 1 + LENGTH_CODES;
    /* number of Literal or Length codes, including the END_BLOCK code */
    var D_CODES = 30;
    /* number of distance codes */
    var BL_CODES = 19;
    /* number of codes used to transfer the bit lengths */
    var HEAP_SIZE = 2 * L_CODES + 1;
    /* maximum heap size */
    var MAX_BITS = 15;
    /* All codes must not exceed MAX_BITS bits */

    var MIN_MATCH = 3;
    var MAX_MATCH = 258;
    var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

    var PRESET_DICT = 0x20;

    var INIT_STATE = 42;
    var EXTRA_STATE = 69;
    var NAME_STATE = 73;
    var COMMENT_STATE = 91;
    var HCRC_STATE = 103;
    var BUSY_STATE = 113;
    var FINISH_STATE = 666;

    var BS_NEED_MORE = 1; /* block not completed, need more input or more output */
    var BS_BLOCK_DONE = 2; /* block flush performed */
    var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
    var BS_FINISH_DONE = 4; /* finish done, accept no more input or output */

    var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

    function err(strm, errorCode) {
      strm.msg = msg[errorCode];
      return errorCode;
    }

    function rank(f) {
      return ((f) << 1) - ((f) > 4 ? 9 : 0);
    }

    function zero(buf) {
      var len = buf.length;
      while (--len >= 0) {
        buf[len] = 0;
      }
    }


    /* =========================================================================
     * Flush as much pending output as possible. All deflate() output goes
     * through this function so some applications may wish to modify it
     * to avoid allocating a large strm->output buffer and copying into it.
     * (See also read_buf()).
     */
    function flush_pending(strm) {
      var s = strm.state;

      //_tr_flush_bits(s);
      var len = s.pending;
      if (len > strm.avail_out) {
        len = strm.avail_out;
      }
      if (len === 0) {
        return;
      }

      arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
      strm.next_out += len;
      s.pending_out += len;
      strm.total_out += len;
      strm.avail_out -= len;
      s.pending -= len;
      if (s.pending === 0) {
        s.pending_out = 0;
      }
    }


    function flush_block_only(s, last) {
      _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
      s.block_start = s.strstart;
      flush_pending(s.strm);
    }


    function put_byte(s, b) {
      s.pending_buf[s.pending++] = b;
    }


    /* =========================================================================
     * Put a short in the pending buffer. The 16-bit value is put in MSB order.
     * IN assertion: the stream state is correct and there is enough room in
     * pending_buf.
     */
    function putShortMSB(s, b) {
      //  put_byte(s, (Byte)(b >> 8));
      //  put_byte(s, (Byte)(b & 0xff));
      s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
      s.pending_buf[s.pending++] = b & 0xff;
    }


    /* ===========================================================================
     * Read a new buffer from the current input stream, update the adler32
     * and total number of bytes read.  All deflate() input goes through
     * this function so some applications may wish to modify it to avoid
     * allocating a large strm->input buffer and copying from it.
     * (See also flush_pending()).
     */
    function read_buf(strm, buf, start, size) {
      var len = strm.avail_in;

      if (len > size) {
        len = size;
      }
      if (len === 0) {
        return 0;
      }

      strm.avail_in -= len;

      // zmemcpy(buf, strm->next_in, len);
      arraySet(buf, strm.input, strm.next_in, len, start);
      if (strm.state.wrap === 1) {
        strm.adler = adler32(strm.adler, buf, len, start);
      } else if (strm.state.wrap === 2) {
        strm.adler = crc32(strm.adler, buf, len, start);
      }

      strm.next_in += len;
      strm.total_in += len;

      return len;
    }


    /* ===========================================================================
     * Set match_start to the longest match starting at the given string and
     * return its length. Matches shorter or equal to prev_length are discarded,
     * in which case the result is equal to prev_length and match_start is
     * garbage.
     * IN assertions: cur_match is the head of the hash chain for the current
     *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
     * OUT assertion: the match length is not greater than s->lookahead.
     */
    function longest_match(s, cur_match) {
      var chain_length = s.max_chain_length; /* max hash chain length */
      var scan = s.strstart; /* current string */
      var match; /* matched string */
      var len; /* length of current match */
      var best_len = s.prev_length; /* best match length so far */
      var nice_match = s.nice_match; /* stop if match long enough */
      var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
        s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/ ;

      var _win = s.window; // shortcut

      var wmask = s.w_mask;
      var prev = s.prev;

      /* Stop when cur_match becomes <= limit. To simplify the code,
       * we prevent matches with the string of window index 0.
       */

      var strend = s.strstart + MAX_MATCH;
      var scan_end1 = _win[scan + best_len - 1];
      var scan_end = _win[scan + best_len];

      /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
       * It is easy to get rid of this optimization if necessary.
       */
      // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

      /* Do not waste too much time if we already have a good match: */
      if (s.prev_length >= s.good_match) {
        chain_length >>= 2;
      }
      /* Do not look for matches beyond the end of the input. This is necessary
       * to make deflate deterministic.
       */
      if (nice_match > s.lookahead) {
        nice_match = s.lookahead;
      }

      // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

      do {
        // Assert(cur_match < s->strstart, "no future");
        match = cur_match;

        /* Skip to next match if the match length cannot increase
         * or if the match length is less than 2.  Note that the checks below
         * for insufficient lookahead only occur occasionally for performance
         * reasons.  Therefore uninitialized memory will be accessed, and
         * conditional jumps will be made that depend on those values.
         * However the length of the match is limited to the lookahead, so
         * the output of deflate is not affected by the uninitialized values.
         */

        if (_win[match + best_len] !== scan_end ||
          _win[match + best_len - 1] !== scan_end1 ||
          _win[match] !== _win[scan] ||
          _win[++match] !== _win[scan + 1]) {
          continue;
        }

        /* The check at best_len-1 can be removed because it will be made
         * again later. (This heuristic is not always a win.)
         * It is not necessary to compare scan[2] and match[2] since they
         * are always equal when the other bytes match, given that
         * the hash keys are equal and that HASH_BITS >= 8.
         */
        scan += 2;
        match++;
        // Assert(*scan == *match, "match[2]?");

        /* We check for insufficient lookahead only every 8th comparison;
         * the 256th check will be made at strstart+258.
         */
        do {
          /*jshint noempty:false*/
        } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
          _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
          _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
          _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
          scan < strend);

        // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

        len = MAX_MATCH - (strend - scan);
        scan = strend - MAX_MATCH;

        if (len > best_len) {
          s.match_start = cur_match;
          best_len = len;
          if (len >= nice_match) {
            break;
          }
          scan_end1 = _win[scan + best_len - 1];
          scan_end = _win[scan + best_len];
        }
      } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

      if (best_len <= s.lookahead) {
        return best_len;
      }
      return s.lookahead;
    }


    /* ===========================================================================
     * Fill the window when the lookahead becomes insufficient.
     * Updates strstart and lookahead.
     *
     * IN assertion: lookahead < MIN_LOOKAHEAD
     * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
     *    At least one byte has been read, or avail_in == 0; reads are
     *    performed for at least two bytes (required for the zip translate_eol
     *    option -- not supported here).
     */
    function fill_window(s) {
      var _w_size = s.w_size;
      var p, n, m, more, str;

      //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

      do {
        more = s.window_size - s.lookahead - s.strstart;

        // JS ints have 32 bit, block below not needed
        /* Deal with !@#$% 64K limit: */
        //if (sizeof(int) <= 2) {
        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
        //        more = wsize;
        //
        //  } else if (more == (unsigned)(-1)) {
        //        /* Very unlikely, but possible on 16 bit machine if
        //         * strstart == 0 && lookahead == 1 (input done a byte at time)
        //         */
        //        more--;
        //    }
        //}


        /* If the window is almost full and there is insufficient lookahead,
         * move the upper half to the lower one to make room in the upper half.
         */
        if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

          arraySet(s.window, s.window, _w_size, _w_size, 0);
          s.match_start -= _w_size;
          s.strstart -= _w_size;
          /* we now have strstart >= MAX_DIST */
          s.block_start -= _w_size;

          /* Slide the hash table (could be avoided with 32 bit values
           at the expense of memory usage). We slide even when level == 0
           to keep the hash table consistent if we switch back to level > 0
           later. (Using level 0 permanently is not an optimal usage of
           zlib, so we don't care about this pathological case.)
           */

          n = s.hash_size;
          p = n;
          do {
            m = s.head[--p];
            s.head[p] = (m >= _w_size ? m - _w_size : 0);
          } while (--n);

          n = _w_size;
          p = n;
          do {
            m = s.prev[--p];
            s.prev[p] = (m >= _w_size ? m - _w_size : 0);
            /* If n is not on any hash chain, prev[n] is garbage but
             * its value will never be used.
             */
          } while (--n);

          more += _w_size;
        }
        if (s.strm.avail_in === 0) {
          break;
        }

        /* If there was no sliding:
         *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
         *    more == window_size - lookahead - strstart
         * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
         * => more >= window_size - 2*WSIZE + 2
         * In the BIG_MEM or MMAP case (not yet supported),
         *   window_size == input_size + MIN_LOOKAHEAD  &&
         *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
         * Otherwise, window_size == 2*WSIZE so more >= 2.
         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
         */
        //Assert(more >= 2, "more < 2");
        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
        s.lookahead += n;

        /* Initialize the hash value now that we have some input: */
        if (s.lookahead + s.insert >= MIN_MATCH) {
          str = s.strstart - s.insert;
          s.ins_h = s.window[str];

          /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
          //#if MIN_MATCH != 3
          //        Call update_hash() MIN_MATCH-3 more times
          //#endif
          while (s.insert) {
            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

            s.prev[str & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = str;
            str++;
            s.insert--;
            if (s.lookahead + s.insert < MIN_MATCH) {
              break;
            }
          }
        }
        /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
         * but this is not important since only literal bytes will be emitted.
         */

      } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

      /* If the WIN_INIT bytes after the end of the current data have never been
       * written, then zero those bytes in order to avoid memory check reports of
       * the use of uninitialized (or uninitialised as Julian writes) bytes by
       * the longest match routines.  Update the high water mark for the next
       * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
       * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
       */
      //  if (s.high_water < s.window_size) {
      //    var curr = s.strstart + s.lookahead;
      //    var init = 0;
      //
      //    if (s.high_water < curr) {
      //      /* Previous high water mark below current data -- zero WIN_INIT
      //       * bytes or up to end of window, whichever is less.
      //       */
      //      init = s.window_size - curr;
      //      if (init > WIN_INIT)
      //        init = WIN_INIT;
      //      zmemzero(s->window + curr, (unsigned)init);
      //      s->high_water = curr + init;
      //    }
      //    else if (s->high_water < (ulg)curr + WIN_INIT) {
      //      /* High water mark at or above current data, but below current data
      //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
      //       * to end of window, whichever is less.
      //       */
      //      init = (ulg)curr + WIN_INIT - s->high_water;
      //      if (init > s->window_size - s->high_water)
      //        init = s->window_size - s->high_water;
      //      zmemzero(s->window + s->high_water, (unsigned)init);
      //      s->high_water += init;
      //    }
      //  }
      //
      //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
      //    "not enough room for search");
    }

    /* ===========================================================================
     * Copy without compression as much as possible from the input stream, return
     * the current block state.
     * This function does not insert new strings in the dictionary since
     * uncompressible data is probably not useful. This function is used
     * only for the level=0 compression option.
     * NOTE: this function should be optimized to avoid extra copying from
     * window to pending_buf.
     */
    function deflate_stored(s, flush) {
      /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
       * to pending_buf_size, and each stored block has a 5 byte header:
       */
      var max_block_size = 0xffff;

      if (max_block_size > s.pending_buf_size - 5) {
        max_block_size = s.pending_buf_size - 5;
      }

      /* Copy as much as possible from input to output: */
      for (;;) {
        /* Fill the window as much as possible: */
        if (s.lookahead <= 1) {

          //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
          //  s->block_start >= (long)s->w_size, "slide too late");
          //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
          //        s.block_start >= s.w_size)) {
          //        throw  new Error("slide too late");
          //      }

          fill_window(s);
          if (s.lookahead === 0 && flush === Z_NO_FLUSH$1) {
            return BS_NEED_MORE;
          }

          if (s.lookahead === 0) {
            break;
          }
          /* flush the current block */
        }
        //Assert(s->block_start >= 0L, "block gone");
        //    if (s.block_start < 0) throw new Error("block gone");

        s.strstart += s.lookahead;
        s.lookahead = 0;

        /* Emit a stored block if pending_buf will be full: */
        var max_start = s.block_start + max_block_size;

        if (s.strstart === 0 || s.strstart >= max_start) {
          /* strstart == 0 is possible when wraparound on 16-bit machine */
          s.lookahead = s.strstart - max_start;
          s.strstart = max_start;
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/


        }
        /* Flush if we may have to slide, otherwise block_start may become
         * negative and the data will be gone:
         */
        if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }

      s.insert = 0;

      if (flush === Z_FINISH$2) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }

      if (s.strstart > s.block_start) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

      return BS_NEED_MORE;
    }

    /* ===========================================================================
     * Compress as much as possible from the input stream, return the current
     * block state.
     * This function does not perform lazy evaluation of matches and inserts
     * new strings in the dictionary only for unmatched strings or for short
     * matches. It is used only for the fast compression options.
     */
    function deflate_fast(s, flush) {
      var hash_head; /* head of the hash chain */
      var bflush; /* set if current block must be flushed */

      for (;;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$1) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break; /* flush the current block */
          }
        }

        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        hash_head = 0 /*NIL*/ ;
        if (s.lookahead >= MIN_MATCH) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }

        /* Find the longest match, discarding those <= prev_length.
         * At this point we have always match_length < MIN_MATCH
         */
        if (hash_head !== 0 /*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
          /* To simplify the code, we prevent matches with the string
           * of window index 0 (in particular we have to avoid a match
           * of the string with itself at the start of the input file).
           */
          s.match_length = longest_match(s, hash_head);
          /* longest_match() sets match_start */
        }
        if (s.match_length >= MIN_MATCH) {
          // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

          /*** _tr_tally_dist(s, s.strstart - s.match_start,
                         s.match_length - MIN_MATCH, bflush); ***/
          bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

          s.lookahead -= s.match_length;

          /* Insert new strings in the hash table only if the match length
           * is not too large. This saves time but degrades compression.
           */
          if (s.match_length <= s.max_lazy_match /*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
            s.match_length--; /* string at strstart already in table */
            do {
              s.strstart++;
              /*** INSERT_STRING(s, s.strstart, hash_head); ***/
              s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
              /***/
              /* strstart never exceeds WSIZE-MAX_MATCH, so there are
               * always MIN_MATCH bytes ahead.
               */
            } while (--s.match_length !== 0);
            s.strstart++;
          } else {
            s.strstart += s.match_length;
            s.match_length = 0;
            s.ins_h = s.window[s.strstart];
            /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

            //#if MIN_MATCH != 3
            //                Call UPDATE_HASH() MIN_MATCH-3 more times
            //#endif
            /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
             * matter since it will be recomputed at next deflate call.
             */
          }
        } else {
          /* No match, output a literal byte */
          //Tracevv((stderr,"%c", s.window[s.strstart]));
          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
          bflush = _tr_tally(s, 0, s.window[s.strstart]);

          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
      if (flush === Z_FINISH$2) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    }

    /* ===========================================================================
     * Same as above, but achieves better compression. We use a lazy
     * evaluation for matches: a match is finally adopted only if there is
     * no better match at the next window position.
     */
    function deflate_slow(s, flush) {
      var hash_head; /* head of hash chain */
      var bflush; /* set if current block must be flushed */

      var max_insert;

      /* Process the input block. */
      for (;;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$1) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break;
          } /* flush the current block */
        }

        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        hash_head = 0 /*NIL*/ ;
        if (s.lookahead >= MIN_MATCH) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }

        /* Find the longest match, discarding those <= prev_length.
         */
        s.prev_length = s.match_length;
        s.prev_match = s.match_start;
        s.match_length = MIN_MATCH - 1;

        if (hash_head !== 0 /*NIL*/ && s.prev_length < s.max_lazy_match &&
          s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD) /*MAX_DIST(s)*/ ) {
          /* To simplify the code, we prevent matches with the string
           * of window index 0 (in particular we have to avoid a match
           * of the string with itself at the start of the input file).
           */
          s.match_length = longest_match(s, hash_head);
          /* longest_match() sets match_start */

          if (s.match_length <= 5 &&
            (s.strategy === Z_FILTERED$1 || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/ ))) {

            /* If prev_match is also MIN_MATCH, match_start is garbage
             * but we will ignore the current match anyway.
             */
            s.match_length = MIN_MATCH - 1;
          }
        }
        /* If there was a match at the previous step and the current
         * match is not better, output the previous match:
         */
        if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
          max_insert = s.strstart + s.lookahead - MIN_MATCH;
          /* Do not insert strings in hash table beyond this. */

          //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

          /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                         s.prev_length - MIN_MATCH, bflush);***/
          bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
          /* Insert in hash table all strings up to the end of the match.
           * strstart-1 and strstart are already inserted. If there is not
           * enough lookahead, the last two strings are not inserted in
           * the hash table.
           */
          s.lookahead -= s.prev_length - 1;
          s.prev_length -= 2;
          do {
            if (++s.strstart <= max_insert) {
              /*** INSERT_STRING(s, s.strstart, hash_head); ***/
              s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
              /***/
            }
          } while (--s.prev_length !== 0);
          s.match_available = 0;
          s.match_length = MIN_MATCH - 1;
          s.strstart++;

          if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/
            flush_block_only(s, false);
            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
            /***/
          }

        } else if (s.match_available) {
          /* If there was no match at the previous position, output a
           * single literal. If there was a match but the current match
           * is longer, truncate the previous match to a single literal.
           */
          //Tracevv((stderr,"%c", s->window[s->strstart-1]));
          /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
          bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

          if (bflush) {
            /*** FLUSH_BLOCK_ONLY(s, 0) ***/
            flush_block_only(s, false);
            /***/
          }
          s.strstart++;
          s.lookahead--;
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        } else {
          /* There is no previous match to compare with, wait for
           * the next step to decide.
           */
          s.match_available = 1;
          s.strstart++;
          s.lookahead--;
        }
      }
      //Assert (flush != Z_NO_FLUSH, "no flush?");
      if (s.match_available) {
        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

        s.match_available = 0;
      }
      s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
      if (flush === Z_FINISH$2) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

      return BS_BLOCK_DONE;
    }


    /* ===========================================================================
     * For Z_RLE, simply look for runs of bytes, generate matches only of distance
     * one.  Do not maintain a hash table.  (It will be regenerated if this run of
     * deflate switches away from Z_RLE.)
     */
    function deflate_rle(s, flush) {
      var bflush; /* set if current block must be flushed */
      var prev; /* byte at distance one to match */
      var scan, strend; /* scan goes up to strend for length of run */

      var _win = s.window;

      for (;;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the longest run, plus one for the unrolled loop.
         */
        if (s.lookahead <= MAX_MATCH) {
          fill_window(s);
          if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$1) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break;
          } /* flush the current block */
        }

        /* See how many times the previous byte repeats */
        s.match_length = 0;
        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
          scan = s.strstart - 1;
          prev = _win[scan];
          if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
            strend = s.strstart + MAX_MATCH;
            do {
              /*jshint noempty:false*/
            } while (prev === _win[++scan] && prev === _win[++scan] &&
              prev === _win[++scan] && prev === _win[++scan] &&
              prev === _win[++scan] && prev === _win[++scan] &&
              prev === _win[++scan] && prev === _win[++scan] &&
              scan < strend);
            s.match_length = MAX_MATCH - (strend - scan);
            if (s.match_length > s.lookahead) {
              s.match_length = s.lookahead;
            }
          }
          //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
        }

        /* Emit match if have run of MIN_MATCH or longer, else emit literal */
        if (s.match_length >= MIN_MATCH) {
          //check_match(s, s.strstart, s.strstart - 1, s.match_length);

          /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
          bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);

          s.lookahead -= s.match_length;
          s.strstart += s.match_length;
          s.match_length = 0;
        } else {
          /* No match, output a literal byte */
          //Tracevv((stderr,"%c", s->window[s->strstart]));
          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
          bflush = _tr_tally(s, 0, s.window[s.strstart]);

          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH$2) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    }

    /* ===========================================================================
     * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
     * (It will be regenerated if this run of deflate switches away from Huffman.)
     */
    function deflate_huff(s, flush) {
      var bflush; /* set if current block must be flushed */

      for (;;) {
        /* Make sure that we have a literal to write. */
        if (s.lookahead === 0) {
          fill_window(s);
          if (s.lookahead === 0) {
            if (flush === Z_NO_FLUSH$1) {
              return BS_NEED_MORE;
            }
            break; /* flush the current block */
          }
        }

        /* Output a literal byte */
        s.match_length = 0;
        //Tracevv((stderr,"%c", s->window[s->strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH$2) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    }

    /* Values for max_lazy_match, good_match and max_chain_length, depending on
     * the desired pack level (0..9). The values given below have been tuned to
     * exclude worst case performance for pathological files. Better values may be
     * found for specific files.
     */
    function Config(good_length, max_lazy, nice_length, max_chain, func) {
      this.good_length = good_length;
      this.max_lazy = max_lazy;
      this.nice_length = nice_length;
      this.max_chain = max_chain;
      this.func = func;
    }

    var configuration_table;

    configuration_table = [
      /*      good lazy nice chain */
      new Config(0, 0, 0, 0, deflate_stored), /* 0 store only */
      new Config(4, 4, 8, 4, deflate_fast), /* 1 max speed, no lazy matches */
      new Config(4, 5, 16, 8, deflate_fast), /* 2 */
      new Config(4, 6, 32, 32, deflate_fast), /* 3 */

      new Config(4, 4, 16, 16, deflate_slow), /* 4 lazy matches */
      new Config(8, 16, 32, 32, deflate_slow), /* 5 */
      new Config(8, 16, 128, 128, deflate_slow), /* 6 */
      new Config(8, 32, 128, 256, deflate_slow), /* 7 */
      new Config(32, 128, 258, 1024, deflate_slow), /* 8 */
      new Config(32, 258, 258, 4096, deflate_slow) /* 9 max compression */
    ];


    /* ===========================================================================
     * Initialize the "longest match" routines for a new zlib stream
     */
    function lm_init(s) {
      s.window_size = 2 * s.w_size;

      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);

      /* Set the default configuration parameters:
       */
      s.max_lazy_match = configuration_table[s.level].max_lazy;
      s.good_match = configuration_table[s.level].good_length;
      s.nice_match = configuration_table[s.level].nice_length;
      s.max_chain_length = configuration_table[s.level].max_chain;

      s.strstart = 0;
      s.block_start = 0;
      s.lookahead = 0;
      s.insert = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      s.ins_h = 0;
    }


    function DeflateState() {
      this.strm = null; /* pointer back to this zlib stream */
      this.status = 0; /* as the name implies */
      this.pending_buf = null; /* output still pending */
      this.pending_buf_size = 0; /* size of pending_buf */
      this.pending_out = 0; /* next pending byte to output to the stream */
      this.pending = 0; /* nb of bytes in the pending buffer */
      this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
      this.gzhead = null; /* gzip header information to write */
      this.gzindex = 0; /* where in extra, name, or comment */
      this.method = Z_DEFLATED$2; /* can only be DEFLATED */
      this.last_flush = -1; /* value of flush param for previous deflate call */

      this.w_size = 0; /* LZ77 window size (32K by default) */
      this.w_bits = 0; /* log2(w_size)  (8..16) */
      this.w_mask = 0; /* w_size - 1 */

      this.window = null;
      /* Sliding window. Input bytes are read into the second half of the window,
       * and move to the first half later to keep a dictionary of at least wSize
       * bytes. With this organization, matches are limited to a distance of
       * wSize-MAX_MATCH bytes, but this ensures that IO is always
       * performed with a length multiple of the block size.
       */

      this.window_size = 0;
      /* Actual size of window: 2*wSize, except when the user input buffer
       * is directly used as sliding window.
       */

      this.prev = null;
      /* Link to older string with same hash index. To limit the size of this
       * array to 64K, this link is maintained only for the last 32K strings.
       * An index in this array is thus a window index modulo 32K.
       */

      this.head = null; /* Heads of the hash chains or NIL. */

      this.ins_h = 0; /* hash index of string to be inserted */
      this.hash_size = 0; /* number of elements in hash table */
      this.hash_bits = 0; /* log2(hash_size) */
      this.hash_mask = 0; /* hash_size-1 */

      this.hash_shift = 0;
      /* Number of bits by which ins_h must be shifted at each input
       * step. It must be such that after MIN_MATCH steps, the oldest
       * byte no longer takes part in the hash key, that is:
       *   hash_shift * MIN_MATCH >= hash_bits
       */

      this.block_start = 0;
      /* Window position at the beginning of the current output block. Gets
       * negative when the window is moved backwards.
       */

      this.match_length = 0; /* length of best match */
      this.prev_match = 0; /* previous match */
      this.match_available = 0; /* set if previous match exists */
      this.strstart = 0; /* start of string to insert */
      this.match_start = 0; /* start of matching string */
      this.lookahead = 0; /* number of valid bytes ahead in window */

      this.prev_length = 0;
      /* Length of the best match at previous step. Matches not greater than this
       * are discarded. This is used in the lazy match evaluation.
       */

      this.max_chain_length = 0;
      /* To speed up deflation, hash chains are never searched beyond this
       * length.  A higher limit improves compression ratio but degrades the
       * speed.
       */

      this.max_lazy_match = 0;
      /* Attempt to find a better match only when the current match is strictly
       * smaller than this value. This mechanism is used only for compression
       * levels >= 4.
       */
      // That's alias to max_lazy_match, don't use directly
      //this.max_insert_length = 0;
      /* Insert new strings in the hash table only if the match length is not
       * greater than this length. This saves time but degrades compression.
       * max_insert_length is used only for compression levels <= 3.
       */

      this.level = 0; /* compression level (1..9) */
      this.strategy = 0; /* favor or force Huffman coding*/

      this.good_match = 0;
      /* Use a faster search when the previous match is longer than this */

      this.nice_match = 0; /* Stop searching when current match exceeds this */

      /* used by c: */

      /* Didn't use ct_data typedef below to suppress compiler warning */

      // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
      // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
      // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

      // Use flat array of DOUBLE size, with interleaved fata,
      // because JS does not support effective
      this.dyn_ltree = new Buf16(HEAP_SIZE * 2);
      this.dyn_dtree = new Buf16((2 * D_CODES + 1) * 2);
      this.bl_tree = new Buf16((2 * BL_CODES + 1) * 2);
      zero(this.dyn_ltree);
      zero(this.dyn_dtree);
      zero(this.bl_tree);

      this.l_desc = null; /* desc. for literal tree */
      this.d_desc = null; /* desc. for distance tree */
      this.bl_desc = null; /* desc. for bit length tree */

      //ush bl_count[MAX_BITS+1];
      this.bl_count = new Buf16(MAX_BITS + 1);
      /* number of codes at each bit length for an optimal tree */

      //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
      this.heap = new Buf16(2 * L_CODES + 1); /* heap used to build the Huffman trees */
      zero(this.heap);

      this.heap_len = 0; /* number of elements in the heap */
      this.heap_max = 0; /* element of largest frequency */
      /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
       * The same heap array is used to build all
       */

      this.depth = new Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
      zero(this.depth);
      /* Depth of each subtree used as tie breaker for trees of equal frequency
       */

      this.l_buf = 0; /* buffer index for literals or lengths */

      this.lit_bufsize = 0;
      /* Size of match buffer for literals/lengths.  There are 4 reasons for
       * limiting lit_bufsize to 64K:
       *   - frequencies can be kept in 16 bit counters
       *   - if compression is not successful for the first block, all input
       *     data is still in the window so we can still emit a stored block even
       *     when input comes from standard input.  (This can also be done for
       *     all blocks if lit_bufsize is not greater than 32K.)
       *   - if compression is not successful for a file smaller than 64K, we can
       *     even emit a stored file instead of a stored block (saving 5 bytes).
       *     This is applicable only for zip (not gzip or zlib).
       *   - creating new Huffman trees less frequently may not provide fast
       *     adaptation to changes in the input data statistics. (Take for
       *     example a binary file with poorly compressible code followed by
       *     a highly compressible string table.) Smaller buffer sizes give
       *     fast adaptation but have of course the overhead of transmitting
       *     trees more frequently.
       *   - I can't count above 4
       */

      this.last_lit = 0; /* running index in l_buf */

      this.d_buf = 0;
      /* Buffer index for distances. To simplify the code, d_buf and l_buf have
       * the same number of elements. To use different lengths, an extra flag
       * array would be necessary.
       */

      this.opt_len = 0; /* bit length of current block with optimal trees */
      this.static_len = 0; /* bit length of current block with static trees */
      this.matches = 0; /* number of string matches in current block */
      this.insert = 0; /* bytes at end of window left to insert */


      this.bi_buf = 0;
      /* Output buffer. bits are inserted starting at the bottom (least
       * significant bits).
       */
      this.bi_valid = 0;
      /* Number of valid bits in bi_buf.  All bits above the last valid bit
       * are always zero.
       */

      // Used for window memory init. We safely ignore it for JS. That makes
      // sense only for pointers and memory check tools.
      //this.high_water = 0;
      /* High water mark offset in window for initialized bytes -- bytes above
       * this are set to zero in order to avoid memory check warnings when
       * longest match routines access bytes past the input.  This is then
       * updated to the new high water mark.
       */
    }


    function deflateResetKeep(strm) {
      var s;

      if (!strm || !strm.state) {
        return err(strm, Z_STREAM_ERROR$2);
      }

      strm.total_in = strm.total_out = 0;
      strm.data_type = Z_UNKNOWN$1;

      s = strm.state;
      s.pending = 0;
      s.pending_out = 0;

      if (s.wrap < 0) {
        s.wrap = -s.wrap;
        /* was made negative by deflate(..., Z_FINISH); */
      }
      s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
      strm.adler = (s.wrap === 2) ?
        0 // crc32(0, Z_NULL, 0)
        :
        1; // adler32(0, Z_NULL, 0)
      s.last_flush = Z_NO_FLUSH$1;
      _tr_init(s);
      return Z_OK$2;
    }


    function deflateReset(strm) {
      var ret = deflateResetKeep(strm);
      if (ret === Z_OK$2) {
        lm_init(strm.state);
      }
      return ret;
    }


    function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
      if (!strm) { // === Z_NULL
        return Z_STREAM_ERROR$2;
      }
      var wrap = 1;

      if (level === Z_DEFAULT_COMPRESSION$1) {
        level = 6;
      }

      if (windowBits < 0) { /* suppress zlib wrapper */
        wrap = 0;
        windowBits = -windowBits;
      } else if (windowBits > 15) {
        wrap = 2; /* write gzip wrapper instead */
        windowBits -= 16;
      }


      if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||
        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
        strategy < 0 || strategy > Z_FIXED$1) {
        return err(strm, Z_STREAM_ERROR$2);
      }


      if (windowBits === 8) {
        windowBits = 9;
      }
      /* until 256-byte window bug fixed */

      var s = new DeflateState();

      strm.state = s;
      s.strm = strm;

      s.wrap = wrap;
      s.gzhead = null;
      s.w_bits = windowBits;
      s.w_size = 1 << s.w_bits;
      s.w_mask = s.w_size - 1;

      s.hash_bits = memLevel + 7;
      s.hash_size = 1 << s.hash_bits;
      s.hash_mask = s.hash_size - 1;
      s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

      s.window = new Buf8(s.w_size * 2);
      s.head = new Buf16(s.hash_size);
      s.prev = new Buf16(s.w_size);

      // Don't need mem init magic for JS.
      //s.high_water = 0;  /* nothing written to s->window yet */

      s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

      s.pending_buf_size = s.lit_bufsize * 4;

      //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
      //s->pending_buf = (uchf *) overlay;
      s.pending_buf = new Buf8(s.pending_buf_size);

      // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
      //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
      s.d_buf = 1 * s.lit_bufsize;

      //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
      s.l_buf = (1 + 2) * s.lit_bufsize;

      s.level = level;
      s.strategy = strategy;
      s.method = method;

      return deflateReset(strm);
    }


    function deflate$1(strm, flush) {
      var old_flush, s;
      var beg, val; // for gzip header write only

      if (!strm || !strm.state ||
        flush > Z_BLOCK$2 || flush < 0) {
        return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;
      }

      s = strm.state;

      if (!strm.output ||
        (!strm.input && strm.avail_in !== 0) ||
        (s.status === FINISH_STATE && flush !== Z_FINISH$2)) {
        return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$2 : Z_STREAM_ERROR$2);
      }

      s.strm = strm; /* just in case */
      old_flush = s.last_flush;
      s.last_flush = flush;

      /* Write the header */
      if (s.status === INIT_STATE) {
        if (s.wrap === 2) {
          // GZIP header
          strm.adler = 0; //crc32(0L, Z_NULL, 0);
          put_byte(s, 31);
          put_byte(s, 139);
          put_byte(s, 8);
          if (!s.gzhead) { // s->gzhead == Z_NULL
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, s.level === 9 ? 2 :
              (s.strategy >= Z_HUFFMAN_ONLY$1 || s.level < 2 ?
                4 : 0));
            put_byte(s, OS_CODE);
            s.status = BUSY_STATE;
          } else {
            put_byte(s, (s.gzhead.text ? 1 : 0) +
              (s.gzhead.hcrc ? 2 : 0) +
              (!s.gzhead.extra ? 0 : 4) +
              (!s.gzhead.name ? 0 : 8) +
              (!s.gzhead.comment ? 0 : 16)
            );
            put_byte(s, s.gzhead.time & 0xff);
            put_byte(s, (s.gzhead.time >> 8) & 0xff);
            put_byte(s, (s.gzhead.time >> 16) & 0xff);
            put_byte(s, (s.gzhead.time >> 24) & 0xff);
            put_byte(s, s.level === 9 ? 2 :
              (s.strategy >= Z_HUFFMAN_ONLY$1 || s.level < 2 ?
                4 : 0));
            put_byte(s, s.gzhead.os & 0xff);
            if (s.gzhead.extra && s.gzhead.extra.length) {
              put_byte(s, s.gzhead.extra.length & 0xff);
              put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
            }
            if (s.gzhead.hcrc) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
            }
            s.gzindex = 0;
            s.status = EXTRA_STATE;
          }
        } else // DEFLATE header
        {
          var header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;
          var level_flags = -1;

          if (s.strategy >= Z_HUFFMAN_ONLY$1 || s.level < 2) {
            level_flags = 0;
          } else if (s.level < 6) {
            level_flags = 1;
          } else if (s.level === 6) {
            level_flags = 2;
          } else {
            level_flags = 3;
          }
          header |= (level_flags << 6);
          if (s.strstart !== 0) {
            header |= PRESET_DICT;
          }
          header += 31 - (header % 31);

          s.status = BUSY_STATE;
          putShortMSB(s, header);

          /* Save the adler32 of the preset dictionary: */
          if (s.strstart !== 0) {
            putShortMSB(s, strm.adler >>> 16);
            putShortMSB(s, strm.adler & 0xffff);
          }
          strm.adler = 1; // adler32(0L, Z_NULL, 0);
        }
      }

      //#ifdef GZIP
      if (s.status === EXTRA_STATE) {
        if (s.gzhead.extra /* != Z_NULL*/ ) {
          beg = s.pending; /* start of bytes to update crc */

          while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                break;
              }
            }
            put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
            s.gzindex++;
          }
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (s.gzindex === s.gzhead.extra.length) {
            s.gzindex = 0;
            s.status = NAME_STATE;
          }
        } else {
          s.status = NAME_STATE;
        }
      }
      if (s.status === NAME_STATE) {
        if (s.gzhead.name /* != Z_NULL*/ ) {
          beg = s.pending; /* start of bytes to update crc */
          //int val;

          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                val = 1;
                break;
              }
            }
            // JS specific: little magic to add zero terminator to end of string
            if (s.gzindex < s.gzhead.name.length) {
              val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);

          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (val === 0) {
            s.gzindex = 0;
            s.status = COMMENT_STATE;
          }
        } else {
          s.status = COMMENT_STATE;
        }
      }
      if (s.status === COMMENT_STATE) {
        if (s.gzhead.comment /* != Z_NULL*/ ) {
          beg = s.pending; /* start of bytes to update crc */
          //int val;

          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                val = 1;
                break;
              }
            }
            // JS specific: little magic to add zero terminator to end of string
            if (s.gzindex < s.gzhead.comment.length) {
              val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);

          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (val === 0) {
            s.status = HCRC_STATE;
          }
        } else {
          s.status = HCRC_STATE;
        }
      }
      if (s.status === HCRC_STATE) {
        if (s.gzhead.hcrc) {
          if (s.pending + 2 > s.pending_buf_size) {
            flush_pending(strm);
          }
          if (s.pending + 2 <= s.pending_buf_size) {
            put_byte(s, strm.adler & 0xff);
            put_byte(s, (strm.adler >> 8) & 0xff);
            strm.adler = 0; //crc32(0L, Z_NULL, 0);
            s.status = BUSY_STATE;
          }
        } else {
          s.status = BUSY_STATE;
        }
      }
      //#endif

      /* Flush as much pending output as possible */
      if (s.pending !== 0) {
        flush_pending(strm);
        if (strm.avail_out === 0) {
          /* Since avail_out is 0, deflate will be called again with
           * more output space, but possibly with both pending and
           * avail_in equal to zero. There won't be anything to do,
           * but this is not an error situation so make sure we
           * return OK instead of BUF_ERROR at next call of deflate:
           */
          s.last_flush = -1;
          return Z_OK$2;
        }

        /* Make sure there is something to do and avoid duplicate consecutive
         * flushes. For repeated and useless calls with Z_FINISH, we keep
         * returning Z_STREAM_END instead of Z_BUF_ERROR.
         */
      } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
        flush !== Z_FINISH$2) {
        return err(strm, Z_BUF_ERROR$2);
      }

      /* User must not provide more input after the first FINISH: */
      if (s.status === FINISH_STATE && strm.avail_in !== 0) {
        return err(strm, Z_BUF_ERROR$2);
      }

      /* Start a new block or continue the current one.
       */
      if (strm.avail_in !== 0 || s.lookahead !== 0 ||
        (flush !== Z_NO_FLUSH$1 && s.status !== FINISH_STATE)) {
        var bstate = (s.strategy === Z_HUFFMAN_ONLY$1) ? deflate_huff(s, flush) :
          (s.strategy === Z_RLE$1 ? deflate_rle(s, flush) :
            configuration_table[s.level].func(s, flush));

        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
          s.status = FINISH_STATE;
        }
        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
          if (strm.avail_out === 0) {
            s.last_flush = -1;
            /* avoid BUF_ERROR next call, see above */
          }
          return Z_OK$2;
          /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
           * of deflate should use the same flush parameter to make sure
           * that the flush is complete. So we don't have to output an
           * empty block here, this will be done at next call. This also
           * ensures that for a very small output buffer, we emit at most
           * one empty block.
           */
        }
        if (bstate === BS_BLOCK_DONE) {
          if (flush === Z_PARTIAL_FLUSH$1) {
            _tr_align(s);
          } else if (flush !== Z_BLOCK$2) { /* FULL_FLUSH or SYNC_FLUSH */

            _tr_stored_block(s, 0, 0, false);
            /* For a full flush, this empty block will be recognized
             * as a special marker by inflate_sync().
             */
            if (flush === Z_FULL_FLUSH$1) {
              /*** CLEAR_HASH(s); ***/
              /* forget history */
              zero(s.head); // Fill with NIL (= 0);

              if (s.lookahead === 0) {
                s.strstart = 0;
                s.block_start = 0;
                s.insert = 0;
              }
            }
          }
          flush_pending(strm);
          if (strm.avail_out === 0) {
            s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
            return Z_OK$2;
          }
        }
      }
      //Assert(strm->avail_out > 0, "bug2");
      //if (strm.avail_out <= 0) { throw new Error("bug2");}

      if (flush !== Z_FINISH$2) {
        return Z_OK$2;
      }
      if (s.wrap <= 0) {
        return Z_STREAM_END$2;
      }

      /* Write the trailer */
      if (s.wrap === 2) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        put_byte(s, (strm.adler >> 16) & 0xff);
        put_byte(s, (strm.adler >> 24) & 0xff);
        put_byte(s, strm.total_in & 0xff);
        put_byte(s, (strm.total_in >> 8) & 0xff);
        put_byte(s, (strm.total_in >> 16) & 0xff);
        put_byte(s, (strm.total_in >> 24) & 0xff);
      } else {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }

      flush_pending(strm);
      /* If avail_out is zero, the application will call deflate again
       * to flush the rest.
       */
      if (s.wrap > 0) {
        s.wrap = -s.wrap;
      }
      /* write the trailer only once! */
      return s.pending !== 0 ? Z_OK$2 : Z_STREAM_END$2;
    }

    function deflateEnd(strm) {
      var status;

      if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/ ) {
        return Z_STREAM_ERROR$2;
      }

      status = strm.state.status;
      if (status !== INIT_STATE &&
        status !== EXTRA_STATE &&
        status !== NAME_STATE &&
        status !== COMMENT_STATE &&
        status !== HCRC_STATE &&
        status !== BUSY_STATE &&
        status !== FINISH_STATE
      ) {
        return err(strm, Z_STREAM_ERROR$2);
      }

      strm.state = null;

      return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$2;
    }

    /* Not implemented
    exports.deflateBound = deflateBound;
    exports.deflateCopy = deflateCopy;
    exports.deflateParams = deflateParams;
    exports.deflatePending = deflatePending;
    exports.deflatePrime = deflatePrime;
    exports.deflateTune = deflateTune;
    */

    // See state defs from inflate.js
    var BAD$1 = 30;       /* got a data error -- remain here until reset */
    var TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */

    /*
       Decode literal, length, and distance codes and write out the resulting
       literal and match bytes until either not enough input or output is
       available, an end-of-block is encountered, or a data error is encountered.
       When large enough input and output buffers are supplied to inflate(), for
       example, a 16K input buffer and a 64K output buffer, more than 95% of the
       inflate execution time is spent in this routine.

       Entry assumptions:

            state.mode === LEN
            strm.avail_in >= 6
            strm.avail_out >= 258
            start >= strm.avail_out
            state.bits < 8

       On return, state.mode is one of:

            LEN -- ran out of enough output space or enough available input
            TYPE -- reached end of block code, inflate() to interpret next block
            BAD -- error in block data

       Notes:

        - The maximum input bits used by a length/distance pair is 15 bits for the
          length code, 5 bits for the length extra, 15 bits for the distance code,
          and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
          Therefore if strm.avail_in >= 6, then there is enough input to avoid
          checking for available input while decoding.

        - The maximum bytes that a single length/distance pair can output is 258
          bytes, which is the maximum length that can be coded.  inflate_fast()
          requires strm.avail_out >= 258 for each loop to avoid checking for
          output space.
     */
    function inflate_fast(strm, start) {
      var state;
      var _in;                    /* local strm.input */
      var last;                   /* have enough input while in < last */
      var _out;                   /* local strm.output */
      var beg;                    /* inflate()'s initial strm.output */
      var end;                    /* while out < end, enough space available */
    //#ifdef INFLATE_STRICT
      var dmax;                   /* maximum distance from zlib header */
    //#endif
      var wsize;                  /* window size or zero if not using window */
      var whave;                  /* valid bytes in the window */
      var wnext;                  /* window write index */
      // Use `s_window` instead `window`, avoid conflict with instrumentation tools
      var s_window;               /* allocated sliding window, if wsize != 0 */
      var hold;                   /* local strm.hold */
      var bits;                   /* local strm.bits */
      var lcode;                  /* local strm.lencode */
      var dcode;                  /* local strm.distcode */
      var lmask;                  /* mask for first level of length codes */
      var dmask;                  /* mask for first level of distance codes */
      var here;                   /* retrieved table entry */
      var op;                     /* code bits, operation, extra bits, or */
                                  /*  window position, window bytes to copy */
      var len;                    /* match length, unused bytes */
      var dist;                   /* match distance */
      var from;                   /* where to copy match from */
      var from_source;


      var input, output; // JS specific, because we have no pointers

      /* copy state to local variables */
      state = strm.state;
      //here = state.here;
      _in = strm.next_in;
      input = strm.input;
      last = _in + (strm.avail_in - 5);
      _out = strm.next_out;
      output = strm.output;
      beg = _out - (start - strm.avail_out);
      end = _out + (strm.avail_out - 257);
    //#ifdef INFLATE_STRICT
      dmax = state.dmax;
    //#endif
      wsize = state.wsize;
      whave = state.whave;
      wnext = state.wnext;
      s_window = state.window;
      hold = state.hold;
      bits = state.bits;
      lcode = state.lencode;
      dcode = state.distcode;
      lmask = (1 << state.lenbits) - 1;
      dmask = (1 << state.distbits) - 1;


      /* decode literals and length/distances until end-of-block or not enough
         input data or output space */

      top:
      do {
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }

        here = lcode[hold & lmask];

        dolen:
        for (;;) { // Goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;
          if (op === 0) {                          /* literal */
            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
            //        "inflate:         literal '%c'\n" :
            //        "inflate:         literal 0x%02x\n", here.val));
            output[_out++] = here & 0xffff/*here.val*/;
          }
          else if (op & 16) {                     /* length base */
            len = here & 0xffff/*here.val*/;
            op &= 15;                           /* number of extra bits */
            if (op) {
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
              len += hold & ((1 << op) - 1);
              hold >>>= op;
              bits -= op;
            }
            //Tracevv((stderr, "inflate:         length %u\n", len));
            if (bits < 15) {
              hold += input[_in++] << bits;
              bits += 8;
              hold += input[_in++] << bits;
              bits += 8;
            }
            here = dcode[hold & dmask];

            dodist:
            for (;;) { // goto emulation
              op = here >>> 24/*here.bits*/;
              hold >>>= op;
              bits -= op;
              op = (here >>> 16) & 0xff/*here.op*/;

              if (op & 16) {                      /* distance base */
                dist = here & 0xffff/*here.val*/;
                op &= 15;                       /* number of extra bits */
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;
                  }
                }
                dist += hold & ((1 << op) - 1);
    //#ifdef INFLATE_STRICT
                if (dist > dmax) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD$1;
                  break top;
                }
    //#endif
                hold >>>= op;
                bits -= op;
                //Tracevv((stderr, "inflate:         distance %u\n", dist));
                op = _out - beg;                /* max distance in output */
                if (dist > op) {                /* see if copy from window */
                  op = dist - op;               /* distance back in window */
                  if (op > whave) {
                    if (state.sane) {
                      strm.msg = 'invalid distance too far back';
                      state.mode = BAD$1;
                      break top;
                    }

    // (!) This block is disabled in zlib defailts,
    // don't enable it for binary compatibility
    //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
    //                if (len <= op - whave) {
    //                  do {
    //                    output[_out++] = 0;
    //                  } while (--len);
    //                  continue top;
    //                }
    //                len -= op - whave;
    //                do {
    //                  output[_out++] = 0;
    //                } while (--op > whave);
    //                if (op === 0) {
    //                  from = _out - dist;
    //                  do {
    //                    output[_out++] = output[from++];
    //                  } while (--len);
    //                  continue top;
    //                }
    //#endif
                  }
                  from = 0; // window index
                  from_source = s_window;
                  if (wnext === 0) {           /* very common case */
                    from += wsize - op;
                    if (op < len) {         /* some from window */
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;  /* rest from output */
                      from_source = output;
                    }
                  }
                  else if (wnext < op) {      /* wrap around window */
                    from += wsize + wnext - op;
                    op -= wnext;
                    if (op < len) {         /* some from end of window */
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = 0;
                      if (wnext < len) {  /* some from start of window */
                        op = wnext;
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = _out - dist;      /* rest from output */
                        from_source = output;
                      }
                    }
                  }
                  else {                      /* contiguous in window */
                    from += wnext - op;
                    if (op < len) {         /* some from window */
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;  /* rest from output */
                      from_source = output;
                    }
                  }
                  while (len > 2) {
                    output[_out++] = from_source[from++];
                    output[_out++] = from_source[from++];
                    output[_out++] = from_source[from++];
                    len -= 3;
                  }
                  if (len) {
                    output[_out++] = from_source[from++];
                    if (len > 1) {
                      output[_out++] = from_source[from++];
                    }
                  }
                }
                else {
                  from = _out - dist;          /* copy direct from output */
                  do {                        /* minimum length is three */
                    output[_out++] = output[from++];
                    output[_out++] = output[from++];
                    output[_out++] = output[from++];
                    len -= 3;
                  } while (len > 2);
                  if (len) {
                    output[_out++] = output[from++];
                    if (len > 1) {
                      output[_out++] = output[from++];
                    }
                  }
                }
              }
              else if ((op & 64) === 0) {          /* 2nd level distance code */
                here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
                continue dodist;
              }
              else {
                strm.msg = 'invalid distance code';
                state.mode = BAD$1;
                break top;
              }

              break; // need to emulate goto via "continue"
            }
          }
          else if ((op & 64) === 0) {              /* 2nd level length code */
            here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dolen;
          }
          else if (op & 32) {                     /* end-of-block */
            //Tracevv((stderr, "inflate:         end of block\n"));
            state.mode = TYPE$1;
            break top;
          }
          else {
            strm.msg = 'invalid literal/length code';
            state.mode = BAD$1;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      } while (_in < last && _out < end);

      /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
      len = bits >> 3;
      _in -= len;
      bits -= len << 3;
      hold &= (1 << bits) - 1;

      /* update state and return */
      strm.next_in = _in;
      strm.next_out = _out;
      strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
      strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
      state.hold = hold;
      state.bits = bits;
      return;
    }

    var MAXBITS = 15;
    var ENOUGH_LENS$1 = 852;
    var ENOUGH_DISTS$1 = 592;
    //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

    var CODES$1 = 0;
    var LENS$1 = 1;
    var DISTS$1 = 2;

    var lbase = [ /* Length codes 257..285 base */
      3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
      35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
    ];

    var lext = [ /* Length codes 257..285 extra */
      16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
      19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
    ];

    var dbase = [ /* Distance codes 0..29 base */
      1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
      257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
      8193, 12289, 16385, 24577, 0, 0
    ];

    var dext = [ /* Distance codes 0..29 extra */
      16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
      23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
      28, 28, 29, 29, 64, 64
    ];

    function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
      var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

      var len = 0; /* a code's length in bits */
      var sym = 0; /* index of code symbols */
      var min = 0,
        max = 0; /* minimum and maximum code lengths */
      var root = 0; /* number of index bits for root table */
      var curr = 0; /* number of index bits for current table */
      var drop = 0; /* code bits to drop for sub-table */
      var left = 0; /* number of prefix codes available */
      var used = 0; /* code entries in table used */
      var huff = 0; /* Huffman code */
      var incr; /* for incrementing code, index */
      var fill; /* index for replicating entries */
      var low; /* low bits for current root entry */
      var mask; /* mask for low root bits */
      var next; /* next available space in table */
      var base = null; /* base value table to use */
      var base_index = 0;
      //  var shoextra;    /* extra bits table to use */
      var end; /* use base and extra for symbol > end */
      var count = new Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
      var offs = new Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
      var extra = null;
      var extra_index = 0;

      var here_bits, here_op, here_val;

      /*
       Process a set of code lengths to create a canonical Huffman code.  The
       code lengths are lens[0..codes-1].  Each length corresponds to the
       symbols 0..codes-1.  The Huffman code is generated by first sorting the
       symbols by length from short to long, and retaining the symbol order
       for codes with equal lengths.  Then the code starts with all zero bits
       for the first code of the shortest length, and the codes are integer
       increments for the same length, and zeros are appended as the length
       increases.  For the deflate format, these bits are stored backwards
       from their more natural integer increment ordering, and so when the
       decoding tables are built in the large loop below, the integer codes
       are incremented backwards.

       This routine assumes, but does not check, that all of the entries in
       lens[] are in the range 0..MAXBITS.  The caller must assure this.
       1..MAXBITS is interpreted as that code length.  zero means that that
       symbol does not occur in this code.

       The codes are sorted by computing a count of codes for each length,
       creating from that a table of starting indices for each length in the
       sorted table, and then entering the symbols in order in the sorted
       table.  The sorted table is work[], with that space being provided by
       the caller.

       The length counts are used for other purposes as well, i.e. finding
       the minimum and maximum length codes, determining if there are any
       codes at all, checking for a valid set of lengths, and looking ahead
       at length counts to determine sub-table sizes when building the
       decoding tables.
       */

      /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
      for (len = 0; len <= MAXBITS; len++) {
        count[len] = 0;
      }
      for (sym = 0; sym < codes; sym++) {
        count[lens[lens_index + sym]]++;
      }

      /* bound code lengths, force root to be within code lengths */
      root = bits;
      for (max = MAXBITS; max >= 1; max--) {
        if (count[max] !== 0) {
          break;
        }
      }
      if (root > max) {
        root = max;
      }
      if (max === 0) { /* no symbols to code at all */
        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
        table[table_index++] = (1 << 24) | (64 << 16) | 0;


        //table.op[opts.table_index] = 64;
        //table.bits[opts.table_index] = 1;
        //table.val[opts.table_index++] = 0;
        table[table_index++] = (1 << 24) | (64 << 16) | 0;

        opts.bits = 1;
        return 0; /* no symbols, but wait for decoding to report error */
      }
      for (min = 1; min < max; min++) {
        if (count[min] !== 0) {
          break;
        }
      }
      if (root < min) {
        root = min;
      }

      /* check for an over-subscribed or incomplete set of lengths */
      left = 1;
      for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
        if (left < 0) {
          return -1;
        } /* over-subscribed */
      }
      if (left > 0 && (type === CODES$1 || max !== 1)) {
        return -1; /* incomplete set */
      }

      /* generate offsets into symbol table for each length for sorting */
      offs[1] = 0;
      for (len = 1; len < MAXBITS; len++) {
        offs[len + 1] = offs[len] + count[len];
      }

      /* sort symbols by length, by symbol order within each length */
      for (sym = 0; sym < codes; sym++) {
        if (lens[lens_index + sym] !== 0) {
          work[offs[lens[lens_index + sym]]++] = sym;
        }
      }

      /*
       Create and fill in decoding tables.  In this loop, the table being
       filled is at next and has curr index bits.  The code being used is huff
       with length len.  That code is converted to an index by dropping drop
       bits off of the bottom.  For codes where len is less than drop + curr,
       those top drop + curr - len bits are incremented through all values to
       fill the table with replicated entries.

       root is the number of index bits for the root table.  When len exceeds
       root, sub-tables are created pointed to by the root entry with an index
       of the low root bits of huff.  This is saved in low to check for when a
       new sub-table should be started.  drop is zero when the root table is
       being filled, and drop is root when sub-tables are being filled.

       When a new sub-table is needed, it is necessary to look ahead in the
       code lengths to determine what size sub-table is needed.  The length
       counts are used for this, and so count[] is decremented as codes are
       entered in the tables.

       used keeps track of how many table entries have been allocated from the
       provided *table space.  It is checked for LENS and DIST tables against
       the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
       the initial root table size constants.  See the comments in inftrees.h
       for more information.

       sym increments through all symbols, and the loop terminates when
       all codes of length max, i.e. all codes, have been processed.  This
       routine permits incomplete codes, so another loop after this one fills
       in the rest of the decoding tables with invalid code markers.
       */

      /* set up for code type */
      // poor man optimization - use if-else instead of switch,
      // to avoid deopts in old v8
      if (type === CODES$1) {
        base = extra = work; /* dummy value--not used */
        end = 19;

      } else if (type === LENS$1) {
        base = lbase;
        base_index -= 257;
        extra = lext;
        extra_index -= 257;
        end = 256;

      } else { /* DISTS */
        base = dbase;
        extra = dext;
        end = -1;
      }

      /* initialize opts for loop */
      huff = 0; /* starting code */
      sym = 0; /* starting code symbol */
      len = min; /* starting code length */
      next = table_index; /* current table to fill in */
      curr = root; /* current table index bits */
      drop = 0; /* current bits to drop from code for index */
      low = -1; /* trigger new sub-table when len > root */
      used = 1 << root; /* use root table entries */
      mask = used - 1; /* mask for comparing low */

      /* check available table space */
      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
        return 1;
      }
      /* process all codes and make table entries */
      for (;;) {
        /* create table entry */
        here_bits = len - drop;
        if (work[sym] < end) {
          here_op = 0;
          here_val = work[sym];
        } else if (work[sym] > end) {
          here_op = extra[extra_index + work[sym]];
          here_val = base[base_index + work[sym]];
        } else {
          here_op = 32 + 64; /* end of block */
          here_val = 0;
        }

        /* replicate for those indices with low len bits equal to huff */
        incr = 1 << (len - drop);
        fill = 1 << curr;
        min = fill; /* save offset to next table */
        do {
          fill -= incr;
          table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val | 0;
        } while (fill !== 0);

        /* backwards increment the len-bit code huff */
        incr = 1 << (len - 1);
        while (huff & incr) {
          incr >>= 1;
        }
        if (incr !== 0) {
          huff &= incr - 1;
          huff += incr;
        } else {
          huff = 0;
        }

        /* go to next symbol, update count, len */
        sym++;
        if (--count[len] === 0) {
          if (len === max) {
            break;
          }
          len = lens[lens_index + work[sym]];
        }

        /* create new sub-table if needed */
        if (len > root && (huff & mask) !== low) {
          /* if first time, transition to sub-tables */
          if (drop === 0) {
            drop = root;
          }

          /* increment past last table */
          next += min; /* here min is 1 << curr */

          /* determine length of next table */
          curr = len - drop;
          left = 1 << curr;
          while (curr + drop < max) {
            left -= count[curr + drop];
            if (left <= 0) {
              break;
            }
            curr++;
            left <<= 1;
          }

          /* check for enough space */
          used += 1 << curr;
          if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
            (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
            return 1;
          }

          /* point entry in root table to sub-table */
          low = huff & mask;
          /*table.op[low] = curr;
          table.bits[low] = root;
          table.val[low] = next - opts.table_index;*/
          table[low] = (root << 24) | (curr << 16) | (next - table_index) | 0;
        }
      }

      /* fill in remaining table entry if code is incomplete (guaranteed to have
       at most one remaining entry, since if the code is incomplete, the
       maximum code length that was allowed to get this far is one bit) */
      if (huff !== 0) {
        //table.op[next + huff] = 64;            /* invalid code marker */
        //table.bits[next + huff] = len - drop;
        //table.val[next + huff] = 0;
        table[next + huff] = ((len - drop) << 24) | (64 << 16) | 0;
      }

      /* set return parameters */
      //opts.table_index += used;
      opts.bits = root;
      return 0;
    }

    var CODES = 0;
    var LENS = 1;
    var DISTS = 2;

    /* Public constants ==========================================================*/
    /* ===========================================================================*/


    /* Allowed flush values; see deflate() and inflate() below for details */
    //var Z_NO_FLUSH      = 0;
    //var Z_PARTIAL_FLUSH = 1;
    //var Z_SYNC_FLUSH    = 2;
    //var Z_FULL_FLUSH    = 3;
    var Z_FINISH$1 = 4;
    var Z_BLOCK$1 = 5;
    var Z_TREES$1 = 6;


    /* Return codes for the compression/decompression functions. Negative values
     * are errors, positive values are used for special but normal events.
     */
    var Z_OK$1 = 0;
    var Z_STREAM_END$1 = 1;
    var Z_NEED_DICT$1 = 2;
    //var Z_ERRNO         = -1;
    var Z_STREAM_ERROR$1 = -2;
    var Z_DATA_ERROR$1 = -3;
    var Z_MEM_ERROR = -4;
    var Z_BUF_ERROR$1 = -5;
    //var Z_VERSION_ERROR = -6;

    /* The deflate compression method */
    var Z_DEFLATED$1 = 8;


    /* STATES ====================================================================*/
    /* ===========================================================================*/


    var HEAD = 1; /* i: waiting for magic header */
    var FLAGS = 2; /* i: waiting for method and flags (gzip) */
    var TIME = 3; /* i: waiting for modification time (gzip) */
    var OS = 4; /* i: waiting for extra flags and operating system (gzip) */
    var EXLEN = 5; /* i: waiting for extra length (gzip) */
    var EXTRA = 6; /* i: waiting for extra bytes (gzip) */
    var NAME = 7; /* i: waiting for end of file name (gzip) */
    var COMMENT = 8; /* i: waiting for end of comment (gzip) */
    var HCRC = 9; /* i: waiting for header crc (gzip) */
    var DICTID = 10; /* i: waiting for dictionary check value */
    var DICT = 11; /* waiting for inflateSetDictionary() call */
    var TYPE = 12; /* i: waiting for type bits, including last-flag bit */
    var TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */
    var STORED = 14; /* i: waiting for stored size (length and complement) */
    var COPY_ = 15; /* i/o: same as COPY below, but only first time in */
    var COPY = 16; /* i/o: waiting for input or output to copy stored block */
    var TABLE = 17; /* i: waiting for dynamic block table lengths */
    var LENLENS = 18; /* i: waiting for code length code lengths */
    var CODELENS = 19; /* i: waiting for length/lit and distance code lengths */
    var LEN_ = 20; /* i: same as LEN below, but only first time in */
    var LEN = 21; /* i: waiting for length/lit/eob code */
    var LENEXT = 22; /* i: waiting for length extra bits */
    var DIST = 23; /* i: waiting for distance code */
    var DISTEXT = 24; /* i: waiting for distance extra bits */
    var MATCH = 25; /* o: waiting for output space to copy string */
    var LIT = 26; /* o: waiting for output space to write literal */
    var CHECK = 27; /* i: waiting for 32-bit check value */
    var LENGTH = 28; /* i: waiting for 32-bit length (gzip) */
    var DONE = 29; /* finished check, done -- remain here until reset */
    var BAD = 30; /* got a data error -- remain here until reset */
    var MEM = 31; /* got an inflate() memory error -- remain here until reset */
    var SYNC = 32; /* looking for synchronization bytes to restart inflate() */

    /* ===========================================================================*/



    var ENOUGH_LENS = 852;
    var ENOUGH_DISTS = 592;


    function zswap32(q) {
      return (((q >>> 24) & 0xff) +
        ((q >>> 8) & 0xff00) +
        ((q & 0xff00) << 8) +
        ((q & 0xff) << 24));
    }


    function InflateState() {
      this.mode = 0; /* current inflate mode */
      this.last = false; /* true if processing last block */
      this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
      this.havedict = false; /* true if dictionary provided */
      this.flags = 0; /* gzip header method and flags (0 if zlib) */
      this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */
      this.check = 0; /* protected copy of check value */
      this.total = 0; /* protected copy of output count */
      // TODO: may be {}
      this.head = null; /* where to save gzip header information */

      /* sliding window */
      this.wbits = 0; /* log base 2 of requested window size */
      this.wsize = 0; /* window size or zero if not using window */
      this.whave = 0; /* valid bytes in the window */
      this.wnext = 0; /* window write index */
      this.window = null; /* allocated sliding window, if needed */

      /* bit accumulator */
      this.hold = 0; /* input bit accumulator */
      this.bits = 0; /* number of bits in "in" */

      /* for string and stored block copying */
      this.length = 0; /* literal or length of data to copy */
      this.offset = 0; /* distance back to copy string from */

      /* for table and code decoding */
      this.extra = 0; /* extra bits needed */

      /* fixed and dynamic code tables */
      this.lencode = null; /* starting table for length/literal codes */
      this.distcode = null; /* starting table for distance codes */
      this.lenbits = 0; /* index bits for lencode */
      this.distbits = 0; /* index bits for distcode */

      /* dynamic table building */
      this.ncode = 0; /* number of code length code lengths */
      this.nlen = 0; /* number of length code lengths */
      this.ndist = 0; /* number of distance code lengths */
      this.have = 0; /* number of code lengths in lens[] */
      this.next = null; /* next available space in codes[] */

      this.lens = new Buf16(320); /* temporary storage for code lengths */
      this.work = new Buf16(288); /* work area for code table building */

      /*
       because we don't have pointers in js, we use lencode and distcode directly
       as buffers so we don't need codes
      */
      //this.codes = new Buf32(ENOUGH);       /* space for code tables */
      this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */
      this.distdyn = null; /* dynamic table for distance codes (JS specific) */
      this.sane = 0; /* if false, allow invalid distance too far */
      this.back = 0; /* bits back of last unprocessed length/lit */
      this.was = 0; /* initial length of match */
    }

    function inflateResetKeep(strm) {
      var state;

      if (!strm || !strm.state) {
        return Z_STREAM_ERROR$1;
      }
      state = strm.state;
      strm.total_in = strm.total_out = state.total = 0;
      strm.msg = ''; /*Z_NULL*/
      if (state.wrap) { /* to support ill-conceived Java test suite */
        strm.adler = state.wrap & 1;
      }
      state.mode = HEAD;
      state.last = 0;
      state.havedict = 0;
      state.dmax = 32768;
      state.head = null /*Z_NULL*/ ;
      state.hold = 0;
      state.bits = 0;
      //state.lencode = state.distcode = state.next = state.codes;
      state.lencode = state.lendyn = new Buf32(ENOUGH_LENS);
      state.distcode = state.distdyn = new Buf32(ENOUGH_DISTS);

      state.sane = 1;
      state.back = -1;
      //Tracev((stderr, "inflate: reset\n"));
      return Z_OK$1;
    }

    function inflateReset(strm) {
      var state;

      if (!strm || !strm.state) {
        return Z_STREAM_ERROR$1;
      }
      state = strm.state;
      state.wsize = 0;
      state.whave = 0;
      state.wnext = 0;
      return inflateResetKeep(strm);

    }

    function inflateReset2(strm, windowBits) {
      var wrap;
      var state;

      /* get the state */
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR$1;
      }
      state = strm.state;

      /* extract wrap request from windowBits parameter */
      if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
      } else {
        wrap = (windowBits >> 4) + 1;
        if (windowBits < 48) {
          windowBits &= 15;
        }
      }

      /* set number of window bits, free window if different */
      if (windowBits && (windowBits < 8 || windowBits > 15)) {
        return Z_STREAM_ERROR$1;
      }
      if (state.window !== null && state.wbits !== windowBits) {
        state.window = null;
      }

      /* update state and reset the rest of it */
      state.wrap = wrap;
      state.wbits = windowBits;
      return inflateReset(strm);
    }

    function inflateInit2(strm, windowBits) {
      var ret;
      var state;

      if (!strm) {
        return Z_STREAM_ERROR$1;
      }
      //strm.msg = Z_NULL;                 /* in case we return an error */

      state = new InflateState();

      //if (state === Z_NULL) return Z_MEM_ERROR;
      //Tracev((stderr, "inflate: allocated\n"));
      strm.state = state;
      state.window = null /*Z_NULL*/ ;
      ret = inflateReset2(strm, windowBits);
      if (ret !== Z_OK$1) {
        strm.state = null /*Z_NULL*/ ;
      }
      return ret;
    }


    /*
     Return state with length and distance decoding tables and index sizes set to
     fixed code decoding.  Normally this returns fixed tables from inffixed.h.
     If BUILDFIXED is defined, then instead this routine builds the tables the
     first time it's called, and returns those tables the first time and
     thereafter.  This reduces the size of the code by about 2K bytes, in
     exchange for a little execution time.  However, BUILDFIXED should not be
     used for threaded applications, since the rewriting of the tables and virgin
     may not be thread-safe.
     */
    var virgin = true;

    var lenfix, distfix; // We have no pointers in JS, so keep tables separate

    function fixedtables(state) {
      /* build fixed huffman tables if first call (may not be thread safe) */
      if (virgin) {
        var sym;

        lenfix = new Buf32(512);
        distfix = new Buf32(32);

        /* literal/length table */
        sym = 0;
        while (sym < 144) {
          state.lens[sym++] = 8;
        }
        while (sym < 256) {
          state.lens[sym++] = 9;
        }
        while (sym < 280) {
          state.lens[sym++] = 7;
        }
        while (sym < 288) {
          state.lens[sym++] = 8;
        }

        inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, {
          bits: 9
        });

        /* distance table */
        sym = 0;
        while (sym < 32) {
          state.lens[sym++] = 5;
        }

        inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, {
          bits: 5
        });

        /* do this just once */
        virgin = false;
      }

      state.lencode = lenfix;
      state.lenbits = 9;
      state.distcode = distfix;
      state.distbits = 5;
    }


    /*
     Update the window with the last wsize (normally 32K) bytes written before
     returning.  If window does not exist yet, create it.  This is only called
     when a window is already in use, or when output has been written during this
     inflate call, but the end of the deflate stream has not been reached yet.
     It is also called to create a window for dictionary data when a dictionary
     is loaded.

     Providing output buffers larger than 32K to inflate() should provide a speed
     advantage, since only the last 32K of output is copied to the sliding window
     upon return from inflate(), and since all distances after the first 32K of
     output will fall in the output data, making match copies simpler and faster.
     The advantage may be dependent on the size of the processor's data caches.
     */
    function updatewindow(strm, src, end, copy) {
      var dist;
      var state = strm.state;

      /* if it hasn't been done already, allocate space for the window */
      if (state.window === null) {
        state.wsize = 1 << state.wbits;
        state.wnext = 0;
        state.whave = 0;

        state.window = new Buf8(state.wsize);
      }

      /* copy state->wsize or less output bytes into the circular window */
      if (copy >= state.wsize) {
        arraySet(state.window, src, end - state.wsize, state.wsize, 0);
        state.wnext = 0;
        state.whave = state.wsize;
      } else {
        dist = state.wsize - state.wnext;
        if (dist > copy) {
          dist = copy;
        }
        //zmemcpy(state->window + state->wnext, end - copy, dist);
        arraySet(state.window, src, end - copy, dist, state.wnext);
        copy -= dist;
        if (copy) {
          //zmemcpy(state->window, end - copy, copy);
          arraySet(state.window, src, end - copy, copy, 0);
          state.wnext = copy;
          state.whave = state.wsize;
        } else {
          state.wnext += dist;
          if (state.wnext === state.wsize) {
            state.wnext = 0;
          }
          if (state.whave < state.wsize) {
            state.whave += dist;
          }
        }
      }
      return 0;
    }

    function inflate$1(strm, flush) {
      var state;
      var input, output; // input/output buffers
      var next; /* next input INDEX */
      var put; /* next output INDEX */
      var have, left; /* available input and output */
      var hold; /* bit buffer */
      var bits; /* bits in bit buffer */
      var _in, _out; /* save starting available input and output */
      var copy; /* number of stored or match bytes to copy */
      var from; /* where to copy match bytes from */
      var from_source;
      var here = 0; /* current decoding table entry */
      var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
      //var last;                   /* parent table entry */
      var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
      var len; /* length to copy for repeats, bits to drop */
      var ret; /* return code */
      var hbuf = new Buf8(4); /* buffer for gzip header crc calculation */
      var opts;

      var n; // temporary var for NEED_BITS

      var order = /* permutation of code lengths */ [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];


      if (!strm || !strm.state || !strm.output ||
        (!strm.input && strm.avail_in !== 0)) {
        return Z_STREAM_ERROR$1;
      }

      state = strm.state;
      if (state.mode === TYPE) {
        state.mode = TYPEDO;
      } /* skip check */


      //--- LOAD() ---
      put = strm.next_out;
      output = strm.output;
      left = strm.avail_out;
      next = strm.next_in;
      input = strm.input;
      have = strm.avail_in;
      hold = state.hold;
      bits = state.bits;
      //---

      _in = have;
      _out = left;
      ret = Z_OK$1;

      inf_leave: // goto emulation
        for (;;) {
          switch (state.mode) {
          case HEAD:
            if (state.wrap === 0) {
              state.mode = TYPEDO;
              break;
            }
            //=== NEEDBITS(16);
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if ((state.wrap & 2) && hold === 0x8b1f) { /* gzip header */
              state.check = 0 /*crc32(0L, Z_NULL, 0)*/ ;
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32(state.check, hbuf, 2, 0);
              //===//

              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
              state.mode = FLAGS;
              break;
            }
            state.flags = 0; /* expect zlib header */
            if (state.head) {
              state.head.done = false;
            }
            if (!(state.wrap & 1) || /* check if zlib header allowed */
              (((hold & 0xff) /*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
              strm.msg = 'incorrect header check';
              state.mode = BAD;
              break;
            }
            if ((hold & 0x0f) /*BITS(4)*/ !== Z_DEFLATED$1) {
              strm.msg = 'unknown compression method';
              state.mode = BAD;
              break;
            }
            //--- DROPBITS(4) ---//
            hold >>>= 4;
            bits -= 4;
            //---//
            len = (hold & 0x0f) /*BITS(4)*/ + 8;
            if (state.wbits === 0) {
              state.wbits = len;
            } else if (len > state.wbits) {
              strm.msg = 'invalid window size';
              state.mode = BAD;
              break;
            }
            state.dmax = 1 << len;
            //Tracev((stderr, "inflate:   zlib header ok\n"));
            strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
            state.mode = hold & 0x200 ? DICTID : TYPE;
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            break;
          case FLAGS:
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.flags = hold;
            if ((state.flags & 0xff) !== Z_DEFLATED$1) {
              strm.msg = 'unknown compression method';
              state.mode = BAD;
              break;
            }
            if (state.flags & 0xe000) {
              strm.msg = 'unknown header flags set';
              state.mode = BAD;
              break;
            }
            if (state.head) {
              state.head.text = ((hold >> 8) & 1);
            }
            if (state.flags & 0x0200) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32(state.check, hbuf, 2, 0);
              //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = TIME;
            /* falls through */
          case TIME:
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (state.head) {
              state.head.time = hold;
            }
            if (state.flags & 0x0200) {
              //=== CRC4(state.check, hold)
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              hbuf[2] = (hold >>> 16) & 0xff;
              hbuf[3] = (hold >>> 24) & 0xff;
              state.check = crc32(state.check, hbuf, 4, 0);
              //===
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = OS;
            /* falls through */
          case OS:
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (state.head) {
              state.head.xflags = (hold & 0xff);
              state.head.os = (hold >> 8);
            }
            if (state.flags & 0x0200) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32(state.check, hbuf, 2, 0);
              //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = EXLEN;
            /* falls through */
          case EXLEN:
            if (state.flags & 0x0400) {
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.length = hold;
              if (state.head) {
                state.head.extra_len = hold;
              }
              if (state.flags & 0x0200) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = (hold >>> 8) & 0xff;
                state.check = crc32(state.check, hbuf, 2, 0);
                //===//
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
            } else if (state.head) {
              state.head.extra = null /*Z_NULL*/ ;
            }
            state.mode = EXTRA;
            /* falls through */
          case EXTRA:
            if (state.flags & 0x0400) {
              copy = state.length;
              if (copy > have) {
                copy = have;
              }
              if (copy) {
                if (state.head) {
                  len = state.head.extra_len - state.length;
                  if (!state.head.extra) {
                    // Use untyped array for more conveniend processing later
                    state.head.extra = new Array(state.head.extra_len);
                  }
                  arraySet(
                    state.head.extra,
                    input,
                    next,
                    // extra field is limited to 65536 bytes
                    // - no need for additional size check
                    copy,
                    /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                    len
                  );
                  //zmemcpy(state.head.extra + len, next,
                  //        len + copy > state.head.extra_max ?
                  //        state.head.extra_max - len : copy);
                }
                if (state.flags & 0x0200) {
                  state.check = crc32(state.check, input, copy, next);
                }
                have -= copy;
                next += copy;
                state.length -= copy;
              }
              if (state.length) {
                break inf_leave;
              }
            }
            state.length = 0;
            state.mode = NAME;
            /* falls through */
          case NAME:
            if (state.flags & 0x0800) {
              if (have === 0) {
                break inf_leave;
              }
              copy = 0;
              do {
                // TODO: 2 or 1 bytes?
                len = input[next + copy++];
                /* use constant limit because in js we should not preallocate memory */
                if (state.head && len &&
                  (state.length < 65536 /*state.head.name_max*/ )) {
                  state.head.name += String.fromCharCode(len);
                }
              } while (len && copy < have);

              if (state.flags & 0x0200) {
                state.check = crc32(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              if (len) {
                break inf_leave;
              }
            } else if (state.head) {
              state.head.name = null;
            }
            state.length = 0;
            state.mode = COMMENT;
            /* falls through */
          case COMMENT:
            if (state.flags & 0x1000) {
              if (have === 0) {
                break inf_leave;
              }
              copy = 0;
              do {
                len = input[next + copy++];
                /* use constant limit because in js we should not preallocate memory */
                if (state.head && len &&
                  (state.length < 65536 /*state.head.comm_max*/ )) {
                  state.head.comment += String.fromCharCode(len);
                }
              } while (len && copy < have);
              if (state.flags & 0x0200) {
                state.check = crc32(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              if (len) {
                break inf_leave;
              }
            } else if (state.head) {
              state.head.comment = null;
            }
            state.mode = HCRC;
            /* falls through */
          case HCRC:
            if (state.flags & 0x0200) {
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              if (hold !== (state.check & 0xffff)) {
                strm.msg = 'header crc mismatch';
                state.mode = BAD;
                break;
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
            }
            if (state.head) {
              state.head.hcrc = ((state.flags >> 9) & 1);
              state.head.done = true;
            }
            strm.adler = state.check = 0;
            state.mode = TYPE;
            break;
          case DICTID:
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            strm.adler = state.check = zswap32(hold);
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = DICT;
            /* falls through */
          case DICT:
            if (state.havedict === 0) {
              //--- RESTORE() ---
              strm.next_out = put;
              strm.avail_out = left;
              strm.next_in = next;
              strm.avail_in = have;
              state.hold = hold;
              state.bits = bits;
              //---
              return Z_NEED_DICT$1;
            }
            strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
            state.mode = TYPE;
            /* falls through */
          case TYPE:
            if (flush === Z_BLOCK$1 || flush === Z_TREES$1) {
              break inf_leave;
            }
            /* falls through */
          case TYPEDO:
            if (state.last) {
              //--- BYTEBITS() ---//
              hold >>>= bits & 7;
              bits -= bits & 7;
              //---//
              state.mode = CHECK;
              break;
            }
            //=== NEEDBITS(3); */
            while (bits < 3) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.last = (hold & 0x01) /*BITS(1)*/ ;
            //--- DROPBITS(1) ---//
            hold >>>= 1;
            bits -= 1;
            //---//

            switch ((hold & 0x03) /*BITS(2)*/ ) {
            case 0:
              /* stored block */
              //Tracev((stderr, "inflate:     stored block%s\n",
              //        state.last ? " (last)" : ""));
              state.mode = STORED;
              break;
            case 1:
              /* fixed block */
              fixedtables(state);
              //Tracev((stderr, "inflate:     fixed codes block%s\n",
              //        state.last ? " (last)" : ""));
              state.mode = LEN_; /* decode codes */
              if (flush === Z_TREES$1) {
                //--- DROPBITS(2) ---//
                hold >>>= 2;
                bits -= 2;
                //---//
                break inf_leave;
              }
              break;
            case 2:
              /* dynamic block */
              //Tracev((stderr, "inflate:     dynamic codes block%s\n",
              //        state.last ? " (last)" : ""));
              state.mode = TABLE;
              break;
            case 3:
              strm.msg = 'invalid block type';
              state.mode = BAD;
            }
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
            break;
          case STORED:
            //--- BYTEBITS() ---// /* go to byte boundary */
            hold >>>= bits & 7;
            bits -= bits & 7;
            //---//
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
              strm.msg = 'invalid stored block lengths';
              state.mode = BAD;
              break;
            }
            state.length = hold & 0xffff;
            //Tracev((stderr, "inflate:       stored length %u\n",
            //        state.length));
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = COPY_;
            if (flush === Z_TREES$1) {
              break inf_leave;
            }
            /* falls through */
          case COPY_:
            state.mode = COPY;
            /* falls through */
          case COPY:
            copy = state.length;
            if (copy) {
              if (copy > have) {
                copy = have;
              }
              if (copy > left) {
                copy = left;
              }
              if (copy === 0) {
                break inf_leave;
              }
              //--- zmemcpy(put, next, copy); ---
              arraySet(output, input, next, copy, put);
              //---//
              have -= copy;
              next += copy;
              left -= copy;
              put += copy;
              state.length -= copy;
              break;
            }
            //Tracev((stderr, "inflate:       stored end\n"));
            state.mode = TYPE;
            break;
          case TABLE:
            //=== NEEDBITS(14); */
            while (bits < 14) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.nlen = (hold & 0x1f) /*BITS(5)*/ + 257;
            //--- DROPBITS(5) ---//
            hold >>>= 5;
            bits -= 5;
            //---//
            state.ndist = (hold & 0x1f) /*BITS(5)*/ + 1;
            //--- DROPBITS(5) ---//
            hold >>>= 5;
            bits -= 5;
            //---//
            state.ncode = (hold & 0x0f) /*BITS(4)*/ + 4;
            //--- DROPBITS(4) ---//
            hold >>>= 4;
            bits -= 4;
            //---//
            //#ifndef PKZIP_BUG_WORKAROUND
            if (state.nlen > 286 || state.ndist > 30) {
              strm.msg = 'too many length or distance symbols';
              state.mode = BAD;
              break;
            }
            //#endif
            //Tracev((stderr, "inflate:       table sizes ok\n"));
            state.have = 0;
            state.mode = LENLENS;
            /* falls through */
          case LENLENS:
            while (state.have < state.ncode) {
              //=== NEEDBITS(3);
              while (bits < 3) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.lens[order[state.have++]] = (hold & 0x07); //BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            while (state.have < 19) {
              state.lens[order[state.have++]] = 0;
            }
            // We have separate tables & no pointers. 2 commented lines below not needed.
            //state.next = state.codes;
            //state.lencode = state.next;
            // Switch to use dynamic table
            state.lencode = state.lendyn;
            state.lenbits = 7;

            opts = {
              bits: state.lenbits
            };
            ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
            state.lenbits = opts.bits;

            if (ret) {
              strm.msg = 'invalid code lengths set';
              state.mode = BAD;
              break;
            }
            //Tracev((stderr, "inflate:       code lengths ok\n"));
            state.have = 0;
            state.mode = CODELENS;
            /* falls through */
          case CODELENS:
            while (state.have < state.nlen + state.ndist) {
              for (;;) {
                here = state.lencode[hold & ((1 << state.lenbits) - 1)]; /*BITS(state.lenbits)*/
                here_bits = here >>> 24;
                here_op = (here >>> 16) & 0xff;
                here_val = here & 0xffff;

                if ((here_bits) <= bits) {
                  break;
                }
                //--- PULLBYTE() ---//
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
                //---//
              }
              if (here_val < 16) {
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                state.lens[state.have++] = here_val;
              } else {
                if (here_val === 16) {
                  //=== NEEDBITS(here.bits + 2);
                  n = here_bits + 2;
                  while (bits < n) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits;
                  //---//
                  if (state.have === 0) {
                    strm.msg = 'invalid bit length repeat';
                    state.mode = BAD;
                    break;
                  }
                  len = state.lens[state.have - 1];
                  copy = 3 + (hold & 0x03); //BITS(2);
                  //--- DROPBITS(2) ---//
                  hold >>>= 2;
                  bits -= 2;
                  //---//
                } else if (here_val === 17) {
                  //=== NEEDBITS(here.bits + 3);
                  n = here_bits + 3;
                  while (bits < n) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits;
                  //---//
                  len = 0;
                  copy = 3 + (hold & 0x07); //BITS(3);
                  //--- DROPBITS(3) ---//
                  hold >>>= 3;
                  bits -= 3;
                  //---//
                } else {
                  //=== NEEDBITS(here.bits + 7);
                  n = here_bits + 7;
                  while (bits < n) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits;
                  //---//
                  len = 0;
                  copy = 11 + (hold & 0x7f); //BITS(7);
                  //--- DROPBITS(7) ---//
                  hold >>>= 7;
                  bits -= 7;
                  //---//
                }
                if (state.have + copy > state.nlen + state.ndist) {
                  strm.msg = 'invalid bit length repeat';
                  state.mode = BAD;
                  break;
                }
                while (copy--) {
                  state.lens[state.have++] = len;
                }
              }
            }

            /* handle error breaks in while */
            if (state.mode === BAD) {
              break;
            }

            /* check for end-of-block code (better have one) */
            if (state.lens[256] === 0) {
              strm.msg = 'invalid code -- missing end-of-block';
              state.mode = BAD;
              break;
            }

            /* build code tables -- note: do not change the lenbits or distbits
               values here (9 and 6) without reading the comments in inftrees.h
               concerning the ENOUGH constants, which depend on those values */
            state.lenbits = 9;

            opts = {
              bits: state.lenbits
            };
            ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
            // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.lenbits = opts.bits;
            // state.lencode = state.next;

            if (ret) {
              strm.msg = 'invalid literal/lengths set';
              state.mode = BAD;
              break;
            }

            state.distbits = 6;
            //state.distcode.copy(state.codes);
            // Switch to use dynamic table
            state.distcode = state.distdyn;
            opts = {
              bits: state.distbits
            };
            ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
            // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.distbits = opts.bits;
            // state.distcode = state.next;

            if (ret) {
              strm.msg = 'invalid distances set';
              state.mode = BAD;
              break;
            }
            //Tracev((stderr, 'inflate:       codes ok\n'));
            state.mode = LEN_;
            if (flush === Z_TREES$1) {
              break inf_leave;
            }
            /* falls through */
          case LEN_:
            state.mode = LEN;
            /* falls through */
          case LEN:
            if (have >= 6 && left >= 258) {
              //--- RESTORE() ---
              strm.next_out = put;
              strm.avail_out = left;
              strm.next_in = next;
              strm.avail_in = have;
              state.hold = hold;
              state.bits = bits;
              //---
              inflate_fast(strm, _out);
              //--- LOAD() ---
              put = strm.next_out;
              output = strm.output;
              left = strm.avail_out;
              next = strm.next_in;
              input = strm.input;
              have = strm.avail_in;
              hold = state.hold;
              bits = state.bits;
              //---

              if (state.mode === TYPE) {
                state.back = -1;
              }
              break;
            }
            state.back = 0;
            for (;;) {
              here = state.lencode[hold & ((1 << state.lenbits) - 1)]; /*BITS(state.lenbits)*/
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if (here_bits <= bits) {
                break;
              }
              //--- PULLBYTE() ---//
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            if (here_op && (here_op & 0xf0) === 0) {
              last_bits = here_bits;
              last_op = here_op;
              last_val = here_val;
              for (;;) {
                here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1)) /*BITS(last.bits + last.op)*/ >> last_bits)];
                here_bits = here >>> 24;
                here_op = (here >>> 16) & 0xff;
                here_val = here & 0xffff;

                if ((last_bits + here_bits) <= bits) {
                  break;
                }
                //--- PULLBYTE() ---//
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
                //---//
              }
              //--- DROPBITS(last.bits) ---//
              hold >>>= last_bits;
              bits -= last_bits;
              //---//
              state.back += last_bits;
            }
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.back += here_bits;
            state.length = here_val;
            if (here_op === 0) {
              //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
              //        "inflate:         literal '%c'\n" :
              //        "inflate:         literal 0x%02x\n", here.val));
              state.mode = LIT;
              break;
            }
            if (here_op & 32) {
              //Tracevv((stderr, "inflate:         end of block\n"));
              state.back = -1;
              state.mode = TYPE;
              break;
            }
            if (here_op & 64) {
              strm.msg = 'invalid literal/length code';
              state.mode = BAD;
              break;
            }
            state.extra = here_op & 15;
            state.mode = LENEXT;
            /* falls through */
          case LENEXT:
            if (state.extra) {
              //=== NEEDBITS(state.extra);
              n = state.extra;
              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.length += hold & ((1 << state.extra) - 1) /*BITS(state.extra)*/ ;
              //--- DROPBITS(state.extra) ---//
              hold >>>= state.extra;
              bits -= state.extra;
              //---//
              state.back += state.extra;
            }
            //Tracevv((stderr, "inflate:         length %u\n", state.length));
            state.was = state.length;
            state.mode = DIST;
            /* falls through */
          case DIST:
            for (;;) {
              here = state.distcode[hold & ((1 << state.distbits) - 1)]; /*BITS(state.distbits)*/
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((here_bits) <= bits) {
                break;
              }
              //--- PULLBYTE() ---//
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            if ((here_op & 0xf0) === 0) {
              last_bits = here_bits;
              last_op = here_op;
              last_val = here_val;
              for (;;) {
                here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1)) /*BITS(last.bits + last.op)*/ >> last_bits)];
                here_bits = here >>> 24;
                here_op = (here >>> 16) & 0xff;
                here_val = here & 0xffff;

                if ((last_bits + here_bits) <= bits) {
                  break;
                }
                //--- PULLBYTE() ---//
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
                //---//
              }
              //--- DROPBITS(last.bits) ---//
              hold >>>= last_bits;
              bits -= last_bits;
              //---//
              state.back += last_bits;
            }
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.back += here_bits;
            if (here_op & 64) {
              strm.msg = 'invalid distance code';
              state.mode = BAD;
              break;
            }
            state.offset = here_val;
            state.extra = (here_op) & 15;
            state.mode = DISTEXT;
            /* falls through */
          case DISTEXT:
            if (state.extra) {
              //=== NEEDBITS(state.extra);
              n = state.extra;
              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.offset += hold & ((1 << state.extra) - 1) /*BITS(state.extra)*/ ;
              //--- DROPBITS(state.extra) ---//
              hold >>>= state.extra;
              bits -= state.extra;
              //---//
              state.back += state.extra;
            }
            //#ifdef INFLATE_STRICT
            if (state.offset > state.dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
            //#endif
            //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
            state.mode = MATCH;
            /* falls through */
          case MATCH:
            if (left === 0) {
              break inf_leave;
            }
            copy = _out - left;
            if (state.offset > copy) { /* copy from window */
              copy = state.offset - copy;
              if (copy > state.whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break;
                }
                // (!) This block is disabled in zlib defailts,
                // don't enable it for binary compatibility
                //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                //          Trace((stderr, "inflate.c too far\n"));
                //          copy -= state.whave;
                //          if (copy > state.length) { copy = state.length; }
                //          if (copy > left) { copy = left; }
                //          left -= copy;
                //          state.length -= copy;
                //          do {
                //            output[put++] = 0;
                //          } while (--copy);
                //          if (state.length === 0) { state.mode = LEN; }
                //          break;
                //#endif
              }
              if (copy > state.wnext) {
                copy -= state.wnext;
                from = state.wsize - copy;
              } else {
                from = state.wnext - copy;
              }
              if (copy > state.length) {
                copy = state.length;
              }
              from_source = state.window;
            } else { /* copy from output */
              from_source = output;
              from = put - state.offset;
              copy = state.length;
            }
            if (copy > left) {
              copy = left;
            }
            left -= copy;
            state.length -= copy;
            do {
              output[put++] = from_source[from++];
            } while (--copy);
            if (state.length === 0) {
              state.mode = LEN;
            }
            break;
          case LIT:
            if (left === 0) {
              break inf_leave;
            }
            output[put++] = state.length;
            left--;
            state.mode = LEN;
            break;
          case CHECK:
            if (state.wrap) {
              //=== NEEDBITS(32);
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                // Use '|' insdead of '+' to make sure that result is signed
                hold |= input[next++] << bits;
                bits += 8;
              }
              //===//
              _out -= left;
              strm.total_out += _out;
              state.total += _out;
              if (_out) {
                strm.adler = state.check =
                  /*UPDATE(state.check, put - _out, _out);*/
                  (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

              }
              _out = left;
              // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
              if ((state.flags ? hold : zswap32(hold)) !== state.check) {
                strm.msg = 'incorrect data check';
                state.mode = BAD;
                break;
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
              //Tracev((stderr, "inflate:   check matches trailer\n"));
            }
            state.mode = LENGTH;
            /* falls through */
          case LENGTH:
            if (state.wrap && state.flags) {
              //=== NEEDBITS(32);
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              if (hold !== (state.total & 0xffffffff)) {
                strm.msg = 'incorrect length check';
                state.mode = BAD;
                break;
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
              //Tracev((stderr, "inflate:   length matches trailer\n"));
            }
            state.mode = DONE;
            /* falls through */
          case DONE:
            ret = Z_STREAM_END$1;
            break inf_leave;
          case BAD:
            ret = Z_DATA_ERROR$1;
            break inf_leave;
          case MEM:
            return Z_MEM_ERROR;
          case SYNC:
            /* falls through */
          default:
            return Z_STREAM_ERROR$1;
          }
        }

      // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

      /*
         Return from inflate(), updating the total counts and the check value.
         If there was no progress during the inflate() call, return a buffer
         error.  Call updatewindow() to create and/or update the window state.
         Note: a memory error from inflate() is non-recoverable.
       */

      //--- RESTORE() ---
      strm.next_out = put;
      strm.avail_out = left;
      strm.next_in = next;
      strm.avail_in = have;
      state.hold = hold;
      state.bits = bits;
      //---

      if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
          (state.mode < CHECK || flush !== Z_FINISH$1))) {
        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
      }
      _in -= strm.avail_in;
      _out -= strm.avail_out;
      strm.total_in += _in;
      strm.total_out += _out;
      state.total += _out;
      if (state.wrap && _out) {
        strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
          (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
      }
      strm.data_type = state.bits + (state.last ? 64 : 0) +
        (state.mode === TYPE ? 128 : 0) +
        (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
      if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {
        ret = Z_BUF_ERROR$1;
      }
      return ret;
    }

    function inflateEnd(strm) {

      if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/ ) {
        return Z_STREAM_ERROR$1;
      }

      var state = strm.state;
      if (state.window) {
        state.window = null;
      }
      strm.state = null;
      return Z_OK$1;
    }

    /* Not implemented
    exports.inflateCopy = inflateCopy;
    exports.inflateGetDictionary = inflateGetDictionary;
    exports.inflateMark = inflateMark;
    exports.inflatePrime = inflatePrime;
    exports.inflateSync = inflateSync;
    exports.inflateSyncPoint = inflateSyncPoint;
    exports.inflateUndermine = inflateUndermine;
    */

    // import constants from './constants';


    // zlib modes
    var NONE = 0;
    var DEFLATE = 1;
    var INFLATE = 2;
    var GZIP = 3;
    var GUNZIP = 4;
    var DEFLATERAW = 5;
    var INFLATERAW = 6;
    var UNZIP = 7;
    var Z_NO_FLUSH=         0,
      Z_PARTIAL_FLUSH=    1,
      Z_SYNC_FLUSH=    2,
      Z_FULL_FLUSH=       3,
      Z_FINISH=       4,
      Z_BLOCK=           5,
      Z_TREES=            6,

      /* Return codes for the compression/decompression functions. Negative values
      * are errors, positive values are used for special but normal events.
      */
      Z_OK=               0,
      Z_STREAM_END=       1,
      Z_NEED_DICT=      2,
      Z_ERRNO=       -1,
      Z_STREAM_ERROR=   -2,
      Z_DATA_ERROR=    -3,
      //Z_MEM_ERROR:     -4,
      Z_BUF_ERROR=    -5,
      //Z_VERSION_ERROR: -6,

      /* compression levels */
      Z_NO_COMPRESSION=         0,
      Z_BEST_SPEED=             1,
      Z_BEST_COMPRESSION=       9,
      Z_DEFAULT_COMPRESSION=   -1,


      Z_FILTERED=               1,
      Z_HUFFMAN_ONLY=           2,
      Z_RLE=                    3,
      Z_FIXED=                  4,
      Z_DEFAULT_STRATEGY=       0,

      /* Possible values of the data_type field (though see inflate()) */
      Z_BINARY=                 0,
      Z_TEXT=                   1,
      //Z_ASCII:                1, // = Z_TEXT (deprecated)
      Z_UNKNOWN=                2,

      /* The deflate compression method */
      Z_DEFLATED=               8;
    function Zlib$1(mode) {
      if (mode < DEFLATE || mode > UNZIP)
        throw new TypeError('Bad argument');

      this.mode = mode;
      this.init_done = false;
      this.write_in_progress = false;
      this.pending_close = false;
      this.windowBits = 0;
      this.level = 0;
      this.memLevel = 0;
      this.strategy = 0;
      this.dictionary = null;
    }

    Zlib$1.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
      this.windowBits = windowBits;
      this.level = level;
      this.memLevel = memLevel;
      this.strategy = strategy;
      // dictionary not supported.

      if (this.mode === GZIP || this.mode === GUNZIP)
        this.windowBits += 16;

      if (this.mode === UNZIP)
        this.windowBits += 32;

      if (this.mode === DEFLATERAW || this.mode === INFLATERAW)
        this.windowBits = -this.windowBits;

      this.strm = new ZStream();
      var status;
      switch (this.mode) {
      case DEFLATE:
      case GZIP:
      case DEFLATERAW:
        status = deflateInit2(
          this.strm,
          this.level,
          Z_DEFLATED,
          this.windowBits,
          this.memLevel,
          this.strategy
        );
        break;
      case INFLATE:
      case GUNZIP:
      case INFLATERAW:
      case UNZIP:
        status  = inflateInit2(
          this.strm,
          this.windowBits
        );
        break;
      default:
        throw new Error('Unknown mode ' + this.mode);
      }

      if (status !== Z_OK) {
        this._error(status);
        return;
      }

      this.write_in_progress = false;
      this.init_done = true;
    };

    Zlib$1.prototype.params = function() {
      throw new Error('deflateParams Not supported');
    };

    Zlib$1.prototype._writeCheck = function() {
      if (!this.init_done)
        throw new Error('write before init');

      if (this.mode === NONE)
        throw new Error('already finalized');

      if (this.write_in_progress)
        throw new Error('write already in progress');

      if (this.pending_close)
        throw new Error('close is pending');
    };

    Zlib$1.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {
      this._writeCheck();
      this.write_in_progress = true;

      var self = this;
      browser$1.nextTick(function() {
        self.write_in_progress = false;
        var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
        self.callback(res[0], res[1]);

        if (self.pending_close)
          self.close();
      });

      return this;
    };

    // set method for Node buffers, used by pako
    function bufferSet(data, offset) {
      for (var i = 0; i < data.length; i++) {
        this[offset + i] = data[i];
      }
    }

    Zlib$1.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
      this._writeCheck();
      return this._write(flush, input, in_off, in_len, out, out_off, out_len);
    };

    Zlib$1.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
      this.write_in_progress = true;

      if (flush !== Z_NO_FLUSH &&
          flush !== Z_PARTIAL_FLUSH &&
          flush !== Z_SYNC_FLUSH &&
          flush !== Z_FULL_FLUSH &&
          flush !== Z_FINISH &&
          flush !== Z_BLOCK) {
        throw new Error('Invalid flush value');
      }

      if (input == null) {
        input = new Buffer(0);
        in_len = 0;
        in_off = 0;
      }

      if (out._set)
        out.set = out._set;
      else
        out.set = bufferSet;

      var strm = this.strm;
      strm.avail_in = in_len;
      strm.input = input;
      strm.next_in = in_off;
      strm.avail_out = out_len;
      strm.output = out;
      strm.next_out = out_off;
      var status;
      switch (this.mode) {
      case DEFLATE:
      case GZIP:
      case DEFLATERAW:
        status = deflate$1(strm, flush);
        break;
      case UNZIP:
      case INFLATE:
      case GUNZIP:
      case INFLATERAW:
        status = inflate$1(strm, flush);
        break;
      default:
        throw new Error('Unknown mode ' + this.mode);
      }

      if (!this._checkError(status, strm, flush)) {
        this._error(status);
      }

      this.write_in_progress = false;
      return [strm.avail_in, strm.avail_out];
    };

    Zlib$1.prototype._checkError = function (status, strm, flush) {
      // Acceptable error states depend on the type of zlib stream.
      switch (status) {
        case Z_OK:
        case Z_BUF_ERROR:
          if (strm.avail_out !== 0 && flush === Z_FINISH) {
            return false
          }
          break
        case Z_STREAM_END:
          // normal statuses, not fatal
          break
        case Z_NEED_DICT:
          return false
        default:
          return false
      }

      return true
    };

    Zlib$1.prototype.close = function() {
      if (this.write_in_progress) {
        this.pending_close = true;
        return;
      }

      this.pending_close = false;

      if (this.mode === DEFLATE || this.mode === GZIP || this.mode === DEFLATERAW) {
        deflateEnd(this.strm);
      } else {
        inflateEnd(this.strm);
      }

      this.mode = NONE;
    };
    var status;
    Zlib$1.prototype.reset = function() {
      switch (this.mode) {
      case DEFLATE:
      case DEFLATERAW:
        status = deflateReset(this.strm);
        break;
      case INFLATE:
      case INFLATERAW:
        status = inflateReset(this.strm);
        break;
      }

      if (status !== Z_OK) {
        this._error(status);
      }
    };

    Zlib$1.prototype._error = function(status) {
      this.onerror(msg[status] + ': ' + this.strm.msg, status);

      this.write_in_progress = false;
      if (this.pending_close)
        this.close();
    };

    var _binding = /*#__PURE__*/Object.freeze({
        __proto__: null,
        DEFLATE: DEFLATE,
        DEFLATERAW: DEFLATERAW,
        GUNZIP: GUNZIP,
        GZIP: GZIP,
        INFLATE: INFLATE,
        INFLATERAW: INFLATERAW,
        NONE: NONE,
        UNZIP: UNZIP,
        Z_BEST_COMPRESSION: Z_BEST_COMPRESSION,
        Z_BEST_SPEED: Z_BEST_SPEED,
        Z_BINARY: Z_BINARY,
        Z_BLOCK: Z_BLOCK,
        Z_BUF_ERROR: Z_BUF_ERROR,
        Z_DATA_ERROR: Z_DATA_ERROR,
        Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION,
        Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY,
        Z_DEFLATED: Z_DEFLATED,
        Z_ERRNO: Z_ERRNO,
        Z_FILTERED: Z_FILTERED,
        Z_FINISH: Z_FINISH,
        Z_FIXED: Z_FIXED,
        Z_FULL_FLUSH: Z_FULL_FLUSH,
        Z_HUFFMAN_ONLY: Z_HUFFMAN_ONLY,
        Z_NEED_DICT: Z_NEED_DICT,
        Z_NO_COMPRESSION: Z_NO_COMPRESSION,
        Z_NO_FLUSH: Z_NO_FLUSH,
        Z_OK: Z_OK,
        Z_PARTIAL_FLUSH: Z_PARTIAL_FLUSH,
        Z_RLE: Z_RLE,
        Z_STREAM_END: Z_STREAM_END,
        Z_STREAM_ERROR: Z_STREAM_ERROR,
        Z_SYNC_FLUSH: Z_SYNC_FLUSH,
        Z_TEXT: Z_TEXT,
        Z_TREES: Z_TREES,
        Z_UNKNOWN: Z_UNKNOWN,
        Zlib: Zlib$1
    });

    function assert (a, msg) {
      if (!a) {
        throw new Error(msg);
      }
    }
    var binding = {};
    Object.keys(_binding).forEach(function (key) {
      binding[key] = _binding[key];
    });
    // zlib doesn't provide these, so kludge them in following the same
    // const naming scheme zlib uses.
    binding.Z_MIN_WINDOWBITS = 8;
    binding.Z_MAX_WINDOWBITS = 15;
    binding.Z_DEFAULT_WINDOWBITS = 15;

    // fewer than 64 bytes per chunk is stupid.
    // technically it could work with as few as 8, but even 64 bytes
    // is absurdly low.  Usually a MB or more is best.
    binding.Z_MIN_CHUNK = 64;
    binding.Z_MAX_CHUNK = Infinity;
    binding.Z_DEFAULT_CHUNK = (16 * 1024);

    binding.Z_MIN_MEMLEVEL = 1;
    binding.Z_MAX_MEMLEVEL = 9;
    binding.Z_DEFAULT_MEMLEVEL = 8;

    binding.Z_MIN_LEVEL = -1;
    binding.Z_MAX_LEVEL = 9;
    binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;


    // translation table for return codes.
    var codes = {
      Z_OK: binding.Z_OK,
      Z_STREAM_END: binding.Z_STREAM_END,
      Z_NEED_DICT: binding.Z_NEED_DICT,
      Z_ERRNO: binding.Z_ERRNO,
      Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
      Z_DATA_ERROR: binding.Z_DATA_ERROR,
      Z_MEM_ERROR: binding.Z_MEM_ERROR,
      Z_BUF_ERROR: binding.Z_BUF_ERROR,
      Z_VERSION_ERROR: binding.Z_VERSION_ERROR
    };

    Object.keys(codes).forEach(function(k) {
      codes[codes[k]] = k;
    });

    function createDeflate(o) {
      return new Deflate(o);
    }

    function createInflate(o) {
      return new Inflate(o);
    }

    function createDeflateRaw(o) {
      return new DeflateRaw(o);
    }

    function createInflateRaw(o) {
      return new InflateRaw(o);
    }

    function createGzip(o) {
      return new Gzip(o);
    }

    function createGunzip(o) {
      return new Gunzip(o);
    }

    function createUnzip(o) {
      return new Unzip(o);
    }


    // Convenience methods.
    // compress/decompress a string or buffer in one step.
    function deflate(buffer, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      return zlibBuffer(new Deflate(opts), buffer, callback);
    }

    function deflateSync(buffer, opts) {
      return zlibBufferSync(new Deflate(opts), buffer);
    }

    function gzip(buffer, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      return zlibBuffer(new Gzip(opts), buffer, callback);
    }

    function gzipSync(buffer, opts) {
      return zlibBufferSync(new Gzip(opts), buffer);
    }

    function deflateRaw(buffer, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      return zlibBuffer(new DeflateRaw(opts), buffer, callback);
    }

    function deflateRawSync(buffer, opts) {
      return zlibBufferSync(new DeflateRaw(opts), buffer);
    }

    function unzip(buffer, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      return zlibBuffer(new Unzip(opts), buffer, callback);
    }

    function unzipSync(buffer, opts) {
      return zlibBufferSync(new Unzip(opts), buffer);
    }

    function inflate(buffer, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      return zlibBuffer(new Inflate(opts), buffer, callback);
    }

    function inflateSync(buffer, opts) {
      return zlibBufferSync(new Inflate(opts), buffer);
    }

    function gunzip(buffer, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      return zlibBuffer(new Gunzip(opts), buffer, callback);
    }

    function gunzipSync(buffer, opts) {
      return zlibBufferSync(new Gunzip(opts), buffer);
    }

    function inflateRaw(buffer, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      return zlibBuffer(new InflateRaw(opts), buffer, callback);
    }

    function inflateRawSync(buffer, opts) {
      return zlibBufferSync(new InflateRaw(opts), buffer);
    }

    function zlibBuffer(engine, buffer, callback) {
      var buffers = [];
      var nread = 0;

      engine.on('error', onError);
      engine.on('end', onEnd);

      engine.end(buffer);
      flow();

      function flow() {
        var chunk;
        while (null !== (chunk = engine.read())) {
          buffers.push(chunk);
          nread += chunk.length;
        }
        engine.once('readable', flow);
      }

      function onError(err) {
        engine.removeListener('end', onEnd);
        engine.removeListener('readable', flow);
        callback(err);
      }

      function onEnd() {
        var buf = Buffer.concat(buffers, nread);
        buffers = [];
        callback(null, buf);
        engine.close();
      }
    }

    function zlibBufferSync(engine, buffer) {
      if (typeof buffer === 'string')
        buffer = new Buffer(buffer);
      if (!Buffer.isBuffer(buffer))
        throw new TypeError('Not a string or buffer');

      var flushFlag = binding.Z_FINISH;

      return engine._processChunk(buffer, flushFlag);
    }

    // generic zlib
    // minimal 2-byte header
    function Deflate(opts) {
      if (!(this instanceof Deflate)) return new Deflate(opts);
      Zlib.call(this, opts, binding.DEFLATE);
    }

    function Inflate(opts) {
      if (!(this instanceof Inflate)) return new Inflate(opts);
      Zlib.call(this, opts, binding.INFLATE);
    }



    // gzip - bigger header, same deflate compression
    function Gzip(opts) {
      if (!(this instanceof Gzip)) return new Gzip(opts);
      Zlib.call(this, opts, binding.GZIP);
    }

    function Gunzip(opts) {
      if (!(this instanceof Gunzip)) return new Gunzip(opts);
      Zlib.call(this, opts, binding.GUNZIP);
    }



    // raw - no header
    function DeflateRaw(opts) {
      if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
      Zlib.call(this, opts, binding.DEFLATERAW);
    }

    function InflateRaw(opts) {
      if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
      Zlib.call(this, opts, binding.INFLATERAW);
    }


    // auto-detect header.
    function Unzip(opts) {
      if (!(this instanceof Unzip)) return new Unzip(opts);
      Zlib.call(this, opts, binding.UNZIP);
    }


    // the Zlib class they all inherit from
    // This thing manages the queue of requests, and returns
    // true or false if there is anything in the queue when
    // you call the .write() method.

    function Zlib(opts, mode) {
      this._opts = opts = opts || {};
      this._chunkSize = opts.chunkSize || binding.Z_DEFAULT_CHUNK;

      Transform.call(this, opts);

      if (opts.flush) {
        if (opts.flush !== binding.Z_NO_FLUSH &&
            opts.flush !== binding.Z_PARTIAL_FLUSH &&
            opts.flush !== binding.Z_SYNC_FLUSH &&
            opts.flush !== binding.Z_FULL_FLUSH &&
            opts.flush !== binding.Z_FINISH &&
            opts.flush !== binding.Z_BLOCK) {
          throw new Error('Invalid flush flag: ' + opts.flush);
        }
      }
      this._flushFlag = opts.flush || binding.Z_NO_FLUSH;

      if (opts.chunkSize) {
        if (opts.chunkSize < binding.Z_MIN_CHUNK ||
            opts.chunkSize > binding.Z_MAX_CHUNK) {
          throw new Error('Invalid chunk size: ' + opts.chunkSize);
        }
      }

      if (opts.windowBits) {
        if (opts.windowBits < binding.Z_MIN_WINDOWBITS ||
            opts.windowBits > binding.Z_MAX_WINDOWBITS) {
          throw new Error('Invalid windowBits: ' + opts.windowBits);
        }
      }

      if (opts.level) {
        if (opts.level < binding.Z_MIN_LEVEL ||
            opts.level > binding.Z_MAX_LEVEL) {
          throw new Error('Invalid compression level: ' + opts.level);
        }
      }

      if (opts.memLevel) {
        if (opts.memLevel < binding.Z_MIN_MEMLEVEL ||
            opts.memLevel > binding.Z_MAX_MEMLEVEL) {
          throw new Error('Invalid memLevel: ' + opts.memLevel);
        }
      }

      if (opts.strategy) {
        if (opts.strategy != binding.Z_FILTERED &&
            opts.strategy != binding.Z_HUFFMAN_ONLY &&
            opts.strategy != binding.Z_RLE &&
            opts.strategy != binding.Z_FIXED &&
            opts.strategy != binding.Z_DEFAULT_STRATEGY) {
          throw new Error('Invalid strategy: ' + opts.strategy);
        }
      }

      if (opts.dictionary) {
        if (!Buffer.isBuffer(opts.dictionary)) {
          throw new Error('Invalid dictionary: it should be a Buffer instance');
        }
      }

      this._binding = new binding.Zlib(mode);

      var self = this;
      this._hadError = false;
      this._binding.onerror = function(message, errno) {
        // there is no way to cleanly recover.
        // continuing only obscures problems.
        self._binding = null;
        self._hadError = true;

        var error = new Error(message);
        error.errno = errno;
        error.code = codes[errno];
        self.emit('error', error);
      };

      var level = binding.Z_DEFAULT_COMPRESSION;
      if (typeof opts.level === 'number') level = opts.level;

      var strategy = binding.Z_DEFAULT_STRATEGY;
      if (typeof opts.strategy === 'number') strategy = opts.strategy;

      this._binding.init(opts.windowBits || binding.Z_DEFAULT_WINDOWBITS,
                         level,
                         opts.memLevel || binding.Z_DEFAULT_MEMLEVEL,
                         strategy,
                         opts.dictionary);

      this._buffer = new Buffer(this._chunkSize);
      this._offset = 0;
      this._closed = false;
      this._level = level;
      this._strategy = strategy;

      this.once('end', this.close);
    }

    inherits$1(Zlib, Transform);

    Zlib.prototype.params = function(level, strategy, callback) {
      if (level < binding.Z_MIN_LEVEL ||
          level > binding.Z_MAX_LEVEL) {
        throw new RangeError('Invalid compression level: ' + level);
      }
      if (strategy != binding.Z_FILTERED &&
          strategy != binding.Z_HUFFMAN_ONLY &&
          strategy != binding.Z_RLE &&
          strategy != binding.Z_FIXED &&
          strategy != binding.Z_DEFAULT_STRATEGY) {
        throw new TypeError('Invalid strategy: ' + strategy);
      }

      if (this._level !== level || this._strategy !== strategy) {
        var self = this;
        this.flush(binding.Z_SYNC_FLUSH, function() {
          self._binding.params(level, strategy);
          if (!self._hadError) {
            self._level = level;
            self._strategy = strategy;
            if (callback) callback();
          }
        });
      } else {
        browser$1.nextTick(callback);
      }
    };

    Zlib.prototype.reset = function() {
      return this._binding.reset();
    };

    // This is the _flush function called by the transform class,
    // internally, when the last chunk has been written.
    Zlib.prototype._flush = function(callback) {
      this._transform(new Buffer(0), '', callback);
    };

    Zlib.prototype.flush = function(kind, callback) {
      var ws = this._writableState;

      if (typeof kind === 'function' || (kind === void 0 && !callback)) {
        callback = kind;
        kind = binding.Z_FULL_FLUSH;
      }

      if (ws.ended) {
        if (callback)
          browser$1.nextTick(callback);
      } else if (ws.ending) {
        if (callback)
          this.once('end', callback);
      } else if (ws.needDrain) {
        var self = this;
        this.once('drain', function() {
          self.flush(callback);
        });
      } else {
        this._flushFlag = kind;
        this.write(new Buffer(0), '', callback);
      }
    };

    Zlib.prototype.close = function(callback) {
      if (callback)
        browser$1.nextTick(callback);

      if (this._closed)
        return;

      this._closed = true;

      this._binding.close();

      var self = this;
      browser$1.nextTick(function() {
        self.emit('close');
      });
    };

    Zlib.prototype._transform = function(chunk, encoding, cb) {
      var flushFlag;
      var ws = this._writableState;
      var ending = ws.ending || ws.ended;
      var last = ending && (!chunk || ws.length === chunk.length);

      if (!chunk === null && !Buffer.isBuffer(chunk))
        return cb(new Error('invalid input'));

      // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
      // If it's explicitly flushing at some other time, then we use
      // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
      // goodness.
      if (last)
        flushFlag = binding.Z_FINISH;
      else {
        flushFlag = this._flushFlag;
        // once we've flushed the last of the queue, stop flushing and
        // go back to the normal behavior.
        if (chunk.length >= ws.length) {
          this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
        }
      }

      this._processChunk(chunk, flushFlag, cb);
    };

    Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
      var availInBefore = chunk && chunk.length;
      var availOutBefore = this._chunkSize - this._offset;
      var inOff = 0;

      var self = this;

      var async = typeof cb === 'function';

      if (!async) {
        var buffers = [];
        var nread = 0;

        var error;
        this.on('error', function(er) {
          error = er;
        });

        do {
          var res = this._binding.writeSync(flushFlag,
                                            chunk, // in
                                            inOff, // in_off
                                            availInBefore, // in_len
                                            this._buffer, // out
                                            this._offset, //out_off
                                            availOutBefore); // out_len
        } while (!this._hadError && callback(res[0], res[1]));

        if (this._hadError) {
          throw error;
        }

        var buf = Buffer.concat(buffers, nread);
        this.close();

        return buf;
      }

      var req = this._binding.write(flushFlag,
                                    chunk, // in
                                    inOff, // in_off
                                    availInBefore, // in_len
                                    this._buffer, // out
                                    this._offset, //out_off
                                    availOutBefore); // out_len

      req.buffer = chunk;
      req.callback = callback;

      function callback(availInAfter, availOutAfter) {
        if (self._hadError)
          return;

        var have = availOutBefore - availOutAfter;
        assert(have >= 0, 'have should not go down');

        if (have > 0) {
          var out = self._buffer.slice(self._offset, self._offset + have);
          self._offset += have;
          // serve some output to the consumer.
          if (async) {
            self.push(out);
          } else {
            buffers.push(out);
            nread += out.length;
          }
        }

        // exhausted the output buffer, or used all the input create a new one.
        if (availOutAfter === 0 || self._offset >= self._chunkSize) {
          availOutBefore = self._chunkSize;
          self._offset = 0;
          self._buffer = new Buffer(self._chunkSize);
        }

        if (availOutAfter === 0) {
          // Not actually done.  Need to reprocess.
          // Also, update the availInBefore to the availInAfter value,
          // so that if we have to hit it a third (fourth, etc.) time,
          // it'll have the correct byte counts.
          inOff += (availInBefore - availInAfter);
          availInBefore = availInAfter;

          if (!async)
            return true;

          var newReq = self._binding.write(flushFlag,
                                           chunk,
                                           inOff,
                                           availInBefore,
                                           self._buffer,
                                           self._offset,
                                           self._chunkSize);
          newReq.callback = callback; // this same function
          newReq.buffer = chunk;
          return;
        }

        if (!async)
          return false;

        // finished with the chunk.
        cb();
      }
    };

    inherits$1(Deflate, Zlib);
    inherits$1(Inflate, Zlib);
    inherits$1(Gzip, Zlib);
    inherits$1(Gunzip, Zlib);
    inherits$1(DeflateRaw, Zlib);
    inherits$1(InflateRaw, Zlib);
    inherits$1(Unzip, Zlib);
    var _polyfillNode_zlib = {
      codes: codes,
      createDeflate: createDeflate,
      createInflate: createInflate,
      createDeflateRaw: createDeflateRaw,
      createInflateRaw: createInflateRaw,
      createGzip: createGzip,
      createGunzip: createGunzip,
      createUnzip: createUnzip,
      deflate: deflate,
      deflateSync: deflateSync,
      gzip: gzip,
      gzipSync: gzipSync,
      deflateRaw: deflateRaw,
      deflateRawSync: deflateRawSync,
      unzip: unzip,
      unzipSync: unzipSync,
      inflate: inflate,
      inflateSync: inflateSync,
      gunzip: gunzip,
      gunzipSync: gunzipSync,
      inflateRaw: inflateRaw,
      inflateRawSync: inflateRawSync,
      Deflate: Deflate,
      Inflate: Inflate,
      Gzip: Gzip,
      Gunzip: Gunzip,
      DeflateRaw: DeflateRaw,
      InflateRaw: InflateRaw,
      Unzip: Unzip,
      Zlib: Zlib
    };

    var _polyfillNode_zlib$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Deflate: Deflate,
        DeflateRaw: DeflateRaw,
        Gunzip: Gunzip,
        Gzip: Gzip,
        Inflate: Inflate,
        InflateRaw: InflateRaw,
        Unzip: Unzip,
        Zlib: Zlib,
        codes: codes,
        createDeflate: createDeflate,
        createDeflateRaw: createDeflateRaw,
        createGunzip: createGunzip,
        createGzip: createGzip,
        createInflate: createInflate,
        createInflateRaw: createInflateRaw,
        createUnzip: createUnzip,
        default: _polyfillNode_zlib,
        deflate: deflate,
        deflateRaw: deflateRaw,
        deflateRawSync: deflateRawSync,
        deflateSync: deflateSync,
        gunzip: gunzip,
        gunzipSync: gunzipSync,
        gzip: gzip,
        gzipSync: gzipSync,
        inflate: inflate,
        inflateRaw: inflateRaw,
        inflateRawSync: inflateRawSync,
        inflateSync: inflateSync,
        unzip: unzip,
        unzipSync: unzipSync
    });

    var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_zlib$1);

    var bufferUtil$1 = {exports: {}};

    var constants = {
      BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],
      EMPTY_BUFFER: Buffer.alloc(0),
      GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
      kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),
      kListener: Symbol('kListener'),
      kStatusCode: Symbol('status-code'),
      kWebSocket: Symbol('websocket'),
      NOOP: () => {}
    };

    var unmask$1;
    var mask;

    const { EMPTY_BUFFER: EMPTY_BUFFER$3 } = constants;

    const FastBuffer$2 = Buffer[Symbol.species];

    /**
     * Merges an array of buffers into a new buffer.
     *
     * @param {Buffer[]} list The array of buffers to concat
     * @param {Number} totalLength The total length of buffers in the list
     * @return {Buffer} The resulting buffer
     * @public
     */
    function concat$1(list, totalLength) {
      if (list.length === 0) return EMPTY_BUFFER$3;
      if (list.length === 1) return list[0];

      const target = Buffer.allocUnsafe(totalLength);
      let offset = 0;

      for (let i = 0; i < list.length; i++) {
        const buf = list[i];
        target.set(buf, offset);
        offset += buf.length;
      }

      if (offset < totalLength) {
        return new FastBuffer$2(target.buffer, target.byteOffset, offset);
      }

      return target;
    }

    /**
     * Masks a buffer using the given mask.
     *
     * @param {Buffer} source The buffer to mask
     * @param {Buffer} mask The mask to use
     * @param {Buffer} output The buffer where to store the result
     * @param {Number} offset The offset at which to start writing
     * @param {Number} length The number of bytes to mask.
     * @public
     */
    function _mask(source, mask, output, offset, length) {
      for (let i = 0; i < length; i++) {
        output[offset + i] = source[i] ^ mask[i & 3];
      }
    }

    /**
     * Unmasks a buffer using the given mask.
     *
     * @param {Buffer} buffer The buffer to unmask
     * @param {Buffer} mask The mask to use
     * @public
     */
    function _unmask(buffer, mask) {
      for (let i = 0; i < buffer.length; i++) {
        buffer[i] ^= mask[i & 3];
      }
    }

    /**
     * Converts a buffer to an `ArrayBuffer`.
     *
     * @param {Buffer} buf The buffer to convert
     * @return {ArrayBuffer} Converted buffer
     * @public
     */
    function toArrayBuffer$2(buf) {
      if (buf.length === buf.buffer.byteLength) {
        return buf.buffer;
      }

      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);
    }

    /**
     * Converts `data` to a `Buffer`.
     *
     * @param {*} data The data to convert
     * @return {Buffer} The buffer
     * @throws {TypeError}
     * @public
     */
    function toBuffer$2(data) {
      toBuffer$2.readOnly = true;

      if (Buffer.isBuffer(data)) return data;

      let buf;

      if (data instanceof ArrayBuffer) {
        buf = new FastBuffer$2(data);
      } else if (ArrayBuffer.isView(data)) {
        buf = new FastBuffer$2(data.buffer, data.byteOffset, data.byteLength);
      } else {
        buf = Buffer.from(data);
        toBuffer$2.readOnly = false;
      }

      return buf;
    }

    bufferUtil$1.exports = {
      concat: concat$1,
      mask: _mask,
      toArrayBuffer: toArrayBuffer$2,
      toBuffer: toBuffer$2,
      unmask: _unmask
    };

    /* istanbul ignore else  */
    if (!browser$1$1.env.WS_NO_BUFFER_UTIL) {
      try {
        const bufferUtil = require('bufferutil');

        mask = bufferUtil$1.exports.mask = function (source, mask, output, offset, length) {
          if (length < 48) _mask(source, mask, output, offset, length);
          else bufferUtil.mask(source, mask, output, offset, length);
        };

        unmask$1 = bufferUtil$1.exports.unmask = function (buffer, mask) {
          if (buffer.length < 32) _unmask(buffer, mask);
          else bufferUtil.unmask(buffer, mask);
        };
      } catch (e) {
        // Continue regardless of the error.
      }
    }

    var bufferUtilExports = bufferUtil$1.exports;

    const kDone = Symbol('kDone');
    const kRun = Symbol('kRun');

    /**
     * A very simple job queue with adjustable concurrency. Adapted from
     * https://github.com/STRML/async-limiter
     */
    let Limiter$1 = class Limiter {
      /**
       * Creates a new `Limiter`.
       *
       * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed
       *     to run concurrently
       */
      constructor(concurrency) {
        this[kDone] = () => {
          this.pending--;
          this[kRun]();
        };
        this.concurrency = concurrency || Infinity;
        this.jobs = [];
        this.pending = 0;
      }

      /**
       * Adds a job to the queue.
       *
       * @param {Function} job The job to run
       * @public
       */
      add(job) {
        this.jobs.push(job);
        this[kRun]();
      }

      /**
       * Removes a job from the queue and runs it if possible.
       *
       * @private
       */
      [kRun]() {
        if (this.pending === this.concurrency) return;

        if (this.jobs.length) {
          const job = this.jobs.shift();

          this.pending++;
          job(this[kDone]);
        }
      }
    };

    var limiter = Limiter$1;

    const zlib = require$$0$2;

    const bufferUtil = bufferUtilExports;
    const Limiter = limiter;
    const { kStatusCode: kStatusCode$2 } = constants;

    const FastBuffer$1 = Buffer[Symbol.species];
    const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
    const kPerMessageDeflate = Symbol('permessage-deflate');
    const kTotalLength = Symbol('total-length');
    const kCallback = Symbol('callback');
    const kBuffers = Symbol('buffers');
    const kError$1 = Symbol('error');

    //
    // We limit zlib concurrency, which prevents severe memory fragmentation
    // as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913
    // and https://github.com/websockets/ws/issues/1202
    //
    // Intentionally global; it's the global thread pool that's an issue.
    //
    let zlibLimiter;

    /**
     * permessage-deflate implementation.
     */
    let PerMessageDeflate$3 = class PerMessageDeflate {
      /**
       * Creates a PerMessageDeflate instance.
       *
       * @param {Object} [options] Configuration options
       * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support
       *     for, or request, a custom client window size
       * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/
       *     acknowledge disabling of client context takeover
       * @param {Number} [options.concurrencyLimit=10] The number of concurrent
       *     calls to zlib
       * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the
       *     use of a custom server window size
       * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept
       *     disabling of server context takeover
       * @param {Number} [options.threshold=1024] Size (in bytes) below which
       *     messages should not be compressed if context takeover is disabled
       * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on
       *     deflate
       * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on
       *     inflate
       * @param {Boolean} [isServer=false] Create the instance in either server or
       *     client mode
       * @param {Number} [maxPayload=0] The maximum allowed message length
       */
      constructor(options, isServer, maxPayload) {
        this._maxPayload = maxPayload | 0;
        this._options = options || {};
        this._threshold =
          this._options.threshold !== undefined ? this._options.threshold : 1024;
        this._isServer = !!isServer;
        this._deflate = null;
        this._inflate = null;

        this.params = null;

        if (!zlibLimiter) {
          const concurrency =
            this._options.concurrencyLimit !== undefined
              ? this._options.concurrencyLimit
              : 10;
          zlibLimiter = new Limiter(concurrency);
        }
      }

      /**
       * @type {String}
       */
      static get extensionName() {
        return 'permessage-deflate';
      }

      /**
       * Create an extension negotiation offer.
       *
       * @return {Object} Extension parameters
       * @public
       */
      offer() {
        const params = {};

        if (this._options.serverNoContextTakeover) {
          params.server_no_context_takeover = true;
        }
        if (this._options.clientNoContextTakeover) {
          params.client_no_context_takeover = true;
        }
        if (this._options.serverMaxWindowBits) {
          params.server_max_window_bits = this._options.serverMaxWindowBits;
        }
        if (this._options.clientMaxWindowBits) {
          params.client_max_window_bits = this._options.clientMaxWindowBits;
        } else if (this._options.clientMaxWindowBits == null) {
          params.client_max_window_bits = true;
        }

        return params;
      }

      /**
       * Accept an extension negotiation offer/response.
       *
       * @param {Array} configurations The extension negotiation offers/reponse
       * @return {Object} Accepted configuration
       * @public
       */
      accept(configurations) {
        configurations = this.normalizeParams(configurations);

        this.params = this._isServer
          ? this.acceptAsServer(configurations)
          : this.acceptAsClient(configurations);

        return this.params;
      }

      /**
       * Releases all resources used by the extension.
       *
       * @public
       */
      cleanup() {
        if (this._inflate) {
          this._inflate.close();
          this._inflate = null;
        }

        if (this._deflate) {
          const callback = this._deflate[kCallback];

          this._deflate.close();
          this._deflate = null;

          if (callback) {
            callback(
              new Error(
                'The deflate stream was closed while data was being processed'
              )
            );
          }
        }
      }

      /**
       *  Accept an extension negotiation offer.
       *
       * @param {Array} offers The extension negotiation offers
       * @return {Object} Accepted configuration
       * @private
       */
      acceptAsServer(offers) {
        const opts = this._options;
        const accepted = offers.find((params) => {
          if (
            (opts.serverNoContextTakeover === false &&
              params.server_no_context_takeover) ||
            (params.server_max_window_bits &&
              (opts.serverMaxWindowBits === false ||
                (typeof opts.serverMaxWindowBits === 'number' &&
                  opts.serverMaxWindowBits > params.server_max_window_bits))) ||
            (typeof opts.clientMaxWindowBits === 'number' &&
              !params.client_max_window_bits)
          ) {
            return false;
          }

          return true;
        });

        if (!accepted) {
          throw new Error('None of the extension offers can be accepted');
        }

        if (opts.serverNoContextTakeover) {
          accepted.server_no_context_takeover = true;
        }
        if (opts.clientNoContextTakeover) {
          accepted.client_no_context_takeover = true;
        }
        if (typeof opts.serverMaxWindowBits === 'number') {
          accepted.server_max_window_bits = opts.serverMaxWindowBits;
        }
        if (typeof opts.clientMaxWindowBits === 'number') {
          accepted.client_max_window_bits = opts.clientMaxWindowBits;
        } else if (
          accepted.client_max_window_bits === true ||
          opts.clientMaxWindowBits === false
        ) {
          delete accepted.client_max_window_bits;
        }

        return accepted;
      }

      /**
       * Accept the extension negotiation response.
       *
       * @param {Array} response The extension negotiation response
       * @return {Object} Accepted configuration
       * @private
       */
      acceptAsClient(response) {
        const params = response[0];

        if (
          this._options.clientNoContextTakeover === false &&
          params.client_no_context_takeover
        ) {
          throw new Error('Unexpected parameter "client_no_context_takeover"');
        }

        if (!params.client_max_window_bits) {
          if (typeof this._options.clientMaxWindowBits === 'number') {
            params.client_max_window_bits = this._options.clientMaxWindowBits;
          }
        } else if (
          this._options.clientMaxWindowBits === false ||
          (typeof this._options.clientMaxWindowBits === 'number' &&
            params.client_max_window_bits > this._options.clientMaxWindowBits)
        ) {
          throw new Error(
            'Unexpected or invalid parameter "client_max_window_bits"'
          );
        }

        return params;
      }

      /**
       * Normalize parameters.
       *
       * @param {Array} configurations The extension negotiation offers/reponse
       * @return {Array} The offers/response with normalized parameters
       * @private
       */
      normalizeParams(configurations) {
        configurations.forEach((params) => {
          Object.keys(params).forEach((key) => {
            let value = params[key];

            if (value.length > 1) {
              throw new Error(`Parameter "${key}" must have only a single value`);
            }

            value = value[0];

            if (key === 'client_max_window_bits') {
              if (value !== true) {
                const num = +value;
                if (!Number.isInteger(num) || num < 8 || num > 15) {
                  throw new TypeError(
                    `Invalid value for parameter "${key}": ${value}`
                  );
                }
                value = num;
              } else if (!this._isServer) {
                throw new TypeError(
                  `Invalid value for parameter "${key}": ${value}`
                );
              }
            } else if (key === 'server_max_window_bits') {
              const num = +value;
              if (!Number.isInteger(num) || num < 8 || num > 15) {
                throw new TypeError(
                  `Invalid value for parameter "${key}": ${value}`
                );
              }
              value = num;
            } else if (
              key === 'client_no_context_takeover' ||
              key === 'server_no_context_takeover'
            ) {
              if (value !== true) {
                throw new TypeError(
                  `Invalid value for parameter "${key}": ${value}`
                );
              }
            } else {
              throw new Error(`Unknown parameter "${key}"`);
            }

            params[key] = value;
          });
        });

        return configurations;
      }

      /**
       * Decompress data. Concurrency limited.
       *
       * @param {Buffer} data Compressed data
       * @param {Boolean} fin Specifies whether or not this is the last fragment
       * @param {Function} callback Callback
       * @public
       */
      decompress(data, fin, callback) {
        zlibLimiter.add((done) => {
          this._decompress(data, fin, (err, result) => {
            done();
            callback(err, result);
          });
        });
      }

      /**
       * Compress data. Concurrency limited.
       *
       * @param {(Buffer|String)} data Data to compress
       * @param {Boolean} fin Specifies whether or not this is the last fragment
       * @param {Function} callback Callback
       * @public
       */
      compress(data, fin, callback) {
        zlibLimiter.add((done) => {
          this._compress(data, fin, (err, result) => {
            done();
            callback(err, result);
          });
        });
      }

      /**
       * Decompress data.
       *
       * @param {Buffer} data Compressed data
       * @param {Boolean} fin Specifies whether or not this is the last fragment
       * @param {Function} callback Callback
       * @private
       */
      _decompress(data, fin, callback) {
        const endpoint = this._isServer ? 'client' : 'server';

        if (!this._inflate) {
          const key = `${endpoint}_max_window_bits`;
          const windowBits =
            typeof this.params[key] !== 'number'
              ? zlib.Z_DEFAULT_WINDOWBITS
              : this.params[key];

          this._inflate = zlib.createInflateRaw({
            ...this._options.zlibInflateOptions,
            windowBits
          });
          this._inflate[kPerMessageDeflate] = this;
          this._inflate[kTotalLength] = 0;
          this._inflate[kBuffers] = [];
          this._inflate.on('error', inflateOnError);
          this._inflate.on('data', inflateOnData);
        }

        this._inflate[kCallback] = callback;

        this._inflate.write(data);
        if (fin) this._inflate.write(TRAILER);

        this._inflate.flush(() => {
          const err = this._inflate[kError$1];

          if (err) {
            this._inflate.close();
            this._inflate = null;
            callback(err);
            return;
          }

          const data = bufferUtil.concat(
            this._inflate[kBuffers],
            this._inflate[kTotalLength]
          );

          if (this._inflate._readableState.endEmitted) {
            this._inflate.close();
            this._inflate = null;
          } else {
            this._inflate[kTotalLength] = 0;
            this._inflate[kBuffers] = [];

            if (fin && this.params[`${endpoint}_no_context_takeover`]) {
              this._inflate.reset();
            }
          }

          callback(null, data);
        });
      }

      /**
       * Compress data.
       *
       * @param {(Buffer|String)} data Data to compress
       * @param {Boolean} fin Specifies whether or not this is the last fragment
       * @param {Function} callback Callback
       * @private
       */
      _compress(data, fin, callback) {
        const endpoint = this._isServer ? 'server' : 'client';

        if (!this._deflate) {
          const key = `${endpoint}_max_window_bits`;
          const windowBits =
            typeof this.params[key] !== 'number'
              ? zlib.Z_DEFAULT_WINDOWBITS
              : this.params[key];

          this._deflate = zlib.createDeflateRaw({
            ...this._options.zlibDeflateOptions,
            windowBits
          });

          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];

          this._deflate.on('data', deflateOnData);
        }

        this._deflate[kCallback] = callback;

        this._deflate.write(data);
        this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
          if (!this._deflate) {
            //
            // The deflate stream was closed while data was being processed.
            //
            return;
          }

          let data = bufferUtil.concat(
            this._deflate[kBuffers],
            this._deflate[kTotalLength]
          );

          if (fin) {
            data = new FastBuffer$1(data.buffer, data.byteOffset, data.length - 4);
          }

          //
          // Ensure that the callback will not be called again in
          // `PerMessageDeflate#cleanup()`.
          //
          this._deflate[kCallback] = null;

          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];

          if (fin && this.params[`${endpoint}_no_context_takeover`]) {
            this._deflate.reset();
          }

          callback(null, data);
        });
      }
    };

    var permessageDeflate = PerMessageDeflate$3;

    /**
     * The listener of the `zlib.DeflateRaw` stream `'data'` event.
     *
     * @param {Buffer} chunk A chunk of data
     * @private
     */
    function deflateOnData(chunk) {
      this[kBuffers].push(chunk);
      this[kTotalLength] += chunk.length;
    }

    /**
     * The listener of the `zlib.InflateRaw` stream `'data'` event.
     *
     * @param {Buffer} chunk A chunk of data
     * @private
     */
    function inflateOnData(chunk) {
      this[kTotalLength] += chunk.length;

      if (
        this[kPerMessageDeflate]._maxPayload < 1 ||
        this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload
      ) {
        this[kBuffers].push(chunk);
        return;
      }

      this[kError$1] = new RangeError('Max payload size exceeded');
      this[kError$1].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';
      this[kError$1][kStatusCode$2] = 1009;
      this.removeListener('data', inflateOnData);
      this.reset();
    }

    /**
     * The listener of the `zlib.InflateRaw` stream `'error'` event.
     *
     * @param {Error} err The emitted error
     * @private
     */
    function inflateOnError(err) {
      //
      // There is no need to call `Zlib#close()` as the handle is automatically
      // closed when an error is emitted.
      //
      this[kPerMessageDeflate]._inflate = null;
      err[kStatusCode$2] = 1007;
      this[kCallback](err);
    }

    var validation = {exports: {}};

    var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_buffer);

    var isValidUTF8_1;

    const { isUtf8 } = require$$0$1;

    //
    // Allowed token characters:
    //
    // '!', '#', '$', '%', '&', ''', '*', '+', '-',
    // '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'
    //
    // tokenChars[32] === 0 // ' '
    // tokenChars[33] === 1 // '!'
    // tokenChars[34] === 0 // '"'
    // ...
    //
    // prettier-ignore
    const tokenChars$1 = [
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31
      0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127
    ];

    /**
     * Checks if a status code is allowed in a close frame.
     *
     * @param {Number} code The status code
     * @return {Boolean} `true` if the status code is valid, else `false`
     * @public
     */
    function isValidStatusCode$2(code) {
      return (
        (code >= 1000 &&
          code <= 1014 &&
          code !== 1004 &&
          code !== 1005 &&
          code !== 1006) ||
        (code >= 3000 && code <= 4999)
      );
    }

    /**
     * Checks if a given buffer contains only correct UTF-8.
     * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by
     * Markus Kuhn.
     *
     * @param {Buffer} buf The buffer to check
     * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`
     * @public
     */
    function _isValidUTF8(buf) {
      const len = buf.length;
      let i = 0;

      while (i < len) {
        if ((buf[i] & 0x80) === 0) {
          // 0xxxxxxx
          i++;
        } else if ((buf[i] & 0xe0) === 0xc0) {
          // 110xxxxx 10xxxxxx
          if (
            i + 1 === len ||
            (buf[i + 1] & 0xc0) !== 0x80 ||
            (buf[i] & 0xfe) === 0xc0 // Overlong
          ) {
            return false;
          }

          i += 2;
        } else if ((buf[i] & 0xf0) === 0xe0) {
          // 1110xxxx 10xxxxxx 10xxxxxx
          if (
            i + 2 >= len ||
            (buf[i + 1] & 0xc0) !== 0x80 ||
            (buf[i + 2] & 0xc0) !== 0x80 ||
            (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong
            (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)
          ) {
            return false;
          }

          i += 3;
        } else if ((buf[i] & 0xf8) === 0xf0) {
          // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
          if (
            i + 3 >= len ||
            (buf[i + 1] & 0xc0) !== 0x80 ||
            (buf[i + 2] & 0xc0) !== 0x80 ||
            (buf[i + 3] & 0xc0) !== 0x80 ||
            (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong
            (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||
            buf[i] > 0xf4 // > U+10FFFF
          ) {
            return false;
          }

          i += 4;
        } else {
          return false;
        }
      }

      return true;
    }

    validation.exports = {
      isValidStatusCode: isValidStatusCode$2,
      isValidUTF8: _isValidUTF8,
      tokenChars: tokenChars$1
    };

    if (isUtf8) {
      isValidUTF8_1 = validation.exports.isValidUTF8 = function (buf) {
        return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);
      };
    } /* istanbul ignore else  */ else if (!browser$1$1.env.WS_NO_UTF_8_VALIDATE) {
      try {
        const isValidUTF8 = require('utf-8-validate');

        isValidUTF8_1 = validation.exports.isValidUTF8 = function (buf) {
          return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);
        };
      } catch (e) {
        // Continue regardless of the error.
      }
    }

    var validationExports = validation.exports;

    const { Writable } = require$$6;

    const PerMessageDeflate$2 = permessageDeflate;
    const {
      BINARY_TYPES: BINARY_TYPES$1,
      EMPTY_BUFFER: EMPTY_BUFFER$2,
      kStatusCode: kStatusCode$1,
      kWebSocket: kWebSocket$1
    } = constants;
    const { concat, toArrayBuffer: toArrayBuffer$1, unmask } = bufferUtilExports;
    const { isValidStatusCode: isValidStatusCode$1, isValidUTF8 } = validationExports;

    const FastBuffer = Buffer[Symbol.species];
    const GET_INFO = 0;
    const GET_PAYLOAD_LENGTH_16 = 1;
    const GET_PAYLOAD_LENGTH_64 = 2;
    const GET_MASK = 3;
    const GET_DATA = 4;
    const INFLATING = 5;

    /**
     * HyBi Receiver implementation.
     *
     * @extends Writable
     */
    let Receiver$1 = class Receiver extends Writable {
      /**
       * Creates a Receiver instance.
       *
       * @param {Object} [options] Options object
       * @param {String} [options.binaryType=nodebuffer] The type for binary data
       * @param {Object} [options.extensions] An object containing the negotiated
       *     extensions
       * @param {Boolean} [options.isServer=false] Specifies whether to operate in
       *     client or server mode
       * @param {Number} [options.maxPayload=0] The maximum allowed message length
       * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
       *     not to skip UTF-8 validation for text and close messages
       */
      constructor(options = {}) {
        super();

        this._binaryType = options.binaryType || BINARY_TYPES$1[0];
        this._extensions = options.extensions || {};
        this._isServer = !!options.isServer;
        this._maxPayload = options.maxPayload | 0;
        this._skipUTF8Validation = !!options.skipUTF8Validation;
        this[kWebSocket$1] = undefined;

        this._bufferedBytes = 0;
        this._buffers = [];

        this._compressed = false;
        this._payloadLength = 0;
        this._mask = undefined;
        this._fragmented = 0;
        this._masked = false;
        this._fin = false;
        this._opcode = 0;

        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragments = [];

        this._state = GET_INFO;
        this._loop = false;
      }

      /**
       * Implements `Writable.prototype._write()`.
       *
       * @param {Buffer} chunk The chunk of data to write
       * @param {String} encoding The character encoding of `chunk`
       * @param {Function} cb Callback
       * @private
       */
      _write(chunk, encoding, cb) {
        if (this._opcode === 0x08 && this._state == GET_INFO) return cb();

        this._bufferedBytes += chunk.length;
        this._buffers.push(chunk);
        this.startLoop(cb);
      }

      /**
       * Consumes `n` bytes from the buffered data.
       *
       * @param {Number} n The number of bytes to consume
       * @return {Buffer} The consumed bytes
       * @private
       */
      consume(n) {
        this._bufferedBytes -= n;

        if (n === this._buffers[0].length) return this._buffers.shift();

        if (n < this._buffers[0].length) {
          const buf = this._buffers[0];
          this._buffers[0] = new FastBuffer(
            buf.buffer,
            buf.byteOffset + n,
            buf.length - n
          );

          return new FastBuffer(buf.buffer, buf.byteOffset, n);
        }

        const dst = Buffer.allocUnsafe(n);

        do {
          const buf = this._buffers[0];
          const offset = dst.length - n;

          if (n >= buf.length) {
            dst.set(this._buffers.shift(), offset);
          } else {
            dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
            this._buffers[0] = new FastBuffer(
              buf.buffer,
              buf.byteOffset + n,
              buf.length - n
            );
          }

          n -= buf.length;
        } while (n > 0);

        return dst;
      }

      /**
       * Starts the parsing loop.
       *
       * @param {Function} cb Callback
       * @private
       */
      startLoop(cb) {
        let err;
        this._loop = true;

        do {
          switch (this._state) {
            case GET_INFO:
              err = this.getInfo();
              break;
            case GET_PAYLOAD_LENGTH_16:
              err = this.getPayloadLength16();
              break;
            case GET_PAYLOAD_LENGTH_64:
              err = this.getPayloadLength64();
              break;
            case GET_MASK:
              this.getMask();
              break;
            case GET_DATA:
              err = this.getData(cb);
              break;
            default:
              // `INFLATING`
              this._loop = false;
              return;
          }
        } while (this._loop);

        cb(err);
      }

      /**
       * Reads the first two bytes of a frame.
       *
       * @return {(RangeError|undefined)} A possible error
       * @private
       */
      getInfo() {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }

        const buf = this.consume(2);

        if ((buf[0] & 0x30) !== 0x00) {
          this._loop = false;
          return error$1(
            RangeError,
            'RSV2 and RSV3 must be clear',
            true,
            1002,
            'WS_ERR_UNEXPECTED_RSV_2_3'
          );
        }

        const compressed = (buf[0] & 0x40) === 0x40;

        if (compressed && !this._extensions[PerMessageDeflate$2.extensionName]) {
          this._loop = false;
          return error$1(
            RangeError,
            'RSV1 must be clear',
            true,
            1002,
            'WS_ERR_UNEXPECTED_RSV_1'
          );
        }

        this._fin = (buf[0] & 0x80) === 0x80;
        this._opcode = buf[0] & 0x0f;
        this._payloadLength = buf[1] & 0x7f;

        if (this._opcode === 0x00) {
          if (compressed) {
            this._loop = false;
            return error$1(
              RangeError,
              'RSV1 must be clear',
              true,
              1002,
              'WS_ERR_UNEXPECTED_RSV_1'
            );
          }

          if (!this._fragmented) {
            this._loop = false;
            return error$1(
              RangeError,
              'invalid opcode 0',
              true,
              1002,
              'WS_ERR_INVALID_OPCODE'
            );
          }

          this._opcode = this._fragmented;
        } else if (this._opcode === 0x01 || this._opcode === 0x02) {
          if (this._fragmented) {
            this._loop = false;
            return error$1(
              RangeError,
              `invalid opcode ${this._opcode}`,
              true,
              1002,
              'WS_ERR_INVALID_OPCODE'
            );
          }

          this._compressed = compressed;
        } else if (this._opcode > 0x07 && this._opcode < 0x0b) {
          if (!this._fin) {
            this._loop = false;
            return error$1(
              RangeError,
              'FIN must be set',
              true,
              1002,
              'WS_ERR_EXPECTED_FIN'
            );
          }

          if (compressed) {
            this._loop = false;
            return error$1(
              RangeError,
              'RSV1 must be clear',
              true,
              1002,
              'WS_ERR_UNEXPECTED_RSV_1'
            );
          }

          if (
            this._payloadLength > 0x7d ||
            (this._opcode === 0x08 && this._payloadLength === 1)
          ) {
            this._loop = false;
            return error$1(
              RangeError,
              `invalid payload length ${this._payloadLength}`,
              true,
              1002,
              'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'
            );
          }
        } else {
          this._loop = false;
          return error$1(
            RangeError,
            `invalid opcode ${this._opcode}`,
            true,
            1002,
            'WS_ERR_INVALID_OPCODE'
          );
        }

        if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
        this._masked = (buf[1] & 0x80) === 0x80;

        if (this._isServer) {
          if (!this._masked) {
            this._loop = false;
            return error$1(
              RangeError,
              'MASK must be set',
              true,
              1002,
              'WS_ERR_EXPECTED_MASK'
            );
          }
        } else if (this._masked) {
          this._loop = false;
          return error$1(
            RangeError,
            'MASK must be clear',
            true,
            1002,
            'WS_ERR_UNEXPECTED_MASK'
          );
        }

        if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;
        else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;
        else return this.haveLength();
      }

      /**
       * Gets extended payload length (7+16).
       *
       * @return {(RangeError|undefined)} A possible error
       * @private
       */
      getPayloadLength16() {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }

        this._payloadLength = this.consume(2).readUInt16BE(0);
        return this.haveLength();
      }

      /**
       * Gets extended payload length (7+64).
       *
       * @return {(RangeError|undefined)} A possible error
       * @private
       */
      getPayloadLength64() {
        if (this._bufferedBytes < 8) {
          this._loop = false;
          return;
        }

        const buf = this.consume(8);
        const num = buf.readUInt32BE(0);

        //
        // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned
        // if payload length is greater than this number.
        //
        if (num > Math.pow(2, 53 - 32) - 1) {
          this._loop = false;
          return error$1(
            RangeError,
            'Unsupported WebSocket frame: payload length > 2^53 - 1',
            false,
            1009,
            'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'
          );
        }

        this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
        return this.haveLength();
      }

      /**
       * Payload length has been read.
       *
       * @return {(RangeError|undefined)} A possible error
       * @private
       */
      haveLength() {
        if (this._payloadLength && this._opcode < 0x08) {
          this._totalPayloadLength += this._payloadLength;
          if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
            this._loop = false;
            return error$1(
              RangeError,
              'Max payload size exceeded',
              false,
              1009,
              'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'
            );
          }
        }

        if (this._masked) this._state = GET_MASK;
        else this._state = GET_DATA;
      }

      /**
       * Reads mask bytes.
       *
       * @private
       */
      getMask() {
        if (this._bufferedBytes < 4) {
          this._loop = false;
          return;
        }

        this._mask = this.consume(4);
        this._state = GET_DATA;
      }

      /**
       * Reads data bytes.
       *
       * @param {Function} cb Callback
       * @return {(Error|RangeError|undefined)} A possible error
       * @private
       */
      getData(cb) {
        let data = EMPTY_BUFFER$2;

        if (this._payloadLength) {
          if (this._bufferedBytes < this._payloadLength) {
            this._loop = false;
            return;
          }

          data = this.consume(this._payloadLength);

          if (
            this._masked &&
            (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0
          ) {
            unmask(data, this._mask);
          }
        }

        if (this._opcode > 0x07) return this.controlMessage(data);

        if (this._compressed) {
          this._state = INFLATING;
          this.decompress(data, cb);
          return;
        }

        if (data.length) {
          //
          // This message is not compressed so its length is the sum of the payload
          // length of all fragments.
          //
          this._messageLength = this._totalPayloadLength;
          this._fragments.push(data);
        }

        return this.dataMessage();
      }

      /**
       * Decompresses data.
       *
       * @param {Buffer} data Compressed data
       * @param {Function} cb Callback
       * @private
       */
      decompress(data, cb) {
        const perMessageDeflate = this._extensions[PerMessageDeflate$2.extensionName];

        perMessageDeflate.decompress(data, this._fin, (err, buf) => {
          if (err) return cb(err);

          if (buf.length) {
            this._messageLength += buf.length;
            if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
              return cb(
                error$1(
                  RangeError,
                  'Max payload size exceeded',
                  false,
                  1009,
                  'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'
                )
              );
            }

            this._fragments.push(buf);
          }

          const er = this.dataMessage();
          if (er) return cb(er);

          this.startLoop(cb);
        });
      }

      /**
       * Handles a data message.
       *
       * @return {(Error|undefined)} A possible error
       * @private
       */
      dataMessage() {
        if (this._fin) {
          const messageLength = this._messageLength;
          const fragments = this._fragments;

          this._totalPayloadLength = 0;
          this._messageLength = 0;
          this._fragmented = 0;
          this._fragments = [];

          if (this._opcode === 2) {
            let data;

            if (this._binaryType === 'nodebuffer') {
              data = concat(fragments, messageLength);
            } else if (this._binaryType === 'arraybuffer') {
              data = toArrayBuffer$1(concat(fragments, messageLength));
            } else {
              data = fragments;
            }

            this.emit('message', data, true);
          } else {
            const buf = concat(fragments, messageLength);

            if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
              this._loop = false;
              return error$1(
                Error,
                'invalid UTF-8 sequence',
                true,
                1007,
                'WS_ERR_INVALID_UTF8'
              );
            }

            this.emit('message', buf, false);
          }
        }

        this._state = GET_INFO;
      }

      /**
       * Handles a control message.
       *
       * @param {Buffer} data Data to handle
       * @return {(Error|RangeError|undefined)} A possible error
       * @private
       */
      controlMessage(data) {
        if (this._opcode === 0x08) {
          this._loop = false;

          if (data.length === 0) {
            this.emit('conclude', 1005, EMPTY_BUFFER$2);
            this.end();
          } else {
            const code = data.readUInt16BE(0);

            if (!isValidStatusCode$1(code)) {
              return error$1(
                RangeError,
                `invalid status code ${code}`,
                true,
                1002,
                'WS_ERR_INVALID_CLOSE_CODE'
              );
            }

            const buf = new FastBuffer(
              data.buffer,
              data.byteOffset + 2,
              data.length - 2
            );

            if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
              return error$1(
                Error,
                'invalid UTF-8 sequence',
                true,
                1007,
                'WS_ERR_INVALID_UTF8'
              );
            }

            this.emit('conclude', code, buf);
            this.end();
          }
        } else if (this._opcode === 0x09) {
          this.emit('ping', data);
        } else {
          this.emit('pong', data);
        }

        this._state = GET_INFO;
      }
    };

    var receiver = Receiver$1;

    /**
     * Builds an error object.
     *
     * @param {function(new:Error|RangeError)} ErrorCtor The error constructor
     * @param {String} message The error message
     * @param {Boolean} prefix Specifies whether or not to add a default prefix to
     *     `message`
     * @param {Number} statusCode The status code
     * @param {String} errorCode The exposed error code
     * @return {(Error|RangeError)} The error
     * @private
     */
    function error$1(ErrorCtor, message, prefix, statusCode, errorCode) {
      const err = new ErrorCtor(
        prefix ? `Invalid WebSocket frame: ${message}` : message
      );

      Error.captureStackTrace(err, error$1);
      err.code = errorCode;
      err[kStatusCode$1] = statusCode;
      return err;
    }

    var _polyfillNode_net = {};

    var _polyfillNode_net$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        default: _polyfillNode_net
    });

    var require$$3 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_net$1);

    var _polyfillNode_tls = {};

    var _polyfillNode_tls$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        default: _polyfillNode_tls
    });

    var require$$4 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_tls$1);

    const { randomFillSync } = require$$5;

    const PerMessageDeflate$1 = permessageDeflate;
    const { EMPTY_BUFFER: EMPTY_BUFFER$1 } = constants;
    const { isValidStatusCode } = validationExports;
    const { mask: applyMask, toBuffer: toBuffer$1 } = bufferUtilExports;

    const kByteLength = Symbol('kByteLength');
    const maskBuffer = Buffer.alloc(4);

    /**
     * HyBi Sender implementation.
     */
    let Sender$1 = class Sender {
      /**
       * Creates a Sender instance.
       *
       * @param {(net.Socket|tls.Socket)} socket The connection socket
       * @param {Object} [extensions] An object containing the negotiated extensions
       * @param {Function} [generateMask] The function used to generate the masking
       *     key
       */
      constructor(socket, extensions, generateMask) {
        this._extensions = extensions || {};

        if (generateMask) {
          this._generateMask = generateMask;
          this._maskBuffer = Buffer.alloc(4);
        }

        this._socket = socket;

        this._firstFragment = true;
        this._compress = false;

        this._bufferedBytes = 0;
        this._deflating = false;
        this._queue = [];
      }

      /**
       * Frames a piece of data according to the HyBi WebSocket protocol.
       *
       * @param {(Buffer|String)} data The data to frame
       * @param {Object} options Options object
       * @param {Boolean} [options.fin=false] Specifies whether or not to set the
       *     FIN bit
       * @param {Function} [options.generateMask] The function used to generate the
       *     masking key
       * @param {Boolean} [options.mask=false] Specifies whether or not to mask
       *     `data`
       * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
       *     key
       * @param {Number} options.opcode The opcode
       * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
       *     modified
       * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
       *     RSV1 bit
       * @return {(Buffer|String)[]} The framed data
       * @public
       */
      static frame(data, options) {
        let mask;
        let merge = false;
        let offset = 2;
        let skipMasking = false;

        if (options.mask) {
          mask = options.maskBuffer || maskBuffer;

          if (options.generateMask) {
            options.generateMask(mask);
          } else {
            randomFillSync(mask, 0, 4);
          }

          skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;
          offset = 6;
        }

        let dataLength;

        if (typeof data === 'string') {
          if (
            (!options.mask || skipMasking) &&
            options[kByteLength] !== undefined
          ) {
            dataLength = options[kByteLength];
          } else {
            data = Buffer.from(data);
            dataLength = data.length;
          }
        } else {
          dataLength = data.length;
          merge = options.mask && options.readOnly && !skipMasking;
        }

        let payloadLength = dataLength;

        if (dataLength >= 65536) {
          offset += 8;
          payloadLength = 127;
        } else if (dataLength > 125) {
          offset += 2;
          payloadLength = 126;
        }

        const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);

        target[0] = options.fin ? options.opcode | 0x80 : options.opcode;
        if (options.rsv1) target[0] |= 0x40;

        target[1] = payloadLength;

        if (payloadLength === 126) {
          target.writeUInt16BE(dataLength, 2);
        } else if (payloadLength === 127) {
          target[2] = target[3] = 0;
          target.writeUIntBE(dataLength, 4, 6);
        }

        if (!options.mask) return [target, data];

        target[1] |= 0x80;
        target[offset - 4] = mask[0];
        target[offset - 3] = mask[1];
        target[offset - 2] = mask[2];
        target[offset - 1] = mask[3];

        if (skipMasking) return [target, data];

        if (merge) {
          applyMask(data, mask, target, offset, dataLength);
          return [target];
        }

        applyMask(data, mask, data, 0, dataLength);
        return [target, data];
      }

      /**
       * Sends a close message to the other peer.
       *
       * @param {Number} [code] The status code component of the body
       * @param {(String|Buffer)} [data] The message component of the body
       * @param {Boolean} [mask=false] Specifies whether or not to mask the message
       * @param {Function} [cb] Callback
       * @public
       */
      close(code, data, mask, cb) {
        let buf;

        if (code === undefined) {
          buf = EMPTY_BUFFER$1;
        } else if (typeof code !== 'number' || !isValidStatusCode(code)) {
          throw new TypeError('First argument must be a valid error code number');
        } else if (data === undefined || !data.length) {
          buf = Buffer.allocUnsafe(2);
          buf.writeUInt16BE(code, 0);
        } else {
          const length = Buffer.byteLength(data);

          if (length > 123) {
            throw new RangeError('The message must not be greater than 123 bytes');
          }

          buf = Buffer.allocUnsafe(2 + length);
          buf.writeUInt16BE(code, 0);

          if (typeof data === 'string') {
            buf.write(data, 2);
          } else {
            buf.set(data, 2);
          }
        }

        const options = {
          [kByteLength]: buf.length,
          fin: true,
          generateMask: this._generateMask,
          mask,
          maskBuffer: this._maskBuffer,
          opcode: 0x08,
          readOnly: false,
          rsv1: false
        };

        if (this._deflating) {
          this.enqueue([this.dispatch, buf, false, options, cb]);
        } else {
          this.sendFrame(Sender.frame(buf, options), cb);
        }
      }

      /**
       * Sends a ping message to the other peer.
       *
       * @param {*} data The message to send
       * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
       * @param {Function} [cb] Callback
       * @public
       */
      ping(data, mask, cb) {
        let byteLength;
        let readOnly;

        if (typeof data === 'string') {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else {
          data = toBuffer$1(data);
          byteLength = data.length;
          readOnly = toBuffer$1.readOnly;
        }

        if (byteLength > 125) {
          throw new RangeError('The data size must not be greater than 125 bytes');
        }

        const options = {
          [kByteLength]: byteLength,
          fin: true,
          generateMask: this._generateMask,
          mask,
          maskBuffer: this._maskBuffer,
          opcode: 0x09,
          readOnly,
          rsv1: false
        };

        if (this._deflating) {
          this.enqueue([this.dispatch, data, false, options, cb]);
        } else {
          this.sendFrame(Sender.frame(data, options), cb);
        }
      }

      /**
       * Sends a pong message to the other peer.
       *
       * @param {*} data The message to send
       * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
       * @param {Function} [cb] Callback
       * @public
       */
      pong(data, mask, cb) {
        let byteLength;
        let readOnly;

        if (typeof data === 'string') {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else {
          data = toBuffer$1(data);
          byteLength = data.length;
          readOnly = toBuffer$1.readOnly;
        }

        if (byteLength > 125) {
          throw new RangeError('The data size must not be greater than 125 bytes');
        }

        const options = {
          [kByteLength]: byteLength,
          fin: true,
          generateMask: this._generateMask,
          mask,
          maskBuffer: this._maskBuffer,
          opcode: 0x0a,
          readOnly,
          rsv1: false
        };

        if (this._deflating) {
          this.enqueue([this.dispatch, data, false, options, cb]);
        } else {
          this.sendFrame(Sender.frame(data, options), cb);
        }
      }

      /**
       * Sends a data message to the other peer.
       *
       * @param {*} data The message to send
       * @param {Object} options Options object
       * @param {Boolean} [options.binary=false] Specifies whether `data` is binary
       *     or text
       * @param {Boolean} [options.compress=false] Specifies whether or not to
       *     compress `data`
       * @param {Boolean} [options.fin=false] Specifies whether the fragment is the
       *     last one
       * @param {Boolean} [options.mask=false] Specifies whether or not to mask
       *     `data`
       * @param {Function} [cb] Callback
       * @public
       */
      send(data, options, cb) {
        const perMessageDeflate = this._extensions[PerMessageDeflate$1.extensionName];
        let opcode = options.binary ? 2 : 1;
        let rsv1 = options.compress;

        let byteLength;
        let readOnly;

        if (typeof data === 'string') {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else {
          data = toBuffer$1(data);
          byteLength = data.length;
          readOnly = toBuffer$1.readOnly;
        }

        if (this._firstFragment) {
          this._firstFragment = false;
          if (
            rsv1 &&
            perMessageDeflate &&
            perMessageDeflate.params[
              perMessageDeflate._isServer
                ? 'server_no_context_takeover'
                : 'client_no_context_takeover'
            ]
          ) {
            rsv1 = byteLength >= perMessageDeflate._threshold;
          }
          this._compress = rsv1;
        } else {
          rsv1 = false;
          opcode = 0;
        }

        if (options.fin) this._firstFragment = true;

        if (perMessageDeflate) {
          const opts = {
            [kByteLength]: byteLength,
            fin: options.fin,
            generateMask: this._generateMask,
            mask: options.mask,
            maskBuffer: this._maskBuffer,
            opcode,
            readOnly,
            rsv1
          };

          if (this._deflating) {
            this.enqueue([this.dispatch, data, this._compress, opts, cb]);
          } else {
            this.dispatch(data, this._compress, opts, cb);
          }
        } else {
          this.sendFrame(
            Sender.frame(data, {
              [kByteLength]: byteLength,
              fin: options.fin,
              generateMask: this._generateMask,
              mask: options.mask,
              maskBuffer: this._maskBuffer,
              opcode,
              readOnly,
              rsv1: false
            }),
            cb
          );
        }
      }

      /**
       * Dispatches a message.
       *
       * @param {(Buffer|String)} data The message to send
       * @param {Boolean} [compress=false] Specifies whether or not to compress
       *     `data`
       * @param {Object} options Options object
       * @param {Boolean} [options.fin=false] Specifies whether or not to set the
       *     FIN bit
       * @param {Function} [options.generateMask] The function used to generate the
       *     masking key
       * @param {Boolean} [options.mask=false] Specifies whether or not to mask
       *     `data`
       * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
       *     key
       * @param {Number} options.opcode The opcode
       * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
       *     modified
       * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
       *     RSV1 bit
       * @param {Function} [cb] Callback
       * @private
       */
      dispatch(data, compress, options, cb) {
        if (!compress) {
          this.sendFrame(Sender.frame(data, options), cb);
          return;
        }

        const perMessageDeflate = this._extensions[PerMessageDeflate$1.extensionName];

        this._bufferedBytes += options[kByteLength];
        this._deflating = true;
        perMessageDeflate.compress(data, options.fin, (_, buf) => {
          if (this._socket.destroyed) {
            const err = new Error(
              'The socket was closed while data was being compressed'
            );

            if (typeof cb === 'function') cb(err);

            for (let i = 0; i < this._queue.length; i++) {
              const params = this._queue[i];
              const callback = params[params.length - 1];

              if (typeof callback === 'function') callback(err);
            }

            return;
          }

          this._bufferedBytes -= options[kByteLength];
          this._deflating = false;
          options.readOnly = false;
          this.sendFrame(Sender.frame(buf, options), cb);
          this.dequeue();
        });
      }

      /**
       * Executes queued send operations.
       *
       * @private
       */
      dequeue() {
        while (!this._deflating && this._queue.length) {
          const params = this._queue.shift();

          this._bufferedBytes -= params[3][kByteLength];
          Reflect.apply(params[0], this, params.slice(1));
        }
      }

      /**
       * Enqueues a send operation.
       *
       * @param {Array} params Send operation parameters.
       * @private
       */
      enqueue(params) {
        this._bufferedBytes += params[3][kByteLength];
        this._queue.push(params);
      }

      /**
       * Sends a frame.
       *
       * @param {Buffer[]} list The frame to send
       * @param {Function} [cb] Callback
       * @private
       */
      sendFrame(list, cb) {
        if (list.length === 2) {
          this._socket.cork();
          this._socket.write(list[0]);
          this._socket.write(list[1], cb);
          this._socket.uncork();
        } else {
          this._socket.write(list[0], cb);
        }
      }
    };

    var sender = Sender$1;

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_events);

    var hasFetch = isFunction(global$1.fetch) && isFunction(global$1.ReadableStream);

    var _blobConstructor;
    function blobConstructor() {
      if (typeof _blobConstructor !== 'undefined') {
        return _blobConstructor;
      }
      try {
        new global$1.Blob([new ArrayBuffer(1)]);
        _blobConstructor = true;
      } catch (e) {
        _blobConstructor = false;
      }
      return _blobConstructor
    }
    var xhr;

    function checkTypeSupport(type) {
      if (!xhr) {
        xhr = new global$1.XMLHttpRequest();
        // If location.host is empty, e.g. if this page/worker was loaded
        // from a Blob, then use example.com to avoid an error
        xhr.open('GET', global$1.location.host ? '/' : 'https://example.com');
      }
      try {
        xhr.responseType = type;
        return xhr.responseType === type
      } catch (e) {
        return false
      }

    }

    // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
    // Safari 7.1 appears to have fixed this bug.
    var haveArrayBuffer = typeof global$1.ArrayBuffer !== 'undefined';
    var haveSlice = haveArrayBuffer && isFunction(global$1.ArrayBuffer.prototype.slice);

    var arraybuffer = haveArrayBuffer && checkTypeSupport('arraybuffer');
      // These next two tests unavoidably show warnings in Chrome. Since fetch will always
      // be used if it's available, just return false for these to avoid the warnings.
    var msstream = !hasFetch && haveSlice && checkTypeSupport('ms-stream');
    var mozchunkedarraybuffer = !hasFetch && haveArrayBuffer &&
      checkTypeSupport('moz-chunked-arraybuffer');
    var overrideMimeType = isFunction(xhr.overrideMimeType);
    var vbArray = isFunction(global$1.VBArray);

    function isFunction(value) {
      return typeof value === 'function'
    }

    xhr = null; // Help gc

    var rStates = {
      UNSENT: 0,
      OPENED: 1,
      HEADERS_RECEIVED: 2,
      LOADING: 3,
      DONE: 4
    };
    function IncomingMessage(xhr, response, mode) {
      var self = this;
      Readable.call(self);

      self._mode = mode;
      self.headers = {};
      self.rawHeaders = [];
      self.trailers = {};
      self.rawTrailers = [];

      // Fake the 'close' event, but only once 'end' fires
      self.on('end', function() {
        // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
        browser$1.nextTick(function() {
          self.emit('close');
        });
      });
      var read;
      if (mode === 'fetch') {
        self._fetchResponse = response;

        self.url = response.url;
        self.statusCode = response.status;
        self.statusMessage = response.statusText;
          // backwards compatible version of for (<item> of <iterable>):
          // for (var <item>,_i,_it = <iterable>[Symbol.iterator](); <item> = (_i = _it.next()).value,!_i.done;)
        for (var header, _i, _it = response.headers[Symbol.iterator](); header = (_i = _it.next()).value, !_i.done;) {
          self.headers[header[0].toLowerCase()] = header[1];
          self.rawHeaders.push(header[0], header[1]);
        }

        // TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
        var reader = response.body.getReader();

        read = function () {
          reader.read().then(function(result) {
            if (self._destroyed)
              return
            if (result.done) {
              self.push(null);
              return
            }
            self.push(new Buffer(result.value));
            read();
          });
        };
        read();

      } else {
        self._xhr = xhr;
        self._pos = 0;

        self.url = xhr.responseURL;
        self.statusCode = xhr.status;
        self.statusMessage = xhr.statusText;
        var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
        headers.forEach(function(header) {
          var matches = header.match(/^([^:]+):\s*(.*)/);
          if (matches) {
            var key = matches[1].toLowerCase();
            if (key === 'set-cookie') {
              if (self.headers[key] === undefined) {
                self.headers[key] = [];
              }
              self.headers[key].push(matches[2]);
            } else if (self.headers[key] !== undefined) {
              self.headers[key] += ', ' + matches[2];
            } else {
              self.headers[key] = matches[2];
            }
            self.rawHeaders.push(matches[1], matches[2]);
          }
        });

        self._charset = 'x-user-defined';
        if (!overrideMimeType) {
          var mimeType = self.rawHeaders['mime-type'];
          if (mimeType) {
            var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
            if (charsetMatch) {
              self._charset = charsetMatch[1].toLowerCase();
            }
          }
          if (!self._charset)
            self._charset = 'utf-8'; // best guess
        }
      }
    }

    inherits$1(IncomingMessage, Readable);

    IncomingMessage.prototype._read = function() {};

    IncomingMessage.prototype._onXHRProgress = function() {
      var self = this;

      var xhr = self._xhr;

      var response = null;
      switch (self._mode) {
      case 'text:vbarray': // For IE9
        if (xhr.readyState !== rStates.DONE)
          break
        try {
          // This fails in IE8
          response = new global$1.VBArray(xhr.responseBody).toArray();
        } catch (e) {
          // pass
        }
        if (response !== null) {
          self.push(new Buffer(response));
          break
        }
        // Falls through in IE8
      case 'text':
        try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
          response = xhr.responseText;
        } catch (e) {
          self._mode = 'text:vbarray';
          break
        }
        if (response.length > self._pos) {
          var newData = response.substr(self._pos);
          if (self._charset === 'x-user-defined') {
            var buffer = new Buffer(newData.length);
            for (var i = 0; i < newData.length; i++)
              buffer[i] = newData.charCodeAt(i) & 0xff;

            self.push(buffer);
          } else {
            self.push(newData, self._charset);
          }
          self._pos = response.length;
        }
        break
      case 'arraybuffer':
        if (xhr.readyState !== rStates.DONE || !xhr.response)
          break
        response = xhr.response;
        self.push(new Buffer(new Uint8Array(response)));
        break
      case 'moz-chunked-arraybuffer': // take whole
        response = xhr.response;
        if (xhr.readyState !== rStates.LOADING || !response)
          break
        self.push(new Buffer(new Uint8Array(response)));
        break
      case 'ms-stream':
        response = xhr.response;
        if (xhr.readyState !== rStates.LOADING)
          break
        var reader = new global$1.MSStreamReader();
        reader.onprogress = function() {
          if (reader.result.byteLength > self._pos) {
            self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
            self._pos = reader.result.byteLength;
          }
        };
        reader.onload = function() {
          self.push(null);
        };
          // reader.onerror = ??? // TODO: this
        reader.readAsArrayBuffer(response);
        break
      }

      // The ms-stream case handles end separately in reader.onload()
      if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
        self.push(null);
      }
    };

    // from https://github.com/jhiesey/to-arraybuffer/blob/6502d9850e70ba7935a7df4ad86b358fc216f9f0/index.js

    function toArrayBuffer (buf) {
      // If the buffer is backed by a Uint8Array, a faster version will work
      if (buf instanceof Uint8Array) {
        // If the buffer isn't a subarray, return the underlying ArrayBuffer
        if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
          return buf.buffer
        } else if (typeof buf.buffer.slice === 'function') {
          // Otherwise we need to get a proper copy
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
        }
      }

      if (isBuffer$1(buf)) {
        // This is the slow version that will work with any Buffer
        // implementation (even in old browsers)
        var arrayCopy = new Uint8Array(buf.length);
        var len = buf.length;
        for (var i = 0; i < len; i++) {
          arrayCopy[i] = buf[i];
        }
        return arrayCopy.buffer
      } else {
        throw new Error('Argument must be a Buffer')
      }
    }

    function decideMode(preferBinary, useFetch) {
      if (hasFetch && useFetch) {
        return 'fetch'
      } else if (mozchunkedarraybuffer) {
        return 'moz-chunked-arraybuffer'
      } else if (msstream) {
        return 'ms-stream'
      } else if (arraybuffer && preferBinary) {
        return 'arraybuffer'
      } else if (vbArray && preferBinary) {
        return 'text:vbarray'
      } else {
        return 'text'
      }
    }

    function ClientRequest(opts) {
      var self = this;
      Writable$1.call(self);

      self._opts = opts;
      self._body = [];
      self._headers = {};
      if (opts.auth)
        self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));
      Object.keys(opts.headers).forEach(function(name) {
        self.setHeader(name, opts.headers[name]);
      });

      var preferBinary;
      var useFetch = true;
      if (opts.mode === 'disable-fetch') {
        // If the use of XHR should be preferred and includes preserving the 'content-type' header
        useFetch = false;
        preferBinary = true;
      } else if (opts.mode === 'prefer-streaming') {
        // If streaming is a high priority but binary compatibility and
        // the accuracy of the 'content-type' header aren't
        preferBinary = false;
      } else if (opts.mode === 'allow-wrong-content-type') {
        // If streaming is more important than preserving the 'content-type' header
        preferBinary = !overrideMimeType;
      } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
        // Use binary if text streaming may corrupt data or the content-type header, or for speed
        preferBinary = true;
      } else {
        throw new Error('Invalid value for opts.mode')
      }
      self._mode = decideMode(preferBinary, useFetch);

      self.on('finish', function() {
        self._onFinish();
      });
    }

    inherits$1(ClientRequest, Writable$1);
    // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
    var unsafeHeaders = [
      'accept-charset',
      'accept-encoding',
      'access-control-request-headers',
      'access-control-request-method',
      'connection',
      'content-length',
      'cookie',
      'cookie2',
      'date',
      'dnt',
      'expect',
      'host',
      'keep-alive',
      'origin',
      'referer',
      'te',
      'trailer',
      'transfer-encoding',
      'upgrade',
      'user-agent',
      'via'
    ];
    ClientRequest.prototype.setHeader = function(name, value) {
      var self = this;
      var lowerName = name.toLowerCase();
        // This check is not necessary, but it prevents warnings from browsers about setting unsafe
        // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
        // http-browserify did it, so I will too.
      if (unsafeHeaders.indexOf(lowerName) !== -1)
        return

      self._headers[lowerName] = {
        name: name,
        value: value
      };
    };

    ClientRequest.prototype.getHeader = function(name) {
      var self = this;
      return self._headers[name.toLowerCase()].value
    };

    ClientRequest.prototype.removeHeader = function(name) {
      var self = this;
      delete self._headers[name.toLowerCase()];
    };

    ClientRequest.prototype._onFinish = function() {
      var self = this;

      if (self._destroyed)
        return
      var opts = self._opts;

      var headersObj = self._headers;
      var body;
      if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH') {
        if (blobConstructor()) {
          body = new global$1.Blob(self._body.map(function(buffer) {
            return toArrayBuffer(buffer)
          }), {
            type: (headersObj['content-type'] || {}).value || ''
          });
        } else {
          // get utf8 string
          body = Buffer.concat(self._body).toString();
        }
      }

      if (self._mode === 'fetch') {
        var headers = Object.keys(headersObj).map(function(name) {
          return [headersObj[name].name, headersObj[name].value]
        });

        global$1.fetch(self._opts.url, {
          method: self._opts.method,
          headers: headers,
          body: body,
          mode: 'cors',
          credentials: opts.withCredentials ? 'include' : 'same-origin'
        }).then(function(response) {
          self._fetchResponse = response;
          self._connect();
        }, function(reason) {
          self.emit('error', reason);
        });
      } else {
        var xhr = self._xhr = new global$1.XMLHttpRequest();
        try {
          xhr.open(self._opts.method, self._opts.url, true);
        } catch (err) {
          browser$1.nextTick(function() {
            self.emit('error', err);
          });
          return
        }

        // Can't set responseType on really old browsers
        if ('responseType' in xhr)
          xhr.responseType = self._mode.split(':')[0];

        if ('withCredentials' in xhr)
          xhr.withCredentials = !!opts.withCredentials;

        if (self._mode === 'text' && 'overrideMimeType' in xhr)
          xhr.overrideMimeType('text/plain; charset=x-user-defined');

        Object.keys(headersObj).forEach(function(name) {
          xhr.setRequestHeader(headersObj[name].name, headersObj[name].value);
        });

        self._response = null;
        xhr.onreadystatechange = function() {
          switch (xhr.readyState) {
          case rStates.LOADING:
          case rStates.DONE:
            self._onXHRProgress();
            break
          }
        };
          // Necessary for streaming in Firefox, since xhr.response is ONLY defined
          // in onprogress, not in onreadystatechange with xhr.readyState = 3
        if (self._mode === 'moz-chunked-arraybuffer') {
          xhr.onprogress = function() {
            self._onXHRProgress();
          };
        }

        xhr.onerror = function() {
          if (self._destroyed)
            return
          self.emit('error', new Error('XHR error'));
        };

        try {
          xhr.send(body);
        } catch (err) {
          browser$1.nextTick(function() {
            self.emit('error', err);
          });
          return
        }
      }
    };

    /**
     * Checks if xhr.status is readable and non-zero, indicating no error.
     * Even though the spec says it should be available in readyState 3,
     * accessing it throws an exception in IE8
     */
    function statusValid(xhr) {
      try {
        var status = xhr.status;
        return (status !== null && status !== 0)
      } catch (e) {
        return false
      }
    }

    ClientRequest.prototype._onXHRProgress = function() {
      var self = this;

      if (!statusValid(self._xhr) || self._destroyed)
        return

      if (!self._response)
        self._connect();

      self._response._onXHRProgress();
    };

    ClientRequest.prototype._connect = function() {
      var self = this;

      if (self._destroyed)
        return

      self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode);
      self.emit('response', self._response);
    };

    ClientRequest.prototype._write = function(chunk, encoding, cb) {
      var self = this;

      self._body.push(chunk);
      cb();
    };

    ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function() {
      var self = this;
      self._destroyed = true;
      if (self._response)
        self._response._destroyed = true;
      if (self._xhr)
        self._xhr.abort();
        // Currently, there isn't a way to truly abort a fetch.
        // If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
    };

    ClientRequest.prototype.end = function(data, encoding, cb) {
      var self = this;
      if (typeof data === 'function') {
        cb = data;
        data = undefined;
      }

      Writable$1.prototype.end.call(self, data, encoding, cb);
    };

    ClientRequest.prototype.flushHeaders = function() {};
    ClientRequest.prototype.setTimeout = function() {};
    ClientRequest.prototype.setNoDelay = function() {};
    ClientRequest.prototype.setSocketKeepAlive = function() {};

    /*! https://mths.be/punycode v1.4.1 by @mathias */


    /** Highest positive signed 32-bit float value */
    var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

    /** Bootstring parameters */
    var base = 36;
    var tMin = 1;
    var tMax = 26;
    var skew = 38;
    var damp = 700;
    var initialBias = 72;
    var initialN = 128; // 0x80
    var delimiter = '-'; // '\x2D'
    var regexNonASCII = /[^\x20-\x7E]/; // unprintable ASCII chars + non-ASCII chars
    var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

    /** Error messages */
    var errors = {
      'overflow': 'Overflow: input needs wider integers to process',
      'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
      'invalid-input': 'Invalid input'
    };

    /** Convenience shortcuts */
    var baseMinusTMin = base - tMin;
    var floor = Math.floor;
    var stringFromCharCode = String.fromCharCode;

    /*--------------------------------------------------------------------------*/

    /**
     * A generic error utility function.
     * @private
     * @param {String} type The error type.
     * @returns {Error} Throws a `RangeError` with the applicable error message.
     */
    function error(type) {
      throw new RangeError(errors[type]);
    }

    /**
     * A generic `Array#map` utility function.
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} callback The function that gets called for every array
     * item.
     * @returns {Array} A new array of values returned by the callback function.
     */
    function map$1(array, fn) {
      var length = array.length;
      var result = [];
      while (length--) {
        result[length] = fn(array[length]);
      }
      return result;
    }

    /**
     * A simple `Array#map`-like wrapper to work with domain name strings or email
     * addresses.
     * @private
     * @param {String} domain The domain name or email address.
     * @param {Function} callback The function that gets called for every
     * character.
     * @returns {Array} A new string of characters returned by the callback
     * function.
     */
    function mapDomain(string, fn) {
      var parts = string.split('@');
      var result = '';
      if (parts.length > 1) {
        // In email addresses, only the domain name should be punycoded. Leave
        // the local part (i.e. everything up to `@`) intact.
        result = parts[0] + '@';
        string = parts[1];
      }
      // Avoid `split(regex)` for IE8 compatibility. See #17.
      string = string.replace(regexSeparators, '\x2E');
      var labels = string.split('.');
      var encoded = map$1(labels, fn).join('.');
      return result + encoded;
    }

    /**
     * Creates an array containing the numeric code points of each Unicode
     * character in the string. While JavaScript uses UCS-2 internally,
     * this function will convert a pair of surrogate halves (each of which
     * UCS-2 exposes as separate characters) into a single code point,
     * matching UTF-16.
     * @see `punycode.ucs2.encode`
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode.ucs2
     * @name decode
     * @param {String} string The Unicode input string (UCS-2).
     * @returns {Array} The new array of code points.
     */
    function ucs2decode(string) {
      var output = [],
        counter = 0,
        length = string.length,
        value,
        extra;
      while (counter < length) {
        value = string.charCodeAt(counter++);
        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
          // high surrogate, and there is a next character
          extra = string.charCodeAt(counter++);
          if ((extra & 0xFC00) == 0xDC00) { // low surrogate
            output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
          } else {
            // unmatched surrogate; only append this code unit, in case the next
            // code unit is the high surrogate of a surrogate pair
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }
      return output;
    }

    /**
     * Converts a digit/integer into a basic code point.
     * @see `basicToDigit()`
     * @private
     * @param {Number} digit The numeric value of a basic code point.
     * @returns {Number} The basic code point whose value (when used for
     * representing integers) is `digit`, which needs to be in the range
     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
     * used; else, the lowercase form is used. The behavior is undefined
     * if `flag` is non-zero and `digit` has no uppercase form.
     */
    function digitToBasic(digit, flag) {
      //  0..25 map to ASCII a..z or A..Z
      // 26..35 map to ASCII 0..9
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }

    /**
     * Bias adaptation function as per section 3.4 of RFC 3492.
     * https://tools.ietf.org/html/rfc3492#section-3.4
     * @private
     */
    function adapt(delta, numPoints, firstTime) {
      var k = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      for ( /* no initialization */ ; delta > baseMinusTMin * tMax >> 1; k += base) {
        delta = floor(delta / baseMinusTMin);
      }
      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }

    /**
     * Converts a string of Unicode symbols (e.g. a domain name label) to a
     * Punycode string of ASCII-only symbols.
     * @memberOf punycode
     * @param {String} input The string of Unicode symbols.
     * @returns {String} The resulting Punycode string of ASCII-only symbols.
     */
    function encode(input) {
      var n,
        delta,
        handledCPCount,
        basicLength,
        bias,
        j,
        m,
        q,
        k,
        t,
        currentValue,
        output = [],
        /** `inputLength` will hold the number of code points in `input`. */
        inputLength,
        /** Cached calculation results */
        handledCPCountPlusOne,
        baseMinusT,
        qMinusT;

      // Convert the input in UCS-2 to Unicode
      input = ucs2decode(input);

      // Cache the length
      inputLength = input.length;

      // Initialize the state
      n = initialN;
      delta = 0;
      bias = initialBias;

      // Handle the basic code points
      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];
        if (currentValue < 0x80) {
          output.push(stringFromCharCode(currentValue));
        }
      }

      handledCPCount = basicLength = output.length;

      // `handledCPCount` is the number of code points that have been handled;
      // `basicLength` is the number of basic code points.

      // Finish the basic string - if it is not empty - with a delimiter
      if (basicLength) {
        output.push(delimiter);
      }

      // Main encoding loop:
      while (handledCPCount < inputLength) {

        // All non-basic code points < n have been handled already. Find the next
        // larger one:
        for (m = maxInt, j = 0; j < inputLength; ++j) {
          currentValue = input[j];
          if (currentValue >= n && currentValue < m) {
            m = currentValue;
          }
        }

        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
        // but guard against overflow
        handledCPCountPlusOne = handledCPCount + 1;
        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error('overflow');
        }

        delta += (m - n) * handledCPCountPlusOne;
        n = m;

        for (j = 0; j < inputLength; ++j) {
          currentValue = input[j];

          if (currentValue < n && ++delta > maxInt) {
            error('overflow');
          }

          if (currentValue == n) {
            // Represent delta as a generalized variable-length integer
            for (q = delta, k = base; /* no condition */ ; k += base) {
              t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
              if (q < t) {
                break;
              }
              qMinusT = q - t;
              baseMinusT = base - t;
              output.push(
                stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
              );
              q = floor(qMinusT / baseMinusT);
            }

            output.push(stringFromCharCode(digitToBasic(q, 0)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
            delta = 0;
            ++handledCPCount;
          }
        }

        ++delta;
        ++n;

      }
      return output.join('');
    }

    /**
     * Converts a Unicode string representing a domain name or an email address to
     * Punycode. Only the non-ASCII parts of the domain name will be converted,
     * i.e. it doesn't matter if you call it with a domain that's already in
     * ASCII.
     * @memberOf punycode
     * @param {String} input The domain name or email address to convert, as a
     * Unicode string.
     * @returns {String} The Punycode representation of the given domain name or
     * email address.
     */
    function toASCII(input) {
      return mapDomain(input, function(string) {
        return regexNonASCII.test(string) ?
          'xn--' + encode(string) :
          string;
      });
    }

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.


    // If obj.hasOwnProperty has been overridden, then calling
    // obj.hasOwnProperty(prop) will break.
    // See: https://github.com/joyent/node/issues/1707
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var isArray = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
    };
    function stringifyPrimitive(v) {
      switch (typeof v) {
        case 'string':
          return v;

        case 'boolean':
          return v ? 'true' : 'false';

        case 'number':
          return isFinite(v) ? v : '';

        default:
          return '';
      }
    }

    function stringify (obj, sep, eq, name) {
      sep = sep || '&';
      eq = eq || '=';
      if (obj === null) {
        obj = undefined;
      }

      if (typeof obj === 'object') {
        return map(objectKeys(obj), function(k) {
          var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
          if (isArray(obj[k])) {
            return map(obj[k], function(v) {
              return ks + encodeURIComponent(stringifyPrimitive(v));
            }).join(sep);
          } else {
            return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
          }
        }).join(sep);

      }

      if (!name) return '';
      return encodeURIComponent(stringifyPrimitive(name)) + eq +
             encodeURIComponent(stringifyPrimitive(obj));
    }
    function map (xs, f) {
      if (xs.map) return xs.map(f);
      var res = [];
      for (var i = 0; i < xs.length; i++) {
        res.push(f(xs[i], i));
      }
      return res;
    }

    var objectKeys = Object.keys || function (obj) {
      var res = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
      }
      return res;
    };

    function parse$3(qs, sep, eq, options) {
      sep = sep || '&';
      eq = eq || '=';
      var obj = {};

      if (typeof qs !== 'string' || qs.length === 0) {
        return obj;
      }

      var regexp = /\+/g;
      qs = qs.split(sep);

      var maxKeys = 1000;
      if (options && typeof options.maxKeys === 'number') {
        maxKeys = options.maxKeys;
      }

      var len = qs.length;
      // maxKeys <= 0 means that we should not limit keys count
      if (maxKeys > 0 && len > maxKeys) {
        len = maxKeys;
      }

      for (var i = 0; i < len; ++i) {
        var x = qs[i].replace(regexp, '%20'),
            idx = x.indexOf(eq),
            kstr, vstr, k, v;

        if (idx >= 0) {
          kstr = x.substr(0, idx);
          vstr = x.substr(idx + 1);
        } else {
          kstr = x;
          vstr = '';
        }

        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);

        if (!hasOwnProperty(obj, k)) {
          obj[k] = v;
        } else if (isArray(obj[k])) {
          obj[k].push(v);
        } else {
          obj[k] = [obj[k], v];
        }
      }

      return obj;
    }

    // WHATWG API
    const URL$1 = global$1.URL;
    const URLSearchParams = global$1.URLSearchParams;
    var _polyfillNode_url = {
      parse: urlParse,
      resolve: urlResolve,
      resolveObject: urlResolveObject,
      fileURLToPath: urlFileURLToPath,
      format: urlFormat,
      Url: Url,

      // WHATWG API
      URL: URL$1,
      URLSearchParams,  
    };
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    }

    // Reference: RFC 3986, RFC 1808, RFC 2396

    // define these here so at least they only have to be
    // compiled once on the first module load.
    var protocolPattern = /^([a-z0-9.+-]+:)/i,
      portPattern = /:[0-9]*$/,

      // Special case for a simple path URL
      simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

      // RFC 2396: characters reserved for delimiting URLs.
      // We actually just auto-escape these.
      delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

      // RFC 2396: characters not allowed for various reasons.
      unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

      // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
      autoEscape = ['\''].concat(unwise),
      // Characters that are never ever allowed in a hostname.
      // Note that any invalid chars are also handled, but these
      // are the ones that are *expected* to be seen, so we fast-path
      // them.
      nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
      hostEndingChars = ['/', '?', '#'],
      hostnameMaxLen = 255,
      hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
      hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
      // protocols that can allow "unsafe" and "unwise" chars.
      unsafeProtocol = {
        'javascript': true,
        'javascript:': true
      },
      // protocols that never have a hostname.
      hostlessProtocol = {
        'javascript': true,
        'javascript:': true
      },
      // protocols that always contain a // bit.
      slashedProtocol = {
        'http': true,
        'https': true,
        'ftp': true,
        'gopher': true,
        'file': true,
        'http:': true,
        'https:': true,
        'ftp:': true,
        'gopher:': true,
        'file:': true
      };

    function urlParse(url, parseQueryString, slashesDenoteHost) {
      if (url && isObject$1(url) && url instanceof Url) return url;

      var u = new Url;
      u.parse(url, parseQueryString, slashesDenoteHost);
      return u;
    }
    Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
      return parse$2(this, url, parseQueryString, slashesDenoteHost);
    };

    function parse$2(self, url, parseQueryString, slashesDenoteHost) {
      if (!isString(url)) {
        throw new TypeError('Parameter \'url\' must be a string, not ' + typeof url);
      }

      // Copy chrome, IE, opera backslash-handling behavior.
      // Back slashes before the query string get converted to forward slashes
      // See: https://code.google.com/p/chromium/issues/detail?id=25916
      var queryIndex = url.indexOf('?'),
        splitter =
        (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
        uSplit = url.split(splitter),
        slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, '/');
      url = uSplit.join(splitter);

      var rest = url;

      // trim before proceeding.
      // This is to support parse stuff like "  http://foo.com  \n"
      rest = rest.trim();

      if (!slashesDenoteHost && url.split('#').length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          self.path = rest;
          self.href = rest;
          self.pathname = simplePath[1];
          if (simplePath[2]) {
            self.search = simplePath[2];
            if (parseQueryString) {
              self.query = parse$3(self.search.substr(1));
            } else {
              self.query = self.search.substr(1);
            }
          } else if (parseQueryString) {
            self.search = '';
            self.query = {};
          }
          return self;
        }
      }

      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        self.protocol = lowerProto;
        rest = rest.substr(proto.length);
      }

      // figure out if it's got a host
      // user@server is *always* interpreted as a hostname, and url
      // resolution will treat //foo/bar as host=foo,path=bar because that's
      // how the browser resolves relative URLs.
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === '//';
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          self.slashes = true;
        }
      }
      var i, hec, l, p;
      if (!hostlessProtocol[proto] &&
        (slashes || (proto && !slashedProtocol[proto]))) {

        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c

        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.

        // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for (i = 0; i < hostEndingChars.length; i++) {
          hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }

        // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.
        var auth, atSign;
        if (hostEnd === -1) {
          // atSign can be anywhere.
          atSign = rest.lastIndexOf('@');
        } else {
          // atSign must be in auth portion.
          // http://a@b/c@d => host:b auth:a path:/c@d
          atSign = rest.lastIndexOf('@', hostEnd);
        }

        // Now we have a portion which is definitely the auth.
        // Pull that off.
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          self.auth = decodeURIComponent(auth);
        }

        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for (i = 0; i < nonHostChars.length; i++) {
          hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1)
          hostEnd = rest.length;

        self.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);

        // pull out port.
        parseHost(self);

        // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.
        self.hostname = self.hostname || '';

        // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.
        var ipv6Hostname = self.hostname[0] === '[' &&
          self.hostname[self.hostname.length - 1] === ']';

        // validate a little.
        if (!ipv6Hostname) {
          var hostparts = self.hostname.split(/\./);
          for (i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) continue;
            if (!part.match(hostnamePartPattern)) {
              var newpart = '';
              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  // we replace non-ASCII char with a temporary placeholder
                  // we need this to make sure size of hostname is not
                  // broken by replacing non-ASCII by nothing
                  newpart += 'x';
                } else {
                  newpart += part[j];
                }
              }
              // we test again with ASCII char only
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = '/' + notHost.join('.') + rest;
                }
                self.hostname = validParts.join('.');
                break;
              }
            }
          }
        }

        if (self.hostname.length > hostnameMaxLen) {
          self.hostname = '';
        } else {
          // hostnames are always lower case.
          self.hostname = self.hostname.toLowerCase();
        }

        if (!ipv6Hostname) {
          // IDNA Support: Returns a punycoded representation of "domain".
          // It only converts parts of the domain name that
          // have non-ASCII characters, i.e. it doesn't matter if
          // you call it with a domain that already is ASCII-only.
          self.hostname = toASCII(self.hostname);
        }

        p = self.port ? ':' + self.port : '';
        var h = self.hostname || '';
        self.host = h + p;
        self.href += self.host;

        // strip [ and ] from the hostname
        // the host field still retains them, though
        if (ipv6Hostname) {
          self.hostname = self.hostname.substr(1, self.hostname.length - 2);
          if (rest[0] !== '/') {
            rest = '/' + rest;
          }
        }
      }

      // now rest is set to the post-host stuff.
      // chop off any delim chars.
      if (!unsafeProtocol[lowerProto]) {

        // First, make 100% sure that any "autoEscape" chars get
        // escaped, even if encodeURIComponent doesn't think they
        // need to be.
        for (i = 0, l = autoEscape.length; i < l; i++) {
          var ae = autoEscape[i];
          if (rest.indexOf(ae) === -1)
            continue;
          var esc = encodeURIComponent(ae);
          if (esc === ae) {
            esc = escape(ae);
          }
          rest = rest.split(ae).join(esc);
        }
      }


      // chop off from the tail first.
      var hash = rest.indexOf('#');
      if (hash !== -1) {
        // got a fragment string.
        self.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }
      var qm = rest.indexOf('?');
      if (qm !== -1) {
        self.search = rest.substr(qm);
        self.query = rest.substr(qm + 1);
        if (parseQueryString) {
          self.query = parse$3(self.query);
        }
        rest = rest.slice(0, qm);
      } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        self.search = '';
        self.query = {};
      }
      if (rest) self.pathname = rest;
      if (slashedProtocol[lowerProto] &&
        self.hostname && !self.pathname) {
        self.pathname = '/';
      }

      //to support http.request
      if (self.pathname || self.search) {
        p = self.pathname || '';
        var s = self.search || '';
        self.path = p + s;
      }

      // finally, reconstruct the href based on what has been validated.
      self.href = format$2(self);
      return self;
    }

    function urlFileURLToPath(path) {
      if (typeof path === 'string')
        path = new Url().parse(path);
      else if (!(path instanceof Url))
        throw new TypeError('The "path" argument must be of type string or an instance of URL. Received type ' + (typeof path) + String(path));
      if (path.protocol !== 'file:')
        throw new TypeError('The URL must be of scheme file');
      return getPathFromURLPosix(path);
    }

    function getPathFromURLPosix(url) {
      const pathname = url.pathname;
      for (let n = 0; n < pathname.length; n++) {
        if (pathname[n] === '%') {
          const third = pathname.codePointAt(n + 2) | 0x20;
          if (pathname[n + 1] === '2' && third === 102) {
            throw new TypeError(
              'must not include encoded / characters'
            );
          }
        }
      }
      return decodeURIComponent(pathname);
    }

    // format a parsed object into a url string
    function urlFormat(obj) {
      // ensure it's an object, and not a string url.
      // If it's an obj, this is a no-op.
      // this way, you can call url_format() on strings
      // to clean up potentially wonky urls.
      if (isString(obj)) obj = parse$2({}, obj);
      return format$2(obj);
    }

    function format$2(self) {
      var auth = self.auth || '';
      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ':');
        auth += '@';
      }

      var protocol = self.protocol || '',
        pathname = self.pathname || '',
        hash = self.hash || '',
        host = false,
        query = '';

      if (self.host) {
        host = auth + self.host;
      } else if (self.hostname) {
        host = auth + (self.hostname.indexOf(':') === -1 ?
          self.hostname :
          '[' + this.hostname + ']');
        if (self.port) {
          host += ':' + self.port;
        }
      }

      if (self.query &&
        isObject$1(self.query) &&
        Object.keys(self.query).length) {
        query = stringify(self.query);
      }

      var search = self.search || (query && ('?' + query)) || '';

      if (protocol && protocol.substr(-1) !== ':') protocol += ':';

      // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
      // unless they had them to begin with.
      if (self.slashes ||
        (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = '//' + (host || '');
        if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
      } else if (!host) {
        host = '';
      }

      if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
      if (search && search.charAt(0) !== '?') search = '?' + search;

      pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
      });
      search = search.replace('#', '%23');

      return protocol + host + pathname + search + hash;
    }

    Url.prototype.format = function() {
      return format$2(this);
    };

    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }

    Url.prototype.resolve = function(relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };

    function urlResolveObject(source, relative) {
      if (!source) return relative;
      return urlParse(source, false, true).resolveObject(relative);
    }

    Url.prototype.resolveObject = function(relative) {
      if (isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }

      var result = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      }

      // hash is always overridden, no matter what.
      // even href="" will remove it.
      result.hash = relative.hash;

      // if the relative url is empty, then there's nothing left to do here.
      if (relative.href === '') {
        result.href = result.format();
        return result;
      }

      // hrefs like //foo/bar always cut to the protocol.
      if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        var rkeys = Object.keys(relative);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== 'protocol')
            result[rkey] = relative[rkey];
        }

        //urlParse appends trailing / to urls like http://www.example.com
        if (slashedProtocol[result.protocol] &&
          result.hostname && !result.pathname) {
          result.path = result.pathname = '/';
        }

        result.href = result.format();
        return result;
      }
      var relPath;
      if (relative.protocol && relative.protocol !== result.protocol) {
        // if it's a known url protocol, then changing
        // the protocol does weird things
        // first, if it's not file:, then we MUST have a host,
        // and if there was a path
        // to begin with, then we MUST have a path.
        // if it is file:, then the host is dropped,
        // because that's known to be hostless.
        // anything else is assumed to be absolute.
        if (!slashedProtocol[relative.protocol]) {
          var keys = Object.keys(relative);
          for (var v = 0; v < keys.length; v++) {
            var k = keys[v];
            result[k] = relative[k];
          }
          result.href = result.format();
          return result;
        }

        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          relPath = (relative.pathname || '').split('/');
          while (relPath.length && !(relative.host = relPath.shift()));
          if (!relative.host) relative.host = '';
          if (!relative.hostname) relative.hostname = '';
          if (relPath[0] !== '') relPath.unshift('');
          if (relPath.length < 2) relPath.unshift('');
          result.pathname = relPath.join('/');
        } else {
          result.pathname = relative.pathname;
        }
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || '';
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        // to support http.request
        if (result.pathname || result.search) {
          var p = result.pathname || '';
          var s = result.search || '';
          result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }

      var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
        isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
        ),
        mustEndAbs = (isRelAbs || isSourceAbs ||
          (result.host && relative.pathname)),
        removeAllDots = mustEndAbs,
        srcPath = result.pathname && result.pathname.split('/') || [],
        psychotic = result.protocol && !slashedProtocol[result.protocol];
      relPath = relative.pathname && relative.pathname.split('/') || [];
      // if the url is a non-slashed url, then relative
      // links like ../.. should be able
      // to crawl up to the hostname, as well.  This is strange.
      // result.protocol has already been set by now.
      // Later on, put the first path part into the host field.
      if (psychotic) {
        result.hostname = '';
        result.port = null;
        if (result.host) {
          if (srcPath[0] === '') srcPath[0] = result.host;
          else srcPath.unshift(result.host);
        }
        result.host = '';
        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;
          if (relative.host) {
            if (relPath[0] === '') relPath[0] = relative.host;
            else relPath.unshift(relative.host);
          }
          relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
      }
      var authInHost;
      if (isRelAbs) {
        // it's absolute.
        result.host = (relative.host || relative.host === '') ?
          relative.host : result.host;
        result.hostname = (relative.hostname || relative.hostname === '') ?
          relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
        // fall through to the dot-handling below.
      } else if (relPath.length) {
        // it's relative
        // throw away the existing file, and take the new path instead.
        if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (!isNullOrUndefined(relative.search)) {
        // just pull out the search.
        // like href='?foo'.
        // Put this after the other two cases because it simplifies the booleans
        if (psychotic) {
          result.hostname = result.host = srcPath.shift();
          //occationaly the auth can get stuck only in host
          //this especially happens in cases like
          //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
          authInHost = result.host && result.host.indexOf('@') > 0 ?
            result.host.split('@') : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }
        result.search = relative.search;
        result.query = relative.query;
        //to support http.request
        if (!isNull(result.pathname) || !isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : '') +
            (result.search ? result.search : '');
        }
        result.href = result.format();
        return result;
      }

      if (!srcPath.length) {
        // no path at all.  easy.
        // we've already handled the other stuff above.
        result.pathname = null;
        //to support http.request
        if (result.search) {
          result.path = '/' + result.search;
        } else {
          result.path = null;
        }
        result.href = result.format();
        return result;
      }

      // if a url ENDs in . or .., then it must get a trailing slash.
      // however, if it ends in anything else non-slashy,
      // then it must NOT get a trailing slash.
      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (
        (result.host || relative.host || srcPath.length > 1) &&
        (last === '.' || last === '..') || last === '');

      // strip single dots, resolve double dots to parent dir
      // if the path tries to go above the root, `up` ends up > 0
      var up = 0;
      for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];
        if (last === '.') {
          srcPath.splice(i, 1);
        } else if (last === '..') {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      }

      // if the path is allowed to go above the root, restore leading ..s
      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift('..');
        }
      }

      if (mustEndAbs && srcPath[0] !== '' &&
        (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
        srcPath.unshift('');
      }

      if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
        srcPath.push('');
      }

      var isAbsolute = srcPath[0] === '' ||
        (srcPath[0] && srcPath[0].charAt(0) === '/');

      // put the host back
      if (psychotic) {
        result.hostname = result.host = isAbsolute ? '' :
          srcPath.length ? srcPath.shift() : '';
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        authInHost = result.host && result.host.indexOf('@') > 0 ?
          result.host.split('@') : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }

      mustEndAbs = mustEndAbs || (result.host && srcPath.length);

      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift('');
      }

      if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
      } else {
        result.pathname = srcPath.join('/');
      }

      //to support request.http
      if (!isNull(result.pathname) || !isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') +
          (result.search ? result.search : '');
      }
      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };

    Url.prototype.parseHost = function() {
      return parseHost(this);
    };

    function parseHost(self) {
      var host = self.host;
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ':') {
          self.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host) self.hostname = host;
    }

    var _polyfillNode_url$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        URL: URL$1,
        URLSearchParams: URLSearchParams,
        Url: Url,
        default: _polyfillNode_url,
        fileURLToPath: urlFileURLToPath,
        format: urlFormat,
        parse: urlParse,
        resolve: urlResolve,
        resolveObject: urlResolveObject
    });

    function request$1(opts, cb) {
      if (typeof opts === 'string')
        opts = urlParse(opts);


      // Normally, the page is loaded from http or https, so not specifying a protocol
      // will result in a (valid) protocol-relative url. However, this won't work if
      // the protocol is something else, like 'file:'
      var defaultProtocol = global$1.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';

      var protocol = opts.protocol || defaultProtocol;
      var host = opts.hostname || opts.host;
      var port = opts.port;
      var path = opts.path || '/';

      // Necessary for IPv6 addresses
      if (host && host.indexOf(':') !== -1)
        host = '[' + host + ']';

      // This may be a relative url. The browser should always be able to interpret it correctly.
      opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path;
      opts.method = (opts.method || 'GET').toUpperCase();
      opts.headers = opts.headers || {};

      // Also valid opts.auth, opts.mode

      var req = new ClientRequest(opts);
      if (cb)
        req.on('response', cb);
      return req
    }

    function get$1(opts, cb) {
      var req = request$1(opts, cb);
      req.end();
      return req
    }

    function Agent$1() {}
    Agent$1.defaultMaxSockets = 4;

    var METHODS$1 = [
      'CHECKOUT',
      'CONNECT',
      'COPY',
      'DELETE',
      'GET',
      'HEAD',
      'LOCK',
      'M-SEARCH',
      'MERGE',
      'MKACTIVITY',
      'MKCOL',
      'MOVE',
      'NOTIFY',
      'OPTIONS',
      'PATCH',
      'POST',
      'PROPFIND',
      'PROPPATCH',
      'PURGE',
      'PUT',
      'REPORT',
      'SEARCH',
      'SUBSCRIBE',
      'TRACE',
      'UNLOCK',
      'UNSUBSCRIBE'
    ];
    var STATUS_CODES$1 = {
      100: 'Continue',
      101: 'Switching Protocols',
      102: 'Processing', // RFC 2518, obsoleted by RFC 4918
      200: 'OK',
      201: 'Created',
      202: 'Accepted',
      203: 'Non-Authoritative Information',
      204: 'No Content',
      205: 'Reset Content',
      206: 'Partial Content',
      207: 'Multi-Status', // RFC 4918
      300: 'Multiple Choices',
      301: 'Moved Permanently',
      302: 'Moved Temporarily',
      303: 'See Other',
      304: 'Not Modified',
      305: 'Use Proxy',
      307: 'Temporary Redirect',
      400: 'Bad Request',
      401: 'Unauthorized',
      402: 'Payment Required',
      403: 'Forbidden',
      404: 'Not Found',
      405: 'Method Not Allowed',
      406: 'Not Acceptable',
      407: 'Proxy Authentication Required',
      408: 'Request Time-out',
      409: 'Conflict',
      410: 'Gone',
      411: 'Length Required',
      412: 'Precondition Failed',
      413: 'Request Entity Too Large',
      414: 'Request-URI Too Large',
      415: 'Unsupported Media Type',
      416: 'Requested Range Not Satisfiable',
      417: 'Expectation Failed',
      418: 'I\'m a teapot', // RFC 2324
      422: 'Unprocessable Entity', // RFC 4918
      423: 'Locked', // RFC 4918
      424: 'Failed Dependency', // RFC 4918
      425: 'Unordered Collection', // RFC 4918
      426: 'Upgrade Required', // RFC 2817
      428: 'Precondition Required', // RFC 6585
      429: 'Too Many Requests', // RFC 6585
      431: 'Request Header Fields Too Large', // RFC 6585
      500: 'Internal Server Error',
      501: 'Not Implemented',
      502: 'Bad Gateway',
      503: 'Service Unavailable',
      504: 'Gateway Time-out',
      505: 'HTTP Version Not Supported',
      506: 'Variant Also Negotiates', // RFC 2295
      507: 'Insufficient Storage', // RFC 4918
      509: 'Bandwidth Limit Exceeded',
      510: 'Not Extended', // RFC 2774
      511: 'Network Authentication Required' // RFC 6585
    };

    var _polyfillNode_https = {
      request: request$1,
      get: get$1,
      Agent: Agent$1,
      METHODS: METHODS$1,
      STATUS_CODES: STATUS_CODES$1
    };

    var _polyfillNode_https$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Agent: Agent$1,
        METHODS: METHODS$1,
        STATUS_CODES: STATUS_CODES$1,
        default: _polyfillNode_https,
        get: get$1,
        request: request$1
    });

    var require$$2 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_https$1);

    function request(opts, cb) {
      if (typeof opts === 'string')
        opts = urlParse(opts);


      // Normally, the page is loaded from http or https, so not specifying a protocol
      // will result in a (valid) protocol-relative url. However, this won't work if
      // the protocol is something else, like 'file:'
      var defaultProtocol = global$1.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';

      var protocol = opts.protocol || defaultProtocol;
      var host = opts.hostname || opts.host;
      var port = opts.port;
      var path = opts.path || '/';

      // Necessary for IPv6 addresses
      if (host && host.indexOf(':') !== -1)
        host = '[' + host + ']';

      // This may be a relative url. The browser should always be able to interpret it correctly.
      opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path;
      opts.method = (opts.method || 'GET').toUpperCase();
      opts.headers = opts.headers || {};

      // Also valid opts.auth, opts.mode

      var req = new ClientRequest(opts);
      if (cb)
        req.on('response', cb);
      return req
    }

    function get(opts, cb) {
      var req = request(opts, cb);
      req.end();
      return req
    }

    function Agent() {}
    Agent.defaultMaxSockets = 4;

    var METHODS = [
      'CHECKOUT',
      'CONNECT',
      'COPY',
      'DELETE',
      'GET',
      'HEAD',
      'LOCK',
      'M-SEARCH',
      'MERGE',
      'MKACTIVITY',
      'MKCOL',
      'MOVE',
      'NOTIFY',
      'OPTIONS',
      'PATCH',
      'POST',
      'PROPFIND',
      'PROPPATCH',
      'PURGE',
      'PUT',
      'REPORT',
      'SEARCH',
      'SUBSCRIBE',
      'TRACE',
      'UNLOCK',
      'UNSUBSCRIBE'
    ];
    var STATUS_CODES = {
      100: 'Continue',
      101: 'Switching Protocols',
      102: 'Processing', // RFC 2518, obsoleted by RFC 4918
      200: 'OK',
      201: 'Created',
      202: 'Accepted',
      203: 'Non-Authoritative Information',
      204: 'No Content',
      205: 'Reset Content',
      206: 'Partial Content',
      207: 'Multi-Status', // RFC 4918
      300: 'Multiple Choices',
      301: 'Moved Permanently',
      302: 'Moved Temporarily',
      303: 'See Other',
      304: 'Not Modified',
      305: 'Use Proxy',
      307: 'Temporary Redirect',
      400: 'Bad Request',
      401: 'Unauthorized',
      402: 'Payment Required',
      403: 'Forbidden',
      404: 'Not Found',
      405: 'Method Not Allowed',
      406: 'Not Acceptable',
      407: 'Proxy Authentication Required',
      408: 'Request Time-out',
      409: 'Conflict',
      410: 'Gone',
      411: 'Length Required',
      412: 'Precondition Failed',
      413: 'Request Entity Too Large',
      414: 'Request-URI Too Large',
      415: 'Unsupported Media Type',
      416: 'Requested Range Not Satisfiable',
      417: 'Expectation Failed',
      418: 'I\'m a teapot', // RFC 2324
      422: 'Unprocessable Entity', // RFC 4918
      423: 'Locked', // RFC 4918
      424: 'Failed Dependency', // RFC 4918
      425: 'Unordered Collection', // RFC 4918
      426: 'Upgrade Required', // RFC 2817
      428: 'Precondition Required', // RFC 6585
      429: 'Too Many Requests', // RFC 6585
      431: 'Request Header Fields Too Large', // RFC 6585
      500: 'Internal Server Error',
      501: 'Not Implemented',
      502: 'Bad Gateway',
      503: 'Service Unavailable',
      504: 'Gateway Time-out',
      505: 'HTTP Version Not Supported',
      506: 'Variant Also Negotiates', // RFC 2295
      507: 'Insufficient Storage', // RFC 4918
      509: 'Bandwidth Limit Exceeded',
      510: 'Not Extended', // RFC 2774
      511: 'Network Authentication Required' // RFC 6585
    };

    var _polyfillNode_http = {
      request,
      get,
      Agent,
      METHODS,
      STATUS_CODES
    };

    var _polyfillNode_http$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Agent: Agent,
        METHODS: METHODS,
        STATUS_CODES: STATUS_CODES,
        default: _polyfillNode_http,
        get: get,
        request: request
    });

    var require$$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_http$1);

    var require$$7 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_url$1);

    const { kForOnEventAttribute: kForOnEventAttribute$1, kListener: kListener$1 } = constants;

    const kCode = Symbol('kCode');
    const kData = Symbol('kData');
    const kError = Symbol('kError');
    const kMessage = Symbol('kMessage');
    const kReason = Symbol('kReason');
    const kTarget = Symbol('kTarget');
    const kType = Symbol('kType');
    const kWasClean = Symbol('kWasClean');

    /**
     * Class representing an event.
     */
    class Event {
      /**
       * Create a new `Event`.
       *
       * @param {String} type The name of the event
       * @throws {TypeError} If the `type` argument is not specified
       */
      constructor(type) {
        this[kTarget] = null;
        this[kType] = type;
      }

      /**
       * @type {*}
       */
      get target() {
        return this[kTarget];
      }

      /**
       * @type {String}
       */
      get type() {
        return this[kType];
      }
    }

    Object.defineProperty(Event.prototype, 'target', { enumerable: true });
    Object.defineProperty(Event.prototype, 'type', { enumerable: true });

    /**
     * Class representing a close event.
     *
     * @extends Event
     */
    class CloseEvent extends Event {
      /**
       * Create a new `CloseEvent`.
       *
       * @param {String} type The name of the event
       * @param {Object} [options] A dictionary object that allows for setting
       *     attributes via object members of the same name
       * @param {Number} [options.code=0] The status code explaining why the
       *     connection was closed
       * @param {String} [options.reason=''] A human-readable string explaining why
       *     the connection was closed
       * @param {Boolean} [options.wasClean=false] Indicates whether or not the
       *     connection was cleanly closed
       */
      constructor(type, options = {}) {
        super(type);

        this[kCode] = options.code === undefined ? 0 : options.code;
        this[kReason] = options.reason === undefined ? '' : options.reason;
        this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;
      }

      /**
       * @type {Number}
       */
      get code() {
        return this[kCode];
      }

      /**
       * @type {String}
       */
      get reason() {
        return this[kReason];
      }

      /**
       * @type {Boolean}
       */
      get wasClean() {
        return this[kWasClean];
      }
    }

    Object.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });
    Object.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });
    Object.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });

    /**
     * Class representing an error event.
     *
     * @extends Event
     */
    class ErrorEvent extends Event {
      /**
       * Create a new `ErrorEvent`.
       *
       * @param {String} type The name of the event
       * @param {Object} [options] A dictionary object that allows for setting
       *     attributes via object members of the same name
       * @param {*} [options.error=null] The error that generated this event
       * @param {String} [options.message=''] The error message
       */
      constructor(type, options = {}) {
        super(type);

        this[kError] = options.error === undefined ? null : options.error;
        this[kMessage] = options.message === undefined ? '' : options.message;
      }

      /**
       * @type {*}
       */
      get error() {
        return this[kError];
      }

      /**
       * @type {String}
       */
      get message() {
        return this[kMessage];
      }
    }

    Object.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });
    Object.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });

    /**
     * Class representing a message event.
     *
     * @extends Event
     */
    class MessageEvent extends Event {
      /**
       * Create a new `MessageEvent`.
       *
       * @param {String} type The name of the event
       * @param {Object} [options] A dictionary object that allows for setting
       *     attributes via object members of the same name
       * @param {*} [options.data=null] The message content
       */
      constructor(type, options = {}) {
        super(type);

        this[kData] = options.data === undefined ? null : options.data;
      }

      /**
       * @type {*}
       */
      get data() {
        return this[kData];
      }
    }

    Object.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });

    /**
     * This provides methods for emulating the `EventTarget` interface. It's not
     * meant to be used directly.
     *
     * @mixin
     */
    const EventTarget = {
      /**
       * Register an event listener.
       *
       * @param {String} type A string representing the event type to listen for
       * @param {(Function|Object)} handler The listener to add
       * @param {Object} [options] An options object specifies characteristics about
       *     the event listener
       * @param {Boolean} [options.once=false] A `Boolean` indicating that the
       *     listener should be invoked at most once after being added. If `true`,
       *     the listener would be automatically removed when invoked.
       * @public
       */
      addEventListener(type, handler, options = {}) {
        for (const listener of this.listeners(type)) {
          if (
            !options[kForOnEventAttribute$1] &&
            listener[kListener$1] === handler &&
            !listener[kForOnEventAttribute$1]
          ) {
            return;
          }
        }

        let wrapper;

        if (type === 'message') {
          wrapper = function onMessage(data, isBinary) {
            const event = new MessageEvent('message', {
              data: isBinary ? data : data.toString()
            });

            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type === 'close') {
          wrapper = function onClose(code, message) {
            const event = new CloseEvent('close', {
              code,
              reason: message.toString(),
              wasClean: this._closeFrameReceived && this._closeFrameSent
            });

            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type === 'error') {
          wrapper = function onError(error) {
            const event = new ErrorEvent('error', {
              error,
              message: error.message
            });

            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type === 'open') {
          wrapper = function onOpen() {
            const event = new Event('open');

            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else {
          return;
        }

        wrapper[kForOnEventAttribute$1] = !!options[kForOnEventAttribute$1];
        wrapper[kListener$1] = handler;

        if (options.once) {
          this.once(type, wrapper);
        } else {
          this.on(type, wrapper);
        }
      },

      /**
       * Remove an event listener.
       *
       * @param {String} type A string representing the event type to remove
       * @param {(Function|Object)} handler The listener to remove
       * @public
       */
      removeEventListener(type, handler) {
        for (const listener of this.listeners(type)) {
          if (listener[kListener$1] === handler && !listener[kForOnEventAttribute$1]) {
            this.removeListener(type, listener);
            break;
          }
        }
      }
    };

    var eventTarget = {
      CloseEvent,
      ErrorEvent,
      Event,
      EventTarget,
      MessageEvent
    };

    /**
     * Call an event listener
     *
     * @param {(Function|Object)} listener The listener to call
     * @param {*} thisArg The value to use as `this`` when calling the listener
     * @param {Event} event The event to pass to the listener
     * @private
     */
    function callListener(listener, thisArg, event) {
      if (typeof listener === 'object' && listener.handleEvent) {
        listener.handleEvent.call(listener, event);
      } else {
        listener.call(thisArg, event);
      }
    }

    const { tokenChars } = validationExports;

    /**
     * Adds an offer to the map of extension offers or a parameter to the map of
     * parameters.
     *
     * @param {Object} dest The map of extension offers or parameters
     * @param {String} name The extension or parameter name
     * @param {(Object|Boolean|String)} elem The extension parameters or the
     *     parameter value
     * @private
     */
    function push(dest, name, elem) {
      if (dest[name] === undefined) dest[name] = [elem];
      else dest[name].push(elem);
    }

    /**
     * Parses the `Sec-WebSocket-Extensions` header into an object.
     *
     * @param {String} header The field value of the header
     * @return {Object} The parsed object
     * @public
     */
    function parse$1(header) {
      const offers = Object.create(null);
      let params = Object.create(null);
      let mustUnescape = false;
      let isEscaping = false;
      let inQuotes = false;
      let extensionName;
      let paramName;
      let start = -1;
      let code = -1;
      let end = -1;
      let i = 0;

      for (; i < header.length; i++) {
        code = header.charCodeAt(i);

        if (extensionName === undefined) {
          if (end === -1 && tokenChars[code] === 1) {
            if (start === -1) start = i;
          } else if (
            i !== 0 &&
            (code === 0x20 /* ' ' */ || code === 0x09) /* '\t' */
          ) {
            if (end === -1 && start !== -1) end = i;
          } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }

            if (end === -1) end = i;
            const name = header.slice(start, end);
            if (code === 0x2c) {
              push(offers, name, params);
              params = Object.create(null);
            } else {
              extensionName = name;
            }

            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        } else if (paramName === undefined) {
          if (end === -1 && tokenChars[code] === 1) {
            if (start === -1) start = i;
          } else if (code === 0x20 || code === 0x09) {
            if (end === -1 && start !== -1) end = i;
          } else if (code === 0x3b || code === 0x2c) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }

            if (end === -1) end = i;
            push(params, header.slice(start, end), true);
            if (code === 0x2c) {
              push(offers, extensionName, params);
              params = Object.create(null);
              extensionName = undefined;
            }

            start = end = -1;
          } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {
            paramName = header.slice(start, i);
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        } else {
          //
          // The value of a quoted-string after unescaping must conform to the
          // token ABNF, so only token characters are valid.
          // Ref: https://tools.ietf.org/html/rfc6455#section-9.1
          //
          if (isEscaping) {
            if (tokenChars[code] !== 1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
            if (start === -1) start = i;
            else if (!mustUnescape) mustUnescape = true;
            isEscaping = false;
          } else if (inQuotes) {
            if (tokenChars[code] === 1) {
              if (start === -1) start = i;
            } else if (code === 0x22 /* '"' */ && start !== -1) {
              inQuotes = false;
              end = i;
            } else if (code === 0x5c /* '\' */) {
              isEscaping = true;
            } else {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
          } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {
            inQuotes = true;
          } else if (end === -1 && tokenChars[code] === 1) {
            if (start === -1) start = i;
          } else if (start !== -1 && (code === 0x20 || code === 0x09)) {
            if (end === -1) end = i;
          } else if (code === 0x3b || code === 0x2c) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }

            if (end === -1) end = i;
            let value = header.slice(start, end);
            if (mustUnescape) {
              value = value.replace(/\\/g, '');
              mustUnescape = false;
            }
            push(params, paramName, value);
            if (code === 0x2c) {
              push(offers, extensionName, params);
              params = Object.create(null);
              extensionName = undefined;
            }

            paramName = undefined;
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        }
      }

      if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {
        throw new SyntaxError('Unexpected end of input');
      }

      if (end === -1) end = i;
      const token = header.slice(start, end);
      if (extensionName === undefined) {
        push(offers, token, params);
      } else {
        if (paramName === undefined) {
          push(params, token, true);
        } else if (mustUnescape) {
          push(params, paramName, token.replace(/\\/g, ''));
        } else {
          push(params, paramName, token);
        }
        push(offers, extensionName, params);
      }

      return offers;
    }

    /**
     * Builds the `Sec-WebSocket-Extensions` header field value.
     *
     * @param {Object} extensions The map of extensions and parameters to format
     * @return {String} A string representing the given object
     * @public
     */
    function format$1(extensions) {
      return Object.keys(extensions)
        .map((extension) => {
          let configurations = extensions[extension];
          if (!Array.isArray(configurations)) configurations = [configurations];
          return configurations
            .map((params) => {
              return [extension]
                .concat(
                  Object.keys(params).map((k) => {
                    let values = params[k];
                    if (!Array.isArray(values)) values = [values];
                    return values
                      .map((v) => (v === true ? k : `${k}=${v}`))
                      .join('; ');
                  })
                )
                .join('; ');
            })
            .join(', ');
        })
        .join(', ');
    }

    var extension = { format: format$1, parse: parse$1 };

    const EventEmitter = require$$0;
    const https = require$$2;
    const http = require$$1;
    const net = require$$3;
    const tls = require$$4;
    const { randomBytes, createHash } = require$$5;
    const { URL } = require$$7;

    const PerMessageDeflate = permessageDeflate;
    const Receiver = receiver;
    const Sender = sender;
    const {
      BINARY_TYPES,
      EMPTY_BUFFER,
      GUID,
      kForOnEventAttribute,
      kListener,
      kStatusCode,
      kWebSocket,
      NOOP
    } = constants;
    const {
      EventTarget: { addEventListener, removeEventListener }
    } = eventTarget;
    const { format, parse } = extension;
    const { toBuffer } = bufferUtilExports;

    const closeTimeout = 30 * 1000;
    const kAborted = Symbol('kAborted');
    const protocolVersions = [8, 13];
    const readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];
    const subprotocolRegex = /^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/;

    /**
     * Class representing a WebSocket.
     *
     * @extends EventEmitter
     */
    let WebSocket$1 = class WebSocket extends EventEmitter {
      /**
       * Create a new `WebSocket`.
       *
       * @param {(String|URL)} address The URL to which to connect
       * @param {(String|String[])} [protocols] The subprotocols
       * @param {Object} [options] Connection options
       */
      constructor(address, protocols, options) {
        super();

        this._binaryType = BINARY_TYPES[0];
        this._closeCode = 1006;
        this._closeFrameReceived = false;
        this._closeFrameSent = false;
        this._closeMessage = EMPTY_BUFFER;
        this._closeTimer = null;
        this._extensions = {};
        this._paused = false;
        this._protocol = '';
        this._readyState = WebSocket.CONNECTING;
        this._receiver = null;
        this._sender = null;
        this._socket = null;

        if (address !== null) {
          this._bufferedAmount = 0;
          this._isServer = false;
          this._redirects = 0;

          if (protocols === undefined) {
            protocols = [];
          } else if (!Array.isArray(protocols)) {
            if (typeof protocols === 'object' && protocols !== null) {
              options = protocols;
              protocols = [];
            } else {
              protocols = [protocols];
            }
          }

          initAsClient(this, address, protocols, options);
        } else {
          this._isServer = true;
        }
      }

      /**
       * This deviates from the WHATWG interface since ws doesn't support the
       * required default "blob" type (instead we define a custom "nodebuffer"
       * type).
       *
       * @type {String}
       */
      get binaryType() {
        return this._binaryType;
      }

      set binaryType(type) {
        if (!BINARY_TYPES.includes(type)) return;

        this._binaryType = type;

        //
        // Allow to change `binaryType` on the fly.
        //
        if (this._receiver) this._receiver._binaryType = type;
      }

      /**
       * @type {Number}
       */
      get bufferedAmount() {
        if (!this._socket) return this._bufferedAmount;

        return this._socket._writableState.length + this._sender._bufferedBytes;
      }

      /**
       * @type {String}
       */
      get extensions() {
        return Object.keys(this._extensions).join();
      }

      /**
       * @type {Boolean}
       */
      get isPaused() {
        return this._paused;
      }

      /**
       * @type {Function}
       */
      /* istanbul ignore next */
      get onclose() {
        return null;
      }

      /**
       * @type {Function}
       */
      /* istanbul ignore next */
      get onerror() {
        return null;
      }

      /**
       * @type {Function}
       */
      /* istanbul ignore next */
      get onopen() {
        return null;
      }

      /**
       * @type {Function}
       */
      /* istanbul ignore next */
      get onmessage() {
        return null;
      }

      /**
       * @type {String}
       */
      get protocol() {
        return this._protocol;
      }

      /**
       * @type {Number}
       */
      get readyState() {
        return this._readyState;
      }

      /**
       * @type {String}
       */
      get url() {
        return this._url;
      }

      /**
       * Set up the socket and the internal resources.
       *
       * @param {(net.Socket|tls.Socket)} socket The network socket between the
       *     server and client
       * @param {Buffer} head The first packet of the upgraded stream
       * @param {Object} options Options object
       * @param {Function} [options.generateMask] The function used to generate the
       *     masking key
       * @param {Number} [options.maxPayload=0] The maximum allowed message size
       * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
       *     not to skip UTF-8 validation for text and close messages
       * @private
       */
      setSocket(socket, head, options) {
        const receiver = new Receiver({
          binaryType: this.binaryType,
          extensions: this._extensions,
          isServer: this._isServer,
          maxPayload: options.maxPayload,
          skipUTF8Validation: options.skipUTF8Validation
        });

        this._sender = new Sender(socket, this._extensions, options.generateMask);
        this._receiver = receiver;
        this._socket = socket;

        receiver[kWebSocket] = this;
        socket[kWebSocket] = this;

        receiver.on('conclude', receiverOnConclude);
        receiver.on('drain', receiverOnDrain);
        receiver.on('error', receiverOnError);
        receiver.on('message', receiverOnMessage);
        receiver.on('ping', receiverOnPing);
        receiver.on('pong', receiverOnPong);

        socket.setTimeout(0);
        socket.setNoDelay();

        if (head.length > 0) socket.unshift(head);

        socket.on('close', socketOnClose);
        socket.on('data', socketOnData);
        socket.on('end', socketOnEnd);
        socket.on('error', socketOnError);

        this._readyState = WebSocket.OPEN;
        this.emit('open');
      }

      /**
       * Emit the `'close'` event.
       *
       * @private
       */
      emitClose() {
        if (!this._socket) {
          this._readyState = WebSocket.CLOSED;
          this.emit('close', this._closeCode, this._closeMessage);
          return;
        }

        if (this._extensions[PerMessageDeflate.extensionName]) {
          this._extensions[PerMessageDeflate.extensionName].cleanup();
        }

        this._receiver.removeAllListeners();
        this._readyState = WebSocket.CLOSED;
        this.emit('close', this._closeCode, this._closeMessage);
      }

      /**
       * Start a closing handshake.
       *
       *          +----------+   +-----------+   +----------+
       *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -
       *    |     +----------+   +-----------+   +----------+     |
       *          +----------+   +-----------+         |
       * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING
       *          +----------+   +-----------+   |
       *    |           |                        |   +---+        |
       *                +------------------------+-->|fin| - - - -
       *    |         +---+                      |   +---+
       *     - - - - -|fin|<---------------------+
       *              +---+
       *
       * @param {Number} [code] Status code explaining why the connection is closing
       * @param {(String|Buffer)} [data] The reason why the connection is
       *     closing
       * @public
       */
      close(code, data) {
        if (this.readyState === WebSocket.CLOSED) return;
        if (this.readyState === WebSocket.CONNECTING) {
          const msg = 'WebSocket was closed before the connection was established';
          abortHandshake(this, this._req, msg);
          return;
        }

        if (this.readyState === WebSocket.CLOSING) {
          if (
            this._closeFrameSent &&
            (this._closeFrameReceived || this._receiver._writableState.errorEmitted)
          ) {
            this._socket.end();
          }

          return;
        }

        this._readyState = WebSocket.CLOSING;
        this._sender.close(code, data, !this._isServer, (err) => {
          //
          // This error is handled by the `'error'` listener on the socket. We only
          // want to know if the close frame has been sent here.
          //
          if (err) return;

          this._closeFrameSent = true;

          if (
            this._closeFrameReceived ||
            this._receiver._writableState.errorEmitted
          ) {
            this._socket.end();
          }
        });

        //
        // Specify a timeout for the closing handshake to complete.
        //
        this._closeTimer = setTimeout(
          this._socket.destroy.bind(this._socket),
          closeTimeout
        );
      }

      /**
       * Pause the socket.
       *
       * @public
       */
      pause() {
        if (
          this.readyState === WebSocket.CONNECTING ||
          this.readyState === WebSocket.CLOSED
        ) {
          return;
        }

        this._paused = true;
        this._socket.pause();
      }

      /**
       * Send a ping.
       *
       * @param {*} [data] The data to send
       * @param {Boolean} [mask] Indicates whether or not to mask `data`
       * @param {Function} [cb] Callback which is executed when the ping is sent
       * @public
       */
      ping(data, mask, cb) {
        if (this.readyState === WebSocket.CONNECTING) {
          throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
        }

        if (typeof data === 'function') {
          cb = data;
          data = mask = undefined;
        } else if (typeof mask === 'function') {
          cb = mask;
          mask = undefined;
        }

        if (typeof data === 'number') data = data.toString();

        if (this.readyState !== WebSocket.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }

        if (mask === undefined) mask = !this._isServer;
        this._sender.ping(data || EMPTY_BUFFER, mask, cb);
      }

      /**
       * Send a pong.
       *
       * @param {*} [data] The data to send
       * @param {Boolean} [mask] Indicates whether or not to mask `data`
       * @param {Function} [cb] Callback which is executed when the pong is sent
       * @public
       */
      pong(data, mask, cb) {
        if (this.readyState === WebSocket.CONNECTING) {
          throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
        }

        if (typeof data === 'function') {
          cb = data;
          data = mask = undefined;
        } else if (typeof mask === 'function') {
          cb = mask;
          mask = undefined;
        }

        if (typeof data === 'number') data = data.toString();

        if (this.readyState !== WebSocket.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }

        if (mask === undefined) mask = !this._isServer;
        this._sender.pong(data || EMPTY_BUFFER, mask, cb);
      }

      /**
       * Resume the socket.
       *
       * @public
       */
      resume() {
        if (
          this.readyState === WebSocket.CONNECTING ||
          this.readyState === WebSocket.CLOSED
        ) {
          return;
        }

        this._paused = false;
        if (!this._receiver._writableState.needDrain) this._socket.resume();
      }

      /**
       * Send a data message.
       *
       * @param {*} data The message to send
       * @param {Object} [options] Options object
       * @param {Boolean} [options.binary] Specifies whether `data` is binary or
       *     text
       * @param {Boolean} [options.compress] Specifies whether or not to compress
       *     `data`
       * @param {Boolean} [options.fin=true] Specifies whether the fragment is the
       *     last one
       * @param {Boolean} [options.mask] Specifies whether or not to mask `data`
       * @param {Function} [cb] Callback which is executed when data is written out
       * @public
       */
      send(data, options, cb) {
        if (this.readyState === WebSocket.CONNECTING) {
          throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
        }

        if (typeof options === 'function') {
          cb = options;
          options = {};
        }

        if (typeof data === 'number') data = data.toString();

        if (this.readyState !== WebSocket.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }

        const opts = {
          binary: typeof data !== 'string',
          mask: !this._isServer,
          compress: true,
          fin: true,
          ...options
        };

        if (!this._extensions[PerMessageDeflate.extensionName]) {
          opts.compress = false;
        }

        this._sender.send(data || EMPTY_BUFFER, opts, cb);
      }

      /**
       * Forcibly close the connection.
       *
       * @public
       */
      terminate() {
        if (this.readyState === WebSocket.CLOSED) return;
        if (this.readyState === WebSocket.CONNECTING) {
          const msg = 'WebSocket was closed before the connection was established';
          abortHandshake(this, this._req, msg);
          return;
        }

        if (this._socket) {
          this._readyState = WebSocket.CLOSING;
          this._socket.destroy();
        }
      }
    };

    /**
     * @constant {Number} CONNECTING
     * @memberof WebSocket
     */
    Object.defineProperty(WebSocket$1, 'CONNECTING', {
      enumerable: true,
      value: readyStates.indexOf('CONNECTING')
    });

    /**
     * @constant {Number} CONNECTING
     * @memberof WebSocket.prototype
     */
    Object.defineProperty(WebSocket$1.prototype, 'CONNECTING', {
      enumerable: true,
      value: readyStates.indexOf('CONNECTING')
    });

    /**
     * @constant {Number} OPEN
     * @memberof WebSocket
     */
    Object.defineProperty(WebSocket$1, 'OPEN', {
      enumerable: true,
      value: readyStates.indexOf('OPEN')
    });

    /**
     * @constant {Number} OPEN
     * @memberof WebSocket.prototype
     */
    Object.defineProperty(WebSocket$1.prototype, 'OPEN', {
      enumerable: true,
      value: readyStates.indexOf('OPEN')
    });

    /**
     * @constant {Number} CLOSING
     * @memberof WebSocket
     */
    Object.defineProperty(WebSocket$1, 'CLOSING', {
      enumerable: true,
      value: readyStates.indexOf('CLOSING')
    });

    /**
     * @constant {Number} CLOSING
     * @memberof WebSocket.prototype
     */
    Object.defineProperty(WebSocket$1.prototype, 'CLOSING', {
      enumerable: true,
      value: readyStates.indexOf('CLOSING')
    });

    /**
     * @constant {Number} CLOSED
     * @memberof WebSocket
     */
    Object.defineProperty(WebSocket$1, 'CLOSED', {
      enumerable: true,
      value: readyStates.indexOf('CLOSED')
    });

    /**
     * @constant {Number} CLOSED
     * @memberof WebSocket.prototype
     */
    Object.defineProperty(WebSocket$1.prototype, 'CLOSED', {
      enumerable: true,
      value: readyStates.indexOf('CLOSED')
    });

    [
      'binaryType',
      'bufferedAmount',
      'extensions',
      'isPaused',
      'protocol',
      'readyState',
      'url'
    ].forEach((property) => {
      Object.defineProperty(WebSocket$1.prototype, property, { enumerable: true });
    });

    //
    // Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.
    // See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface
    //
    ['open', 'error', 'close', 'message'].forEach((method) => {
      Object.defineProperty(WebSocket$1.prototype, `on${method}`, {
        enumerable: true,
        get() {
          for (const listener of this.listeners(method)) {
            if (listener[kForOnEventAttribute]) return listener[kListener];
          }

          return null;
        },
        set(handler) {
          for (const listener of this.listeners(method)) {
            if (listener[kForOnEventAttribute]) {
              this.removeListener(method, listener);
              break;
            }
          }

          if (typeof handler !== 'function') return;

          this.addEventListener(method, handler, {
            [kForOnEventAttribute]: true
          });
        }
      });
    });

    WebSocket$1.prototype.addEventListener = addEventListener;
    WebSocket$1.prototype.removeEventListener = removeEventListener;

    var websocket = WebSocket$1;

    /**
     * Initialize a WebSocket client.
     *
     * @param {WebSocket} websocket The client to initialize
     * @param {(String|URL)} address The URL to which to connect
     * @param {Array} protocols The subprotocols
     * @param {Object} [options] Connection options
     * @param {Boolean} [options.followRedirects=false] Whether or not to follow
     *     redirects
     * @param {Function} [options.generateMask] The function used to generate the
     *     masking key
     * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the
     *     handshake request
     * @param {Number} [options.maxPayload=104857600] The maximum allowed message
     *     size
     * @param {Number} [options.maxRedirects=10] The maximum number of redirects
     *     allowed
     * @param {String} [options.origin] Value of the `Origin` or
     *     `Sec-WebSocket-Origin` header
     * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable
     *     permessage-deflate
     * @param {Number} [options.protocolVersion=13] Value of the
     *     `Sec-WebSocket-Version` header
     * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
     *     not to skip UTF-8 validation for text and close messages
     * @private
     */
    function initAsClient(websocket, address, protocols, options) {
      const opts = {
        protocolVersion: protocolVersions[1],
        maxPayload: 100 * 1024 * 1024,
        skipUTF8Validation: false,
        perMessageDeflate: true,
        followRedirects: false,
        maxRedirects: 10,
        ...options,
        createConnection: undefined,
        socketPath: undefined,
        hostname: undefined,
        protocol: undefined,
        timeout: undefined,
        method: 'GET',
        host: undefined,
        path: undefined,
        port: undefined
      };

      if (!protocolVersions.includes(opts.protocolVersion)) {
        throw new RangeError(
          `Unsupported protocol version: ${opts.protocolVersion} ` +
            `(supported versions: ${protocolVersions.join(', ')})`
        );
      }

      let parsedUrl;

      if (address instanceof URL) {
        parsedUrl = address;
        websocket._url = address.href;
      } else {
        try {
          parsedUrl = new URL(address);
        } catch (e) {
          throw new SyntaxError(`Invalid URL: ${address}`);
        }

        websocket._url = address;
      }

      const isSecure = parsedUrl.protocol === 'wss:';
      const isIpcUrl = parsedUrl.protocol === 'ws+unix:';
      let invalidUrlMessage;

      if (parsedUrl.protocol !== 'ws:' && !isSecure && !isIpcUrl) {
        invalidUrlMessage =
          'The URL\'s protocol must be one of "ws:", "wss:", or "ws+unix:"';
      } else if (isIpcUrl && !parsedUrl.pathname) {
        invalidUrlMessage = "The URL's pathname is empty";
      } else if (parsedUrl.hash) {
        invalidUrlMessage = 'The URL contains a fragment identifier';
      }

      if (invalidUrlMessage) {
        const err = new SyntaxError(invalidUrlMessage);

        if (websocket._redirects === 0) {
          throw err;
        } else {
          emitErrorAndClose(websocket, err);
          return;
        }
      }

      const defaultPort = isSecure ? 443 : 80;
      const key = randomBytes(16).toString('base64');
      const request = isSecure ? https.request : http.request;
      const protocolSet = new Set();
      let perMessageDeflate;

      opts.createConnection = isSecure ? tlsConnect : netConnect;
      opts.defaultPort = opts.defaultPort || defaultPort;
      opts.port = parsedUrl.port || defaultPort;
      opts.host = parsedUrl.hostname.startsWith('[')
        ? parsedUrl.hostname.slice(1, -1)
        : parsedUrl.hostname;
      opts.headers = {
        ...opts.headers,
        'Sec-WebSocket-Version': opts.protocolVersion,
        'Sec-WebSocket-Key': key,
        Connection: 'Upgrade',
        Upgrade: 'websocket'
      };
      opts.path = parsedUrl.pathname + parsedUrl.search;
      opts.timeout = opts.handshakeTimeout;

      if (opts.perMessageDeflate) {
        perMessageDeflate = new PerMessageDeflate(
          opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},
          false,
          opts.maxPayload
        );
        opts.headers['Sec-WebSocket-Extensions'] = format({
          [PerMessageDeflate.extensionName]: perMessageDeflate.offer()
        });
      }
      if (protocols.length) {
        for (const protocol of protocols) {
          if (
            typeof protocol !== 'string' ||
            !subprotocolRegex.test(protocol) ||
            protocolSet.has(protocol)
          ) {
            throw new SyntaxError(
              'An invalid or duplicated subprotocol was specified'
            );
          }

          protocolSet.add(protocol);
        }

        opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');
      }
      if (opts.origin) {
        if (opts.protocolVersion < 13) {
          opts.headers['Sec-WebSocket-Origin'] = opts.origin;
        } else {
          opts.headers.Origin = opts.origin;
        }
      }
      if (parsedUrl.username || parsedUrl.password) {
        opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
      }

      if (isIpcUrl) {
        const parts = opts.path.split(':');

        opts.socketPath = parts[0];
        opts.path = parts[1];
      }

      let req;

      if (opts.followRedirects) {
        if (websocket._redirects === 0) {
          websocket._originalIpc = isIpcUrl;
          websocket._originalSecure = isSecure;
          websocket._originalHostOrSocketPath = isIpcUrl
            ? opts.socketPath
            : parsedUrl.host;

          const headers = options && options.headers;

          //
          // Shallow copy the user provided options so that headers can be changed
          // without mutating the original object.
          //
          options = { ...options, headers: {} };

          if (headers) {
            for (const [key, value] of Object.entries(headers)) {
              options.headers[key.toLowerCase()] = value;
            }
          }
        } else if (websocket.listenerCount('redirect') === 0) {
          const isSameHost = isIpcUrl
            ? websocket._originalIpc
              ? opts.socketPath === websocket._originalHostOrSocketPath
              : false
            : websocket._originalIpc
            ? false
            : parsedUrl.host === websocket._originalHostOrSocketPath;

          if (!isSameHost || (websocket._originalSecure && !isSecure)) {
            //
            // Match curl 7.77.0 behavior and drop the following headers. These
            // headers are also dropped when following a redirect to a subdomain.
            //
            delete opts.headers.authorization;
            delete opts.headers.cookie;

            if (!isSameHost) delete opts.headers.host;

            opts.auth = undefined;
          }
        }

        //
        // Match curl 7.77.0 behavior and make the first `Authorization` header win.
        // If the `Authorization` header is set, then there is nothing to do as it
        // will take precedence.
        //
        if (opts.auth && !options.headers.authorization) {
          options.headers.authorization =
            'Basic ' + Buffer.from(opts.auth).toString('base64');
        }

        req = websocket._req = request(opts);

        if (websocket._redirects) {
          //
          // Unlike what is done for the `'upgrade'` event, no early exit is
          // triggered here if the user calls `websocket.close()` or
          // `websocket.terminate()` from a listener of the `'redirect'` event. This
          // is because the user can also call `request.destroy()` with an error
          // before calling `websocket.close()` or `websocket.terminate()` and this
          // would result in an error being emitted on the `request` object with no
          // `'error'` event listeners attached.
          //
          websocket.emit('redirect', websocket.url, req);
        }
      } else {
        req = websocket._req = request(opts);
      }

      if (opts.timeout) {
        req.on('timeout', () => {
          abortHandshake(websocket, req, 'Opening handshake has timed out');
        });
      }

      req.on('error', (err) => {
        if (req === null || req[kAborted]) return;

        req = websocket._req = null;
        emitErrorAndClose(websocket, err);
      });

      req.on('response', (res) => {
        const location = res.headers.location;
        const statusCode = res.statusCode;

        if (
          location &&
          opts.followRedirects &&
          statusCode >= 300 &&
          statusCode < 400
        ) {
          if (++websocket._redirects > opts.maxRedirects) {
            abortHandshake(websocket, req, 'Maximum redirects exceeded');
            return;
          }

          req.abort();

          let addr;

          try {
            addr = new URL(location, address);
          } catch (e) {
            const err = new SyntaxError(`Invalid URL: ${location}`);
            emitErrorAndClose(websocket, err);
            return;
          }

          initAsClient(websocket, addr, protocols, options);
        } else if (!websocket.emit('unexpected-response', req, res)) {
          abortHandshake(
            websocket,
            req,
            `Unexpected server response: ${res.statusCode}`
          );
        }
      });

      req.on('upgrade', (res, socket, head) => {
        websocket.emit('upgrade', res);

        //
        // The user may have closed the connection from a listener of the
        // `'upgrade'` event.
        //
        if (websocket.readyState !== WebSocket$1.CONNECTING) return;

        req = websocket._req = null;

        if (res.headers.upgrade.toLowerCase() !== 'websocket') {
          abortHandshake(websocket, socket, 'Invalid Upgrade header');
          return;
        }

        const digest = createHash('sha1')
          .update(key + GUID)
          .digest('base64');

        if (res.headers['sec-websocket-accept'] !== digest) {
          abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');
          return;
        }

        const serverProt = res.headers['sec-websocket-protocol'];
        let protError;

        if (serverProt !== undefined) {
          if (!protocolSet.size) {
            protError = 'Server sent a subprotocol but none was requested';
          } else if (!protocolSet.has(serverProt)) {
            protError = 'Server sent an invalid subprotocol';
          }
        } else if (protocolSet.size) {
          protError = 'Server sent no subprotocol';
        }

        if (protError) {
          abortHandshake(websocket, socket, protError);
          return;
        }

        if (serverProt) websocket._protocol = serverProt;

        const secWebSocketExtensions = res.headers['sec-websocket-extensions'];

        if (secWebSocketExtensions !== undefined) {
          if (!perMessageDeflate) {
            const message =
              'Server sent a Sec-WebSocket-Extensions header but no extension ' +
              'was requested';
            abortHandshake(websocket, socket, message);
            return;
          }

          let extensions;

          try {
            extensions = parse(secWebSocketExtensions);
          } catch (err) {
            const message = 'Invalid Sec-WebSocket-Extensions header';
            abortHandshake(websocket, socket, message);
            return;
          }

          const extensionNames = Object.keys(extensions);

          if (
            extensionNames.length !== 1 ||
            extensionNames[0] !== PerMessageDeflate.extensionName
          ) {
            const message = 'Server indicated an extension that was not requested';
            abortHandshake(websocket, socket, message);
            return;
          }

          try {
            perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);
          } catch (err) {
            const message = 'Invalid Sec-WebSocket-Extensions header';
            abortHandshake(websocket, socket, message);
            return;
          }

          websocket._extensions[PerMessageDeflate.extensionName] =
            perMessageDeflate;
        }

        websocket.setSocket(socket, head, {
          generateMask: opts.generateMask,
          maxPayload: opts.maxPayload,
          skipUTF8Validation: opts.skipUTF8Validation
        });
      });

      if (opts.finishRequest) {
        opts.finishRequest(req, websocket);
      } else {
        req.end();
      }
    }

    /**
     * Emit the `'error'` and `'close'` events.
     *
     * @param {WebSocket} websocket The WebSocket instance
     * @param {Error} The error to emit
     * @private
     */
    function emitErrorAndClose(websocket, err) {
      websocket._readyState = WebSocket$1.CLOSING;
      websocket.emit('error', err);
      websocket.emitClose();
    }

    /**
     * Create a `net.Socket` and initiate a connection.
     *
     * @param {Object} options Connection options
     * @return {net.Socket} The newly created socket used to start the connection
     * @private
     */
    function netConnect(options) {
      options.path = options.socketPath;
      return net.connect(options);
    }

    /**
     * Create a `tls.TLSSocket` and initiate a connection.
     *
     * @param {Object} options Connection options
     * @return {tls.TLSSocket} The newly created socket used to start the connection
     * @private
     */
    function tlsConnect(options) {
      options.path = undefined;

      if (!options.servername && options.servername !== '') {
        options.servername = net.isIP(options.host) ? '' : options.host;
      }

      return tls.connect(options);
    }

    /**
     * Abort the handshake and emit an error.
     *
     * @param {WebSocket} websocket The WebSocket instance
     * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to
     *     abort or the socket to destroy
     * @param {String} message The error message
     * @private
     */
    function abortHandshake(websocket, stream, message) {
      websocket._readyState = WebSocket$1.CLOSING;

      const err = new Error(message);
      Error.captureStackTrace(err, abortHandshake);

      if (stream.setHeader) {
        stream[kAborted] = true;
        stream.abort();

        if (stream.socket && !stream.socket.destroyed) {
          //
          // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if
          // called after the request completed. See
          // https://github.com/websockets/ws/issues/1869.
          //
          stream.socket.destroy();
        }

        browser$1$1.nextTick(emitErrorAndClose, websocket, err);
      } else {
        stream.destroy(err);
        stream.once('error', websocket.emit.bind(websocket, 'error'));
        stream.once('close', websocket.emitClose.bind(websocket));
      }
    }

    /**
     * Handle cases where the `ping()`, `pong()`, or `send()` methods are called
     * when the `readyState` attribute is `CLOSING` or `CLOSED`.
     *
     * @param {WebSocket} websocket The WebSocket instance
     * @param {*} [data] The data to send
     * @param {Function} [cb] Callback
     * @private
     */
    function sendAfterClose(websocket, data, cb) {
      if (data) {
        const length = toBuffer(data).length;

        //
        // The `_bufferedAmount` property is used only when the peer is a client and
        // the opening handshake fails. Under these circumstances, in fact, the
        // `setSocket()` method is not called, so the `_socket` and `_sender`
        // properties are set to `null`.
        //
        if (websocket._socket) websocket._sender._bufferedBytes += length;
        else websocket._bufferedAmount += length;
      }

      if (cb) {
        const err = new Error(
          `WebSocket is not open: readyState ${websocket.readyState} ` +
            `(${readyStates[websocket.readyState]})`
        );
        browser$1$1.nextTick(cb, err);
      }
    }

    /**
     * The listener of the `Receiver` `'conclude'` event.
     *
     * @param {Number} code The status code
     * @param {Buffer} reason The reason for closing
     * @private
     */
    function receiverOnConclude(code, reason) {
      const websocket = this[kWebSocket];

      websocket._closeFrameReceived = true;
      websocket._closeMessage = reason;
      websocket._closeCode = code;

      if (websocket._socket[kWebSocket] === undefined) return;

      websocket._socket.removeListener('data', socketOnData);
      browser$1$1.nextTick(resume, websocket._socket);

      if (code === 1005) websocket.close();
      else websocket.close(code, reason);
    }

    /**
     * The listener of the `Receiver` `'drain'` event.
     *
     * @private
     */
    function receiverOnDrain() {
      const websocket = this[kWebSocket];

      if (!websocket.isPaused) websocket._socket.resume();
    }

    /**
     * The listener of the `Receiver` `'error'` event.
     *
     * @param {(RangeError|Error)} err The emitted error
     * @private
     */
    function receiverOnError(err) {
      const websocket = this[kWebSocket];

      if (websocket._socket[kWebSocket] !== undefined) {
        websocket._socket.removeListener('data', socketOnData);

        //
        // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See
        // https://github.com/websockets/ws/issues/1940.
        //
        browser$1$1.nextTick(resume, websocket._socket);

        websocket.close(err[kStatusCode]);
      }

      websocket.emit('error', err);
    }

    /**
     * The listener of the `Receiver` `'finish'` event.
     *
     * @private
     */
    function receiverOnFinish() {
      this[kWebSocket].emitClose();
    }

    /**
     * The listener of the `Receiver` `'message'` event.
     *
     * @param {Buffer|ArrayBuffer|Buffer[])} data The message
     * @param {Boolean} isBinary Specifies whether the message is binary or not
     * @private
     */
    function receiverOnMessage(data, isBinary) {
      this[kWebSocket].emit('message', data, isBinary);
    }

    /**
     * The listener of the `Receiver` `'ping'` event.
     *
     * @param {Buffer} data The data included in the ping frame
     * @private
     */
    function receiverOnPing(data) {
      const websocket = this[kWebSocket];

      websocket.pong(data, !websocket._isServer, NOOP);
      websocket.emit('ping', data);
    }

    /**
     * The listener of the `Receiver` `'pong'` event.
     *
     * @param {Buffer} data The data included in the pong frame
     * @private
     */
    function receiverOnPong(data) {
      this[kWebSocket].emit('pong', data);
    }

    /**
     * Resume a readable stream
     *
     * @param {Readable} stream The readable stream
     * @private
     */
    function resume(stream) {
      stream.resume();
    }

    /**
     * The listener of the `net.Socket` `'close'` event.
     *
     * @private
     */
    function socketOnClose() {
      const websocket = this[kWebSocket];

      this.removeListener('close', socketOnClose);
      this.removeListener('data', socketOnData);
      this.removeListener('end', socketOnEnd);

      websocket._readyState = WebSocket$1.CLOSING;

      let chunk;

      //
      // The close frame might not have been received or the `'end'` event emitted,
      // for example, if the socket was destroyed due to an error. Ensure that the
      // `receiver` stream is closed after writing any remaining buffered data to
      // it. If the readable side of the socket is in flowing mode then there is no
      // buffered data as everything has been already written and `readable.read()`
      // will return `null`. If instead, the socket is paused, any possible buffered
      // data will be read as a single chunk.
      //
      if (
        !this._readableState.endEmitted &&
        !websocket._closeFrameReceived &&
        !websocket._receiver._writableState.errorEmitted &&
        (chunk = websocket._socket.read()) !== null
      ) {
        websocket._receiver.write(chunk);
      }

      websocket._receiver.end();

      this[kWebSocket] = undefined;

      clearTimeout(websocket._closeTimer);

      if (
        websocket._receiver._writableState.finished ||
        websocket._receiver._writableState.errorEmitted
      ) {
        websocket.emitClose();
      } else {
        websocket._receiver.on('error', receiverOnFinish);
        websocket._receiver.on('finish', receiverOnFinish);
      }
    }

    /**
     * The listener of the `net.Socket` `'data'` event.
     *
     * @param {Buffer} chunk A chunk of data
     * @private
     */
    function socketOnData(chunk) {
      if (!this[kWebSocket]._receiver.write(chunk)) {
        this.pause();
      }
    }

    /**
     * The listener of the `net.Socket` `'end'` event.
     *
     * @private
     */
    function socketOnEnd() {
      const websocket = this[kWebSocket];

      websocket._readyState = WebSocket$1.CLOSING;
      websocket._receiver.end();
      this.end();
    }

    /**
     * The listener of the `net.Socket` `'error'` event.
     *
     * @private
     */
    function socketOnError() {
      const websocket = this[kWebSocket];

      this.removeListener('error', socketOnError);
      this.on('error', NOOP);

      if (websocket) {
        websocket._readyState = WebSocket$1.CLOSING;
        this.destroy();
      }
    }

    var WebSocket$2 = /*@__PURE__*/getDefaultExportFromCjs(websocket);

    var _watchAddress = async (_params, _notif) => {
        console.log('PARAMS', _params);
        console.log('NOTIF', _notif);
        /* Initialize locals. */
        // let notif

        /* Handle notifications. */
        // if (_params?.notif) {
        //     notif = _params.notif
        // } else if (_notif) {
        //     notif = _notif
        // }

        const client = createClient({
        	url: 'wss://nexa.sh/graphql',
            webSocketImpl: WebSocket$2,
        });

        // subscription
        const onNext = (_val) => {
            /* handle incoming values */
            console.log('TX', _val);
        };

        await new Promise((resolve, reject) => {
            client.subscribe(
                {
                    query: 'subscription { transaction { txidem hex } }',
                },
                {
                    next: onNext,
                    error: reject,
                    complete: resolve,
                },
            );
        }).catch(err => console.error(err));
    };

    /* Import (local) modules. */

    /* Export (local) modules. */
    const decodeAddress = decodeAddress$1;
    const encodeAddress = encodeAddress$1;
    const getSender = _getSender;
    const listUnspent = _listUnspent;
    const watchAddress = _watchAddress;


    /**
     * Address Class
     *
     * Manages address functions.
     */
    class Address {
        constructor(_params, _notif) {
            /* Initialize Address class. */
            console.info('Initializing Address...');
            console.log(JSON.stringify(_params, null, 2));

            /* Handle notifications. */
            if (_params?.notif) {
                notif = _params.notif;
            } else if (_notif) {
                notif = _notif;
            }

            /* Set (address) seed. */
            this._seed = _params?.seed;

            /* Validate seed. */
            if (!this._seed) {
                /* Set (address) seed. */
                this._seed = _params;
            }

            /* Set seed type. */
            this._seedType = getSeedType(_params);

            /* Validate seed type. */
            if (!this._seedType) {
                throw new Error(`Oops! Invalid address seed.`)
            }
        }

        test() {
            testAddr();
        }

        decode(_addr) {
            return decodeAddress(_addr)
        }
        static decode(_addr) {
            return decodeAddress(_addr)
        }

        static getSender(_input) {
            return getSender(_input)
        }

        encode(_prefix, _type, _hash) {
            return encodeAddress(_prefix, _type, _hash)
        }
        static encode(_prefix, _type, _hash) {
            return encodeAddress(_prefix, _type, _hash)
        }

        /**
         * To String
         *
         * Serializes (or marshalls) the Address details into a JSON package.
         *
         * (optional) Set formatting to (true) for "pretty" output styling.
         */
        toString(_formatted = false) {
            /* Build Address (data) package. */
            const pkg = {
                seed: this._seed,
                seedType: this._seedType,
            };

            /* Handle formatting flag. */
            if (_formatted) {
                return JSON.stringify(pkg, null, 2)
            } else {
                return pkg
            }
        }
    }


    /* Initialize (globalThis) Nexa class. */
    const Nexa = {};

    /* Initialize Address class. */
    Nexa.Address = Address;

    /* Initialize Address modules. */
    Nexa.decodeAddress = decodeAddress;
    Nexa.encodeAddress = encodeAddress;
    Nexa.getSender = getSender;
    Nexa.listUnspent = listUnspent;
    Nexa.watchAddress = watchAddress;

    /* Export Nexa to globalThis. */
    // NOTE: We merge to avoid conflict with other libraries.
    globalThis.Nexa = {
        ...globalThis.Nexa, // preserve Nexa object
        ...Nexa, // extend Nexa object
    };

    exports.Address = Address;
    exports.decodeAddress = decodeAddress;
    exports.encodeAddress = encodeAddress;
    exports.getSender = getSender;
    exports.listUnspent = listUnspent;
    exports.watchAddress = watchAddress;

    return exports;

})({});
