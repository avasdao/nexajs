{"version":3,"file":"vendors-node_modules_theia_application-package_lib_api_js-node_modules_theia_plugin-ext_lib_c-08ad78.js","mappings":"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","sources":["webpack:////media/shomari/Workspace/avasdao/nexajs/studio-code/node_modules/@theia/application-package/src/api.ts?","webpack:////media/shomari/Workspace/avasdao/nexajs/studio-code/node_modules/@theia/plugin-ext/src/common/index.ts?","webpack:////media/shomari/Workspace/avasdao/nexajs/studio-code/node_modules/@theia/plugin-ext/src/common/plugin-ext-api-contribution.ts?","webpack:////media/shomari/Workspace/avasdao/nexajs/studio-code/node_modules/@theia/plugin-ext/src/common/plugin-identifiers.ts?","webpack:////media/shomari/Workspace/avasdao/nexajs/studio-code/node_modules/@theia/plugin-ext/src/common/plugin-protocol.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2021 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\n/**\n * The default supported API version the framework supports.\n * The version should be in the format `x.y.z`.\n */\nexport const DEFAULT_SUPPORTED_API_VERSION = '1.82.0';\n","// *****************************************************************************\n// Copyright (C) 2018 Red Hat, Inc. and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\n// Here we expose types from @theia/plugin, so it becomes a direct dependency\nexport * from './plugin-protocol';\nexport * from './plugin-api-rpc';\nexport * from './plugin-ext-api-contribution';\n\nimport { registerMsgPackExtensions } from './rpc-protocol';\n\nregisterMsgPackExtensions();\n","// *****************************************************************************\n// Copyright (C) 2018 Red Hat, Inc. and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\nimport { RPCProtocol } from './rpc-protocol';\nimport { PluginManager, Plugin } from './plugin-api-rpc';\nimport { interfaces } from '@theia/core/shared/inversify';\n\nexport const ExtPluginApiProvider = 'extPluginApi';\n/**\n * Provider for extension API description\n */\nexport interface ExtPluginApiProvider {\n    /**\n     * Provide API description\n     */\n    provideApi(): ExtPluginApi;\n}\n\n/**\n * Plugin API extension description.\n * This interface describes scripts for both plugin runtimes: frontend(WebWorker) and backend(NodeJs)\n */\nexport interface ExtPluginApi {\n\n    /**\n     * Path to the script which should be loaded to provide api, module should export `provideApi` function with\n     * [ExtPluginApiBackendInitializationFn](#ExtPluginApiBackendInitializationFn) signature\n     */\n    backendInitPath?: string;\n\n    /**\n     * Initialization information for frontend part of Plugin API\n     */\n    frontendExtApi?: FrontendExtPluginApi;\n}\n\nexport interface ExtPluginApiFrontendInitializationFn {\n    (rpc: RPCProtocol, plugins: Map<string, Plugin>): void;\n}\n\nexport interface ExtPluginApiBackendInitializationFn {\n    (rpc: RPCProtocol, pluginManager: PluginManager): void;\n}\n\n/**\n * Interface contains information for frontend(WebWorker) Plugin API extension initialization\n */\nexport interface FrontendExtPluginApi {\n    /**\n     * path to js file\n     */\n    initPath: string;\n    /** global variable name */\n    initVariable: string;\n    /**\n     * init function name,\n     * function should have  [ExtPluginApiFrontendInitializationFn](#ExtPluginApiFrontendInitializationFn)\n     */\n    initFunction: string;\n}\n\nexport const MainPluginApiProvider = Symbol('mainPluginApi');\n\n/**\n * Implementation should contains main(Theia) part of new namespace in Plugin API.\n * [initialize](#initialize) will be called once per plugin runtime\n */\nexport interface MainPluginApiProvider {\n    initialize(rpc: RPCProtocol, container: interfaces.Container): void;\n}\n","// *****************************************************************************\n// Copyright (C) 2022 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nexport namespace PluginIdentifiers {\n    export interface Components {\n        publisher?: string;\n        name: string;\n        version: string;\n    }\n\n    export interface IdAndVersion {\n        id: UnversionedId;\n        version: string;\n    }\n\n    export type VersionedId = `${string}.${string}@${string}`;\n    export type UnversionedId = `${string}.${string}`;\n    /** Unpublished plugins (not from Open VSX or VSCode plugin store) may not have a `publisher` field. */\n    export const UNPUBLISHED = '<unpublished>';\n\n    /**\n     * @returns a string in the format `<publisher>.<name>`\n     */\n    export function componentsToUnversionedId({ publisher = UNPUBLISHED, name }: Components): UnversionedId {\n        return `${publisher.toLowerCase()}.${name.toLowerCase()}`;\n    }\n    /**\n     * @returns a string in the format `<publisher>.<name>@<version>`.\n     */\n    export function componentsToVersionedId({ publisher = UNPUBLISHED, name, version }: Components): VersionedId {\n        return `${publisher.toLowerCase()}.${name.toLowerCase()}@${version}`;\n    }\n    export function componentsToVersionWithId(components: Components): IdAndVersion {\n        return { id: componentsToUnversionedId(components), version: components.version };\n    }\n    /**\n     * @returns a string in the format `<id>@<version>`.\n     */\n    export function idAndVersionToVersionedId({ id, version }: IdAndVersion): VersionedId {\n        return `${id}@${version}`;\n    }\n    /**\n     * @returns a string in the format `<publisher>.<name>`.\n     */\n    export function unversionedFromVersioned(id: VersionedId): UnversionedId {\n        const endOfId = id.indexOf('@');\n        return id.slice(0, endOfId) as UnversionedId;\n    }\n    /**\n     * @returns `undefined` if it looks like the string passed in does not have the format returned by {@link PluginIdentifiers.toVersionedId}.\n     */\n    export function identifiersFromVersionedId(probablyId: string): Components | undefined {\n        const endOfPublisher = probablyId.indexOf('.');\n        const endOfName = probablyId.indexOf('@', endOfPublisher);\n        if (endOfPublisher === -1 || endOfName === -1) {\n            return undefined;\n        }\n        return { publisher: probablyId.slice(0, endOfPublisher), name: probablyId.slice(endOfPublisher + 1, endOfName), version: probablyId.slice(endOfName + 1) };\n    }\n    /**\n     * @returns `undefined` if it looks like the string passed in does not have the format returned by {@link PluginIdentifiers.toVersionedId}.\n     */\n    export function idAndVersionFromVersionedId(probablyId: string): IdAndVersion | undefined {\n        const endOfPublisher = probablyId.indexOf('.');\n        const endOfName = probablyId.indexOf('@', endOfPublisher);\n        if (endOfPublisher === -1 || endOfName === -1) {\n            return undefined;\n        }\n        return { id: probablyId.slice(0, endOfName) as UnversionedId, version: probablyId.slice(endOfName + 1) };\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2018 Red Hat, Inc. and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\nimport { RpcServer } from '@theia/core/lib/common/messaging/proxy-factory';\nimport { RPCProtocol } from './rpc-protocol';\nimport { Disposable } from '@theia/core/lib/common/disposable';\nimport { LogPart, KeysToAnyValues, KeysToKeysToAnyValue } from './types';\nimport { CharacterPair, CommentRule, PluginAPIFactory, Plugin, ThemeIcon } from './plugin-api-rpc';\nimport { ExtPluginApi } from './plugin-ext-api-contribution';\nimport { IJSONSchema, IJSONSchemaSnippet } from '@theia/core/lib/common/json-schema';\nimport { RecursivePartial } from '@theia/core/lib/common/types';\nimport { PreferenceSchema, PreferenceSchemaProperties } from '@theia/core/lib/common/preferences/preference-schema';\nimport { ProblemMatcherContribution, ProblemPatternContribution, TaskDefinition } from '@theia/task/lib/common';\nimport { ColorDefinition } from '@theia/core/lib/common/color';\nimport { ResourceLabelFormatter } from '@theia/core/lib/common/label-protocol';\nimport { PluginIdentifiers } from './plugin-identifiers';\n\nexport { PluginIdentifiers };\nexport const hostedServicePath = '/services/hostedPlugin';\n\n/**\n * Plugin engine (API) type, i.e. 'theiaPlugin', 'vscode', etc.\n */\nexport type PluginEngine = string;\n\n/**\n * This interface describes a package.json object.\n */\nexport interface PluginPackage {\n    name: string;\n    // The publisher is not guaranteed to be defined for unpublished plugins. https://github.com/microsoft/vscode-vsce/commit/a38657ece04c20e4fbde15d5ac1ed39ca51cb856\n    publisher: string | undefined;\n    version: string;\n    engines: {\n        [type in PluginEngine]: string;\n    };\n    theiaPlugin?: {\n        frontend?: string;\n        backend?: string;\n    };\n    main?: string;\n    browser?: string;\n    displayName: string;\n    description: string;\n    contributes?: PluginPackageContribution;\n    packagePath: string;\n    activationEvents?: string[];\n    extensionDependencies?: string[];\n    extensionPack?: string[];\n    l10n?: string;\n    icon?: string;\n    extensionKind?: Array<'ui' | 'workspace'>\n}\nexport namespace PluginPackage {\n    export function toPluginUrl(pck: PluginPackage | PluginModel, relativePath: string): string {\n        return `hostedPlugin/${getPluginId(pck)}/${encodeURIComponent(relativePath)}`;\n    }\n}\n\n/**\n * This interface describes a package.json contribution section object.\n */\nexport interface PluginPackageContribution {\n    authentication?: PluginPackageAuthenticationProvider[];\n    configuration?: RecursivePartial<PreferenceSchema> | RecursivePartial<PreferenceSchema>[];\n    configurationDefaults?: RecursivePartial<PreferenceSchemaProperties>;\n    languages?: PluginPackageLanguageContribution[];\n    grammars?: PluginPackageGrammarsContribution[];\n    customEditors?: PluginPackageCustomEditor[];\n    viewsContainers?: { [location: string]: PluginPackageViewContainer[] };\n    views?: { [location: string]: PluginPackageView[] };\n    viewsWelcome?: PluginPackageViewWelcome[];\n    commands?: PluginPackageCommand | PluginPackageCommand[];\n    menus?: { [location: string]: PluginPackageMenu[] };\n    submenus?: PluginPackageSubmenu[];\n    keybindings?: PluginPackageKeybinding | PluginPackageKeybinding[];\n    debuggers?: PluginPackageDebuggersContribution[];\n    snippets?: PluginPackageSnippetsContribution[];\n    themes?: PluginThemeContribution[];\n    iconThemes?: PluginIconThemeContribution[];\n    icons?: PluginIconContribution[];\n    colors?: PluginColorContribution[];\n    taskDefinitions?: PluginTaskDefinitionContribution[];\n    problemMatchers?: PluginProblemMatcherContribution[];\n    problemPatterns?: PluginProblemPatternContribution[];\n    jsonValidation?: PluginJsonValidationContribution[];\n    resourceLabelFormatters?: ResourceLabelFormatter[];\n    localizations?: PluginPackageLocalization[];\n    terminal?: PluginPackageTerminal;\n    notebooks?: PluginPackageNotebook[];\n    notebookRenderer?: PluginNotebookRendererContribution[];\n}\n\nexport interface PluginPackageNotebook {\n    type: string;\n    displayName: string;\n    selector?: readonly { filenamePattern?: string; excludeFileNamePattern?: string }[];\n    priority?: string;\n}\n\nexport interface PluginNotebookRendererContribution {\n    readonly id: string;\n    readonly displayName: string;\n    readonly mimeTypes: string[];\n    readonly entrypoint: string | { readonly extends: string; readonly path: string };\n    readonly requiresMessaging?: 'always' | 'optional' | 'never'\n}\n\nexport interface PluginPackageAuthenticationProvider {\n    id: string;\n    label: string;\n}\n\nexport interface PluginPackageTerminalProfile {\n    title: string;\n    id: string;\n    icon?: string;\n}\n\nexport interface PluginPackageTerminal {\n    profiles: PluginPackageTerminalProfile[];\n}\n\nexport interface PluginPackageLocalization {\n    languageId: string;\n    languageName?: string;\n    localizedLanguageName?: string;\n    translations: PluginPackageTranslation[];\n    minimalTranslations?: { [key: string]: string };\n}\n\nexport interface PluginPackageTranslation {\n    id: string;\n    path: string;\n}\n\nexport interface PluginPackageCustomEditor {\n    viewType: string;\n    displayName: string;\n    selector?: CustomEditorSelector[];\n    priority?: CustomEditorPriority;\n}\n\nexport interface CustomEditorSelector {\n    readonly filenamePattern?: string;\n}\n\nexport enum CustomEditorPriority {\n    default = 'default',\n    builtin = 'builtin',\n    option = 'option',\n}\n\nexport interface PluginPackageViewContainer {\n    id: string;\n    title: string;\n    icon: string;\n}\n\nexport enum PluginViewType {\n    Tree = 'tree',\n    Webview = 'webview'\n}\n\nexport interface PluginPackageView {\n    id: string;\n    name: string;\n    when?: string;\n    type?: string;\n}\n\nexport interface PluginPackageViewWelcome {\n    view: string;\n    contents: string;\n    when?: string;\n}\n\nexport interface PluginPackageCommand {\n    command: string;\n    title: string;\n    original?: string;\n    category?: string;\n    icon?: string | { light: string; dark: string; };\n    enablement?: string;\n}\n\nexport interface PluginPackageMenu {\n    command?: string;\n    submenu?: string;\n    alt?: string;\n    group?: string;\n    when?: string;\n}\n\nexport interface PluginPackageSubmenu {\n    id: string;\n    label: string;\n    icon: IconUrl;\n}\n\nexport interface PluginPackageKeybinding {\n    key?: string;\n    command: string;\n    when?: string;\n    mac?: string;\n    linux?: string;\n    win?: string;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    args?: any;\n}\n\nexport interface PluginPackageGrammarsContribution {\n    language?: string;\n    scopeName: string;\n    path: string;\n    embeddedLanguages?: ScopeMap;\n    tokenTypes?: ScopeMap;\n    injectTo?: string[];\n}\n\nexport interface ScopeMap {\n    [scopeName: string]: string;\n}\n\nexport interface PluginPackageSnippetsContribution {\n    language?: string;\n    path?: string;\n}\n\nexport interface PluginColorContribution {\n    id?: string;\n    description?: string;\n    defaults?: { light?: string, dark?: string, highContrast?: string };\n}\n\nexport type PluginUiTheme = 'vs' | 'vs-dark' | 'hc-black';\n\nexport interface PluginThemeContribution {\n    id?: string;\n    label?: string;\n    description?: string;\n    path?: string;\n    uiTheme?: PluginUiTheme;\n}\n\nexport interface PluginIconThemeContribution {\n    id?: string;\n    label?: string;\n    description?: string;\n    path?: string;\n    uiTheme?: PluginUiTheme;\n}\n\nexport interface PluginIconContribution {\n    [id: string]: {\n        description: string;\n        default: { fontPath: string; fontCharacter: string } | string;\n    };\n}\n\nexport interface PlatformSpecificAdapterContribution {\n    program?: string;\n    args?: string[];\n    runtime?: string;\n    runtimeArgs?: string[];\n}\n\n/**\n * This interface describes a package.json debuggers contribution section object.\n */\nexport interface PluginPackageDebuggersContribution extends PlatformSpecificAdapterContribution {\n    type: string;\n    label?: string;\n    languages?: string[];\n    enableBreakpointsFor?: { languageIds: string[] };\n    configurationAttributes: { [request: string]: IJSONSchema };\n    configurationSnippets: IJSONSchemaSnippet[];\n    variables?: ScopeMap;\n    adapterExecutableCommand?: string;\n    win?: PlatformSpecificAdapterContribution;\n    winx86?: PlatformSpecificAdapterContribution;\n    windows?: PlatformSpecificAdapterContribution;\n    osx?: PlatformSpecificAdapterContribution;\n    linux?: PlatformSpecificAdapterContribution;\n}\n\n/**\n * This interface describes a package.json languages contribution section object.\n */\nexport interface PluginPackageLanguageContribution {\n    id: string;\n    extensions?: string[];\n    filenames?: string[];\n    filenamePatterns?: string[];\n    firstLine?: string;\n    aliases?: string[];\n    mimetypes?: string[];\n    configuration?: string;\n}\n\nexport interface PluginPackageLanguageContributionConfiguration {\n    comments?: CommentRule;\n    brackets?: CharacterPair[];\n    autoClosingPairs?: (CharacterPair | AutoClosingPairConditional)[];\n    surroundingPairs?: (CharacterPair | AutoClosingPair)[];\n    wordPattern?: string;\n    indentationRules?: IndentationRules;\n    folding?: FoldingRules;\n    onEnterRules?: OnEnterRule[];\n}\n\nexport interface PluginTaskDefinitionContribution {\n    type: string;\n    required: string[];\n    properties?: IJSONSchema['properties'];\n}\n\nexport interface PluginProblemMatcherContribution extends ProblemMatcherContribution {\n    name: string;\n}\n\nexport interface PluginProblemPatternContribution extends ProblemPatternContribution {\n    name: string;\n}\n\nexport interface PluginJsonValidationContribution {\n    fileMatch: string | string[];\n    url: string;\n}\n\nexport const PluginScanner = Symbol('PluginScanner');\n/**\n * This scanner process package.json object and returns plugin metadata objects.\n */\nexport interface PluginScanner {\n    /**\n     * The type of plugin's API (engine name)\n     */\n    apiType: PluginEngine;\n\n    /**\n     * Creates plugin's model.\n     *\n     * @param {PluginPackage} plugin\n     * @returns {PluginModel}\n     */\n    getModel(plugin: PluginPackage): PluginModel;\n\n    /**\n     * Creates plugin's lifecycle.\n     *\n     * @returns {PluginLifecycle}\n     */\n    getLifecycle(plugin: PluginPackage): PluginLifecycle;\n\n    getContribution(plugin: PluginPackage): Promise<PluginContribution | undefined>;\n\n    /**\n     * A mapping between a dependency as its defined in package.json\n     * and its deployable form, e.g. `publisher.name` -> `vscode:extension/publisher.name`\n     */\n    getDependencies(plugin: PluginPackage): Map<string, string> | undefined;\n}\n\n/**\n * A plugin resolver is handling how to resolve a plugin link into a local resource.\n */\nexport const PluginDeployerResolver = Symbol('PluginDeployerResolver');\n/**\n * A resolver handle a set of resource\n */\nexport interface PluginDeployerResolver {\n\n    init?(pluginDeployerResolverInit: PluginDeployerResolverInit): void;\n\n    accept(pluginSourceId: string): boolean;\n\n    resolve(pluginResolverContext: PluginDeployerResolverContext, options?: PluginDeployOptions): Promise<void>;\n\n}\n\nexport const PluginDeployerDirectoryHandler = Symbol('PluginDeployerDirectoryHandler');\nexport interface PluginDeployerDirectoryHandler {\n    accept(pluginDeployerEntry: PluginDeployerEntry): Promise<boolean>;\n\n    handle(context: PluginDeployerDirectoryHandlerContext): Promise<void>;\n}\n\nexport const PluginDeployerFileHandler = Symbol('PluginDeployerFileHandler');\nexport interface PluginDeployerFileHandler {\n\n    accept(pluginDeployerEntry: PluginDeployerEntry): Promise<boolean>;\n\n    handle(context: PluginDeployerFileHandlerContext): Promise<void>;\n}\n\nexport interface PluginDeployerResolverInit {\n\n}\n\nexport interface PluginDeployerResolverContext {\n\n    addPlugin(pluginId: string, path: string): void;\n\n    getPlugins(): PluginDeployerEntry[];\n\n    getOriginId(): string;\n\n}\n\nexport interface PluginDeployerStartContext {\n    readonly userEntries: string[]\n    readonly systemEntries: string[]\n}\n\nexport const PluginDeployer = Symbol('PluginDeployer');\nexport interface PluginDeployer {\n\n    start(): void;\n\n}\n\nexport const PluginDeployerParticipant = Symbol('PluginDeployerParticipant');\n/**\n * A participant can hook into the plugin deployer lifecycle.\n */\nexport interface PluginDeployerParticipant {\n    onWillStart?(context: PluginDeployerStartContext): Promise<void>;\n}\n\nexport enum PluginDeployerEntryType {\n\n    FRONTEND,\n\n    BACKEND\n}\n\n/**\n * Whether a plugin installed by a user or system.\n */\nexport enum PluginType {\n    System,\n    User\n};\n\nexport interface UnresolvedPluginEntry {\n    id: string;\n    type?: PluginType;\n}\n\nexport interface PluginDeployerEntry {\n\n    /**\n     * ID (before any resolution)\n     */\n    id(): string;\n\n    /**\n     * Original resolved path\n     */\n    originalPath(): string;\n\n    /**\n     * Local path on the filesystem.\n     */\n    path(): string;\n\n    /**\n     * Get a specific entry\n     */\n    getValue<T>(key: string): T;\n\n    /**\n     * Store a value\n     */\n    storeValue<T>(key: string, value: T): void;\n\n    /**\n     * Update path\n     */\n    updatePath(newPath: string): void;\n\n    getChanges(): string[];\n\n    isFile(): Promise<boolean>;\n\n    isDirectory(): Promise<boolean>;\n\n    /**\n     * Resolved if a resolver has handle this plugin\n     */\n    isResolved(): boolean;\n\n    resolvedBy(): string;\n\n    /**\n     * Accepted when a handler is telling this location can go live\n     */\n    isAccepted(...types: PluginDeployerEntryType[]): boolean;\n\n    accept(...types: PluginDeployerEntryType[]): void;\n\n    hasError(): boolean;\n\n    type: PluginType\n    /**\n     * A fs path to a directory where a plugin is located.\n     * Depending on a plugin format it can be different from `path`.\n     * Use `path` if you want to resolve something within a plugin, like `README.md` file.\n     * Use `rootPath` if you want to manipulate the entire plugin location, like delete or move it.\n     */\n    rootPath: string\n}\n\nexport interface PluginDeployerFileHandlerContext {\n\n    unzip(sourcePath: string, destPath: string): Promise<void>;\n\n    pluginEntry(): PluginDeployerEntry;\n\n}\n\nexport interface PluginDeployerDirectoryHandlerContext {\n\n    copy(origin: string, target: string): Promise<void>;\n\n    pluginEntry(): PluginDeployerEntry;\n\n}\n\n/**\n * This interface describes a plugin model object, which is populated from package.json.\n */\nexport interface PluginModel {\n    id: string;\n    name: string;\n    publisher: string;\n    version: string;\n    displayName: string;\n    description: string;\n    engine: {\n        type: PluginEngine;\n        version: string;\n    };\n    entryPoint: PluginEntryPoint;\n    packageUri: string;\n    /**\n     * @deprecated since 1.1.0 - because it lead to problems with getting a relative path\n     * needed by Icon Themes to correctly load Fonts, use packageUri instead.\n     */\n    packagePath: string;\n    iconUrl?: string;\n    l10n?: string;\n    readmeUrl?: string;\n    licenseUrl?: string;\n}\n\nexport interface PluginEntryPoint {\n    frontend?: string;\n    backend?: string;\n}\n\n/**\n * This interface describes some static plugin contributions.\n */\nexport interface PluginContribution {\n    activationEvents?: string[];\n    authentication?: AuthenticationProviderInformation[];\n    configuration?: PreferenceSchema[];\n    configurationDefaults?: PreferenceSchemaProperties;\n    languages?: LanguageContribution[];\n    grammars?: GrammarsContribution[];\n    customEditors?: CustomEditor[];\n    viewsContainers?: { [location: string]: ViewContainer[] };\n    views?: { [location: string]: View[] };\n    viewsWelcome?: ViewWelcome[];\n    commands?: PluginCommand[];\n    menus?: { [location: string]: Menu[] };\n    submenus?: Submenu[];\n    keybindings?: Keybinding[];\n    debuggers?: DebuggerContribution[];\n    snippets?: SnippetContribution[];\n    themes?: ThemeContribution[];\n    iconThemes?: IconThemeContribution[];\n    icons?: IconContribution[];\n    colors?: ColorDefinition[];\n    taskDefinitions?: TaskDefinition[];\n    problemMatchers?: ProblemMatcherContribution[];\n    problemPatterns?: ProblemPatternContribution[];\n    resourceLabelFormatters?: ResourceLabelFormatter[];\n    localizations?: Localization[];\n    terminalProfiles?: TerminalProfile[];\n    notebooks?: NotebookContribution[];\n    notebookRenderer?: NotebookRendererContribution[];\n}\n\nexport interface NotebookContribution {\n    type: string;\n    displayName: string;\n    selector?: readonly { filenamePattern?: string; excludeFileNamePattern?: string }[];\n    priority?: string;\n}\n\nexport interface NotebookRendererContribution {\n    readonly id: string;\n    readonly displayName: string;\n    readonly mimeTypes: string[];\n    readonly entrypoint: string | { readonly extends: string; readonly path: string };\n    readonly requiresMessaging?: 'always' | 'optional' | 'never'\n}\n\nexport interface AuthenticationProviderInformation {\n    id: string;\n    label: string;\n}\n\nexport interface TerminalProfile {\n    title: string,\n    id: string,\n    icon?: string\n}\n\nexport interface Localization {\n    languageId: string;\n    languageName?: string;\n    localizedLanguageName?: string;\n    translations: Translation[];\n    minimalTranslations?: { [key: string]: string };\n}\n\nexport interface Translation {\n    id: string;\n    path: string;\n    cachedContents?: { [scope: string]: { [key: string]: string } };\n}\n\nexport interface SnippetContribution {\n    uri: string\n    source: string\n    language?: string\n}\n\nexport type UiTheme = 'vs' | 'vs-dark' | 'hc-black';\n\nexport interface ThemeContribution {\n    id?: string;\n    label?: string;\n    description?: string;\n    uri: string;\n    uiTheme?: UiTheme;\n}\n\nexport interface IconThemeContribution {\n    id: string;\n    label?: string;\n    description?: string;\n    uri: string;\n    uiTheme?: UiTheme;\n}\n\nexport interface IconDefinition {\n    fontCharacter: string;\n    location: string;\n}\n\nexport type IconDefaults = ThemeIcon | IconDefinition;\n\nexport interface IconContribution {\n    id: string;\n    extensionId: string;\n    description: string | undefined;\n    defaults: IconDefaults;\n}\n\nexport namespace IconContribution {\n    export function isIconDefinition(defaults: IconDefaults): defaults is IconDefinition {\n        return 'fontCharacter' in defaults;\n    }\n}\n\nexport interface GrammarsContribution {\n    format: 'json' | 'plist';\n    language?: string;\n    scope: string;\n    grammar?: string | object;\n    grammarLocation?: string;\n    embeddedLanguages?: ScopeMap;\n    tokenTypes?: ScopeMap;\n    injectTo?: string[];\n    balancedBracketScopes?: string[];\n    unbalancedBracketScopes?: string[];\n}\n\n/**\n * The language contribution\n */\nexport interface LanguageContribution {\n    id: string;\n    extensions?: string[];\n    filenames?: string[];\n    filenamePatterns?: string[];\n    firstLine?: string;\n    aliases?: string[];\n    mimetypes?: string[];\n    configuration?: LanguageConfiguration;\n}\n\nexport interface RegExpOptions {\n    pattern: string;\n    flags?: string;\n}\n\nexport interface LanguageConfiguration {\n    brackets?: CharacterPair[];\n    indentationRules?: IndentationRules;\n    surroundingPairs?: AutoClosingPair[];\n    autoClosingPairs?: AutoClosingPairConditional[];\n    comments?: CommentRule;\n    folding?: FoldingRules;\n    wordPattern?: string | RegExpOptions;\n    onEnterRules?: OnEnterRule[];\n}\n\n/**\n * This interface describes a package.json debuggers contribution section object.\n */\nexport interface DebuggerContribution extends PlatformSpecificAdapterContribution {\n    type: string,\n    label?: string,\n    languages?: string[],\n    enableBreakpointsFor?: {\n        languageIds: string[]\n    },\n    configurationAttributes?: IJSONSchema[],\n    configurationSnippets?: IJSONSchemaSnippet[],\n    variables?: ScopeMap,\n    adapterExecutableCommand?: string\n    win?: PlatformSpecificAdapterContribution;\n    winx86?: PlatformSpecificAdapterContribution;\n    windows?: PlatformSpecificAdapterContribution;\n    osx?: PlatformSpecificAdapterContribution;\n    linux?: PlatformSpecificAdapterContribution;\n}\n\nexport interface IndentationRules {\n    increaseIndentPattern: string | RegExpOptions;\n    decreaseIndentPattern: string | RegExpOptions;\n    unIndentedLinePattern?: string | RegExpOptions;\n    indentNextLinePattern?: string | RegExpOptions;\n}\nexport interface AutoClosingPair {\n    close: string;\n    open: string;\n}\n\nexport interface AutoClosingPairConditional extends AutoClosingPair {\n    notIn?: string[];\n}\n\nexport interface FoldingMarkers {\n    start: string | RegExpOptions;\n    end: string | RegExpOptions;\n}\n\nexport interface FoldingRules {\n    offSide?: boolean;\n    markers?: FoldingMarkers;\n}\n\nexport interface OnEnterRule {\n    beforeText: string | RegExpOptions;\n    afterText?: string | RegExpOptions;\n    previousLineText?: string | RegExpOptions;\n    action: EnterAction;\n}\n\nexport interface EnterAction {\n    indent: 'none' | 'indent' | 'outdent' | 'indentOutdent';\n    appendText?: string;\n    removeText?: number;\n}\n\n/**\n * Custom Editors contribution\n */\nexport interface CustomEditor {\n    viewType: string;\n    displayName: string;\n    selector: CustomEditorSelector[];\n    priority: CustomEditorPriority;\n}\n\n/**\n * Views Containers contribution\n */\nexport interface ViewContainer {\n    id: string;\n    title: string;\n    iconUrl: string;\n    themeIcon?: string;\n}\n\n/**\n * View contribution\n */\nexport interface View {\n    id: string;\n    name: string;\n    when?: string;\n    type?: string;\n}\n\n/**\n * View Welcome contribution\n */\nexport interface ViewWelcome {\n    view: string;\n    content: string;\n    when?: string;\n    order: number;\n}\n\nexport interface PluginCommand {\n    command: string;\n    title: string;\n    originalTitle?: string;\n    category?: string;\n    iconUrl?: IconUrl;\n    themeIcon?: string;\n    enablement?: string;\n}\n\nexport type IconUrl = string | { light: string; dark: string; };\n\n/**\n * Menu contribution\n */\nexport interface Menu {\n    command?: string;\n    submenu?: string\n    alt?: string;\n    group?: string;\n    when?: string;\n}\n\nexport interface Submenu {\n    id: string;\n    label: string;\n    icon?: IconUrl;\n}\n\n/**\n * Keybinding contribution\n */\nexport interface Keybinding {\n    keybinding?: string;\n    command: string;\n    when?: string;\n    mac?: string;\n    linux?: string;\n    win?: string;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    args?: any;\n}\n\n/**\n * This interface describes a plugin lifecycle object.\n */\nexport interface PluginLifecycle {\n    startMethod: string;\n    stopMethod: string;\n    /**\n     * Frontend module name, frontend plugin should expose this name.\n     */\n    frontendModuleName?: string;\n    /**\n     * Path to the script which should do some initialization before frontend plugin is loaded.\n     */\n    frontendInitPath?: string;\n    /**\n     * Path to the script which should do some initialization before backend plugin is loaded.\n     */\n    backendInitPath?: string;\n}\n\n/**\n * The export function of initialization module of backend plugin.\n */\nexport interface BackendInitializationFn {\n    (apiFactory: PluginAPIFactory, plugin: Plugin): void;\n}\n\nexport interface BackendLoadingFn {\n    (rpc: RPCProtocol, plugin: Plugin): void;\n}\n\nexport interface PluginContext {\n    subscriptions: Disposable[];\n}\n\nexport interface ExtensionContext {\n    subscriptions: Disposable[];\n}\n\nexport interface PluginMetadata {\n    host: string;\n    model: PluginModel;\n    lifecycle: PluginLifecycle;\n    isUnderDevelopment?: boolean;\n    outOfSync: boolean;\n}\n\nexport const MetadataProcessor = Symbol('MetadataProcessor');\nexport interface MetadataProcessor {\n    process(pluginMetadata: PluginMetadata): void;\n}\n\nexport function getPluginId(plugin: PluginPackage | PluginModel): string {\n    return `${plugin.publisher}_${plugin.name}`.replace(/\\W/g, '_');\n}\n\nexport function buildFrontendModuleName(plugin: PluginPackage | PluginModel): string {\n    return `${plugin.publisher}_${plugin.name}`.replace(/\\W/g, '_');\n}\n\nexport const HostedPluginClient = Symbol('HostedPluginClient');\nexport interface HostedPluginClient {\n    postMessage(pluginHost: string, buffer: Uint8Array): Promise<void>;\n\n    log(logPart: LogPart): void;\n\n    onDidDeploy(): void;\n}\n\nexport interface PluginDependencies {\n    metadata: PluginMetadata\n    /**\n     * Actual listing of plugin dependencies.\n     * Mapping from {@link PluginIdentifiers.UnversionedId external representation} of plugin identity to a string\n     * that can be used to identify the resolver for the specific plugin case, e.g. with scheme `vscode://<id>`.\n     */\n    mapping?: Map<string, string>\n}\n\nexport const PluginDeployerHandler = Symbol('PluginDeployerHandler');\nexport interface PluginDeployerHandler {\n    deployFrontendPlugins(frontendPlugins: PluginDeployerEntry[]): Promise<number | undefined>;\n    deployBackendPlugins(backendPlugins: PluginDeployerEntry[]): Promise<number | undefined>;\n\n    getDeployedPluginsById(pluginId: string): DeployedPlugin[];\n\n    getDeployedPlugin(pluginId: PluginIdentifiers.VersionedId): DeployedPlugin | undefined;\n    /**\n     * Removes the plugin from the location it originally resided on disk.\n     * Unless `--uncompressed-plugins-in-place` is passed to the CLI, this operation is safe.\n     */\n    uninstallPlugin(pluginId: PluginIdentifiers.VersionedId): Promise<boolean>;\n    /**\n     * Removes the plugin from the locations to which it had been deployed.\n     * This operation is not safe - references to deleted assets may remain.\n     */\n    undeployPlugin(pluginId: PluginIdentifiers.VersionedId): Promise<boolean>;\n\n    getPluginDependencies(pluginToBeInstalled: PluginDeployerEntry): Promise<PluginDependencies | undefined>;\n}\n\nexport interface GetDeployedPluginsParams {\n    pluginIds: PluginIdentifiers.VersionedId[]\n}\n\nexport interface DeployedPlugin {\n    /**\n     * defaults to system\n     */\n    type?: PluginType;\n    metadata: PluginMetadata;\n    contributes?: PluginContribution;\n}\n\nexport const HostedPluginServer = Symbol('HostedPluginServer');\nexport interface HostedPluginServer extends RpcServer<HostedPluginClient> {\n\n    getDeployedPluginIds(): Promise<PluginIdentifiers.VersionedId[]>;\n\n    getUninstalledPluginIds(): Promise<readonly PluginIdentifiers.VersionedId[]>;\n\n    getDeployedPlugins(params: GetDeployedPluginsParams): Promise<DeployedPlugin[]>;\n\n    getExtPluginAPI(): Promise<ExtPluginApi[]>;\n\n    onMessage(targetHost: string, message: Uint8Array): Promise<void>;\n\n}\n\nexport const PLUGIN_HOST_BACKEND = 'main';\n\nexport interface WorkspaceStorageKind {\n    workspace?: string | undefined;\n    roots: string[];\n}\nexport type GlobalStorageKind = undefined;\nexport type PluginStorageKind = GlobalStorageKind | WorkspaceStorageKind;\n\nexport interface PluginDeployOptions {\n    version: string;\n    /** Instructs the deployer to ignore any existing plugins with different versions */\n    ignoreOtherVersions?: boolean;\n}\n\n/**\n * The JSON-RPC workspace interface.\n */\nexport const pluginServerJsonRpcPath = '/services/plugin-ext';\nexport const PluginServer = Symbol('PluginServer');\nexport interface PluginServer {\n\n    /**\n     * Deploy a plugin.\n     *\n     * @param type whether a plugin is installed by a system or a user, defaults to a user\n     */\n    deploy(pluginEntry: string, type?: PluginType, options?: PluginDeployOptions): Promise<void>;\n    uninstall(pluginId: PluginIdentifiers.VersionedId): Promise<void>;\n    undeploy(pluginId: PluginIdentifiers.VersionedId): Promise<void>;\n\n    setStorageValue(key: string, value: KeysToAnyValues, kind: PluginStorageKind): Promise<boolean>;\n    getStorageValue(key: string, kind: PluginStorageKind): Promise<KeysToAnyValues>;\n    getAllStorageValues(kind: PluginStorageKind): Promise<KeysToKeysToAnyValue>;\n}\n\nexport const ServerPluginRunner = Symbol('ServerPluginRunner');\nexport interface ServerPluginRunner {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    acceptMessage(pluginHostId: string, jsonMessage: Uint8Array): boolean;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    onMessage(pluginHostId: string, jsonMessage: Uint8Array): void;\n    setClient(client: HostedPluginClient): void;\n    setDefault(defaultRunner: ServerPluginRunner): void;\n    clientClosed(): void;\n\n    /**\n     * Provides additional deployed plugins.\n     */\n    getExtraDeployedPlugins(): Promise<DeployedPlugin[]>;\n\n    /**\n     * Provides additional plugin ids.\n     */\n    getExtraDeployedPluginIds(): Promise<PluginIdentifiers.VersionedId[]>;\n\n}\n\nexport const PluginHostEnvironmentVariable = Symbol('PluginHostEnvironmentVariable');\nexport interface PluginHostEnvironmentVariable {\n    process(env: NodeJS.ProcessEnv): void;\n}\n"],"names":[],"sourceRoot":""}