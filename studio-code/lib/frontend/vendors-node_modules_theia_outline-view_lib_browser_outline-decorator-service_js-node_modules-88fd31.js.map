{"version":3,"file":"vendors-node_modules_theia_outline-view_lib_browser_outline-decorator-service_js-node_modules-88fd31.js","mappings":"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","sources":["webpack:///./node_modules/@theia/outline-view/src/browser/outline-decorator-service.ts?","webpack:///./node_modules/@theia/outline-view/src/browser/outline-view-service.ts?","webpack:///./node_modules/@theia/outline-view/src/browser/outline-view-tree-model.ts?","webpack:///./node_modules/@theia/outline-view/src/browser/outline-view-widget.tsx?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2018 Redhat, Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { inject, injectable, named } from '@theia/core/shared/inversify';\nimport { ContributionProvider } from '@theia/core/lib/common/contribution-provider';\nimport { TreeDecorator, AbstractTreeDecoratorService } from '@theia/core/lib/browser/tree/tree-decorator';\n\n/**\n * Symbol for all decorators that would like to contribute into the outline.\n */\nexport const OutlineTreeDecorator = Symbol('OutlineTreeDecorator');\n\n/**\n * Decorator service for the outline.\n */\n@injectable()\nexport class OutlineDecoratorService extends AbstractTreeDecoratorService {\n\n    constructor(@inject(ContributionProvider) @named(OutlineTreeDecorator) protected readonly contributions: ContributionProvider<TreeDecorator>) {\n        super(contributions.getContributions());\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject } from '@theia/core/shared/inversify';\nimport { Event, Emitter, DisposableCollection } from '@theia/core';\nimport { WidgetFactory } from '@theia/core/lib/browser';\nimport { OutlineViewWidget, OutlineViewWidgetFactory, OutlineSymbolInformationNode } from './outline-view-widget';\nimport { Widget } from '@theia/core/shared/@phosphor/widgets';\n\n@injectable()\nexport class OutlineViewService implements WidgetFactory {\n\n    id = 'outline-view';\n\n    protected widget?: OutlineViewWidget;\n    protected readonly onDidChangeOutlineEmitter = new Emitter<OutlineSymbolInformationNode[]>();\n    protected readonly onDidChangeOpenStateEmitter = new Emitter<boolean>();\n    protected readonly onDidSelectEmitter = new Emitter<OutlineSymbolInformationNode>();\n    protected readonly onDidOpenEmitter = new Emitter<OutlineSymbolInformationNode>();\n\n    constructor(@inject(OutlineViewWidgetFactory) protected factory: OutlineViewWidgetFactory) { }\n\n    get onDidSelect(): Event<OutlineSymbolInformationNode> {\n        return this.onDidSelectEmitter.event;\n    }\n\n    get onDidOpen(): Event<OutlineSymbolInformationNode> {\n        return this.onDidOpenEmitter.event;\n    }\n\n    get onDidChangeOutline(): Event<OutlineSymbolInformationNode[]> {\n        return this.onDidChangeOutlineEmitter.event;\n    }\n\n    get onDidChangeOpenState(): Event<boolean> {\n        return this.onDidChangeOpenStateEmitter.event;\n    }\n\n    get open(): boolean {\n        return this.widget !== undefined && this.widget.isVisible;\n    }\n\n    /**\n     * Publish the collection of outline view symbols.\n     * - Publishing includes setting the `OutlineViewWidget` tree with symbol information.\n     * @param roots the list of outline symbol information nodes.\n     */\n    publish(roots: OutlineSymbolInformationNode[]): void {\n        if (this.widget) {\n            this.widget.setOutlineTree(roots);\n        }\n        // onDidChangeOutline needs to be fired even when the outline view widget is closed\n        // in order to update breadcrumbs.\n        this.onDidChangeOutlineEmitter.fire(roots);\n    }\n\n    createWidget(): Promise<Widget> {\n        this.widget = this.factory();\n        const disposables = new DisposableCollection();\n        disposables.push(this.widget.onDidChangeOpenStateEmitter.event(open => this.onDidChangeOpenStateEmitter.fire(open)));\n        disposables.push(this.widget.model.onOpenNode(node => this.onDidOpenEmitter.fire(node as OutlineSymbolInformationNode)));\n        disposables.push(this.widget.model.onSelectionChanged(selection => this.onDidSelectEmitter.fire(selection[0] as OutlineSymbolInformationNode)));\n        this.widget.disposed.connect(() => {\n            this.widget = undefined;\n            disposables.dispose();\n        });\n        return Promise.resolve(this.widget);\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2019 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable } from '@theia/core/shared/inversify';\nimport { CompositeTreeNode, TreeModelImpl, ExpandableTreeNode, TreeNode } from '@theia/core/lib/browser';\n\n@injectable()\nexport class OutlineViewTreeModel extends TreeModelImpl {\n\n    /**\n     * Handle the expansion of the tree node.\n     * - The method is a no-op in order to preserve focus on the editor\n     * after attempting to perform a `collapse-all`.\n     * @param node the expandable tree node.\n     */\n    protected override handleExpansion(node: Readonly<ExpandableTreeNode>): void {\n        // no-op\n    }\n\n    override async collapseAll(raw?: Readonly<CompositeTreeNode>): Promise<boolean> {\n        const node = raw || this.getFocusedNode();\n        if (CompositeTreeNode.is(node)) {\n            return this.expansionService.collapseAll(node);\n        }\n        return false;\n    }\n\n    /**\n     * The default behavior of `openNode` calls `doOpenNode` which by default\n     * toggles the expansion of the node. Overriding to prevent expansion, but\n     * allow for the `onOpenNode` event to still fire on a double-click event.\n     */\n    override openNode(raw?: TreeNode | undefined): void {\n        const node = raw || this.getFocusedNode();\n        if (node) {\n            this.onOpenNodeEmitter.fire(node);\n        }\n    }\n\n    expandAll(raw?: TreeNode): void {\n        if (CompositeTreeNode.is(raw)) {\n            for (const child of raw.children) {\n                if (ExpandableTreeNode.is(child)) {\n                    this.expandAll(child);\n                }\n            }\n        }\n        if (ExpandableTreeNode.is(raw)) {\n            this.expandNode(raw);\n        }\n    }\n\n    areNodesCollapsed(): boolean {\n        if (CompositeTreeNode.is(this.root)) {\n            for (const child of this.root.children) {\n                if (!ExpandableTreeNode.isCollapsed(child)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2017-2018 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport {\n    TreeWidget,\n    TreeNode,\n    NodeProps,\n    SelectableTreeNode,\n    CompositeTreeNode,\n    TreeProps,\n    ContextMenuRenderer,\n    TreeModel,\n    ExpandableTreeNode,\n    codicon\n} from '@theia/core/lib/browser';\nimport { OutlineViewTreeModel } from './outline-view-tree-model';\nimport { Message } from '@theia/core/shared/@phosphor/messaging';\nimport { Emitter, Event, isObject, Mutable, UriSelection } from '@theia/core';\nimport * as React from '@theia/core/shared/react';\nimport { Range } from '@theia/core/shared/vscode-languageserver-protocol';\nimport URI from '@theia/core/lib/common/uri';\nimport { nls } from '@theia/core/lib/common/nls';\n\n/**\n * Representation of an outline symbol information node.\n */\nexport interface OutlineSymbolInformationNode extends CompositeTreeNode, SelectableTreeNode, ExpandableTreeNode {\n    /**\n     * The `iconClass` for the given tree node.\n     */\n    iconClass: string;\n}\n\n/**\n * Collection of outline symbol information node functions.\n */\nexport namespace OutlineSymbolInformationNode {\n    /**\n     * Determine if the given tree node is an `OutlineSymbolInformationNode`.\n     * - The tree node is an `OutlineSymbolInformationNode` if:\n     *  - The node exists.\n     *  - The node is selectable.\n     *  - The node contains a defined `iconClass` property.\n     * @param node the tree node.\n     *\n     * @returns `true` if the given node is an `OutlineSymbolInformationNode`.\n     */\n    export function is(node: TreeNode): node is OutlineSymbolInformationNode {\n        return !!node && SelectableTreeNode.is(node) && 'iconClass' in node;\n    }\n\n    export function hasRange(node: unknown): node is { range: Range } {\n        return isObject<{ range: Range }>(node) && Range.is(node.range);\n    }\n}\n\nexport type OutlineViewWidgetFactory = () => OutlineViewWidget;\nexport const OutlineViewWidgetFactory = Symbol('OutlineViewWidgetFactory');\n\n@injectable()\nexport class OutlineViewWidget extends TreeWidget {\n\n    static LABEL = nls.localizeByDefault('Outline');\n\n    readonly onDidChangeOpenStateEmitter = new Emitter<boolean>();\n\n    protected readonly onDidUpdateEmitter = new Emitter<void>();\n    readonly onDidUpdate: Event<void> = this.onDidUpdateEmitter.event;\n\n    constructor(\n        @inject(TreeProps) treeProps: TreeProps,\n        @inject(OutlineViewTreeModel) override readonly model: OutlineViewTreeModel,\n        @inject(ContextMenuRenderer) contextMenuRenderer: ContextMenuRenderer\n    ) {\n        super(treeProps, model, contextMenuRenderer);\n\n        this.id = 'outline-view';\n        this.title.label = OutlineViewWidget.LABEL;\n        this.title.caption = OutlineViewWidget.LABEL;\n        this.title.closable = true;\n        this.title.iconClass = codicon('symbol-class');\n        this.addClass('theia-outline-view');\n    }\n\n    @postConstruct()\n    protected override init(): void {\n        super.init();\n        this.toDispose.push(this.model.onExpansionChanged(() => this.onDidUpdateEmitter.fire()));\n    }\n\n    /**\n     * Set the outline tree with the list of `OutlineSymbolInformationNode`.\n     * @param roots the list of `OutlineSymbolInformationNode`.\n     */\n    public setOutlineTree(roots: OutlineSymbolInformationNode[]): void {\n        // Gather the list of available nodes.\n        const nodes = this.reconcileTreeState(roots);\n        // Update the model root node, appending the outline symbol information nodes as children.\n        this.model.root = this.getRoot(nodes);\n    }\n\n    protected getRoot(children: TreeNode[]): CompositeTreeNode {\n        return {\n            id: 'outline-view-root',\n            name: OutlineViewWidget.LABEL,\n            visible: false,\n            children,\n            parent: undefined\n        };\n    }\n\n    /**\n     * Reconcile the outline tree state, gathering all available nodes.\n     * @param nodes the list of `TreeNode`.\n     *\n     * @returns the list of tree nodes.\n     */\n    protected reconcileTreeState(nodes: TreeNode[]): TreeNode[] {\n        nodes.forEach(node => {\n            if (OutlineSymbolInformationNode.is(node)) {\n                const treeNode = this.model.getNode(node.id);\n                if (treeNode && OutlineSymbolInformationNode.is(treeNode)) {\n                    treeNode.expanded = node.expanded;\n                    treeNode.selected = node.selected;\n                }\n                this.reconcileTreeState(Array.from(node.children));\n            }\n        });\n        return nodes;\n    }\n\n    protected override onAfterHide(msg: Message): void {\n        super.onAfterHide(msg);\n        this.onDidChangeOpenStateEmitter.fire(false);\n    }\n\n    protected override onAfterShow(msg: Message): void {\n        super.onAfterShow(msg);\n        this.onDidChangeOpenStateEmitter.fire(true);\n    }\n\n    override renderIcon(node: TreeNode, props: NodeProps): React.ReactNode {\n        if (OutlineSymbolInformationNode.is(node)) {\n            return <div className={'symbol-icon-center codicon codicon-symbol-' + node.iconClass}></div>;\n        }\n        return undefined;\n    }\n\n    protected override createNodeAttributes(node: TreeNode, props: NodeProps): React.Attributes & React.HTMLAttributes<HTMLElement> {\n        const elementAttrs = super.createNodeAttributes(node, props);\n        return {\n            ...elementAttrs,\n            title: this.getNodeTooltip(node)\n        };\n    }\n\n    /**\n     * Get the tooltip for the given tree node.\n     * - The tooltip is discovered when hovering over a tree node.\n     * - If available, the tooltip is the concatenation of the node name, and it's type.\n     * @param node the tree node.\n     *\n     * @returns the tooltip for the tree node if available, else `undefined`.\n     */\n    protected getNodeTooltip(node: TreeNode): string | undefined {\n        if (OutlineSymbolInformationNode.is(node)) {\n            return node.name + ` (${node.iconClass})`;\n        }\n        return undefined;\n    }\n\n    protected override isExpandable(node: TreeNode): node is ExpandableTreeNode {\n        return OutlineSymbolInformationNode.is(node) && node.children.length > 0;\n    }\n\n    protected override renderTree(model: TreeModel): React.ReactNode {\n        if (CompositeTreeNode.is(this.model.root) && !this.model.root.children.length) {\n            return <div className='theia-widget-noInfo no-outline'>{nls.localizeByDefault('The active editor cannot provide outline information.')}</div>;\n        }\n        return super.renderTree(model);\n    }\n\n    protected override deflateForStorage(node: TreeNode): object {\n        const deflated = super.deflateForStorage(node) as { uri: string };\n        if (UriSelection.is(node)) {\n            deflated.uri = node.uri.toString();\n        }\n        return deflated;\n    }\n\n    protected override inflateFromStorage(node: any, parent?: TreeNode): TreeNode { /* eslint-disable-line @typescript-eslint/no-explicit-any */\n        const inflated = super.inflateFromStorage(node, parent) as Mutable<TreeNode & UriSelection>;\n        if (node && 'uri' in node && typeof node.uri === 'string') {\n            inflated.uri = new URI(node.uri);\n        }\n        return inflated;\n    }\n}\n"],"names":[],"sourceRoot":""}