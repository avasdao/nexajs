{"version":3,"file":"vendors-node_modules_theia_editor-preview_lib_browser_editor-preview-frontend-module_js.js","mappings":"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","sources":["webpack:///./node_modules/@theia/editor-preview/src/browser/style/editor-preview-widget.css?./node_modules/css-loader/dist/cjs.js","webpack:///./node_modules/@theia/editor-preview/src/browser/style/index.css?./node_modules/css-loader/dist/cjs.js","webpack:///./node_modules/@theia/editor-preview/src/browser/editor-preview-contribution.ts?","webpack:///./node_modules/@theia/editor-preview/src/browser/editor-preview-frontend-module.ts?","webpack:///./node_modules/@theia/editor-preview/src/browser/editor-preview-manager.ts?","webpack:///./node_modules/@theia/editor-preview/src/browser/editor-preview-preferences.ts?","webpack:///./node_modules/@theia/editor-preview/src/browser/editor-preview-tree-decorator.ts?","webpack:///./node_modules/@theia/editor-preview/src/browser/editor-preview-widget-factory.ts?","webpack:///./node_modules/@theia/editor-preview/src/browser/editor-preview-widget.ts?","webpack:///./node_modules/@theia/editor-preview/src/browser/style/index.css?"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************\n * Copyright (C) 2018 Google and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.theia-editor-preview {\n  height: 100%;\n}\n\n.theia-editor-preview-title-unpinned .p-TabBar-tabLabel {\n  font-style: italic;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@theia/editor-preview/src/browser/style/editor-preview-widget.css\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;EACE,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB\",\"sourcesContent\":[\"/********************************************************************************\\n * Copyright (C) 2018 Google and others.\\n *\\n * This program and the accompanying materials are made available under the\\n * terms of the Eclipse Public License v. 2.0 which is available at\\n * http://www.eclipse.org/legal/epl-2.0.\\n *\\n * This Source Code may also be made available under the following Secondary\\n * Licenses when the conditions for such availability set forth in the Eclipse\\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\\n * with the GNU Classpath Exception which is available at\\n * https://www.gnu.org/software/classpath/license.html.\\n *\\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\\n ********************************************************************************/\\n\\n.theia-editor-preview {\\n  height: 100%;\\n}\\n\\n.theia-editor-preview-title-unpinned .p-TabBar-tabLabel {\\n  font-style: italic;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../../../../../css-loader/dist/cjs.js!./editor-preview-widget.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************\n * Copyright (C) 2018 Google and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n ********************************************************************************/\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@theia/editor-preview/src/browser/style/index.css\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;iFAciF\",\"sourcesContent\":[\"/********************************************************************************\\n * Copyright (C) 2018 Google and others.\\n *\\n * This program and the accompanying materials are made available under the\\n * terms of the Eclipse Public License v. 2.0 which is available at\\n * http://www.eclipse.org/legal/epl-2.0.\\n *\\n * This Source Code may also be made available under the following Secondary\\n * Licenses when the conditions for such availability set forth in the Eclipse\\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\\n * with the GNU Classpath Exception which is available at\\n * https://www.gnu.org/software/classpath/license.html.\\n *\\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\\n ********************************************************************************/\\n\\n@import \\\"./editor-preview-widget.css\\\";\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// *****************************************************************************\n// Copyright (C) 2021 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { ApplicationShell, CommonCommands, KeybindingContribution, KeybindingRegistry, SHELL_TABBAR_CONTEXT_PIN, Widget } from '@theia/core/lib/browser';\nimport { nls } from '@theia/core/lib/common/nls';\nimport { Command, CommandContribution, CommandRegistry, MenuContribution, MenuModelRegistry } from '@theia/core/lib/common';\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport { EditorPreviewWidget } from './editor-preview-widget';\nimport { CurrentWidgetCommandAdapter } from '@theia/core/lib/browser/shell/current-widget-command-adapter';\n\nexport namespace EditorPreviewCommands {\n    export const PIN_PREVIEW_COMMAND = Command.toDefaultLocalizedCommand({\n        id: 'workbench.action.keepEditor',\n        category: CommonCommands.VIEW_CATEGORY,\n        label: 'Keep Editor',\n    });\n}\n\n@injectable()\nexport class EditorPreviewContribution implements CommandContribution, MenuContribution, KeybindingContribution {\n    @inject(ApplicationShell) protected readonly shell: ApplicationShell;\n\n    registerCommands(registry: CommandRegistry): void {\n        registry.registerCommand(EditorPreviewCommands.PIN_PREVIEW_COMMAND, new CurrentWidgetCommandAdapter(this.shell, {\n            execute: async title => {\n                if (title?.owner instanceof EditorPreviewWidget) {\n                    title.owner.convertToNonPreview();\n                    await this.shell.activateWidget(title.owner.id);\n                }\n            },\n            isEnabled: title => title?.owner instanceof EditorPreviewWidget && title.owner.isPreview,\n            isVisible: title => title?.owner instanceof EditorPreviewWidget,\n        }));\n    }\n\n    registerKeybindings(registry: KeybindingRegistry): void {\n        registry.registerKeybinding({\n            command: EditorPreviewCommands.PIN_PREVIEW_COMMAND.id,\n            keybinding: 'ctrlcmd+k enter'\n        });\n    }\n\n    registerMenus(registry: MenuModelRegistry): void {\n        registry.registerMenuAction(SHELL_TABBAR_CONTEXT_PIN, {\n            commandId: EditorPreviewCommands.PIN_PREVIEW_COMMAND.id,\n            label: nls.localizeByDefault('Keep Open'),\n            order: '6',\n        });\n    }\n\n    protected getTargetWidget(event?: Event): Widget | undefined {\n        return event ? this.shell.findTargetedWidget(event) : this.shell.activeWidget;\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2018-2021 Google and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport '../../src/browser/style/index.css';\nimport { FrontendApplicationContribution, KeybindingContribution, WidgetFactory } from '@theia/core/lib/browser';\nimport { ContainerModule } from '@theia/core/shared/inversify';\nimport { bindEditorPreviewPreferences } from './editor-preview-preferences';\nimport { EditorPreviewManager } from './editor-preview-manager';\nimport { EditorManager } from '@theia/editor/lib/browser';\nimport { EditorPreviewWidgetFactory } from './editor-preview-widget-factory';\nimport { EditorPreviewContribution } from './editor-preview-contribution';\nimport { CommandContribution, MenuContribution } from '@theia/core/lib/common';\nimport { OpenEditorsTreeDecorator } from '@theia/navigator/lib/browser/open-editors-widget/navigator-open-editors-decorator-service';\nimport { EditorPreviewTreeDecorator } from './editor-preview-tree-decorator';\n\nexport default new ContainerModule((bind, unbind, isBound, rebind) => {\n\n    bind(EditorPreviewWidgetFactory).toSelf().inSingletonScope();\n    bind(WidgetFactory).toService(EditorPreviewWidgetFactory);\n\n    bind(EditorPreviewManager).toSelf().inSingletonScope();\n    rebind(EditorManager).toService(EditorPreviewManager);\n\n    bind(EditorPreviewContribution).toSelf().inSingletonScope();\n    bind(CommandContribution).toService(EditorPreviewContribution);\n    bind(KeybindingContribution).toService(EditorPreviewContribution);\n    bind(MenuContribution).toService(EditorPreviewContribution);\n\n    bind(EditorPreviewTreeDecorator).toSelf().inSingletonScope();\n    bind(OpenEditorsTreeDecorator).toService(EditorPreviewTreeDecorator);\n    bind(FrontendApplicationContribution).toService(EditorPreviewTreeDecorator);\n    bindEditorPreviewPreferences(bind);\n});\n","// *****************************************************************************\n// Copyright (C) 2018-2021 Google and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { EditorManager, EditorOpenerOptions, EditorWidget } from '@theia/editor/lib/browser';\nimport { inject, injectable, postConstruct } from '@theia/core/shared/inversify';\nimport { EditorPreviewPreferences } from './editor-preview-preferences';\nimport { MaybePromise } from '@theia/core/lib/common';\nimport URI from '@theia/core/lib/common/uri';\nimport { EditorPreviewWidgetFactory, EditorPreviewOptions } from './editor-preview-widget-factory';\nimport { EditorPreviewWidget } from './editor-preview-widget';\nimport { FrontendApplicationStateService } from '@theia/core/lib/browser/frontend-application-state';\n\n@injectable()\nexport class EditorPreviewManager extends EditorManager {\n    override readonly id = EditorPreviewWidgetFactory.ID;\n\n    @inject(EditorPreviewPreferences) protected readonly preferences: EditorPreviewPreferences;\n    @inject(FrontendApplicationStateService) protected readonly stateService: FrontendApplicationStateService;\n\n    /**\n     * Until the layout has been restored, widget state is not reliable, so we ignore creation events.\n     */\n    protected layoutIsSet = false;\n\n    @postConstruct()\n    protected override init(): void {\n        super.init();\n        // All editors are created, but not all are opened. This sets up the logic to swap previews when the editor is attached.\n        this.onCreated((widget: EditorPreviewWidget) => {\n            if (this.layoutIsSet && widget.isPreview) {\n                const oneTimeDisposable = widget.onDidChangeVisibility(() => {\n                    this.handleNewPreview(widget);\n                    oneTimeDisposable.dispose();\n                });\n            }\n        });\n\n        this.preferences.onPreferenceChanged(change => {\n            if (change.preferenceName === 'editor.enablePreview' && !change.newValue) {\n                this.all.forEach((editor: EditorPreviewWidget) => {\n                    if (editor.isPreview) {\n                        editor.convertToNonPreview();\n                    }\n                });\n            };\n        });\n\n        this.stateService.reachedState('initialized_layout').then(() => {\n            const editors = this.all as EditorPreviewWidget[];\n            const currentPreview = editors.find(editor => editor.isPreview);\n            if (currentPreview) {\n                this.handleNewPreview(currentPreview);\n            }\n            this.layoutIsSet = true;\n        });\n\n        document.addEventListener('dblclick', this.convertEditorOnDoubleClick.bind(this));\n    }\n\n    protected override async doOpen(widget: EditorPreviewWidget, options?: EditorOpenerOptions): Promise<void> {\n        const { preview, widgetOptions = { area: 'main' }, mode = 'activate' } = options ?? {};\n        if (!widget.isAttached) {\n            this.shell.addWidget(widget, widgetOptions);\n        } else if (!preview && widget.isPreview) {\n            widget.convertToNonPreview();\n        }\n\n        if (mode === 'activate') {\n            await this.shell.activateWidget(widget.id);\n        } else if (mode === 'reveal') {\n            await this.shell.revealWidget(widget.id);\n        }\n    }\n\n    protected handleNewPreview(newPreviewWidget: EditorPreviewWidget): void {\n        if (newPreviewWidget.isPreview) {\n            const tabbar = this.shell.getTabBarFor(newPreviewWidget);\n            if (tabbar) {\n                for (const title of tabbar.titles) {\n                    if (title.owner !== newPreviewWidget && title.owner instanceof EditorPreviewWidget && title.owner.isPreview) {\n                        title.owner.dispose();\n                    }\n                }\n            }\n        }\n    }\n\n    protected override tryGetPendingWidget(uri: URI, options?: EditorOpenerOptions): MaybePromise<EditorWidget> | undefined {\n        return super.tryGetPendingWidget(uri, { ...options, preview: true }) ?? super.tryGetPendingWidget(uri, { ...options, preview: false });\n    }\n\n    protected override async getWidget(uri: URI, options?: EditorOpenerOptions): Promise<EditorWidget | undefined> {\n        return (await super.getWidget(uri, { ...options, preview: true })) ?? super.getWidget(uri, { ...options, preview: false });\n    }\n\n    protected override async getOrCreateWidget(uri: URI, options?: EditorOpenerOptions): Promise<EditorWidget> {\n        return this.tryGetPendingWidget(uri, options) ?? super.getOrCreateWidget(uri, options);\n    }\n\n    protected override createWidgetOptions(uri: URI, options?: EditorOpenerOptions): EditorPreviewOptions {\n        const navigatableOptions = super.createWidgetOptions(uri, options) as EditorPreviewOptions;\n        navigatableOptions.preview = !!(options?.preview && this.preferences['editor.enablePreview']);\n        return navigatableOptions;\n    }\n\n    protected convertEditorOnDoubleClick(event: Event): void {\n        const widget = this.shell.findTargetedWidget(event);\n        if (widget instanceof EditorPreviewWidget && widget.isPreview) {\n            widget.convertToNonPreview();\n        }\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2018 Google and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { interfaces } from '@theia/core/shared/inversify';\nimport { createPreferenceProxy, PreferenceProxy, PreferenceService, PreferenceContribution, PreferenceSchema } from '@theia/core/lib/browser';\nimport { nls } from '@theia/core/lib/common/nls';\n\nexport const EditorPreviewConfigSchema: PreferenceSchema = {\n    'type': 'object',\n    properties: {\n        'editor.enablePreview': {\n            type: 'boolean',\n            // eslint-disable-next-line max-len\n            description: nls.localizeByDefault('Controls whether opened editors show as preview editors. Preview editors do not stay open, are reused until explicitly set to be kept open (via double-click or editing), and show file names in italics.'),\n            default: true\n        },\n    }\n};\n\nexport interface EditorPreviewConfiguration {\n    'editor.enablePreview': boolean;\n}\n\nexport const EditorPreviewPreferenceContribution = Symbol('EditorPreviewPreferenceContribution');\nexport const EditorPreviewPreferences = Symbol('EditorPreviewPreferences');\nexport type EditorPreviewPreferences = PreferenceProxy<EditorPreviewConfiguration>;\n\nexport function createEditorPreviewPreferences(preferences: PreferenceService, schema: PreferenceSchema = EditorPreviewConfigSchema): EditorPreviewPreferences {\n    return createPreferenceProxy(preferences, schema);\n}\n\nexport function bindEditorPreviewPreferences(bind: interfaces.Bind): void {\n    bind(EditorPreviewPreferences).toDynamicValue(ctx => {\n        const preferences = ctx.container.get<PreferenceService>(PreferenceService);\n        const contribution = ctx.container.get<PreferenceContribution>(EditorPreviewPreferenceContribution);\n        return createEditorPreviewPreferences(preferences, contribution.schema);\n    }).inSingletonScope();\n    bind(EditorPreviewPreferenceContribution).toConstantValue({ schema: EditorPreviewConfigSchema });\n    bind(PreferenceContribution).toService(EditorPreviewPreferenceContribution);\n}\n","// *****************************************************************************\n// Copyright (C) 2021 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject } from '@theia/core/shared/inversify';\nimport { TreeDecorator, TreeDecoration } from '@theia/core/lib/browser/tree/tree-decorator';\nimport { Emitter } from '@theia/core/lib/common/event';\nimport { Tree } from '@theia/core/lib/browser/tree/tree';\nimport {\n    ApplicationShell,\n    DepthFirstTreeIterator,\n    FrontendApplication,\n    FrontendApplicationContribution,\n    NavigatableWidget,\n    Saveable,\n    Widget,\n} from '@theia/core/lib/browser';\nimport { Disposable } from '@theia/core/lib/common';\nimport { OpenEditorNode } from '@theia/navigator/lib/browser/open-editors-widget/navigator-open-editors-tree-model';\nimport { EditorPreviewWidget } from './editor-preview-widget';\nimport { EditorPreviewManager } from './editor-preview-manager';\n\n@injectable()\nexport class EditorPreviewTreeDecorator implements TreeDecorator, FrontendApplicationContribution {\n    @inject(EditorPreviewManager) protected readonly editorPreviewManager: EditorPreviewManager;\n    @inject(ApplicationShell) protected readonly shell: ApplicationShell;\n\n    readonly id = 'theia-open-editors-file-decorator';\n    protected decorationsMap = new Map<string, TreeDecoration.Data>();\n\n    protected readonly decorationsChangedEmitter = new Emitter();\n    readonly onDidChangeDecorations = this.decorationsChangedEmitter.event;\n    protected readonly toDisposeOnDirtyChanged = new Map<string, Disposable>();\n    protected readonly toDisposeOnPreviewPinned = new Map<string, Disposable>();\n\n    onDidInitializeLayout(app: FrontendApplication): void {\n        this.shell.onDidAddWidget(widget => this.registerEditorListeners(widget));\n        this.shell.onDidRemoveWidget(widget => this.unregisterEditorListeners(widget));\n        this.editorWidgets.forEach(widget => this.registerEditorListeners(widget));\n    }\n\n    protected registerEditorListeners(widget: Widget): void {\n        const saveable = Saveable.get(widget);\n        if (saveable) {\n            this.toDisposeOnDirtyChanged.set(widget.id, saveable.onDirtyChanged(() => {\n                this.fireDidChangeDecorations((tree: Tree) => this.collectDecorators(tree));\n            }));\n        }\n        if (widget instanceof EditorPreviewWidget) {\n            this.toDisposeOnPreviewPinned.set(widget.id, widget.onDidChangePreviewState(() => {\n                this.fireDidChangeDecorations((tree: Tree) => this.collectDecorators(tree));\n                this.toDisposeOnPreviewPinned.get(widget.id)?.dispose();\n                this.toDisposeOnDirtyChanged.delete(widget.id);\n            }));\n        }\n    }\n\n    protected unregisterEditorListeners(widget: Widget): void {\n        this.toDisposeOnDirtyChanged.get(widget.id)?.dispose();\n        this.toDisposeOnDirtyChanged.delete(widget.id);\n        this.toDisposeOnPreviewPinned.get(widget.id)?.dispose();\n        this.toDisposeOnPreviewPinned.delete(widget.id);\n    }\n\n    protected get editorWidgets(): NavigatableWidget[] {\n        return this.shell.widgets.filter((widget): widget is NavigatableWidget => NavigatableWidget.is(widget));\n    }\n\n    protected fireDidChangeDecorations(event: (tree: Tree) => Map<string, TreeDecoration.Data>): void {\n        this.decorationsChangedEmitter.fire(event);\n    }\n\n    decorations(tree: Tree): Map<string, TreeDecoration.Data> {\n        return this.collectDecorators(tree);\n    }\n\n    // Add workspace root as caption suffix and italicize if PreviewWidget\n    protected collectDecorators(tree: Tree): Map<string, TreeDecoration.Data> {\n        const result = new Map<string, TreeDecoration.Data>();\n        if (tree.root === undefined) {\n            return result;\n        }\n        for (const node of new DepthFirstTreeIterator(tree.root)) {\n            if (OpenEditorNode.is(node)) {\n                const { widget } = node;\n                const isPreviewWidget = widget instanceof EditorPreviewWidget && widget.isPreview;\n                const decorations: TreeDecoration.Data = {\n                    fontData: { style: isPreviewWidget ? 'italic' : undefined }\n                };\n                result.set(node.id, decorations);\n            }\n        }\n        return result;\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2018-2021 Google and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport URI from '@theia/core/lib/common/uri';\nimport { EditorWidgetFactory } from '@theia/editor/lib/browser/editor-widget-factory';\nimport { injectable } from '@theia/core/shared/inversify';\nimport { EditorPreviewWidget } from './editor-preview-widget';\nimport { NavigatableWidgetOptions } from '@theia/core/lib/browser';\n\nexport interface EditorPreviewOptions extends NavigatableWidgetOptions {\n    preview?: boolean;\n}\n\n@injectable()\nexport class EditorPreviewWidgetFactory extends EditorWidgetFactory {\n    static override ID: string = 'editor-preview-widget';\n    override readonly id = EditorPreviewWidgetFactory.ID;\n\n    override async createWidget(options: EditorPreviewOptions): Promise<EditorPreviewWidget> {\n        const uri = new URI(options.uri);\n        const editor = await this.createEditor(uri, options) as EditorPreviewWidget;\n        if (options.preview) {\n            editor.initializePreview();\n        }\n        return editor;\n    }\n\n    protected override async constructEditor(uri: URI): Promise<EditorPreviewWidget> {\n        const textEditor = await this.editorProvider(uri);\n        return new EditorPreviewWidget(textEditor, this.selectionService);\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2021 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { TabBar, Widget, PINNED_CLASS } from '@theia/core/lib/browser';\nimport { EditorWidget, TextEditor } from '@theia/editor/lib/browser';\nimport { Disposable, DisposableCollection, Emitter, SelectionService, UNTITLED_SCHEME } from '@theia/core/lib/common';\n\nconst PREVIEW_TITLE_CLASS = 'theia-editor-preview-title-unpinned';\nexport class EditorPreviewWidget extends EditorWidget {\n    protected _isPreview = false;\n\n    protected readonly onDidChangePreviewStateEmitter = new Emitter<void>();\n    readonly onDidChangePreviewState = this.onDidChangePreviewStateEmitter.event;\n\n    get isPreview(): boolean {\n        return this._isPreview;\n    }\n\n    constructor(\n        editor: TextEditor,\n        selectionService: SelectionService\n    ) {\n        super(editor, selectionService);\n        this.toDispose.push(this.onDidChangePreviewStateEmitter);\n    }\n\n    initializePreview(): void {\n        const oneTimeListeners = new DisposableCollection();\n        this._isPreview = true;\n        this.title.className += ` ${PREVIEW_TITLE_CLASS}`;\n        const oneTimeDirtyChangeListener = this.saveable.onDirtyChanged(() => {\n            this.convertToNonPreview();\n            oneTimeListeners.dispose();\n        });\n        oneTimeListeners.push(oneTimeDirtyChangeListener);\n        const oneTimeTitleChangeHandler = () => {\n            if (this.title.className.includes(PINNED_CLASS)) {\n                this.convertToNonPreview();\n                oneTimeListeners.dispose();\n            }\n        };\n        this.title.changed.connect(oneTimeTitleChangeHandler);\n        oneTimeListeners.push(Disposable.create(() => this.title.changed.disconnect(oneTimeTitleChangeHandler)));\n        this.toDispose.push(oneTimeListeners);\n    }\n\n    convertToNonPreview(): void {\n        if (this._isPreview) {\n            this._isPreview = false;\n            this.currentTabbar = undefined;\n            this.title.className = this.title.className.replace(PREVIEW_TITLE_CLASS, '');\n            this.onDidChangePreviewStateEmitter.fire();\n            this.onDidChangePreviewStateEmitter.dispose();\n        }\n    }\n\n    protected override handleTabBarChange(oldTabBar?: TabBar<Widget> | undefined, newTabBar?: TabBar<Widget> | undefined): void {\n        super.handleTabBarChange(oldTabBar, newTabBar);\n        if (this._isPreview) {\n            if (oldTabBar && newTabBar) { this.convertToNonPreview(); }\n        }\n    }\n\n    override storeState(): { isPreview: boolean, editorState: object } | undefined {\n        if (this.getResourceUri()?.scheme !== UNTITLED_SCHEME) {\n            const { _isPreview: isPreview } = this;\n            return { isPreview, editorState: this.editor.storeViewState() };\n        }\n    }\n\n    override restoreState(oldState: { isPreview: boolean, editorState: object }): void {\n        if (!oldState.isPreview) {\n            this.convertToNonPreview();\n        }\n        this.editor.restoreViewState(oldState.editorState);\n    }\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};"],"names":[],"sourceRoot":""}