{"version":3,"file":"vendors-node_modules_theia_workspace_lib_browser_workspace-service_js.js","mappings":"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","sources":["webpack:///./node_modules/@theia/core/src/common/window.ts?","webpack:///./node_modules/@theia/core/shared/ajv/index.js?","webpack:///./node_modules/@theia/workspace/src/browser/workspace-preferences.ts?","webpack:///./node_modules/@theia/workspace/src/browser/workspace-schema-updater.ts?","webpack:///./node_modules/@theia/workspace/src/browser/workspace-service.ts?","webpack:///./node_modules/@theia/workspace/src/common/index.ts?","webpack:///./node_modules/@theia/workspace/src/common/untitled-workspace-service.ts?","webpack:///./node_modules/@theia/workspace/src/common/workspace-protocol.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2021 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\n/**\n * The window hash value that is used to spawn a new default window.\n */\nexport const DEFAULT_WINDOW_HASH: string = '!empty';\n\n/**\n * The options for opening new windows.\n */\nexport interface NewWindowOptions {\n    /**\n     * Controls whether the window should be opened externally.\n     */\n    readonly external?: boolean;\n}\n\nexport interface WindowSearchParams {\n    [key: string]: string\n}\n","module.exports = require('ajv');","// *****************************************************************************\n// Copyright (C) 2018 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { interfaces } from '@theia/core/shared/inversify';\nimport {\n    createPreferenceProxy,\n    PreferenceProxy,\n    PreferenceService,\n    PreferenceSchema,\n    PreferenceContribution\n} from '@theia/core/lib/browser/preferences';\nimport { nls } from '@theia/core/lib/common/nls';\n\nexport const workspacePreferenceSchema: PreferenceSchema = {\n    type: 'object',\n    properties: {\n        'workspace.preserveWindow': {\n            description: nls.localize('theia/workspace/preserveWindow', 'Enable opening workspaces in current window.'),\n            type: 'boolean',\n            default: false\n        },\n    }\n};\n\nexport interface WorkspaceConfiguration {\n    'workspace.preserveWindow': boolean,\n}\n\nexport const WorkspacePreferenceContribution = Symbol('WorkspacePreferenceContribution');\nexport const WorkspacePreferences = Symbol('WorkspacePreferences');\nexport type WorkspacePreferences = PreferenceProxy<WorkspaceConfiguration>;\n\nexport function createWorkspacePreferences(preferences: PreferenceService, schema: PreferenceSchema = workspacePreferenceSchema): WorkspacePreferences {\n    return createPreferenceProxy(preferences, schema);\n}\n\nexport function bindWorkspacePreferences(bind: interfaces.Bind): void {\n    bind(WorkspacePreferences).toDynamicValue(ctx => {\n        const preferences = ctx.container.get<PreferenceService>(PreferenceService);\n        const contribution = ctx.container.get<PreferenceContribution>(WorkspacePreferenceContribution);\n        return createWorkspacePreferences(preferences, contribution.schema);\n    }).inSingletonScope();\n    bind(WorkspacePreferenceContribution).toConstantValue({ schema: workspacePreferenceSchema });\n    bind(PreferenceContribution).toService(WorkspacePreferenceContribution);\n}\n","// *****************************************************************************\n// Copyright (C) 2021 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { inject, injectable, postConstruct } from '@theia/core/shared/inversify';\nimport { JsonSchemaContribution, JsonSchemaRegisterContext } from '@theia/core/lib/browser/json-schema-store';\nimport { InMemoryResources, isArray, isObject } from '@theia/core/lib/common';\nimport { IJSONSchema } from '@theia/core/lib/common/json-schema';\nimport URI from '@theia/core/lib/common/uri';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\nimport { WorkspaceFileService } from '../common';\n\nexport interface SchemaUpdateMessage {\n    key: string,\n    schema?: IJSONSchema,\n    deferred: Deferred<boolean>;\n}\n\nexport namespace AddKeyMessage {\n    export const is = (message: SchemaUpdateMessage | undefined): message is Required<SchemaUpdateMessage> => !!message && message.schema !== undefined;\n}\n\n@injectable()\nexport class WorkspaceSchemaUpdater implements JsonSchemaContribution {\n\n    protected readonly uri = new URI(workspaceSchemaId);\n    protected readonly editQueue: SchemaUpdateMessage[] = [];\n    protected safeToHandleQueue = new Deferred();\n\n    @inject(InMemoryResources) protected readonly inmemoryResources: InMemoryResources;\n    @inject(WorkspaceFileService) protected readonly workspaceFileService: WorkspaceFileService;\n\n    @postConstruct()\n    protected init(): void {\n        this.inmemoryResources.add(this.uri, JSON.stringify(workspaceSchema));\n        this.safeToHandleQueue.resolve();\n    }\n\n    registerSchemas(context: JsonSchemaRegisterContext): void {\n        context.registerSchema({\n            fileMatch: this.workspaceFileService.getWorkspaceFileExtensions(true),\n            url: this.uri.toString()\n        });\n    }\n\n    protected async retrieveCurrent(): Promise<WorkspaceSchema> {\n        const current = await this.inmemoryResources.resolve(this.uri).readContents();\n\n        const content = JSON.parse(current);\n\n        if (!WorkspaceSchema.is(content)) {\n            throw new Error('Failed to retrieve current workspace schema.');\n        }\n\n        return content;\n    }\n\n    async updateSchema(message: Omit<SchemaUpdateMessage, 'deferred'>): Promise<boolean> {\n        const doHandle = this.editQueue.length === 0;\n        const deferred = new Deferred<boolean>();\n        this.editQueue.push({ ...message, deferred });\n        if (doHandle) {\n            this.handleQueue();\n        }\n        return deferred.promise;\n    }\n\n    protected async handleQueue(): Promise<void> {\n        await this.safeToHandleQueue.promise;\n        this.safeToHandleQueue = new Deferred();\n        const cache = await this.retrieveCurrent();\n        while (this.editQueue.length) {\n            const nextMessage = this.editQueue.shift();\n            if (AddKeyMessage.is(nextMessage)) {\n                this.addKey(nextMessage, cache);\n            } else if (nextMessage) {\n                this.removeKey(nextMessage, cache);\n            }\n        }\n        this.inmemoryResources.update(this.uri, JSON.stringify(cache));\n        this.safeToHandleQueue.resolve();\n    }\n\n    protected addKey({ key, schema, deferred }: Required<SchemaUpdateMessage>, cache: WorkspaceSchema): void {\n        if (key in cache.properties) {\n            return deferred.resolve(false);\n        }\n\n        cache.properties[key] = schema;\n        deferred.resolve(true);\n    }\n\n    protected removeKey({ key, deferred }: SchemaUpdateMessage, cache: WorkspaceSchema): void {\n        const canDelete = !cache.required.includes(key);\n        if (!canDelete) {\n            return deferred.resolve(false);\n        }\n\n        const keyPresent = delete cache.properties[key];\n        deferred.resolve(keyPresent);\n    }\n}\n\nexport type WorkspaceSchema = Required<Pick<IJSONSchema, 'properties' | 'required'>>;\n\nexport namespace WorkspaceSchema {\n    export function is(candidate: unknown): candidate is WorkspaceSchema {\n        return isObject<WorkspaceSchema>(candidate)\n            && typeof candidate.properties === 'object'\n            && isArray(candidate.required);\n    }\n}\n\nexport const workspaceSchemaId = 'vscode://schemas/workspace';\nexport const workspaceSchema: IJSONSchema = {\n    $id: workspaceSchemaId,\n    type: 'object',\n    title: 'Workspace File',\n    required: ['folders'],\n    default: { folders: [{ path: '' }], settings: {} },\n    properties: {\n        folders: {\n            description: 'Root folders in the workspace',\n            type: 'array',\n            items: {\n                type: 'object',\n                properties: {\n                    path: {\n                        type: 'string',\n                    }\n                },\n                required: ['path']\n            }\n        }\n    },\n    allowComments: true,\n    allowTrailingCommas: true,\n};\n","// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { WorkspaceServer, UntitledWorkspaceService, WorkspaceFileService } from '../common';\nimport { WindowService } from '@theia/core/lib/browser/window/window-service';\nimport { DEFAULT_WINDOW_HASH } from '@theia/core/lib/common/window';\nimport {\n    FrontendApplicationContribution, PreferenceServiceImpl, PreferenceScope, PreferenceSchemaProvider, LabelProvider\n} from '@theia/core/lib/browser';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\nimport { EnvVariablesServer } from '@theia/core/lib/common/env-variables';\nimport { ILogger, Disposable, DisposableCollection, Emitter, Event, MaybePromise, MessageService, nls } from '@theia/core';\nimport { WorkspacePreferences } from './workspace-preferences';\nimport * as jsoncparser from 'jsonc-parser';\nimport * as Ajv from '@theia/core/shared/ajv';\nimport { FileStat, BaseStat } from '@theia/filesystem/lib/common/files';\nimport { FileService } from '@theia/filesystem/lib/browser/file-service';\nimport { WindowTitleService } from '@theia/core/lib/browser/window/window-title-service';\nimport { FileSystemPreferences } from '@theia/filesystem/lib/browser';\nimport { workspaceSchema, WorkspaceSchemaUpdater } from './workspace-schema-updater';\nimport { IJSONSchema } from '@theia/core/lib/common/json-schema';\nimport { StopReason } from '@theia/core/lib/common/frontend-application-state';\n\n/**\n * The workspace service.\n */\n@injectable()\nexport class WorkspaceService implements FrontendApplicationContribution {\n\n    protected _workspace: FileStat | undefined;\n\n    protected _roots: FileStat[] = [];\n    protected deferredRoots = new Deferred<FileStat[]>();\n\n    @inject(FileService)\n    protected readonly fileService: FileService;\n\n    @inject(WorkspaceServer)\n    protected readonly server: WorkspaceServer;\n\n    @inject(WindowService)\n    protected readonly windowService: WindowService;\n\n    @inject(ILogger)\n    protected logger: ILogger;\n\n    @inject(WorkspacePreferences)\n    protected preferences: WorkspacePreferences;\n\n    @inject(PreferenceServiceImpl)\n    protected readonly preferenceImpl: PreferenceServiceImpl;\n\n    @inject(PreferenceSchemaProvider)\n    protected readonly schemaProvider: PreferenceSchemaProvider;\n\n    @inject(EnvVariablesServer)\n    protected readonly envVariableServer: EnvVariablesServer;\n\n    @inject(MessageService)\n    protected readonly messageService: MessageService;\n\n    @inject(LabelProvider)\n    protected readonly labelProvider: LabelProvider;\n\n    @inject(FileSystemPreferences)\n    protected readonly fsPreferences: FileSystemPreferences;\n\n    @inject(WorkspaceSchemaUpdater)\n    protected readonly schemaUpdater: WorkspaceSchemaUpdater;\n\n    @inject(UntitledWorkspaceService)\n    protected readonly untitledWorkspaceService: UntitledWorkspaceService;\n\n    @inject(WorkspaceFileService)\n    protected readonly workspaceFileService: WorkspaceFileService;\n\n    @inject(WindowTitleService)\n    protected readonly windowTitleService: WindowTitleService;\n\n    protected _ready = new Deferred<void>();\n    get ready(): Promise<void> {\n        return this._ready.promise;\n    }\n\n    @postConstruct()\n    protected init(): void {\n        this.doInit();\n    }\n\n    protected async doInit(): Promise<void> {\n        const wsUriString = await this.getDefaultWorkspaceUri();\n        const wsStat = await this.toFileStat(wsUriString);\n        await this.setWorkspace(wsStat);\n\n        this.fileService.onDidFilesChange(event => {\n            if (this._workspace && this._workspace.isFile && event.contains(this._workspace.resource)) {\n                this.updateWorkspace();\n            }\n        });\n        this.fsPreferences.onPreferenceChanged(event => {\n            if (event.preferenceName === 'files.watcherExclude') {\n                this.refreshRootWatchers();\n            }\n        });\n        this._ready.resolve();\n    }\n\n    /**\n     * Resolves to the default workspace URI as string.\n     *\n     * The default implementation tries to extract the default workspace location\n     * from the `window.location.hash`, then falls-back to the most recently\n     * used workspace root from the server.\n     *\n     * It is not ensured that the resolved workspace URI is valid, it can point\n     * to a non-existing location.\n     */\n    protected getDefaultWorkspaceUri(): MaybePromise<string | undefined> {\n        return this.doGetDefaultWorkspaceUri();\n    }\n\n    protected async doGetDefaultWorkspaceUri(): Promise<string | undefined> {\n\n        // If an empty window is explicitly requested do not restore a previous workspace.\n        // Note: `window.location.hash` includes leading \"#\" if non-empty.\n        if (window.location.hash === `#${DEFAULT_WINDOW_HASH}`) {\n            window.location.hash = '';\n            return undefined;\n        }\n\n        // Prefer the workspace path specified as the URL fragment, if present.\n        if (window.location.hash.length > 1) {\n            // Remove the leading # and decode the URI.\n            const wpPath = decodeURI(window.location.hash.substring(1));\n            const workspaceUri = new URI().withPath(wpPath).withScheme('file');\n            let workspaceStat: FileStat | undefined;\n            try {\n                workspaceStat = await this.fileService.resolve(workspaceUri);\n            } catch { }\n            if (workspaceStat && !workspaceStat.isDirectory && !this.isWorkspaceFile(workspaceStat)) {\n                this.messageService.error(`Not a valid workspace file: ${workspaceUri}`);\n                return undefined;\n            }\n            return workspaceUri.toString();\n        } else {\n            // Else, ask the server for its suggested workspace (usually the one\n            // specified on the CLI, or the most recent).\n            return this.server.getMostRecentlyUsedWorkspace();\n        }\n    }\n\n    /**\n     * Set the URL fragment to the given workspace path.\n     */\n    protected setURLFragment(workspacePath: string): void {\n        window.location.hash = encodeURI(workspacePath);\n    }\n\n    get roots(): Promise<FileStat[]> {\n        return this.deferredRoots.promise;\n    }\n    tryGetRoots(): FileStat[] {\n        return this._roots;\n    }\n    get workspace(): FileStat | undefined {\n        return this._workspace;\n    }\n\n    protected readonly onWorkspaceChangeEmitter = new Emitter<FileStat[]>();\n    get onWorkspaceChanged(): Event<FileStat[]> {\n        return this.onWorkspaceChangeEmitter.event;\n    }\n\n    protected readonly onWorkspaceLocationChangedEmitter = new Emitter<FileStat | undefined>();\n    get onWorkspaceLocationChanged(): Event<FileStat | undefined> {\n        return this.onWorkspaceLocationChangedEmitter.event;\n    }\n\n    protected readonly toDisposeOnWorkspace = new DisposableCollection();\n    protected async setWorkspace(workspaceStat: FileStat | undefined): Promise<void> {\n        if (this._workspace && workspaceStat &&\n            this._workspace.resource === workspaceStat.resource &&\n            this._workspace.mtime === workspaceStat.mtime &&\n            this._workspace.etag === workspaceStat.etag &&\n            this._workspace.size === workspaceStat.size) {\n            return;\n        }\n        this.toDisposeOnWorkspace.dispose();\n        this._workspace = workspaceStat;\n        if (this._workspace) {\n            const uri = this._workspace.resource;\n            if (this._workspace.isFile) {\n                this.toDisposeOnWorkspace.push(this.fileService.watch(uri));\n                this.onWorkspaceLocationChangedEmitter.fire(this._workspace);\n            }\n            this.setURLFragment(uri.path.toString());\n        } else {\n            this.setURLFragment('');\n        }\n        this.updateTitle();\n        await this.server.setMostRecentlyUsedWorkspace(this._workspace ? this._workspace.resource.toString() : '');\n        await this.updateWorkspace();\n    }\n\n    protected async updateWorkspace(): Promise<void> {\n        await this.updateRoots();\n        this.watchRoots();\n    }\n\n    protected async updateRoots(): Promise<void> {\n        const newRoots = await this.computeRoots();\n        let rootsChanged = false;\n        if (newRoots.length !== this._roots.length || newRoots.length === 0) {\n            rootsChanged = true;\n        } else {\n            for (const newRoot of newRoots) {\n                if (!this._roots.some(r => r.resource.toString() === newRoot.resource.toString())) {\n                    rootsChanged = true;\n                    break;\n                }\n            }\n        }\n        if (rootsChanged) {\n            this._roots = newRoots;\n            this.deferredRoots.resolve(this._roots); // in order to resolve first\n            this.deferredRoots = new Deferred<FileStat[]>();\n            this.deferredRoots.resolve(this._roots);\n            this.onWorkspaceChangeEmitter.fire(this._roots);\n        }\n    }\n\n    protected async computeRoots(): Promise<FileStat[]> {\n        const roots: FileStat[] = [];\n        if (this._workspace) {\n            if (this._workspace.isDirectory) {\n                return [this._workspace];\n            }\n\n            const workspaceData = await this.getWorkspaceDataFromFile();\n            if (workspaceData) {\n                for (const { path } of workspaceData.folders) {\n                    const valid = await this.toValidRoot(path);\n                    if (valid) {\n                        roots.push(valid);\n                    } else {\n                        roots.push(FileStat.dir(path));\n                    }\n                }\n            }\n        }\n        return roots;\n    }\n\n    protected async getWorkspaceDataFromFile(): Promise<WorkspaceData | undefined> {\n        if (this._workspace && await this.fileService.exists(this._workspace.resource)) {\n            if (this._workspace.isDirectory) {\n                return {\n                    folders: [{ path: this._workspace.resource.toString() }]\n                };\n            } else if (this.isWorkspaceFile(this._workspace)) {\n                const stat = await this.fileService.read(this._workspace.resource);\n                const strippedContent = jsoncparser.stripComments(stat.value);\n                const data = jsoncparser.parse(strippedContent);\n                if (data && WorkspaceData.is(data)) {\n                    return WorkspaceData.transformToAbsolute(data, stat);\n                }\n                this.logger.error(`Unable to retrieve workspace data from the file: '${this.labelProvider.getLongName(this._workspace)}'. Please check if the file is corrupted.`);\n            } else {\n                this.logger.warn(`Not a valid workspace file: ${this.labelProvider.getLongName(this._workspace)}`);\n            }\n        }\n    }\n\n    protected updateTitle(): void {\n        let rootName: string | undefined;\n        let rootPath: string | undefined;\n        if (this._workspace) {\n            const displayName = this._workspace.name;\n            const fullName = this._workspace.resource.path.toString();\n            if (this.isWorkspaceFile(this._workspace)) {\n                if (this.isUntitledWorkspace(this._workspace.resource)) {\n                    const untitled = nls.localizeByDefault('Untitled (Workspace)');\n                    rootName = untitled;\n                    rootPath = untitled;\n                } else {\n                    rootName = displayName.slice(0, displayName.lastIndexOf('.'));\n                    rootPath = fullName.slice(0, fullName.lastIndexOf('.'));\n                }\n            } else {\n                rootName = displayName;\n                rootPath = fullName;\n            }\n        }\n        this.windowTitleService.update({\n            rootName,\n            rootPath\n        });\n    }\n\n    /**\n     * on unload, we set our workspace root as the last recently used on the backend.\n     */\n    onStop(): void {\n        this.server.setMostRecentlyUsedWorkspace(this._workspace ? this._workspace.resource.toString() : '');\n    }\n\n    async recentWorkspaces(): Promise<string[]> {\n        return this.server.getRecentWorkspaces();\n    }\n\n    async removeRecentWorkspace(uri: string): Promise<void> {\n        return this.server.removeRecentWorkspace(uri);\n    }\n\n    /**\n     * Returns `true` if theia has an opened workspace or folder\n     * @returns {boolean}\n     */\n    get opened(): boolean {\n        return !!this._workspace;\n    }\n\n    /**\n     * Returns `true` if a multiple-root workspace is currently open.\n     * @returns {boolean}\n     */\n    get isMultiRootWorkspaceOpened(): boolean {\n        return !!this.workspace && !this.workspace.isDirectory;\n    }\n\n    /**\n     * Opens directory, or recreates a workspace from the file that `uri` points to.\n     */\n    open(uri: URI, options?: WorkspaceInput): void {\n        this.doOpen(uri, options);\n    }\n\n    protected async doOpen(uri: URI, options?: WorkspaceInput): Promise<URI | undefined> {\n        const stat = await this.toFileStat(uri);\n        if (stat) {\n            if (!stat.isDirectory && !this.isWorkspaceFile(stat)) {\n                const message = `Not a valid workspace: ${uri.path.toString()}`;\n                this.messageService.error(message);\n                throw new Error(message);\n            }\n            // The same window has to be preserved too (instead of opening a new one), if the workspace root is not yet available and we are setting it for the first time.\n            // Option passed as parameter has the highest priority (for api developers), then the preference, then the default.\n            await this.roots;\n            const { preserveWindow } = {\n                preserveWindow: this.preferences['workspace.preserveWindow'] || !this.opened,\n                ...options\n            };\n            await this.server.setMostRecentlyUsedWorkspace(uri.toString());\n            if (preserveWindow) {\n                this._workspace = stat;\n            }\n            this.openWindow(stat, Object.assign(options ?? {}, { preserveWindow }));\n            return;\n        }\n        throw new Error('Invalid workspace root URI. Expected an existing directory or workspace file.');\n    }\n\n    /**\n     * Adds root folder(s) to the workspace\n     * @param uris URI or URIs of the root folder(s) to add\n     */\n    async addRoot(uris: URI[] | URI): Promise<void> {\n        const toAdd = Array.isArray(uris) ? uris : [uris];\n        await this.spliceRoots(this._roots.length, 0, ...toAdd);\n    }\n\n    /**\n     * Removes root folder(s) from workspace.\n     */\n    async removeRoots(uris: URI[]): Promise<void> {\n        if (!this.opened) {\n            throw new Error('Folder cannot be removed as there is no active folder in the current workspace.');\n        }\n        if (this._workspace) {\n            const workspaceData = await this.getWorkspaceDataFromFile();\n            this._workspace = await this.writeWorkspaceFile(this._workspace,\n                WorkspaceData.buildWorkspaceData(\n                    this._roots.filter(root => uris.findIndex(u => u.toString() === root.resource.toString()) < 0),\n                    workspaceData\n                )\n            );\n            await this.updateWorkspace();\n        }\n    }\n\n    async spliceRoots(start: number, deleteCount?: number, ...rootsToAdd: URI[]): Promise<URI[]> {\n        if (!this._workspace) {\n            throw new Error('There is no active workspace');\n        }\n        const dedup = new Set<string>();\n        const roots = this._roots.map(root => (dedup.add(root.resource.toString()), root.resource.toString()));\n        const toAdd: string[] = [];\n        for (const root of rootsToAdd) {\n            const uri = root.toString();\n            if (!dedup.has(uri)) {\n                dedup.add(uri);\n                toAdd.push(uri);\n            }\n        }\n        const toRemove = roots.splice(start, deleteCount || 0, ...toAdd);\n        if (!toRemove.length && !toAdd.length) {\n            return [];\n        }\n        if (this._workspace.isDirectory) {\n            const untitledWorkspace = await this.getUntitledWorkspace();\n            await this.save(untitledWorkspace);\n        }\n        const currentData = await this.getWorkspaceDataFromFile();\n        const newData = WorkspaceData.buildWorkspaceData(roots, currentData);\n        await this.writeWorkspaceFile(this._workspace, newData);\n        await this.updateWorkspace();\n        return toRemove.map(root => new URI(root));\n    }\n\n    async getUntitledWorkspace(): Promise<URI> {\n        const configDirURI = new URI(await this.envVariableServer.getConfigDirUri());\n        return this.untitledWorkspaceService.getUntitledWorkspaceUri(\n            configDirURI,\n            uri => this.fileService.exists(uri).then(exists => !exists),\n            () => this.messageService.warn(nls.localize(\n                'theia/workspace/untitled-cleanup',\n                'There appear to be many untitled workspace files. Please check {0} and remove any unused files.',\n                configDirURI.resolve('workspaces').path.fsPath())\n            ),\n        );\n    }\n\n    protected async writeWorkspaceFile(workspaceFile: FileStat | undefined, workspaceData: WorkspaceData): Promise<FileStat | undefined> {\n        if (workspaceFile) {\n            const data = JSON.stringify(WorkspaceData.transformToRelative(workspaceData, workspaceFile));\n            const edits = jsoncparser.format(data, undefined, { tabSize: 2, insertSpaces: true, eol: '' });\n            const result = jsoncparser.applyEdits(data, edits);\n            await this.fileService.write(workspaceFile.resource, result);\n            return this.fileService.resolve(workspaceFile.resource);\n        }\n    }\n\n    /**\n     * Clears current workspace root.\n     */\n    async close(): Promise<void> {\n        if (await this.windowService.isSafeToShutDown(StopReason.Reload)) {\n            this.windowService.setSafeToShutDown();\n            this._workspace = undefined;\n            this._roots.length = 0;\n\n            await this.server.setMostRecentlyUsedWorkspace('');\n            this.reloadWindow();\n        }\n    }\n\n    /**\n     * returns a FileStat if the argument URI points to an existing directory. Otherwise, `undefined`.\n     */\n    protected async toValidRoot(uri: URI | string | undefined): Promise<FileStat | undefined> {\n        const fileStat = await this.toFileStat(uri);\n        if (fileStat && fileStat.isDirectory) {\n            return fileStat;\n        }\n        return undefined;\n    }\n\n    /**\n     * returns a FileStat if the argument URI points to a file or directory. Otherwise, `undefined`.\n     */\n    protected async toFileStat(uri: URI | string | undefined): Promise<FileStat | undefined> {\n        if (!uri) {\n            return undefined;\n        }\n        let uriStr = uri.toString();\n        try {\n            if (uriStr.endsWith('/')) {\n                uriStr = uriStr.slice(0, -1);\n            }\n            const normalizedUri = new URI(uriStr).normalizePath();\n            return await this.fileService.resolve(normalizedUri);\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n    protected openWindow(uri: FileStat, options?: WorkspaceInput): void {\n        const workspacePath = uri.resource.path.toString();\n\n        if (this.shouldPreserveWindow(options)) {\n            this.reloadWindow(options);\n        } else {\n            try {\n                this.openNewWindow(workspacePath, options);\n            } catch (error) {\n                // Fall back to reloading the current window in case the browser has blocked the new window\n                this._workspace = uri;\n                this.logger.error(error.toString()).then(() => this.reloadWindow());\n            }\n        }\n    }\n\n    protected reloadWindow(options?: WorkspaceInput): void {\n        // Set the new workspace path as the URL fragment.\n        if (this._workspace !== undefined) {\n            this.setURLFragment(this._workspace.resource.path.toString());\n        } else {\n            this.setURLFragment('');\n        }\n\n        this.windowService.reload();\n    }\n\n    protected openNewWindow(workspacePath: string, options?: WorkspaceInput): void {\n        const url = new URL(window.location.href);\n        url.hash = encodeURI(workspacePath);\n        this.windowService.openNewWindow(url.toString());\n    }\n\n    protected shouldPreserveWindow(options?: WorkspaceInput): boolean {\n        return options !== undefined && !!options.preserveWindow;\n    }\n\n    /**\n     * Return true if one of the paths in paths array is present in the workspace\n     * NOTE: You should always explicitly use `/` as the separator between the path segments.\n     */\n    async containsSome(paths: string[]): Promise<boolean> {\n        await this.roots;\n        if (this.opened) {\n            for (const root of this._roots) {\n                const uri = root.resource;\n                for (const path of paths) {\n                    const fileUri = uri.resolve(path);\n                    const exists = await this.fileService.exists(fileUri);\n                    if (exists) {\n                        return exists;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * `true` if the current workspace is configured using a configuration file.\n     *\n     * `false` if there is no workspace or the workspace is simply a folder.\n     */\n    get saved(): boolean {\n        return !!this._workspace && !this._workspace.isDirectory;\n    }\n\n    /**\n     * Save workspace data into a file\n     * @param uri URI or FileStat of the workspace file\n     */\n    async save(uri: URI | FileStat): Promise<void> {\n        const resource = uri instanceof URI ? uri : uri.resource;\n        if (!await this.fileService.exists(resource)) {\n            await this.fileService.create(resource);\n        }\n        const workspaceData: WorkspaceData = { folders: [], settings: {} };\n        if (!this.saved) {\n            for (const p of Object.keys(this.schemaProvider.getCombinedSchema().properties)) {\n                if (this.schemaProvider.isValidInScope(p, PreferenceScope.Folder)) {\n                    continue;\n                }\n                const preferences = this.preferenceImpl.inspect(p);\n                if (preferences && preferences.workspaceValue) {\n                    workspaceData.settings![p] = preferences.workspaceValue;\n                }\n            }\n        }\n        let stat = await this.toFileStat(resource);\n        Object.assign(workspaceData, await this.getWorkspaceDataFromFile());\n        stat = await this.writeWorkspaceFile(stat, WorkspaceData.buildWorkspaceData(this._roots, workspaceData));\n        await this.server.setMostRecentlyUsedWorkspace(resource.toString());\n        // If saving a workspace based on an untitled workspace, delete the old file.\n        const toDelete = this.isUntitledWorkspace(this.workspace?.resource) && this.workspace!.resource;\n        await this.setWorkspace(stat);\n        if (toDelete && stat && !toDelete.isEqual(stat.resource)) {\n            await this.fileService.delete(toDelete).catch(() => { });\n        }\n        this.onWorkspaceLocationChangedEmitter.fire(stat);\n    }\n\n    protected readonly rootWatchers = new Map<string, Disposable>();\n\n    protected async watchRoots(): Promise<void> {\n        const rootUris = new Set(this._roots.map(r => r.resource.toString()));\n        for (const [uri, watcher] of this.rootWatchers.entries()) {\n            if (!rootUris.has(uri)) {\n                watcher.dispose();\n            }\n        }\n        for (const root of this._roots) {\n            this.watchRoot(root);\n        }\n    }\n\n    protected async refreshRootWatchers(): Promise<void> {\n        for (const watcher of this.rootWatchers.values()) {\n            watcher.dispose();\n        }\n        await this.watchRoots();\n    }\n\n    protected async watchRoot(root: FileStat): Promise<void> {\n        const uriStr = root.resource.toString();\n        if (this.rootWatchers.has(uriStr)) {\n            return;\n        }\n        const excludes = this.getExcludes(uriStr);\n        const watcher = this.fileService.watch(new URI(uriStr), {\n            recursive: true,\n            excludes\n        });\n        this.rootWatchers.set(uriStr, new DisposableCollection(\n            watcher,\n            Disposable.create(() => this.rootWatchers.delete(uriStr))\n        ));\n    }\n\n    protected getExcludes(uri: string): string[] {\n        const patterns = this.fsPreferences.get('files.watcherExclude', undefined, uri);\n        return Object.keys(patterns).filter(pattern => patterns[pattern]);\n    }\n\n    /**\n     * Returns the workspace root uri that the given file belongs to.\n     * In case that the file is found in more than one workspace roots, returns the root that is closest to the file.\n     * If the file is not from the current workspace, returns `undefined`.\n     * @param uri URI of the file\n     */\n    getWorkspaceRootUri(uri: URI | undefined): URI | undefined {\n        if (!uri) {\n            const root = this.tryGetRoots()[0];\n            if (root) {\n                return root.resource;\n            }\n            return undefined;\n        }\n        const rootUris: URI[] = [];\n        for (const root of this.tryGetRoots()) {\n            const rootUri = root.resource;\n            if (rootUri && rootUri.isEqualOrParent(uri)) {\n                rootUris.push(rootUri);\n            }\n        }\n        return rootUris.sort((r1, r2) => r2.toString().length - r1.toString().length)[0];\n    }\n\n    areWorkspaceRoots(uris: URI[]): boolean {\n        if (!uris.length) {\n            return false;\n        }\n        const rootUris = new Set(this.tryGetRoots().map(root => root.resource.toString()));\n        return uris.every(uri => rootUris.has(uri.toString()));\n    }\n\n    /**\n     * Check if the file should be considered as a workspace file.\n     *\n     * Example: We should not try to read the contents of an .exe file.\n     */\n    protected isWorkspaceFile(candidate: FileStat | URI): boolean {\n        return this.workspaceFileService.isWorkspaceFile(candidate);\n    }\n\n    isUntitledWorkspace(candidate?: URI): boolean {\n        return this.untitledWorkspaceService.isUntitledWorkspace(candidate);\n    }\n\n    async isSafeToReload(withURI?: URI): Promise<boolean> {\n        return !withURI || !this.untitledWorkspaceService.isUntitledWorkspace(withURI) || new URI(await this.getDefaultWorkspaceUri()).isEqual(withURI);\n    }\n\n    /**\n     *\n     * @param key the property key under which to store the schema (e.g. tasks, launch)\n     * @param schema the schema for the property. If none is supplied, the update is treated as a deletion.\n     */\n    async updateSchema(key: string, schema?: IJSONSchema): Promise<boolean> {\n        return this.schemaUpdater.updateSchema({ key, schema });\n    }\n}\n\nexport interface WorkspaceInput {\n\n    /**\n     * Tests whether the same window should be used or a new one has to be opened after setting the workspace root. By default it is `false`.\n     */\n    preserveWindow?: boolean;\n\n}\n\nexport interface WorkspaceData {\n    folders: Array<{ path: string, name?: string }>;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: { [id: string]: any };\n}\n\nexport namespace WorkspaceData {\n    const validateSchema = new Ajv().compile(workspaceSchema);\n\n    export function is(data: unknown): data is WorkspaceData {\n        return !!validateSchema(data);\n    }\n\n    export function buildWorkspaceData(folders: string[] | FileStat[], additionalFields?: Partial<WorkspaceData>): WorkspaceData {\n        const roots = new Set<string>();\n        if (folders.length > 0) {\n            if (typeof folders[0] !== 'string') {\n                (<FileStat[]>folders).forEach(folder => roots.add(folder.resource.toString()));\n            } else {\n                (<string[]>folders).forEach(folder => roots.add(folder));\n            }\n        }\n        const data: WorkspaceData = {\n            folders: Array.from(roots, folder => ({ path: folder }))\n        };\n        if (additionalFields) {\n            delete additionalFields.folders;\n            Object.assign(data, additionalFields);\n        }\n        return data;\n    }\n\n    export function transformToRelative(data: WorkspaceData, workspaceFile?: FileStat): WorkspaceData {\n        const folderUris: string[] = [];\n        const workspaceFileUri = new URI(workspaceFile ? workspaceFile.resource.toString() : '').withScheme('file');\n        for (const { path } of data.folders) {\n            const folderUri = new URI(path).withScheme('file');\n            const rel = workspaceFileUri.parent.relative(folderUri);\n            if (rel) {\n                folderUris.push(rel.toString());\n            } else {\n                folderUris.push(folderUri.toString());\n            }\n        }\n        return buildWorkspaceData(folderUris, data);\n    }\n\n    export function transformToAbsolute(data: WorkspaceData, workspaceFile?: BaseStat): WorkspaceData {\n        if (workspaceFile) {\n            const folders: string[] = [];\n            for (const folder of data.folders) {\n                const path = folder.path;\n                if (path.startsWith('file:///')) {\n                    folders.push(path);\n                } else {\n                    const absolutePath = workspaceFile.resource.withScheme('file').parent.resolveToAbsolute(path)?.toString();\n                    if (absolutePath) {\n                        folders.push(absolutePath.toString());\n                    }\n                }\n\n            }\n            return Object.assign(data, buildWorkspaceData(folders, data));\n        }\n        return data;\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nexport * from './workspace-protocol';\nexport * from './workspace-file-service';\nexport * from './untitled-workspace-service';\n","// *****************************************************************************\n// Copyright (C) 2018 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport URI from '@theia/core/lib/common/uri';\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport { MaybePromise } from '@theia/core';\nimport { WorkspaceFileService } from './workspace-file-service';\n\n@injectable()\nexport class UntitledWorkspaceService {\n\n    @inject(WorkspaceFileService)\n    protected readonly workspaceFileService: WorkspaceFileService;\n\n    isUntitledWorkspace(candidate?: URI): boolean {\n        return !!candidate && this.workspaceFileService.isWorkspaceFile(candidate) && candidate.path.base.startsWith('Untitled');\n    }\n\n    async getUntitledWorkspaceUri(configDirUri: URI, isAcceptable: (candidate: URI) => MaybePromise<boolean>, warnOnHits?: () => unknown): Promise<URI> {\n        const parentDir = configDirUri.resolve('workspaces');\n        const workspaceExtensions = this.workspaceFileService.getWorkspaceFileExtensions();\n        const defaultFileExtension = workspaceExtensions[this.workspaceFileService.defaultFileTypeIndex];\n        let uri;\n        let attempts = 0;\n        do {\n            attempts++;\n            uri = parentDir.resolve(`Untitled-${Math.round(Math.random() * 1000)}.${defaultFileExtension}`);\n            if (attempts === 10) {\n                warnOnHits?.();\n            }\n            if (attempts === 50) {\n                throw new Error('Workspace Service: too many attempts to find unused filename.');\n            }\n        } while (!(await isAcceptable(uri)));\n        return uri;\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nexport const workspacePath = '/services/workspace';\n\n/**\n * The JSON-RPC workspace interface.\n */\nexport const WorkspaceServer = Symbol('WorkspaceServer');\nexport interface WorkspaceServer {\n\n    /**\n     * Returns with a promise that resolves to the most recently used workspace folder URI as a string.\n     * Resolves to `undefined` if the workspace folder is not yet set.\n     */\n    getMostRecentlyUsedWorkspace(): Promise<string | undefined>;\n\n    /**\n     * Sets the desired string representation of the URI as the most recently used workspace folder.\n     */\n    setMostRecentlyUsedWorkspace(uri: string): Promise<void>;\n\n    /**\n     * Removes a workspace from the list of recently opened workspaces.\n     *\n     * @param uri the workspace uri.\n     */\n    removeRecentWorkspace(uri: string): Promise<void>;\n\n    /**\n     * Returns list of recently opened workspaces as an array.\n     */\n    getRecentWorkspaces(): Promise<string[]>\n}\n"],"names":[],"sourceRoot":""}