{"version":3,"file":"node_modules_theia_core_lib_browser_request_browser-request-module_js.js","mappings":"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","sources":["webpack:///./node_modules/@theia/core/src/browser/request/browser-request-module.ts?","webpack:///./node_modules/@theia/core/src/browser/request/browser-request-service.ts?"],"sourcesContent":["/********************************************************************************\n * Copyright (C) 2022 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ContainerModule } from 'inversify';\nimport { RequestService } from '@theia/request';\nimport { XHRBrowserRequestService } from './browser-request-service';\n\nexport default new ContainerModule(bind => {\n    bind(RequestService).to(XHRBrowserRequestService).inSingletonScope();\n});\n","/********************************************************************************\n * Copyright (C) 2022 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable, postConstruct } from 'inversify';\nimport { BackendRequestService, RequestConfiguration, RequestContext, RequestOptions, RequestService, CancellationToken } from '@theia/request';\nimport { PreferenceService } from '../preferences/preference-service';\n\n@injectable()\nexport abstract class AbstractBrowserRequestService implements RequestService {\n\n    @inject(PreferenceService)\n    protected readonly preferenceService: PreferenceService;\n\n    protected configurePromise: Promise<void> = Promise.resolve();\n\n    @postConstruct()\n    protected init(): void {\n        this.configurePromise = this.preferenceService.ready.then(() => {\n            const proxyUrl = this.preferenceService.get('http.proxy') as string;\n            const proxyAuthorization = this.preferenceService.get('http.proxyAuthorization') as string;\n            const strictSSL = this.preferenceService.get('http.proxyStrictSSL') as boolean;\n            return this.configure({\n                proxyUrl,\n                proxyAuthorization,\n                strictSSL\n            });\n        });\n        this.preferenceService.onPreferencesChanged(e => {\n            this.configurePromise.then(() => this.configure({\n                proxyUrl: e['http.proxy']?.newValue,\n                proxyAuthorization: e['http.proxyAuthorization']?.newValue,\n                strictSSL: e['http.proxyStrictSSL']?.newValue\n            }));\n        });\n    }\n\n    abstract configure(config: RequestConfiguration): Promise<void>;\n    abstract request(options: RequestOptions, token?: CancellationToken): Promise<RequestContext>;\n    abstract resolveProxy(url: string): Promise<string | undefined>;\n\n}\n\n@injectable()\nexport class ProxyingBrowserRequestService extends AbstractBrowserRequestService {\n\n    @inject(BackendRequestService)\n    protected readonly backendRequestService: RequestService;\n\n    configure(config: RequestConfiguration): Promise<void> {\n        return this.backendRequestService.configure(config);\n    }\n\n    resolveProxy(url: string): Promise<string | undefined> {\n        return this.backendRequestService.resolveProxy(url);\n    }\n\n    async request(options: RequestOptions): Promise<RequestContext> {\n        // Wait for both the preferences and the configuration of the backend service\n        await this.configurePromise;\n        const backendResult = await this.backendRequestService.request(options);\n        return RequestContext.decompress(backendResult);\n    }\n}\n\n@injectable()\nexport class XHRBrowserRequestService extends ProxyingBrowserRequestService {\n\n    protected authorization?: string;\n\n    override configure(config: RequestConfiguration): Promise<void> {\n        if (config.proxyAuthorization !== undefined) {\n            this.authorization = config.proxyAuthorization;\n        }\n        return super.configure(config);\n    }\n\n    override async request(options: RequestOptions, token?: CancellationToken): Promise<RequestContext> {\n        try {\n            const xhrResult = await this.xhrRequest(options, token);\n            const statusCode = xhrResult.res.statusCode ?? 200;\n            if (statusCode >= 400) {\n                // We might've been blocked by the firewall\n                // Try it through the backend request service\n                return super.request(options);\n            }\n            return xhrResult;\n        } catch {\n            return super.request(options);\n        }\n    }\n\n    protected xhrRequest(options: RequestOptions, token?: CancellationToken): Promise<RequestContext> {\n        const authorization = this.authorization || options.proxyAuthorization;\n        if (authorization) {\n            options.headers = {\n                ...(options.headers || {}),\n                'Proxy-Authorization': authorization\n            };\n        }\n\n        const xhr = new XMLHttpRequest();\n        return new Promise<RequestContext>((resolve, reject) => {\n\n            xhr.open(options.type || 'GET', options.url || '', true, options.user, options.password);\n            this.setRequestHeaders(xhr, options);\n\n            xhr.responseType = 'arraybuffer';\n            xhr.onerror = () => reject(new Error(xhr.statusText && ('XHR failed: ' + xhr.statusText) || 'XHR failed'));\n            xhr.onload = () => {\n                resolve({\n                    url: options.url,\n                    res: {\n                        statusCode: xhr.status,\n                        headers: this.getResponseHeaders(xhr)\n                    },\n                    buffer: new Uint8Array(xhr.response)\n                });\n            };\n            xhr.ontimeout = e => reject(new Error(`XHR timeout: ${options.timeout}ms`));\n\n            if (options.timeout) {\n                xhr.timeout = options.timeout;\n            }\n\n            xhr.send(options.data);\n\n            token?.onCancellationRequested(() => {\n                xhr.abort();\n                reject();\n            });\n        });\n    }\n\n    protected setRequestHeaders(xhr: XMLHttpRequest, options: RequestOptions): void {\n        if (options.headers) {\n            for (const k of Object.keys(options.headers)) {\n                switch (k) {\n                    case 'User-Agent':\n                    case 'Accept-Encoding':\n                    case 'Content-Length':\n                        // unsafe headers\n                        continue;\n                }\n                xhr.setRequestHeader(k, options.headers[k]);\n            }\n        }\n    }\n\n    protected getResponseHeaders(xhr: XMLHttpRequest): { [name: string]: string } {\n        const headers: { [name: string]: string } = {};\n        for (const line of xhr.getAllResponseHeaders().split(/\\r\\n|\\n|\\r/g)) {\n            if (line) {\n                const idx = line.indexOf(':');\n                headers[line.substring(0, idx).trim().toLowerCase()] = line.substring(idx + 1).trim();\n            }\n        }\n        return headers;\n    }\n}\n"],"names":[],"sourceRoot":""}