{"version":3,"file":"vendors-node_modules_theia_scm_lib_browser_scm-tree-widget_js.js","mappings":"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","sources":["webpack:///./node_modules/@theia/scm/src/browser/scm-context-key-service.ts?","webpack:///./node_modules/@theia/scm/src/browser/scm-tree-model.ts?","webpack:///./node_modules/@theia/scm/src/browser/scm-tree-widget.tsx?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2019 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport { ContextKeyService, ContextKey } from '@theia/core/lib/browser/context-key-service';\n\n@injectable()\nexport class ScmContextKeyService {\n\n    @inject(ContextKeyService)\n    protected readonly contextKeyService: ContextKeyService;\n\n    protected _scmProvider: ContextKey<string | undefined>;\n    get scmProvider(): ContextKey<string | undefined> {\n        return this._scmProvider;\n    }\n\n    protected _scmResourceGroup: ContextKey<string | undefined>;\n    get scmResourceGroup(): ContextKey<string | undefined> {\n        return this._scmResourceGroup;\n    }\n\n    @postConstruct()\n    protected init(): void {\n        this._scmProvider = this.contextKeyService.createKey<string | undefined>('scmProvider', undefined);\n        this._scmResourceGroup = this.contextKeyService.createKey<string | undefined>('scmResourceGroup', undefined);\n    }\n\n    match(expression: string | undefined): boolean {\n        return !expression || this.contextKeyService.match(expression);\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2020 Arm and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject } from '@theia/core/shared/inversify';\nimport { TreeModelImpl, TreeNode, TreeProps, CompositeTreeNode, SelectableTreeNode, ExpandableTreeNode } from '@theia/core/lib/browser/tree';\nimport URI from '@theia/core/lib/common/uri';\nimport { ScmProvider, ScmResourceGroup, ScmResource, ScmResourceDecorations } from './scm-provider';\nimport { ScmContextKeyService } from './scm-context-key-service';\n\nexport const ScmTreeModelProps = Symbol('ScmTreeModelProps');\nexport interface ScmTreeModelProps {\n    defaultExpansion?: 'collapsed' | 'expanded';\n    nestingThreshold?: number;\n}\n\nexport interface ScmFileChangeRootNode extends CompositeTreeNode {\n    rootUri: string;\n    children: ScmFileChangeGroupNode[];\n}\n\nexport interface ScmFileChangeGroupNode extends ExpandableTreeNode {\n    groupId: string;\n    groupLabel: string;\n    children: (ScmFileChangeFolderNode | ScmFileChangeNode)[];\n}\n\nexport namespace ScmFileChangeGroupNode {\n    export function is(node: TreeNode): node is ScmFileChangeGroupNode {\n        return 'groupId' in node && 'children' in node\n            && !ScmFileChangeFolderNode.is(node);\n    }\n}\n\nexport interface ScmFileChangeFolderNode extends ExpandableTreeNode, SelectableTreeNode {\n    groupId: string;\n    path: string;\n    sourceUri: string;\n    children: (ScmFileChangeFolderNode | ScmFileChangeNode)[];\n}\n\nexport namespace ScmFileChangeFolderNode {\n    export function is(node: TreeNode): node is ScmFileChangeFolderNode {\n        return 'groupId' in node && 'sourceUri' in node && 'path' in node && 'children' in node;\n    }\n}\n\nexport interface ScmFileChangeNode extends SelectableTreeNode {\n    sourceUri: string;\n    decorations?: ScmResourceDecorations;\n}\n\nexport namespace ScmFileChangeNode {\n    export function is(node: TreeNode): node is ScmFileChangeNode {\n        return 'sourceUri' in node\n            && !ScmFileChangeFolderNode.is(node);\n    }\n    export function getGroupId(node: ScmFileChangeNode): string {\n        const parentNode = node.parent;\n        if (!(parentNode && (ScmFileChangeFolderNode.is(parentNode) || ScmFileChangeGroupNode.is(parentNode)))) {\n            throw new Error('bad node');\n        }\n        return parentNode.groupId;\n    }\n\n}\n\n@injectable()\nexport abstract class ScmTreeModel extends TreeModelImpl {\n\n    private _languageId: string | undefined;\n\n    protected provider: ScmProvider | undefined;\n\n    @inject(TreeProps) protected readonly props: ScmTreeModelProps;\n\n    @inject(ScmContextKeyService) protected readonly contextKeys: ScmContextKeyService;\n\n    get languageId(): string | undefined {\n        return this._languageId;\n    }\n\n    abstract canTabToWidget(): boolean;\n\n    protected _viewMode: 'tree' | 'list' = 'list';\n    set viewMode(id: 'tree' | 'list') {\n        const oldSelection = this.selectedNodes;\n        this._viewMode = id;\n        if (this.root) {\n            this.root = this.createTree();\n\n            for (const oldSelectedNode of oldSelection) {\n                const newNode = this.getNode(oldSelectedNode.id);\n                if (SelectableTreeNode.is(newNode)) {\n                    this.revealNode(newNode);  // this call can run asynchronously\n                }\n            }\n        }\n    }\n    get viewMode(): 'tree' | 'list' {\n        return this._viewMode;\n    }\n\n    abstract get rootUri(): string | undefined;\n    abstract get groups(): ScmResourceGroup[];\n\n    protected createTree(): ScmFileChangeRootNode {\n        const root = {\n            id: 'file-change-tree-root',\n            parent: undefined,\n            visible: false,\n            rootUri: this.rootUri,\n            children: []\n        } as ScmFileChangeRootNode;\n\n        const groupNodes = this.groups\n            .filter(group => !!group.resources.length || !group.hideWhenEmpty)\n            .map(group => this.toGroupNode(group, root));\n        root.children = groupNodes;\n\n        return root;\n    }\n\n    protected toGroupNode(group: ScmResourceGroup, parent: CompositeTreeNode): ScmFileChangeGroupNode {\n        const groupNode: ScmFileChangeGroupNode = {\n            id: `${group.id}`,\n            groupId: group.id,\n            groupLabel: group.label,\n            parent,\n            children: [],\n            expanded: true,\n        };\n\n        const sortedResources = group.resources.sort((r1, r2) =>\n            r1.sourceUri.toString().localeCompare(r2.sourceUri.toString())\n        );\n\n        switch (this._viewMode) {\n            case 'list':\n                groupNode.children = sortedResources.map(resource => this.toFileChangeNode(resource, groupNode));\n                break;\n            case 'tree':\n                const rootUri = group.provider.rootUri;\n                if (rootUri) {\n                    const resourcePaths = sortedResources.map(resource => {\n                        const relativePath = new URI(rootUri).relative(resource.sourceUri);\n                        const pathParts = relativePath ? relativePath.toString().split('/') : [];\n                        return { resource, pathParts };\n                    });\n                    groupNode.children = this.buildFileChangeTree(resourcePaths, 0, sortedResources.length, 0, groupNode);\n                }\n                break;\n        }\n\n        return groupNode;\n    }\n\n    protected buildFileChangeTree(\n        sortedResources: { resource: ScmResource, pathParts: string[] }[],\n        start: number,\n        end: number,\n        level: number,\n        parent: (ScmFileChangeGroupNode | ScmFileChangeFolderNode)\n    ): (ScmFileChangeFolderNode | ScmFileChangeNode)[] {\n        const result: (ScmFileChangeFolderNode | ScmFileChangeNode)[] = [];\n\n        let folderStart = start;\n        while (folderStart < end) {\n            const firstFileChange = sortedResources[folderStart];\n            if (level === firstFileChange.pathParts.length - 1) {\n                result.push(this.toFileChangeNode(firstFileChange.resource, parent));\n                folderStart++;\n            } else {\n                let index = folderStart + 1;\n                while (index < end) {\n                    if (sortedResources[index].pathParts[level] !== firstFileChange.pathParts[level]) {\n                        break;\n                    }\n                    index++;\n                }\n                const folderEnd = index;\n\n                const nestingThreshold = this.props.nestingThreshold || 1;\n                if (folderEnd - folderStart < nestingThreshold) {\n                    // Inline these (i.e. do not create another level in the tree)\n                    for (let i = folderStart; i < folderEnd; i++) {\n                        result.push(this.toFileChangeNode(sortedResources[i].resource, parent));\n                    }\n                } else {\n                    const firstFileParts = firstFileChange.pathParts;\n                    const lastFileParts = sortedResources[folderEnd - 1].pathParts;\n                    // Multiple files with first folder.\n                    // See if more folder levels match and include those if so.\n                    let thisLevel = level + 1;\n                    while (thisLevel < firstFileParts.length - 1 && thisLevel < lastFileParts.length - 1 && firstFileParts[thisLevel] === lastFileParts[thisLevel]) {\n                        thisLevel++;\n                    }\n                    const nodeRelativePath = firstFileParts.slice(level, thisLevel).join('/');\n                    result.push(this.toFileChangeFolderNode(sortedResources, folderStart, folderEnd, thisLevel, nodeRelativePath, parent));\n                }\n                folderStart = folderEnd;\n            }\n        };\n        return result.sort(this.compareNodes);\n    }\n\n    protected compareNodes = (a: ScmFileChangeFolderNode | ScmFileChangeNode, b: ScmFileChangeFolderNode | ScmFileChangeNode) => this.doCompareNodes(a, b);\n    protected doCompareNodes(a: ScmFileChangeFolderNode | ScmFileChangeNode, b: ScmFileChangeFolderNode | ScmFileChangeNode): number {\n        const isFolderA = ScmFileChangeFolderNode.is(a);\n        const isFolderB = ScmFileChangeFolderNode.is(b);\n        if (isFolderA && !isFolderB) {\n            return -1;\n        }\n        if (isFolderB && !isFolderA) {\n            return 1;\n        }\n        return a.sourceUri.localeCompare(b.sourceUri);\n    }\n\n    protected toFileChangeFolderNode(\n        resources: { resource: ScmResource, pathParts: string[] }[],\n        start: number,\n        end: number,\n        level: number,\n        nodeRelativePath: string,\n        parent: (ScmFileChangeGroupNode | ScmFileChangeFolderNode)\n    ): ScmFileChangeFolderNode {\n        const rootUri = this.getRoot(parent).rootUri;\n        let parentPath: string = rootUri;\n        if (ScmFileChangeFolderNode.is(parent)) {\n            parentPath = parent.sourceUri;\n        }\n        const sourceUri = new URI(parentPath).resolve(nodeRelativePath);\n\n        const defaultExpansion = this.props.defaultExpansion ? (this.props.defaultExpansion === 'expanded') : true;\n        const id = `${parent.groupId}:${String(sourceUri)}`;\n        const oldNode = this.getNode(id);\n        const folderNode: ScmFileChangeFolderNode = {\n            id,\n            groupId: parent.groupId,\n            path: nodeRelativePath,\n            sourceUri: String(sourceUri),\n            children: [],\n            parent,\n            expanded: ExpandableTreeNode.is(oldNode) ? oldNode.expanded : defaultExpansion,\n            selected: SelectableTreeNode.is(oldNode) && oldNode.selected,\n        };\n        folderNode.children = this.buildFileChangeTree(resources, start, end, level, folderNode);\n        return folderNode;\n    }\n\n    protected getRoot(node: ScmFileChangeGroupNode | ScmFileChangeFolderNode): ScmFileChangeRootNode {\n        let parent = node.parent!;\n        while (ScmFileChangeGroupNode.is(parent) && ScmFileChangeFolderNode.is(parent)) {\n            parent = parent.parent!;\n        }\n        return parent as ScmFileChangeRootNode;\n    }\n\n    protected toFileChangeNode(resource: ScmResource, parent: CompositeTreeNode): ScmFileChangeNode {\n        const id = `${resource.group.id}:${String(resource.sourceUri)}`;\n        const oldNode = this.getNode(id);\n        const node = {\n            id,\n            sourceUri: String(resource.sourceUri),\n            decorations: resource.decorations,\n            parent,\n            selected: SelectableTreeNode.is(oldNode) && oldNode.selected,\n        };\n        if (node.selected) {\n            this.selectionService.addSelection(node);\n        }\n        return node;\n    }\n\n    protected async revealNode(node: TreeNode): Promise<void> {\n        if (ScmFileChangeFolderNode.is(node) || ScmFileChangeNode.is(node)) {\n            const parentNode = node.parent;\n            if (ExpandableTreeNode.is(parentNode)) {\n                await this.revealNode(parentNode);\n                if (!parentNode.expanded) {\n                    await this.expandNode(parentNode);\n                }\n            }\n        }\n    }\n\n    getResourceFromNode(node: ScmFileChangeNode): ScmResource | undefined {\n        const groupId = ScmFileChangeNode.getGroupId(node);\n        const group = this.findGroup(groupId);\n        if (group) {\n            return group.resources.find(r => String(r.sourceUri) === node.sourceUri)!;\n        }\n    }\n\n    getResourceGroupFromNode(node: ScmFileChangeGroupNode): ScmResourceGroup | undefined {\n        return this.findGroup(node.groupId);\n    }\n\n    getResourcesFromFolderNode(node: ScmFileChangeFolderNode): ScmResource[] {\n        const resources: ScmResource[] = [];\n        const group = this.findGroup(node.groupId);\n        if (group) {\n            this.collectResources(resources, node, group);\n        }\n        return resources;\n\n    }\n    getSelectionArgs(selectedNodes: Readonly<SelectableTreeNode[]>): ScmResource[] {\n        const resources: ScmResource[] = [];\n        for (const node of selectedNodes) {\n            if (ScmFileChangeNode.is(node)) {\n                const groupId = ScmFileChangeNode.getGroupId(node);\n                const group = this.findGroup(groupId);\n                if (group) {\n                    const selectedResource = group.resources.find(r => String(r.sourceUri) === node.sourceUri);\n                    if (selectedResource) {\n                        resources.push(selectedResource);\n                    }\n                }\n            }\n            if (ScmFileChangeFolderNode.is(node)) {\n                const group = this.findGroup(node.groupId);\n                if (group) {\n                    this.collectResources(resources, node, group);\n                }\n            }\n        }\n        // Remove duplicates which may occur if user selected folder and nested folder\n        return resources.filter((item1, index) => resources.findIndex(item2 => item1.sourceUri === item2.sourceUri) === index);\n    }\n\n    protected collectResources(resources: ScmResource[], node: TreeNode, group: ScmResourceGroup): void {\n        if (ScmFileChangeFolderNode.is(node)) {\n            for (const child of node.children) {\n                this.collectResources(resources, child, group);\n            }\n        } else if (ScmFileChangeNode.is(node)) {\n            const resource = group.resources.find(r => String(r.sourceUri) === node.sourceUri)!;\n            resources.push(resource);\n        }\n    }\n\n    execInNodeContext(node: TreeNode, callback: () => void): void {\n        if (!this.provider) {\n            return;\n        }\n\n        let groupId: string;\n        if (ScmFileChangeGroupNode.is(node) || ScmFileChangeFolderNode.is(node)) {\n            groupId = node.groupId;\n        } else if (ScmFileChangeNode.is(node)) {\n            groupId = ScmFileChangeNode.getGroupId(node);\n        } else {\n            return;\n        }\n\n        this.contextKeys.scmProvider.set(this.provider.id);\n        this.contextKeys.scmResourceGroup.set(groupId);\n        try {\n            callback();\n        } finally {\n        }\n    }\n\n    /*\n     * Normally the group would always be expected to be found.  However if the tree is restored\n     * in restoreState then the tree may be rendered before the groups have been created\n     * in the provider.  The provider's groups property will be empty in such a situation.\n     * We want to render the tree (as that is the point of restoreState, we can render\n     * the tree in the saved state before the provider has provided status).  We therefore must\n     * be prepared to render the tree without having the ScmResourceGroup or ScmResource\n     * objects.\n     */\n    findGroup(groupId: string): ScmResourceGroup | undefined {\n        return this.groups.find(g => g.id === groupId);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    override storeState(): any {\n        return {\n            ...super.storeState(),\n            mode: this.viewMode,\n        };\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    override restoreState(oldState: any): void {\n        super.restoreState(oldState);\n        this.viewMode = oldState.mode === 'tree' ? 'tree' : 'list';\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2020 Arm and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\n/* eslint-disable no-null/no-null, @typescript-eslint/no-explicit-any */\n\nimport * as React from '@theia/core/shared/react';\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { isOSX } from '@theia/core/lib/common/os';\nimport { DisposableCollection, Disposable } from '@theia/core/lib/common/disposable';\nimport { TreeWidget, TreeNode, SelectableTreeNode, TreeModel, TreeProps, NodeProps, TREE_NODE_SEGMENT_CLASS, TREE_NODE_SEGMENT_GROW_CLASS } from '@theia/core/lib/browser/tree';\nimport { ScmTreeModel, ScmFileChangeRootNode, ScmFileChangeGroupNode, ScmFileChangeFolderNode, ScmFileChangeNode } from './scm-tree-model';\nimport { MenuCommandExecutor, MenuModelRegistry, ActionMenuNode, CompoundMenuNode, MenuPath } from '@theia/core/lib/common/menu';\nimport { ScmResource } from './scm-provider';\nimport { ContextMenuRenderer, LabelProvider, CorePreferences, DiffUris, ACTION_ITEM } from '@theia/core/lib/browser';\nimport { ScmContextKeyService } from './scm-context-key-service';\nimport { EditorWidget, EditorManager, DiffNavigatorProvider } from '@theia/editor/lib/browser';\nimport { IconThemeService } from '@theia/core/lib/browser/icon-theme-service';\nimport { ColorRegistry } from '@theia/core/lib/browser/color-registry';\nimport { Decoration, DecorationsService } from '@theia/core/lib/browser/decorations-service';\nimport { FileStat } from '@theia/filesystem/lib/common/files';\nimport { ThemeService } from '@theia/core/lib/browser/theming';\n\n@injectable()\nexport class ScmTreeWidget extends TreeWidget {\n\n    static ID = 'scm-resource-widget';\n\n    static RESOURCE_GROUP_CONTEXT_MENU = ['RESOURCE_GROUP_CONTEXT_MENU'];\n    static RESOURCE_GROUP_INLINE_MENU = ['RESOURCE_GROUP_CONTEXT_MENU', 'inline'];\n\n    static RESOURCE_FOLDER_CONTEXT_MENU = ['RESOURCE_FOLDER_CONTEXT_MENU'];\n    static RESOURCE_FOLDER_INLINE_MENU = ['RESOURCE_FOLDER_CONTEXT_MENU', 'inline'];\n\n    static RESOURCE_CONTEXT_MENU = ['RESOURCE_CONTEXT_MENU'];\n    static RESOURCE_INLINE_MENU = ['RESOURCE_CONTEXT_MENU', 'inline'];\n\n    @inject(MenuCommandExecutor) protected readonly menuCommandExecutor: MenuCommandExecutor;\n    @inject(MenuModelRegistry) protected readonly menus: MenuModelRegistry;\n    @inject(ScmContextKeyService) protected readonly contextKeys: ScmContextKeyService;\n    @inject(EditorManager) protected readonly editorManager: EditorManager;\n    @inject(DiffNavigatorProvider) protected readonly diffNavigatorProvider: DiffNavigatorProvider;\n    @inject(IconThemeService) protected readonly iconThemeService: IconThemeService;\n    @inject(DecorationsService) protected readonly decorationsService: DecorationsService;\n    @inject(ColorRegistry) protected readonly colors: ColorRegistry;\n    @inject(ThemeService) protected readonly themeService: ThemeService;\n\n    // TODO: Make TreeWidget generic to better type those fields.\n    override readonly model: ScmTreeModel;\n\n    constructor(\n        @inject(TreeProps) props: TreeProps,\n        @inject(TreeModel) treeModel: ScmTreeModel,\n        @inject(ContextMenuRenderer) contextMenuRenderer: ContextMenuRenderer,\n    ) {\n        super(props, treeModel, contextMenuRenderer);\n        this.id = ScmTreeWidget.ID;\n        this.addClass('groups-outer-container');\n    }\n\n    @postConstruct()\n    protected override init(): void {\n        super.init();\n        this.toDispose.push(this.themeService.onDidColorThemeChange(() => this.update()));\n    }\n\n    set viewMode(id: 'tree' | 'list') {\n        // Close the search box because the structure of the tree will change dramatically\n        // and the search results will be out of date.\n        this.searchBox.hide();\n        this.model.viewMode = id;\n    }\n    get viewMode(): 'tree' | 'list' {\n        return this.model.viewMode;\n    }\n\n    /**\n     * Render the node given the tree node and node properties.\n     * @param node the tree node.\n     * @param props the node properties.\n     */\n    protected override renderNode(node: TreeNode, props: NodeProps): React.ReactNode {\n        if (!TreeNode.isVisible(node)) {\n            return undefined;\n        }\n\n        const attributes = this.createNodeAttributes(node, props);\n        const label = this.labelProvider.getName(node);\n        const searchHighlights = this.searchHighlights?.get(node.id);\n        // The group nodes should not be subject to highlighting.\n        const caption = (searchHighlights && !ScmFileChangeGroupNode.is(node)) ? this.toReactNode(label, searchHighlights) : label;\n\n        if (ScmFileChangeGroupNode.is(node)) {\n            const content = <ScmResourceGroupElement\n                key={`${node.groupId}`}\n                model={this.model}\n                treeNode={node}\n                renderExpansionToggle={() => this.renderExpansionToggle(node, props)}\n                commandExecutor={this.menuCommandExecutor}\n                contextMenuRenderer={this.contextMenuRenderer}\n                menus={this.menus}\n                contextKeys={this.contextKeys}\n                labelProvider={this.labelProvider}\n                corePreferences={this.corePreferences}\n                caption={caption}\n            />;\n\n            return React.createElement('div', attributes, content);\n\n        }\n        if (ScmFileChangeFolderNode.is(node)) {\n            const content = <ScmResourceFolderElement\n                key={String(node.sourceUri)}\n                model={this.model}\n                treeNode={node}\n                sourceUri={node.sourceUri}\n                renderExpansionToggle={() => this.renderExpansionToggle(node, props)}\n                commandExecutor={this.menuCommandExecutor}\n                contextMenuRenderer={this.contextMenuRenderer}\n                menus={this.menus}\n                contextKeys={this.contextKeys}\n                labelProvider={this.labelProvider}\n                corePreferences={this.corePreferences}\n                caption={caption}\n            />;\n\n            return React.createElement('div', attributes, content);\n        }\n        if (ScmFileChangeNode.is(node)) {\n            const parentPath =\n                (node.parent && ScmFileChangeFolderNode.is(node.parent))\n                    ? new URI(node.parent.sourceUri) : new URI(this.model.rootUri);\n\n            const content = <ScmResourceComponent\n                key={node.sourceUri}\n                model={this.model}\n                treeNode={node}\n                contextMenuRenderer={this.contextMenuRenderer}\n                commandExecutor={this.menuCommandExecutor}\n                menus={this.menus}\n                contextKeys={this.contextKeys}\n                labelProvider={this.labelProvider}\n                corePreferences={this.corePreferences}\n                caption={caption}\n                {...{\n                    ...this.props,\n                    parentPath,\n                    sourceUri: node.sourceUri,\n                    decoration: this.decorationsService.getDecoration(new URI(node.sourceUri), true)[0],\n                    colors: this.colors,\n                    isLightTheme: this.isCurrentThemeLight(),\n                    renderExpansionToggle: () => this.renderExpansionToggle(node, props),\n                }}\n            />;\n            return React.createElement('div', attributes, content);\n        }\n        return super.renderNode(node, props);\n    }\n\n    protected override createContainerAttributes(): React.HTMLAttributes<HTMLElement> {\n        if (this.model.canTabToWidget()) {\n            return {\n                ...super.createContainerAttributes(),\n                tabIndex: 0\n            };\n        }\n        return super.createContainerAttributes();\n    }\n\n    /**\n     * The ARROW_LEFT key controls both the movement around the file tree and also\n     * the movement through the change chunks within a file.\n     *\n     * If the selected tree node is a folder then the ARROW_LEFT key behaves exactly\n     * as it does in explorer.  It collapses the tree node if the folder is expanded and\n     * it moves the selection up to the parent folder if the folder is collapsed (no-op if no parent folder, as\n     * group headers are not selectable).  This behavior is the default behavior implemented\n     * in the TreeWidget super class.\n     *\n     * If the selected tree node is a file then the ARROW_LEFT key moves up through the\n     * change chunks within each file.  If the selected chunk is the first chunk in the file\n     * then the file selection is moved to the previous file (no-op if no previous file).\n     *\n     * Note that when cursoring through change chunks, the ARROW_LEFT key cannot be used to\n     * move up through the parent folders of the file tree.  If users want to do this, using\n     * keys only, then they must press ARROW_UP repeatedly until the selected node is the folder\n     * node and then press ARROW_LEFT.\n     */\n    protected override async handleLeft(event: KeyboardEvent): Promise<void> {\n        if (this.model.selectedNodes.length === 1) {\n            const selectedNode = this.model.selectedNodes[0];\n            if (ScmFileChangeNode.is(selectedNode)) {\n                const selectedResource = this.model.getResourceFromNode(selectedNode);\n                if (!selectedResource) {\n                    return super.handleLeft(event);\n                }\n                const widget = await this.openResource(selectedResource);\n\n                if (widget) {\n                    const diffNavigator = this.diffNavigatorProvider(widget.editor);\n                    if (diffNavigator.hasPrevious()) {\n                        diffNavigator.previous();\n                    } else {\n                        const previousNode = this.moveToPreviousFileNode();\n                        if (previousNode) {\n                            const previousResource = this.model.getResourceFromNode(previousNode);\n                            if (previousResource) {\n                                this.openResource(previousResource);\n                            }\n                        }\n                    }\n                    return;\n                }\n            }\n        }\n        return super.handleLeft(event);\n    }\n\n    /**\n     * The ARROW_RIGHT key controls both the movement around the file tree and also\n     * the movement through the change chunks within a file.\n     *\n     * If the selected tree node is a folder then the ARROW_RIGHT key behaves exactly\n     * as it does in explorer.  It expands the tree node if the folder is collapsed and\n     * it moves the selection to the first child node if the folder is expanded.\n     * This behavior is the default behavior implemented\n     * in the TreeWidget super class.\n     *\n     * If the selected tree node is a file then the ARROW_RIGHT key moves down through the\n     * change chunks within each file.  If the selected chunk is the last chunk in the file\n     * then the file selection is moved to the next file (no-op if no next file).\n     */\n    protected override async handleRight(event: KeyboardEvent): Promise<void> {\n        if (this.model.selectedNodes.length === 0) {\n            const firstNode = this.getFirstSelectableNode();\n            // Selects the first visible resource as none are selected.\n            if (!firstNode) {\n                return;\n            }\n            this.model.selectNode(firstNode);\n            return;\n        }\n        if (this.model.selectedNodes.length === 1) {\n            const selectedNode = this.model.selectedNodes[0];\n            if (ScmFileChangeNode.is(selectedNode)) {\n                const selectedResource = this.model.getResourceFromNode(selectedNode);\n                if (!selectedResource) {\n                    return super.handleRight(event);\n                }\n                const widget = await this.openResource(selectedResource);\n\n                if (widget) {\n                    const diffNavigator = this.diffNavigatorProvider(widget.editor);\n                    if (diffNavigator.hasNext()) {\n                        diffNavigator.next();\n                    } else {\n                        const nextNode = this.moveToNextFileNode();\n                        if (nextNode) {\n                            const nextResource = this.model.getResourceFromNode(nextNode);\n                            if (nextResource) {\n                                this.openResource(nextResource);\n                            }\n                        }\n                    }\n                }\n                return;\n            }\n        }\n        return super.handleRight(event);\n    }\n\n    protected override handleEnter(event: KeyboardEvent): void {\n        if (this.model.selectedNodes.length === 1) {\n            const selectedNode = this.model.selectedNodes[0];\n            if (ScmFileChangeNode.is(selectedNode)) {\n                const selectedResource = this.model.getResourceFromNode(selectedNode);\n                if (selectedResource) {\n                    this.openResource(selectedResource);\n                }\n                return;\n            }\n        }\n        super.handleEnter(event);\n    }\n\n    async goToPreviousChange(): Promise<void> {\n        if (this.model.selectedNodes.length === 1) {\n            const selectedNode = this.model.selectedNodes[0];\n            if (ScmFileChangeNode.is(selectedNode)) {\n                if (ScmFileChangeNode.is(selectedNode)) {\n                    const selectedResource = this.model.getResourceFromNode(selectedNode);\n                    if (!selectedResource) {\n                        return;\n                    }\n                    const widget = await this.openResource(selectedResource);\n\n                    if (widget) {\n                        const diffNavigator = this.diffNavigatorProvider(widget.editor);\n                        if (diffNavigator.hasPrevious()) {\n                            diffNavigator.previous();\n                        } else {\n                            const previousNode = this.moveToPreviousFileNode();\n                            if (previousNode) {\n                                const previousResource = this.model.getResourceFromNode(previousNode);\n                                if (previousResource) {\n                                    this.openResource(previousResource);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    async goToNextChange(): Promise<void> {\n        if (this.model.selectedNodes.length === 0) {\n            const firstNode = this.getFirstSelectableNode();\n            // Selects the first visible resource as none are selected.\n            if (!firstNode) {\n                return;\n            }\n            this.model.selectNode(firstNode);\n            return;\n        }\n        if (this.model.selectedNodes.length === 1) {\n            const selectedNode = this.model.selectedNodes[0];\n            if (ScmFileChangeNode.is(selectedNode)) {\n                const selectedResource = this.model.getResourceFromNode(selectedNode);\n                if (!selectedResource) {\n                    return;\n                }\n                const widget = await this.openResource(selectedResource);\n\n                if (widget) {\n                    const diffNavigator = this.diffNavigatorProvider(widget.editor);\n                    if (diffNavigator.hasNext()) {\n                        diffNavigator.next();\n                    } else {\n                        const nextNode = this.moveToNextFileNode();\n                        if (nextNode) {\n                            const nextResource = this.model.getResourceFromNode(nextNode);\n                            if (nextResource) {\n                                this.openResource(nextResource);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    selectNodeByUri(uri: URI): void {\n        for (const group of this.model.groups) {\n            const sourceUri = new URI(uri.path.toString());\n            const id = `${group.id}:${sourceUri.toString()}`;\n            const node = this.model.getNode(id);\n            if (SelectableTreeNode.is(node)) {\n                this.model.selectNode(node);\n                return;\n            }\n        }\n    }\n\n    protected getFirstSelectableNode(): SelectableTreeNode | undefined {\n        if (this.model.root) {\n            const root = this.model.root as ScmFileChangeRootNode;\n            const groupNode = root.children[0];\n            return groupNode.children[0];\n        }\n    }\n\n    protected moveToPreviousFileNode(): ScmFileChangeNode | undefined {\n        let previousNode = this.model.getPrevSelectableNode();\n        while (previousNode) {\n            if (ScmFileChangeNode.is(previousNode)) {\n                this.model.selectNode(previousNode);\n                return previousNode;\n            }\n            previousNode = this.model.getPrevSelectableNode(previousNode);\n        };\n    }\n\n    protected moveToNextFileNode(): ScmFileChangeNode | undefined {\n        let nextNode = this.model.getNextSelectableNode();\n        while (nextNode) {\n            if (ScmFileChangeNode.is(nextNode)) {\n                this.model.selectNode(nextNode);\n                return nextNode;\n            }\n            nextNode = this.model.getNextSelectableNode(nextNode);\n        };\n    }\n\n    protected async openResource(resource: ScmResource): Promise<EditorWidget | undefined> {\n        try {\n            await resource.open();\n        } catch (e) {\n            console.error('Failed to open a SCM resource', e);\n            return undefined;\n        }\n\n        let standaloneEditor: EditorWidget | undefined;\n        const resourcePath = resource.sourceUri.path.toString();\n\n        for (const widget of this.editorManager.all) {\n            const resourceUri = widget.editor.document.uri;\n            const editorResourcePath = new URI(resourceUri).path.toString();\n            if (resourcePath === editorResourcePath) {\n                if (widget.editor.uri.scheme === DiffUris.DIFF_SCHEME) {\n                    // prefer diff editor\n                    return widget;\n                } else {\n                    standaloneEditor = widget;\n                }\n            }\n            if (widget.editor.uri.scheme === DiffUris.DIFF_SCHEME\n                && resourceUri === resource.sourceUri.toString()) {\n                return widget;\n            }\n        }\n        // fallback to standalone editor\n        return standaloneEditor;\n    }\n\n    protected override getPaddingLeft(node: TreeNode, props: NodeProps): number {\n        if (this.viewMode === 'list') {\n            if (props.depth === 1) {\n                return this.props.expansionTogglePadding;\n            }\n        }\n        return super.getPaddingLeft(node, props);\n    }\n\n    protected override getDepthPadding(depth: number): number {\n        return super.getDepthPadding(depth) + 5;\n    }\n\n    protected isCurrentThemeLight(): boolean {\n        const type = this.themeService.getCurrentTheme().type;\n        return type.toLocaleLowerCase().includes('light');\n    }\n\n    protected override needsExpansionTogglePadding(node: TreeNode): boolean {\n        const theme = this.iconThemeService.getDefinition(this.iconThemeService.current);\n        if (theme && (theme.hidesExplorerArrows || (theme.hasFileIcons && !theme.hasFolderIcons))) {\n            return false;\n        }\n        return super.needsExpansionTogglePadding(node);\n    }\n\n}\n\nexport namespace ScmTreeWidget {\n    export namespace Styles {\n        export const NO_SELECT = 'no-select';\n    }\n    // This is an 'abstract' base interface for all the element component props.\n    export interface Props {\n        treeNode: TreeNode;\n        model: ScmTreeModel;\n        menus: MenuModelRegistry;\n        contextKeys: ScmContextKeyService;\n        labelProvider: LabelProvider;\n        contextMenuRenderer: ContextMenuRenderer;\n        corePreferences?: CorePreferences;\n        caption: React.ReactNode;\n    }\n}\n\nexport abstract class ScmElement<P extends ScmElement.Props = ScmElement.Props> extends React.Component<P, ScmElement.State> {\n\n    constructor(props: P) {\n        super(props);\n        this.state = {\n            hover: false\n        };\n\n        const setState = this.setState.bind(this);\n        this.setState = newState => {\n            if (!this.toDisposeOnUnmount.disposed) {\n                setState(newState);\n            }\n        };\n    }\n\n    protected readonly toDisposeOnUnmount = new DisposableCollection();\n    override componentDidMount(): void {\n        this.toDisposeOnUnmount.push(Disposable.create(() => { /* mark as mounted */ }));\n    }\n    override componentWillUnmount(): void {\n        this.toDisposeOnUnmount.dispose();\n    }\n\n    protected detectHover = (element: HTMLElement | null) => {\n        if (element) {\n            window.requestAnimationFrame(() => {\n                const hover = element.matches(':hover');\n                this.setState({ hover });\n            });\n        }\n    };\n    protected showHover = () => this.setState({ hover: true });\n    protected hideHover = () => this.setState({ hover: false });\n\n    protected renderContextMenu = (event: React.MouseEvent<HTMLElement>) => {\n        event.preventDefault();\n        const { treeNode: node, contextMenuRenderer } = this.props;\n        this.props.model.execInNodeContext(node, () => {\n            contextMenuRenderer.render({\n                menuPath: this.contextMenuPath,\n                anchor: event.nativeEvent,\n                args: this.contextMenuArgs\n            });\n        });\n    };\n\n    protected abstract get contextMenuPath(): MenuPath;\n    protected abstract get contextMenuArgs(): any[];\n\n}\nexport namespace ScmElement {\n    export interface Props extends ScmTreeWidget.Props {\n        renderExpansionToggle: () => React.ReactNode;\n        commandExecutor: MenuCommandExecutor;\n    }\n    export interface State {\n        hover: boolean\n    }\n}\n\nexport class ScmResourceComponent extends ScmElement<ScmResourceComponent.Props> {\n\n    override render(): JSX.Element | undefined {\n        const { hover } = this.state;\n        const { model, treeNode, colors, parentPath, sourceUri, decoration, labelProvider, commandExecutor, menus, contextKeys, caption, isLightTheme } = this.props;\n        const resourceUri = new URI(sourceUri);\n\n        const decorationIcon = treeNode.decorations;\n        const themedIcon = isLightTheme ? decorationIcon?.icon : decorationIcon?.iconDark;\n        const classNames: string[] = themedIcon ? ['decoration-icon', themedIcon] : ['decoration-icon', 'status'];\n\n        const icon = labelProvider.getIcon(resourceUri);\n        const color = decoration && decoration.colorId && !themedIcon ? `var(${colors.toCssVariableName(decoration.colorId)})` : '';\n        const letter = decoration && decoration.letter && !themedIcon ? decoration.letter : '';\n        const tooltip = decoration && decoration.tooltip || '';\n        const textDecoration = treeNode.decorations?.strikeThrough === true ? 'line-through' : 'normal';\n        const relativePath = parentPath.relative(resourceUri.parent);\n        const path = relativePath ? relativePath.fsPath() : labelProvider.getLongName(resourceUri.parent);\n        const title = tooltip.length !== 0\n            ? `${resourceUri.path.fsPath()} • ${tooltip}`\n            : resourceUri.path.fsPath();\n\n        return <div key={sourceUri}\n            className={`scmItem ${TREE_NODE_SEGMENT_CLASS} ${TREE_NODE_SEGMENT_GROW_CLASS}`}\n            onContextMenu={this.renderContextMenu}\n            onMouseEnter={this.showHover}\n            onMouseLeave={this.hideHover}\n            ref={this.detectHover}\n            title={title}\n            onClick={this.handleClick}\n            onDoubleClick={this.handleDoubleClick} >\n            <span className={icon + ' file-icon'} />\n            {this.props.renderExpansionToggle()}\n            <div className={`noWrapInfo ${TREE_NODE_SEGMENT_GROW_CLASS}`} >\n                <span className='name' style={{ textDecoration }}>{caption}</span>\n                <span className='path' style={{ textDecoration }}>{path}</span>\n            </div>\n            <ScmInlineActions {...{\n                hover,\n                menu: menus.getMenu(ScmTreeWidget.RESOURCE_INLINE_MENU),\n                menuPath: ScmTreeWidget.RESOURCE_INLINE_MENU,\n                commandExecutor,\n                args: this.contextMenuArgs,\n                contextKeys,\n                model,\n                treeNode\n            }}>\n                <div title={tooltip} className={classNames.join(' ')} style={{ color }}>\n                    {letter}\n                </div>\n            </ScmInlineActions>\n        </div >;\n    }\n\n    protected open = () => {\n        const resource = this.props.model.getResourceFromNode(this.props.treeNode);\n        if (resource) {\n            resource.open();\n        }\n    };\n\n    protected readonly contextMenuPath = ScmTreeWidget.RESOURCE_CONTEXT_MENU;\n    protected get contextMenuArgs(): any[] {\n        if (!this.props.model.selectedNodes.some(node => ScmFileChangeNode.is(node) && node.sourceUri === this.props.sourceUri)) {\n            // Clicked node is not in selection, so ignore selection and action on just clicked node\n            return this.singleNodeArgs;\n        } else {\n            return this.props.model.getSelectionArgs(this.props.model.selectedNodes);\n        }\n    }\n    protected get singleNodeArgs(): any[] {\n        const selectedResource = this.props.model.getResourceFromNode(this.props.treeNode);\n        if (selectedResource) {\n            return [selectedResource];\n        } else {\n            // Repository status not yet available. Empty args disables the action.\n            return [];\n        }\n    }\n\n    protected hasCtrlCmdOrShiftMask(event: TreeWidget.ModifierAwareEvent): boolean {\n        const { metaKey, ctrlKey, shiftKey } = event;\n        return (isOSX && metaKey) || ctrlKey || shiftKey;\n    }\n\n    /**\n     * Handle the single clicking of nodes present in the widget.\n     */\n    protected handleClick = (event: React.MouseEvent) => {\n        if (!this.hasCtrlCmdOrShiftMask(event)) {\n            // Determine the behavior based on the preference value.\n            const isSingle = this.props.corePreferences && this.props.corePreferences['workbench.list.openMode'] === 'singleClick';\n            if (isSingle) {\n                this.open();\n            }\n        }\n    };\n\n    /**\n     * Handle the double clicking of nodes present in the widget.\n     */\n    protected handleDoubleClick = () => {\n        // Determine the behavior based on the preference value.\n        const isDouble = this.props.corePreferences && this.props.corePreferences['workbench.list.openMode'] === 'doubleClick';\n        // Nodes should only be opened through double clicking if the correct preference is set.\n        if (isDouble) {\n            this.open();\n        }\n    };\n}\n\nexport namespace ScmResourceComponent {\n    export interface Props extends ScmElement.Props {\n        treeNode: ScmFileChangeNode;\n        parentPath: URI;\n        sourceUri: string;\n        decoration: Decoration | undefined;\n        colors: ColorRegistry;\n        isLightTheme: boolean\n    }\n}\n\nexport class ScmResourceGroupElement extends ScmElement<ScmResourceGroupComponent.Props> {\n\n    override render(): JSX.Element {\n        const { hover } = this.state;\n        const { model, treeNode, menus, commandExecutor, contextKeys, caption } = this.props;\n        return <div className={`theia-header scm-theia-header ${TREE_NODE_SEGMENT_GROW_CLASS}`}\n            onContextMenu={this.renderContextMenu}\n            onMouseEnter={this.showHover}\n            onMouseLeave={this.hideHover}\n            ref={this.detectHover}>\n            {this.props.renderExpansionToggle()}\n            <div className={`noWrapInfo ${TREE_NODE_SEGMENT_GROW_CLASS}`}>{caption}</div>\n            <ScmInlineActions {...{\n                hover,\n                args: this.contextMenuArgs,\n                menu: menus.getMenu(ScmTreeWidget.RESOURCE_GROUP_INLINE_MENU),\n                menuPath: ScmTreeWidget.RESOURCE_GROUP_INLINE_MENU,\n                commandExecutor,\n                contextKeys,\n                model,\n                treeNode\n            }}>\n                {this.renderChangeCount()}\n            </ScmInlineActions>\n        </div>;\n    }\n\n    protected renderChangeCount(): React.ReactNode {\n        const group = this.props.model.getResourceGroupFromNode(this.props.treeNode);\n        return <div className='notification-count-container scm-change-count'>\n            <span className='notification-count'>{group ? group.resources.length : 0}</span>\n        </div>;\n    }\n\n    protected readonly contextMenuPath = ScmTreeWidget.RESOURCE_GROUP_CONTEXT_MENU;\n    protected get contextMenuArgs(): any[] {\n        const group = this.props.model.getResourceGroupFromNode(this.props.treeNode);\n        if (group) {\n            return [group];\n        } else {\n            // Repository status not yet available. Empty args disables the action.\n            return [];\n        }\n    }\n}\nexport namespace ScmResourceGroupComponent {\n    export interface Props extends ScmElement.Props {\n        treeNode: ScmFileChangeGroupNode;\n    }\n}\n\nexport class ScmResourceFolderElement extends ScmElement<ScmResourceFolderElement.Props> {\n\n    override render(): JSX.Element {\n        const { hover } = this.state;\n        const { model, treeNode, sourceUri, labelProvider, commandExecutor, menus, contextKeys, caption } = this.props;\n        const sourceFileStat = FileStat.dir(sourceUri);\n        const icon = labelProvider.getIcon(sourceFileStat);\n        const title = new URI(sourceUri).path.fsPath();\n\n        return <div key={sourceUri}\n            className={`scmItem  ${TREE_NODE_SEGMENT_CLASS} ${TREE_NODE_SEGMENT_GROW_CLASS} ${ScmTreeWidget.Styles.NO_SELECT}`}\n            title={title}\n            onContextMenu={this.renderContextMenu}\n            onMouseEnter={this.showHover}\n            onMouseLeave={this.hideHover}\n            ref={this.detectHover}\n        >\n            {this.props.renderExpansionToggle()}\n            <span className={icon + ' file-icon'} />\n            <div className={`noWrapInfo ${TREE_NODE_SEGMENT_GROW_CLASS}`} >\n                <span className='name'>{caption}</span>\n            </div>\n            <ScmInlineActions {...{\n                hover,\n                menu: menus.getMenu(ScmTreeWidget.RESOURCE_FOLDER_INLINE_MENU),\n                menuPath: ScmTreeWidget.RESOURCE_FOLDER_INLINE_MENU,\n                commandExecutor,\n                args: this.contextMenuArgs,\n                contextKeys,\n                model,\n                treeNode\n            }}>\n            </ScmInlineActions>\n        </div >;\n\n    }\n\n    protected readonly contextMenuPath = ScmTreeWidget.RESOURCE_FOLDER_CONTEXT_MENU;\n    protected get contextMenuArgs(): any[] {\n        if (!this.props.model.selectedNodes.some(node => ScmFileChangeFolderNode.is(node) && node.sourceUri === this.props.sourceUri)) {\n            // Clicked node is not in selection, so ignore selection and action on just clicked node\n            return this.singleNodeArgs;\n        } else {\n            return this.props.model.getSelectionArgs(this.props.model.selectedNodes);\n        }\n    }\n    protected get singleNodeArgs(): any[] {\n        return this.props.model.getResourcesFromFolderNode(this.props.treeNode);\n    }\n\n}\n\nexport namespace ScmResourceFolderElement {\n    export interface Props extends ScmElement.Props {\n        treeNode: ScmFileChangeFolderNode;\n        sourceUri: string;\n    }\n}\n\nexport class ScmInlineActions extends React.Component<ScmInlineActions.Props> {\n    override render(): React.ReactNode {\n        const { hover, menu, menuPath, args, commandExecutor, model, treeNode, contextKeys, children } = this.props;\n        return <div className='theia-scm-inline-actions-container'>\n            <div className='theia-scm-inline-actions'>\n                {hover && menu.children\n                    .map((node, index) => node instanceof ActionMenuNode &&\n                        <ScmInlineAction key={index} {...{ node, menuPath, args, commandExecutor, model, treeNode, contextKeys }} />)}\n            </div>\n            {children}\n        </div>;\n    }\n}\nexport namespace ScmInlineActions {\n    export interface Props {\n        hover: boolean;\n        menu: CompoundMenuNode;\n        menuPath: MenuPath;\n        commandExecutor: MenuCommandExecutor;\n        model: ScmTreeModel;\n        treeNode: TreeNode;\n        contextKeys: ScmContextKeyService;\n        args: any[];\n        children?: React.ReactNode;\n    }\n}\n\nexport class ScmInlineAction extends React.Component<ScmInlineAction.Props> {\n    override render(): React.ReactNode {\n        const { node, model, treeNode, args, commandExecutor, menuPath, contextKeys } = this.props;\n\n        let isActive: boolean = false;\n        model.execInNodeContext(treeNode, () => {\n            isActive = contextKeys.match(node.when);\n        });\n\n        if (!commandExecutor.isVisible(menuPath, node.command, ...args) || !isActive) {\n            return false;\n        }\n        return <div className='theia-scm-inline-action'>\n            <a className={`${node.icon} ${ACTION_ITEM}`} title={node.label} onClick={this.execute} />\n        </div>;\n    }\n\n    protected execute = (event: React.MouseEvent) => {\n        event.stopPropagation();\n\n        const { commandExecutor, menuPath, node, args } = this.props;\n        commandExecutor.executeCommand([menuPath[0]], node.command, ...args);\n    };\n}\nexport namespace ScmInlineAction {\n    export interface Props {\n        node: ActionMenuNode;\n        commandExecutor: MenuCommandExecutor;\n        menuPath: MenuPath;\n        model: ScmTreeModel;\n        treeNode: TreeNode;\n        contextKeys: ScmContextKeyService;\n        args: any[];\n    }\n}\n"],"names":[],"sourceRoot":""}