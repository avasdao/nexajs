{"version":3,"file":"vendors-node_modules_theia_core_shared_markdown-it_js-node_modules_theia_preferences_lib_brow-863ddc.js","mappings":";;;;;;;;AAAA,8FAAuC;;;;;;;;;;;;;ACAvC,gFAAgF;AAChF,0CAA0C;AAC1C,EAAE;AACF,2EAA2E;AAC3E,mEAAmE;AACnE,wCAAwC;AACxC,EAAE;AACF,4EAA4E;AAC5E,8EAA8E;AAC9E,6EAA6E;AAC7E,yDAAyD;AACzD,uDAAuD;AACvD,EAAE;AACF,gFAAgF;AAChF,gFAAgF;;;;;;;;;;;;AAEhF,uDAAuD;AACvD,oCAAoC;AAEpC,2GAA4C;AAC5C,oIAAiF;AACjF,yIAA+D;AAC/D,wHAAsI;AACtI,oHAA6C;AAC7C,gNAAyG;AACzG,+IAA+D;AAC/D,6JAAyE;AACzE,wLAA0H;AAC1H,wGAA6C;AAG7C,IAAsB,kCAAkC,GAAxD,MAAsB,kCAAmC,SAAQ,4BAAkB;IAAnF;;QAEc,gBAAW,GAAwB,EAAE,CAAC;QACtC,gBAAW,GAAG,KAAK,CAAC;QACX,YAAO,GAAG,IAAI,uBAAQ,EAAE,CAAC;QAEzB,+BAA0B,GAAG,IAAI,cAAO,EAAW,CAAC;IAkM3E,CAAC;IAhMG,IAAI,UAAU,CAAC,MAAe;QAC1B,IAAI,MAAM,KAAK,IAAI,CAAC,WAAW,EAAE;YAC7B,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;YAC1B,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAChD;IACL,CAAC;IAED,IAAI,mBAAmB;QACnB,OAAO,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC;IACjD,CAAC;IAQS,IAAI;QACV,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAES,KAAK,CAAC,MAAM;QAClB,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC1B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,uBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,4BAA4B,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/H,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACrC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACtB,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACvB,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC,YAAY,EAAE,CAAC;QACvD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;YACnB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC;YAClC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;gBAClC,IAAI,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;oBACxB,IAAI,CAAC,uBAAuB,EAAE,CAAC;iBAClC;YACL,CAAC,CAAC;YACF,uBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;SACxC,CAAC,CAAC;IACP,CAAC;IAKD,IAAI,KAAK;QACL,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAIQ,YAAY,CAAC,WAAoB;QACtC,IAAI,CAAC,WAAW,EAAE;YACd,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;SACxB;QACD,OAAO,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;IAChF,CAAC;IAED,QAAQ,CAAC,WAA+B;QACpC,IAAI,CAAC,WAAW,EAAE;YACd,OAAO,IAAI,CAAC;SACf;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAChC,IAAI,CAAC,MAAM,EAAE;YACT,OAAO,IAAI,CAAC;SACf;QACD,MAAM,YAAY,GAAG,IAAI,aAAG,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;QAC/C,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,aAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/E,CAAC;IAED,cAAc,CAAC,WAAoB;QAC/B,OAAO,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;IAC5E,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,GAAW,EAAE,KAAU,EAAE,WAAoB;QAC7D,IAAI,IAA0B,CAAC;QAC/B,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,IAAI,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;YACvF,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC;IAES,KAAK,CAAC,eAAe,CAAC,GAAW,EAAE,IAAc,EAAE,KAAc;;QACvE,IAAI,CAAC,WAAI,CAAC,WAAW,0CAAE,IAAI,GAAE;YACzB,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;YACjC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,CAAC,CAAC;YAClF,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,EAAE;gBACtD,IAAI,MAAM,EAAE;oBACR,SAAS,CAAC,CAAC,KAAK,IAAI,EAAE;wBAClB,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;wBACrC,MAAM,IAAI,CAAC,yBAAyB,EAAE,CAAC,CAAC,sDAAsD;oBAClG,CAAC,CAAC,EAAE,CAAC,CAAC;iBACT;YACL,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACzC;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAC5D,CAAC;IAED;;;;OAIG;IACO,aAAa;QACnB,OAAO,IAAI,CAAC;IAChB,CAAC;IAES,OAAO,CAAC,cAAsB;QACpC,MAAM,UAAU,GAAG,IAAI,CAAC,yBAAyB,CAAC,wBAAwB,CAAC,cAAc,CAAC,CAAC;QAC3F,IAAI,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,kBAAkB,EAAE;YAChC,OAAO,CAAC,IAAI,CAAC,yBAAyB,CAAC,oBAAoB,CAAC,UAAU,CAAC,kBAAkB,CAAC,EAAE,UAAU,CAAC,cAAc,CAAC,CAAC;SAC1H;QACD,OAAO,CAAC,cAAc,CAAC,CAAC;IAC5B,CAAC;IAES,KAAK,CAAC,uBAAuB;QACnC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,YAAY,EAAE,CAAC;aAC3E,IAAI,CAAC,KAAK,CAAC,EAAE;YACV,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,OAAO,KAAK,CAAC;QACjB,CAAC,CAAC;aACD,KAAK,CAAC,GAAG,EAAE;YACR,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QACP,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC;IAES,0BAA0B,CAAC,OAAe;QAChD,IAAI,iBAAiB,CAAC;QACtB,IAAI;YACA,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC3C;QAAC,MAAM;YACJ,iBAAiB,GAAG,EAAE,CAAC;SAC1B;QACD,MAAM,iBAAiB,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;QACnE,IAAI,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,CAAC;IACpD,CAAC;IAES,KAAK,CAAC,OAAe;QAC3B,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;QACzB,IAAI,CAAC,OAAO,EAAE;YACV,OAAO,SAAS,CAAC;SACpB;QACD,MAAM,eAAe,GAAG,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC3D,OAAO,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;IAC9C,CAAC;IAES,uBAAuB,CAAC,QAAgC;QAC9D,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACrD,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;QAC5B,MAAM,SAAS,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAChF,MAAM,WAAW,GAAmC,EAAE,CAAC;QACvD,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC1B,KAAK,MAAM,QAAQ,IAAI,SAAS,CAAC,MAAM,EAAE,EAAE;YACvC,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACpC,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACpC,MAAM,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YACtF,IAAI,gBAAgB,EAAE;gBAClB,MAAM,KAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC;gBACrC,yFAAyF;gBACzF,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE;oBAChE,OAAO,CAAC,IAAI,CAAC,cAAc,QAAQ,OAAO,GAAG,mCAAmC,yBAAe,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACpI,SAAS;iBACZ;aACJ;YACD,IAAI,CAAC,4BAAkB,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE;gBACnD,WAAW,CAAC,IAAI,CAAC;oBACb,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE;iBACjG,CAAC,CAAC;aACN;SACJ;QAED,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,IAAI,CAAC,2BAA2B,CAAC,WAAW,CAAC,CAAC;SACjD;IACL,CAAC;IAES,KAAK;QACX,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACrC,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,MAAM,OAAO,GAAmC,EAAE,CAAC;QACnD,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YAC7C,MAAM,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;YACpC,IAAI,KAAK,KAAK,SAAS,EAAE;gBACrB,OAAO,CAAC,IAAI,CAAC;oBACT,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE;iBACnH,CAAC,CAAC;aACN;SACJ;QACD,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACpB,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC;SAC7C;IACL,CAAC;CACJ;AArLyC;IAArC,sBAAM,EAAC,6DAA4B,CAAC;;8EAAqE;AACxE;IAAjC,sBAAM,EAAC,kCAAwB,CAAC;8BAAoC,kCAAwB;0EAAC;AACzE;IAApB,sBAAM,EAAC,0BAAW,CAAC;8BAAiC,0BAAW;uEAAC;AAC/B;IAAjC,sBAAM,EAAC,oDAAwB,CAAC;8BAAoC,oDAAwB;0EAAC;AAG9F;IADC,6BAAa,GAAE;;;;8DAGf;AA3BiB,kCAAkC;IADvD,0BAAU,GAAE;GACS,kCAAkC,CAwMvD;AAxMqB,gFAAkC;;;;;;;;;;;;;AC/BxD,gFAAgF;AAChF,0CAA0C;AAC1C,EAAE;AACF,2EAA2E;AAC3E,mEAAmE;AACnE,wCAAwC;AACxC,EAAE;AACF,4EAA4E;AAC5E,8EAA8E;AAC9E,6EAA6E;AAC7E,yDAAyD;AACzD,uDAAuD;AACvD,EAAE;AACF,gFAAgF;AAChF,gFAAgF;;;;;;;;;;;;AAEhF,oIAAkE;AAElE,wHAA0D;AAC1D,sIAA8D;AAC9D,+KAA0E;AAE7D,uCAA+B,GAAG,MAAM,CAAC,iCAAiC,CAAC,CAAC;AAK5E,sCAA8B,GAAG,MAAM,CAAC,gCAAgC,CAAC,CAAC;AAOvF,IAAa,wBAAwB,GAArC,MAAa,wBAAyB,SAAQ,uDAAyB;IAMnE,IAAI,SAAS;QACT,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAClB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;SAC1C;QACD,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IACD,QAAQ;QACJ,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,EAAE;YACnD,+GAA+G;YAC/G,OAAO,yBAAe,CAAC,SAAS,CAAC;SACpC;QACD,OAAO,yBAAe,CAAC,MAAM,CAAC;IAClC,CAAC;IAEQ,SAAS;QACd,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;IACvC,CAAC;CACJ;AArB2C;IAAvC,sBAAM,EAAC,sCAA8B,CAAC;;wDAAqC;AAFnE,wBAAwB;IADpC,0BAAU,GAAE;GACA,wBAAwB,CAuBpC;AAvBY,4DAAwB;;;;;;;;;;;;;AClCrC,gFAAgF;AAChF,0CAA0C;AAC1C,EAAE;AACF,2EAA2E;AAC3E,mEAAmE;AACnE,wCAAwC;AACxC,EAAE;AACF,4EAA4E;AAC5E,8EAA8E;AAC9E,6EAA6E;AAC7E,yDAAyD;AACzD,uDAAuD;AACvD,EAAE;AACF,gFAAgF;AAChF,gFAAgF;;;;;;;;;;;;AAEhF,uDAAuD;AAEvD,oIAAiF;AACjF,oHAA6C;AAC7C,oJAAmH;AACnH,0KAAkF;AAClF,gNAAyG;AACzG,4KAAyG;AAIzG,IAAa,0BAA0B,GAAvC,MAAa,0BAA2B,SAAQ,gCAAkB;IAAlE;;QAWuB,cAAS,GAAG,IAAI,GAAG,EAAoC,CAAC;IA6M/E,CAAC;IA1Ma,IAAI;QACV,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAES,KAAK,CAAC,MAAM;QAClB,MAAM,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;QAElC,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;QAEvE,MAAM,aAAa,GAAoB,EAAE,CAAC;QAC1C,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE;YAC5C,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACnE;QACD,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;IACjE,CAAC;IAES,eAAe;QACrB,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;QAClD,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;QAChD,KAAK,MAAM,MAAM,IAAI,KAAK,EAAE;YACxB,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,EAAE;gBACrD,KAAK,MAAM,UAAU,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE,EAAE,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC,EAAE;oBACtG,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;oBAC1F,MAAM,UAAU,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;oBACzC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;oBAC5B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;wBACjC,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;wBACrE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;qBAC5C;iBACJ;aACJ;SACJ;QACD,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE;YACxB,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACzC,IAAI,QAAQ,EAAE;gBACV,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAC3B,QAAQ,CAAC,OAAO,EAAE,CAAC;aACtB;SACJ;IACL,CAAC;IAEQ,YAAY,CAAC,WAAoB,EAAE,cAAsB,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE;QACjG,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAE;YACzD,MAAM,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;YACrD,IAAI,SAAS,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,WAAW,EAAE;gBACrE,OAAO,SAAS,CAAC;aACpB;SACJ;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IAEQ,sBAAsB,CAAC,WAAoB,EAAE,cAAsB,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE;QAC3G,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAE;YACzD,MAAM,SAAS,GAAG,QAAQ,CAAC,YAAY,EAAE,CAAC;YAC1C,IAAI,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,WAAW,EAAE;gBAC1F,OAAO,SAAS,CAAC;aACpB;SACJ;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IAEQ,SAAS;QACd,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;IACrF,CAAC;IAEQ,OAAO,CAAI,cAAsB,EAAE,WAAoB;QAC5D,MAAM,MAAM,GAA+B,EAAE,CAAC;QAC9C,MAAM,MAAM,GAAG,IAAI,CAAC,0BAA0B,CAAC,WAAW,CAAC,CAAC;QAC5D,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,MAAM,EAAE,EAAE;YACjC,KAAK,MAAM,QAAQ,IAAI,KAAK,EAAE;gBAC1B,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,QAAQ,CAAC,OAAO,CAAI,cAAc,EAAE,WAAW,CAAC,CAAC;gBAC9E,IAAI,SAAS,IAAI,KAAK,KAAK,SAAS,EAAE;oBAClC,MAAM,CAAC,SAAS,GAAG,SAAS,CAAC;oBAC7B,MAAM,CAAC,KAAK,GAAG,gCAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,KAAY,EAAE,KAAY,CAAQ,CAAC;oBAClF,MAAM;iBACT;aACJ;SACJ;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,cAAc,CAAC,WAAoB;QAC/B,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,MAAM,MAAM,GAAG,IAAI,CAAC,0BAA0B,CAAC,WAAW,CAAC,CAAC;QAC5D,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,MAAM,EAAE,EAAE;YACjC,KAAK,MAAM,QAAQ,IAAI,KAAK,EAAE;gBAC1B,IAAI,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE;oBACpC,MAAM,WAAW,GAAG,QAAQ,CAAC,cAAc,EAAE,CAAC;oBAC9C,MAAM,GAAG,gCAAkB,CAAC,KAAK,CAAC,MAAM,EAAE,WAAW,CAAQ,CAAC;oBAC9D,MAAM;iBACT;aACJ;SACJ;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,cAAsB,EAAE,KAAU,EAAE,WAAoB;QACxE,MAAM,iBAAiB,GAAG,cAAc,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1D,MAAM,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;QAC9D,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC;QAEhH,MAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;QACvD,IAAI,UAA8B,CAAC;QACnC,MAAM,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;YAC3C,qFAAqF;YACrF,MAAM,mBAAmB,GAAG,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;YAC/D,IAAI,UAAU,KAAK,SAAS,IAAI,mBAAmB,EAAE;gBACjD,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;aACjE;YACD,MAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,mBAAmB,aAAnB,mBAAmB,cAAnB,mBAAmB,GAAI,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC;YACjG,OAAO,YAAY,KAAK,UAAU,IAAI,YAAY,KAAK,iBAAiB,CAAC;QAC7E,CAAC,CAAC,CAAC;QAEH,MAAM,wBAAwB,GAAG,EAAE,CAAC;QACpC,MAAM,qBAAqB,GAAG,EAAE,CAAC;QACjC,MAAM,gBAAgB,GAAG,EAAE,CAAC;QAC5B,MAAM,YAAY,GAAG,EAAE,CAAC;QAExB,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;YAChC,MAAM,aAAa,GAAG,SAAS,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;YAC1D,MAAM,SAAS,GAAG,aAAa,aAAb,aAAa,cAAb,aAAa,GAAI,SAAS,CAAC,YAAY,EAAE,CAAC;YAC5D,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,UAAU,CAAC;YAC1E,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,UAAU,CAAC;YAE1E,gEAAgE;YAChE,IAAI,WAAW,IAAI,aAAa,EAAE;gBAC9B,IAAI,MAAM,SAAS,CAAC,aAAa,CAAC,cAAc,EAAE,KAAK,EAAE,WAAW,CAAC,EAAE;oBACnE,OAAO,IAAI,CAAC;iBACf;aACJ;iBAAM,IAAI,WAAW,IAAI,WAAW,EAAE,EAAE,kCAAkC;gBACvE,wBAAwB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC5C;iBAAM,IAAI,WAAW,EAAE,EAAE,cAAc;gBACpC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACzC;iBAAM,IAAI,aAAa,EAAE,EAAE,yCAAyC;gBACjE,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACpC;iBAAM;gBACH,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAChC;SACJ;QAED,MAAM,aAAa,GAAG,CAAC,wBAAwB,EAAE,qBAAqB,EAAE,gBAAgB,EAAE,YAAY,CAAC,CAAC;QAExG,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;YACtC,KAAK,MAAM,SAAS,IAAI,YAAY,EAAE;gBAClC,IAAI,MAAM,SAAS,CAAC,aAAa,CAAC,cAAc,EAAE,KAAK,EAAE,WAAW,CAAC,EAAE;oBACnE,OAAO,IAAI,CAAC;iBACf;aACJ;SACJ;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAEQ,cAAc,CAAC,KAAsB;QAC1C,OAAO,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,IAAI,KAAK,KAAK,6BAAe,CAAC,MAAM,IAAI,KAAK,KAAK,6BAAe,CAAC,SAAS,CAAC;IACvI,CAAC;IAES,0BAA0B,CAAC,WAAoB;QACrD,MAAM,MAAM,GAAG,IAAI,GAAG,EAAsC,CAAC;QAC7D,MAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;QACvD,KAAK,MAAM,UAAU,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC,EAAE;YACtG,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;gBAC9B,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,KAAK,UAAU,EAAE;oBACrE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBACxB;aACJ;YACD,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SACjC;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAES,kBAAkB,CAAC,WAAoB;QAC7C,IAAI,CAAC,WAAW,EAAE;YACd,OAAO,EAAE,CAAC;SACb;QACD,MAAM,YAAY,GAAG,IAAI,aAAG,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;QAC/C,IAAI,MAAM,GAAmD,EAAE,UAAU,EAAE,MAAM,CAAC,gBAAgB,EAAE,CAAC;QACrG,MAAM,SAAS,GAAG,IAAI,GAAG,EAAsC,CAAC;QAChE,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE;YAC5C,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;YAC1C,MAAM,eAAe,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;YACnD,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC/B,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;YAEpC,mGAAmG;YACnG,MAAM,UAAU,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YACpE,IAAI,UAAU,IAAI,CAAC,IAAI,MAAM,CAAC,UAAU,GAAG,UAAU,EAAE;gBACnD,MAAM,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;aAChC;SACJ;QACD,OAAO,MAAM,CAAC,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IACzD,CAAC;IAES,cAAc,CAAC,GAAQ,EAAE,OAAe,EAAE,MAAgB;QAChE,MAAM,QAAQ,GAAG,IAAI,CAAC,+BAA+B,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QAC5E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAClH,OAAO,QAAQ,CAAC;IACpB,CAAC;CAEJ;AArNG;IADC,sBAAM,EAAC,oCAAgB,CAAC;8BACY,oCAAgB;oEAAC;AAGtD;IADC,sBAAM,EAAC,4DAA+B,CAAC;;mFAC4C;AAGpF;IADC,sBAAM,EAAC,oDAAwB,CAAC;8BACE,oDAAwB;kEAAC;AAK5D;IADC,6BAAa,GAAE;;;;sDAGf;AAhBQ,0BAA0B;IADtC,0BAAU,GAAE;GACA,0BAA0B,CAwNtC;AAxNY,gEAA0B;;;;;;;;;;;;;AC3BvC,gFAAgF;AAChF,0CAA0C;AAC1C,EAAE;AACF,2EAA2E;AAC3E,mEAAmE;AACnE,wCAAwC;AACxC,EAAE;AACF,4EAA4E;AAC5E,8EAA8E;AAC9E,6EAA6E;AAC7E,yDAAyD;AACzD,uDAAuD;AACvD,EAAE;AACF,gFAAgF;AAChF,gFAAgF;;;;;;;;;;;;AAEhF,2GAA4C;AAE5C,iKAA6E;AAC7E,oIAAkE;AAClE,6IAAoD;AAGpD,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;IAG1B,KAAK,CAAC,QAAQ,CAAC,KAAwB,EAAE,IAA0B,EAAE,KAAc,EAAE,UAAU,GAAG,IAAI;QAClG,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QACzD,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAClB,MAAM,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;SACtE;IACL,CAAC;IAED,iBAAiB,CAAC,KAAwB,EAAE,IAA0B,EAAE,KAAc;QAClF,MAAM,SAAS,GAAG,KAAK,CAAC,eAAe,CAAC;QACxC,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,CAAC;QACvC,yDAAyD;QACzD,IAAI,CAAC,OAAO,IAAI,KAAK,KAAK,SAAS,EAAE;YACjC,OAAO,EAAE,CAAC;SACb;QACD,8BAA8B;QAC9B,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,KAAK,KAAK,SAAS,EAAE;YACrC,OAAO,CAAC;oBACJ,KAAK,EAAE,SAAS,CAAC,iBAAiB,EAAE;oBACpC,IAAI,EAAE,IAAI;oBACV,gBAAgB,EAAE,KAAK;iBAC1B,CAAC,CAAC;SACN;QACD,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,SAAS,CAAC,UAAU,EAAE,CAAC;QACrE,MAAM,YAAY,GAAG;YACjB,iBAAiB,EAAE;gBACf,YAAY;gBACZ,OAAO;gBACP,GAAG,EAAE,UAAU,KAAK,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM;aACxE;SACJ,CAAC;QACF,OAAO,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACrE,MAAM,KAAK,GAAG,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACnD,MAAM,GAAG,GAAG,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/D,OAAO;gBACH,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,GAAG,CAAC;gBAC7C,IAAI,EAAE,IAAI,CAAC,OAAO,IAAI,IAAI;gBAC1B,gBAAgB,EAAE,KAAK;aAC1B,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AA1C4B;IAAxB,sBAAM,EAAC,kCAAe,CAAC;8BAA+B,kCAAe;oDAAC;AAD9D,iBAAiB;IAD7B,0BAAU,GAAE;GACA,iBAAiB,CA2C7B;AA3CY,8CAAiB;;;;;;;;;;;;;ACvB9B,gFAAgF;AAChF,0CAA0C;AAC1C,EAAE;AACF,2EAA2E;AAC3E,mEAAmE;AACnE,wCAAwC;AACxC,EAAE;AACF,4EAA4E;AAC5E,8EAA8E;AAC9E,6EAA6E;AAC7E,yDAAyD;AACzD,uDAAuD;AACvD,EAAE;AACF,gFAAgF;AAChF,gFAAgF;;;AAEhF,oIAAqE;AACrE,oJAA0F;AAC1F,sKAAmG;AACnG,qLAA8E;AAC9E,oMAAuK;AACvK,kLAA4E;AAC5E,4KAAyI;AACzI,8LAAmF;AACnF,+KAA+G;AAE/G,SAAgB,mCAAmC,CAAC,IAAqB;IACrE,IAAI,CAAC,2EAAsC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,OAA+C,EAAE,EAAE;QAC9G,MAAM,KAAK,GAAG,IAAI,qBAAS,CAAC,EAAE,YAAY,EAAE,WAAW,EAAE,CAAC,CAAC;QAC3D,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC;QAC7B,KAAK,CAAC,IAAI,CAAC,oEAA+B,CAAC,CAAC,MAAM,EAAE,CAAC;QACrD,KAAK,CAAC,IAAI,CAAC,2EAAsC,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC5E,OAAO,KAAK,CAAC,GAAG,CAAC,oEAA+B,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;AACP,CAAC;AARD,kFAQC;AAED,SAAgB,WAAW,CAAO,IAAqB,EACnD,SAA0C,EAC1C,WAAkC;AAClC,8DAA8D;AAC9D,GAAG,iBAAsD;IACzD,IAAI,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;IAC5B,8DAA8D;IAC9D,CAAC,GAAG,IAAW,EAAE,EAAE;QACf,MAAM,KAAK,GAAG,IAAI,qBAAS,CAAC,EAAE,YAAY,EAAE,WAAW,EAAE,CAAC,CAAC;QAC3D,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC;QAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/C,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SAC7D;QACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;QACxC,OAAO,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAClC,CAAC,CACJ,CAAC;AACN,CAAC;AAjBD,kCAiBC;AAED,SAAgB,uBAAuB,CAAC,IAAqB,EAAE,MAAyB;IACpF,MAAM,CAAC,gCAAkB,CAAC,CAAC;IAE3B,IAAI,CAAC,gCAAkB,CAAC,CAAC,EAAE,CAAC,gEAA6B,CAAC,CAAC,gBAAgB,EAAE,CAAC,eAAe,CAAC,6BAAe,CAAC,IAAI,CAAC,CAAC;IACpH,IAAI,CAAC,gCAAkB,CAAC,CAAC,EAAE,CAAC,2DAA2B,CAAC,CAAC,gBAAgB,EAAE,CAAC,eAAe,CAAC,6BAAe,CAAC,SAAS,CAAC,CAAC;IACvH,IAAI,CAAC,gCAAkB,CAAC,CAAC,EAAE,CAAC,yDAA0B,CAAC,CAAC,gBAAgB,EAAE,CAAC,eAAe,CAAC,6BAAe,CAAC,MAAM,CAAC,CAAC;IACnH,mCAAmC,CAAC,IAAI,CAAC,CAAC;IAC1C,WAAW,CAAC,IAAI,EAAE,wDAA6B,EAAE,iDAAsB,EAAE,0DAA4B,EAAE,8DAAgC,CAAC,CAAC;IACzI,WAAW,CAAC,IAAI,EAAE,4DAA+B,EAAE,qDAAwB,EAAE,0DAA4B,EAAE,8DAAgC,EAAE,2DAA8B,CAAC,CAAC;AACjL,CAAC;AATD,0DASC;;;;;;;;;;;;;AChED,gFAAgF;AAChF,0CAA0C;AAC1C,EAAE;AACF,2EAA2E;AAC3E,mEAAmE;AACnE,wCAAwC;AACxC,EAAE;AACF,4EAA4E;AAC5E,8EAA8E;AAC9E,6EAA6E;AAC7E,yDAAyD;AACzD,uDAAuD;AACvD,EAAE;AACF,gFAAgF;AAChF,gFAAgF;;;;;;;;;;;;AAEhF,wGAAmH;AACnH,+IAA+D;AAC/D,oIAA6F;AAC7F,mLAAsF;AACtF,oHAA6C;AAE7C,wGAAoD;AACpD,4LAA6F;AAC7F,uJAA0D;AAC1D,2JAAyE;AAWzE,IAAsB,WAAW;AAHjC;;GAEG;AACH,MAAsB,WAAW;IAAjC;QACc,UAAK,GAAG,IAAI,CAAC;QAQb,YAAO,GAAG,IAAI,uBAAQ,EAAkB,CAAC;QAOnD;;WAEG;QACgB,UAAK,GAAG,IAAI,mBAAK,CAAC,IAAI,wBAAiB,EAAE,CAAC,CAAC;QAC3C,0BAAqB,GAAG,IAAI,cAAO,EAA+B,CAAC;QAS5E,WAAM,GAAG,IAAI,uBAAQ,EAAU,CAAC;QAC1C;;;WAGG;QACO,UAAK,GAAG,KAAK,CAAC;IAyG5B,CAAC;IAzIG;;;OAGG;IACH,IAAI,IAAI;QACJ,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;IAChC,CAAC;IAMD;;;OAGG;IACH,IAAI,cAAc;QACd,OAAO,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;IAC5C,CAAC;IAUS,IAAI;QACV,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAES,KAAK,CAAC,MAAM;QAClB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;QAC3C,IAAI;YACA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;YAClC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SAC/B;QAAC,MAAM;YACJ,IAAI,CAAC,OAAO,EAAE,CAAC;SAClB;gBAAS;YACN,OAAO,EAAE,CAAC;SACb;IACL,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,KAAwB,EAAE,iBAA2B;QAC/D,IAAI;YACA,MAAM,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;SAC9C;QAAC,MAAM;YACJ,IAAI,iBAAiB,EAAE;gBACnB,IAAI,CAAC,OAAO,EAAE,CAAC;aAClB;SACJ;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa,CAAC,GAAG,IAAe;QAClC,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,IAAI,OAA4C,CAAC;YACjD,IAAI;gBACA,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;gBACrC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;oBACb,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;oBAClB,IAAI,CAAC,eAAe,EAAE,CAAC;iBAC1B;gBACD,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;aAC5B;YAAC,OAAO,CAAC,EAAE;gBACR,IAAI,CAAC,YAAY,wBAAiB,EAAE;oBAChC,MAAM,CAAC,CAAC;iBACX;gBACD,OAAO,KAAK,CAAC;aAChB;oBAAS;gBACN,OAAO,aAAP,OAAO,uBAAP,OAAO,EAAI,CAAC;aACf;SACJ;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;SACvD;IACL,CAAC;IAES,eAAe;QACrB,wGAAwG;QACxG,sGAAsG;QACtG,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE;gBACxB,IAAI,CAAC,OAAO,EAAE,CAAC;aAClB;iBAAM;gBACH,IAAI,CAAC,eAAe,EAAE,CAAC;aAC1B;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAES,KAAK,CAAC,QAAQ;QACpB,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,IAAI;gBACA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACnB,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;gBACpB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACrC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,KAAK,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;gBAC1H,MAAM,qBAAc,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;gBAClE,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,CAAC;gBACrC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;aAChC;YAAC,MAAM;gBACJ,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aAC/B;SACJ;IACL,CAAC;IAED,OAAO;QACH,IAAI,CAAC,QAAQ,EAAE,CAAC;IACpB,CAAC;CAoBJ;AAtGG;IADC,6BAAa,GAAE;;;;uCAGf;AAvCiB,WAAW;IAJhC,0BAAU,GAAE;IACb;;OAEG;GACmB,WAAW,CA2IhC;AA3IqB,kCAAW;AAiJpB,yBAAiB,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;AAChD,4CAAoC,GAAG,MAAM,CAAC,sCAAsC,CAAC,CAAC;AAInG,IAAa,qBAAqB,GAAlC,MAAa,qBAAsB,SAAQ,WAAiD;IASrE,KAAK,CAAC,MAAM;;QAC3B,IAAI,CAAC,OAAO,CAAC,UAAI,CAAC,OAAO,+CAAZ,IAAI,CAAY,CAAC,CAAC;QAC/B,MAAM,KAAK,CAAC,MAAM,EAAE,CAAC;IACzB,CAAC;IAES,KAAK,CAAC,KAAK;QACjB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAG,CAAC,CAAC;QACjG,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC9B;aAAM;YACH,SAAS,CAAC,OAAO,EAAE,CAAC;YACpB,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE;YACxB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACtD,IAAI,CAAC,cAAc,EAAE;gBACjB,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,OAAO,KAAK,CAAC;aAChB;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACO,KAAK,CAAC,iBAAiB;;QAC7B,MAAM,YAAY,GAAG,UAAG,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;QAC7D,MAAM,IAAI,GAAG,UAAG,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;QAChD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,KAAK;QACvC,qDAAqD;QACrD,UAAG,CAAC,iBAAiB,CAAC,qIAAqI,EACvJ,UAAG,CAAC,iBAAiB,CAAC,kCAAe,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,iBAAiB,EAAE,CAAC,CACtF,EACD,YAAY,EAAE,IAAI,CAAC,CAAC;QAExB,IAAI,UAAI,CAAC,SAAS,0CAAE,MAAM,EAAE;YACxB,IAAI,GAAG,KAAK,IAAI,EAAE;gBACd,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,aAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;aAC/D;iBAAM,IAAI,GAAG,KAAK,YAAY,EAAE;gBAC7B,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;gBACnC,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAES,KAAK,CAAC,GAAG,CAAC,GAAW,EAAE,IAAc,EAAE,KAAc;;QAC3D,MAAM,KAAK,GAAG,UAAI,CAAC,SAAS,0CAAE,MAAM,CAAC;QACrC,IAAI;YACA,IAAI,KAAK,EAAE;gBACP,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;gBACpD,OAAO,IAAI,CAAC,MAAM,CAAC;aACtB;YACD,OAAO,KAAK,CAAC;SAChB;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,OAAO,GAAG,kCAAkC,GAAG,SAAS,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC;YAC9F,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,OAAO,mCAAmC,CAAC,CAAC;YACzE,OAAO,CAAC,KAAK,CAAC,GAAG,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;YAC/B,OAAO,KAAK,CAAC;SAChB;IACL,CAAC;IAES,KAAK,CAAC,QAAQ;;QACpB,IAAI;YACA,MAAM,KAAK,GAAG,UAAI,CAAC,SAAS,0CAAE,MAAM,CAAC;YACrC,IAAI,KAAK,EAAE;gBACP,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,KAAK,UAAU,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;oBAC/D,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;oBACnB,OAAO,IAAI,CAAC;iBACf;aACJ;YACD,OAAO,KAAK,CAAC;SAChB;gBAAS;YACN,UAAI,CAAC,SAAS,0CAAE,OAAO,EAAE,CAAC;YAC1B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC9B;IACL,CAAC;CACJ;AArF8B;IAA1B,sBAAM,EAAC,yBAAiB,CAAC;;sDAA+C;AAC3B;IAA7C,sBAAM,EAAC,4CAAoC,CAAC;;sDAAmE;AAChF;IAA/B,sBAAM,EAAC,kDAAsB,CAAC;8BAAsC,kDAAsB;+DAAC;AACjE;IAA1B,sBAAM,EAAC,uCAAiB,CAAC;8BAAiC,uCAAiB;0DAAC;AACrD;IAAvB,sBAAM,EAAC,qBAAc,CAAC;8BAAoC,qBAAc;6DAAC;AACnD;IAAtB,sBAAM,EAAC,8BAAa,CAAC;8BAAmC,8BAAa;4DAAC;AAP9D,qBAAqB;IADjC,0BAAU,GAAE;GACA,qBAAqB,CAuFjC;AAvFY,sDAAqB;AA4FrB,oCAA4B,GAAG,MAAM,CAAC,8BAA8B,CAAC,CAAC;AAE5E,MAAM,mCAAmC,GAAqD,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CACnH,CAAC,OAA0B,EAAE,OAA0B,EAAE,EAAE;IACvD,MAAM,KAAK,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;IACtC,KAAK,CAAC,IAAI,CAAC,yBAAiB,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IACvD,KAAK,CAAC,IAAI,CAAC,4CAAoC,CAAC,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;IAChF,OAAO,KAAK,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;AAC5C,CAAC,CAAC;AANO,2CAAmC,uCAM1C;;;;;;;;;;;;;AC9RN,gFAAgF;AAChF,0CAA0C;AAC1C,EAAE;AACF,2EAA2E;AAC3E,mEAAmE;AACnE,wCAAwC;AACxC,EAAE;AACF,4EAA4E;AAC5E,8EAA8E;AAC9E,6EAA6E;AAC7E,yDAAyD;AACzD,uDAAuD;AACvD,EAAE;AACF,gFAAgF;AAChF,gFAAgF;;;;;;;;;;;;AAEhF,oIAAkE;AAClE,oHAA6C;AAC7C,6MAA6F;AAC7F,0KAAkF;AAClF,gNAAyG;AAE5F,oCAA4B,GAAG,MAAM,CAAC,8BAA8B,CAAC,CAAC;AACtE,wCAAgC,GAAG,MAAM,CAAC,kCAAkC,CAAC,CAAC;AAE3F;;;GAGG;AAEH,IAAsB,yBAAyB,GAA/C,MAAsB,yBAA0B,SAAQ,0EAAkC;IAatF,IAAY,SAAS;QACjB,IAAI,OAAO,IAAI,CAAC,UAAU,KAAK,WAAW,EAAE;YACxC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC/E;QACD,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAES,MAAM;QACZ,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;IACD,8DAA8D;IAC3C,KAAK,CAAC,OAAe;QACpC,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACnC,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,KAAK,KAAK,SAAS,EAAE;gBACrB,OAAO,SAAS,CAAC;aACpB;YACD,MAAM,MAAM,GAA6B,EAExC,CAAC;YACF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,KAAK,EAAE,CAAC;YACpC,OAAO,MAAM,CAAC;SACjB;aAAM;YACH,OAAO,KAAK,CAAC;SAChB;IACL,CAAC;IAEkB,OAAO,CAAC,cAAsB;QAC7C,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,OAAO,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;SACxC;QACD,IAAI,cAAc,KAAK,IAAI,CAAC,OAAO,EAAE;YACjC,OAAO,EAAE,CAAC;SACb;QACD,IAAI,cAAc,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,OAAO,GAAG,CAAC,EAAE;YAC/C,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;SAC1D;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;CACJ;AAjDG;IADC,sBAAM,EAAC,oCAAgB,CAAC;8BACY,oCAAgB;mEAAC;AAEtD;IADC,sBAAM,EAAC,oCAA4B,CAAC;8BACb,aAAG;sDAAC;AAE5B;IADC,sBAAM,EAAC,wCAAgC,CAAC;;0DACN;AAEnC;IADC,sBAAM,EAAC,oDAAwB,CAAC;8BACY,oDAAwB;2EAAC;AATpD,yBAAyB;IAD9C,0BAAU,GAAE;GACS,yBAAyB,CAoD9C;AApDqB,8DAAyB;;;;;;;;;;;;;AC9B/C,gFAAgF;AAChF,0CAA0C;AAC1C,EAAE;AACF,2EAA2E;AAC3E,mEAAmE;AACnE,wCAAwC;AACxC,EAAE;AACF,4EAA4E;AAC5E,8EAA8E;AAC9E,6EAA6E;AAC7E,yDAAyD;AACzD,uDAAuD;AACvD,EAAE;AACF,gFAAgF;AAChF,gFAAgF;;;;;;;;;;;;AAEhF,uDAAuD;AAEvD,oIAAiF;AAEjF,8LAAsH;AACtH,gNAAyG;AACzG,sIAAgE;AAChE,sKAAmG;AAEnG;;GAEG;AAEH,IAAa,6BAA6B,GAA1C,MAAa,6BAA8B,SAAQ,wCAAkB;IAArE;;QAQuB,cAAS,GAAG,IAAI,GAAG,EAAkC,CAAC;IAyF7E,CAAC;IAtFa,IAAI;QACV,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAES,KAAK,CAAC,MAAM;QAClB,IAAI,CAAC,eAAe,EAAE,CAAC;QAEvB,MAAM,aAAa,GAAoB,EAAE,CAAC;QAC1C,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE;YAC5C,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACnE;QACD,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;IACjE,CAAC;IAES,eAAe;QACrB,KAAK,MAAM,UAAU,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE,EAAE,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC,EAAE;YACtG,MAAM,UAAU,GAAG,wBAAc,CAAC,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,CAAC;YAChE,MAAM,UAAU,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;YACzC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;gBACjC,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;gBAC7D,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;aAC5C;SACJ;IACL,CAAC;IAEQ,YAAY,CAAC,WAAoB,EAAE,cAAsB,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE;QACjG,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE;YAC5C,MAAM,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;YACrD,IAAI,SAAS,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,WAAW,EAAE;gBACrE,OAAO,SAAS,CAAC;aACpB;SACJ;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IAEQ,OAAO,CAAI,cAAsB,EAAE,WAAoB;QAC5D,MAAM,MAAM,GAA+B,EAAE,CAAC;QAC9C,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE;YAC5C,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,QAAQ,CAAC,OAAO,CAAI,cAAc,EAAE,WAAW,CAAC,CAAC;YAC9E,IAAI,SAAS,IAAI,KAAK,KAAK,SAAS,EAAE;gBAClC,MAAM,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC7B,MAAM,CAAC,KAAK,GAAG,wCAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,KAAY,EAAE,KAAY,CAAQ,CAAC;aACrF;SACJ;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,cAAc,CAAC,WAAoB;QAC/B,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE;YAC5C,MAAM,WAAW,GAAG,QAAQ,CAAC,cAAc,EAAE,CAAC;YAC9C,MAAM,GAAG,wCAAkB,CAAC,KAAK,CAAC,MAAM,EAAE,WAAW,CAAQ,CAAC;SACjE;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,cAAsB,EAAE,KAAU,EAAE,WAAoB;QACxE,MAAM,WAAW,GAAG,cAAc,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,MAAM,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;QAC9D,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,iBAAiB,CAAC;QAEpG,MAAM,iBAAiB,GAAG,KAAK,EAAE,IAAY,EAAoB,EAAE;YAC/D,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE;gBAC5C,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,KAAK,IAAI,EAAE;oBAC/D,IAAI,MAAM,QAAQ,CAAC,aAAa,CAAC,cAAc,EAAE,KAAK,EAAE,WAAW,CAAC,EAAE;wBAClE,OAAO,IAAI,CAAC;qBACf;iBACJ;aACJ;YACD,OAAO,KAAK,CAAC;QACjB,CAAC,CAAC;QAEF,IAAI,MAAM,iBAAiB,CAAC,UAAU,CAAC,EAAE,EAAE,+CAA+C;YACtF,OAAO,IAAI,CAAC;SACf;aAAM,IAAI,UAAU,KAAK,iBAAiB,EAAE,EAAE,8CAA8C;YACzF,OAAO,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;SAC/C;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAES,cAAc,CAAC,GAAQ,EAAE,WAAmB;QAClD,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;QACxD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAClH,OAAO,QAAQ,CAAC;IACpB,CAAC;CACJ;AA9FG;IADC,sBAAM,EAAC,wDAA6B,CAAC;;sEAC4B;AAGlE;IADC,sBAAM,EAAC,oDAAwB,CAAC;8BACE,oDAAwB;qEAAC;AAK5D;IADC,6BAAa,GAAE;;;;yDAGf;AAbQ,6BAA6B;IADzC,0BAAU,GAAE;GACA,6BAA6B,CAiGzC;AAjGY,sEAA6B;;;;;;;;;;;;;AC7B1C,gFAAgF;AAChF,0CAA0C;AAC1C,EAAE;AACF,2EAA2E;AAC3E,mEAAmE;AACnE,wCAAwC;AACxC,EAAE;AACF,4EAA4E;AAC5E,8EAA8E;AAC9E,6EAA6E;AAC7E,yDAAyD;AACzD,uDAAuD;AACvD,EAAE;AACF,gFAAgF;AAChF,gFAAgF;;;;;;;;;AAEhF,oIAA0D;AAE1D,wHAA0D;AAC1D,+KAA0E;AAE7D,qCAA6B,GAAG,MAAM,CAAC,+BAA+B,CAAC,CAAC;AAGpF,CAAC;AAEF;;GAEG;AAEH,IAAa,sBAAsB,GAAnC,MAAa,sBAAuB,SAAQ,uDAAyB;IACjE,QAAQ;QACJ,OAAO,yBAAe,CAAC,IAAI,CAAC;IAChC,CAAC;CACJ;AAJY,sBAAsB;IADlC,0BAAU,GAAE;GACA,sBAAsB,CAIlC;AAJY,wDAAsB;;;;;;;;;;;;;AC9BnC,gFAAgF;AAChF,yCAAyC;AACzC,EAAE;AACF,2EAA2E;AAC3E,mEAAmE;AACnE,wCAAwC;AACxC,EAAE;AACF,4EAA4E;AAC5E,8EAA8E;AAC9E,6EAA6E;AAC7E,yDAAyD;AACzD,uDAAuD;AACvD,EAAE;AACF,gFAAgF;AAChF,gFAAgF;;;;;;;;;;;;AAEhF,oIAAkE;AAElE,oJAAsE;AACtE,0KAAiG;AACjG,6MAA6F;AAG7F,IAAa,sCAAsC,GAAnD,MAAa,sCAAsC;CAElD;AAFY,sCAAsC;IADlD,0BAAU,GAAE;GACA,sCAAsC,CAElD;AAFY,wFAAsC;AAItC,8CAAsC,GAAG,MAAM,CAAC,wCAAwC,CAAC,CAAC;AAIvG,IAAa,+BAA+B,GAA5C,MAAa,+BAAgC,SAAQ,0EAAkC;IAAvF;;QAQc,2BAAsB,GAAG,IAAI,GAAG,EAAU,CAAC;IA4DzD,CAAC;IA1Da,MAAM;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;IACrC,CAAC;IAED,8DAA8D;IAC3C,KAAK,CAAC,OAAe;QACpC,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAClC,IAAI,iCAAa,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;YACxB,MAAM,QAAQ,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YACtC,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,UAAU,CAAC,EAAE;gBACzF,4FAA4F;gBAC5F,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;oBACf,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;iBACxC;gBACD,6EAA6E;gBAC7E,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE;oBACX,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC1B,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBAC3C;aACJ;YACD,OAAO,QAAQ,CAAC;SACnB;QACD,OAAO,EAAE,CAAC;IACd,CAAC;IAEkB,OAAO,CAAC,cAAsB;;QAC7C,MAAM,YAAY,GAAG,cAAc,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrD,MAAM,SAAS,GAAG,cAAc,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAChE,IAAI,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,SAAS,CAAC,EAAE;YAChD,6DAA6D;YAC7D,MAAM,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;YAC5B,IAAI,SAAS,EAAE;gBACX,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACxB;YACD,8FAA8F;YAC9F,IAAI,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;gBAC/C,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;aAC5B;YACD,OAAO,IAAI,CAAC;SACf;QACD,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,WAAK,CAAC,OAAO,CAAC,cAAc,CAAC,mCAAI,EAAE,CAAC,CAAC;IACpE,CAAC;IAED;;OAEG;IACO,gBAAgB,CAAC,YAAoB,EAAE,SAAiB;QAC9D,OAAO,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IAC3D,CAAC;IAED,QAAQ;QACJ,OAAO,6BAAe,CAAC,SAAS,CAAC;IACrC,CAAC;IAEQ,SAAS;QACd,qDAAqD;QACrD,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IAC9H,CAAC;CACJ;AAjEG;IADC,sBAAM,EAAC,oCAAgB,CAAC;8BACY,oCAAgB;yEAAC;AAGtD;IADC,sBAAM,EAAC,sCAAsC,CAAC;8BACnB,sCAAsC;gEAAC;AAN1D,+BAA+B;IAD3C,0BAAU,GAAE;GACA,+BAA+B,CAoE3C;AApEY,0EAA+B;;;;;;;;;;;;;AC/B5C,gFAAgF;AAChF,0CAA0C;AAC1C,EAAE;AACF,2EAA2E;AAC3E,mEAAmE;AACnE,wCAAwC;AACxC,EAAE;AACF,4EAA4E;AAC5E,8EAA8E;AAC9E,6EAA6E;AAC7E,yDAAyD;AACzD,uDAAuD;AACvD,EAAE;AACF,gFAAgF;AAChF,gFAAgF;;;;;;;;;;;;AAEhF,uDAAuD;AAEvD,oIAAwF;AAExF,yIAAyE;AACzE,oJAA0F;AAC1F,0KAAkF;AAClF,oMAA+H;AAG/H,IAAa,2BAA2B,GAAxC,MAAa,2BAA4B,SAAQ,gCAAkB;IAAnE;;QAWuB,sCAAiC,GAAG,IAAI,iCAAoB,EAAE,CAAC;IAgGtF,CAAC;IA7Fa,IAAI;QACV,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE;YAClC,kIAAkI;YAClI,+GAA+G;YAC/G,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE;gBAClC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;aACzB;QACL,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC;QACtF,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC;IAClF,CAAC;IAEQ,YAAY,CAAC,cAAkC,IAAI,CAAC,iBAAiB,EAAE,EAAE,WAAoB;;QAClG,OAAO,UAAI,CAAC,QAAQ,0CAAE,YAAY,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IACjE,CAAC;IAEQ,sBAAsB,CAAC,cAAkC,IAAI,CAAC,iBAAiB,EAAE,EAAE,WAAoB;;QAC5G,OAAO,gBAAI,CAAC,QAAQ,0CAAE,sBAAsB,mDAAG,WAAW,EAAE,WAAW,CAAC,CAAC;IAC7E,CAAC;IAGD,IAAc,QAAQ;QAClB,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAES,sBAAsB;QAC5B,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACvC,IAAI,IAAI,CAAC,SAAS,KAAK,QAAQ,EAAE;YAC7B,IAAI,CAAC,iCAAiC,CAAC,OAAO,EAAE,CAAC;YACjD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;YAE5D,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAE1B,IAAI,QAAQ,EAAE;gBACV,sGAAsG;gBACtG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aAC/D;YAED,IAAI,QAAQ,YAAY,oEAA+B,EAAE;gBACrD,IAAI,CAAC,iCAAiC,CAAC,OAAO,CAAC;oBAC3C,QAAQ;oBACR,QAAQ,CAAC,uBAAuB,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACjG,CAAC,CAAC;aACN;SACJ;IACL,CAAC;IAES,cAAc;QACpB,MAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC;QAClD,IAAI,CAAC,SAAS,EAAE;YACZ,OAAO,SAAS,CAAC;SACpB;QACD,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,EAAE;YACnD,OAAO,IAAI,CAAC,wBAAwB,CAAC;SACxC;QACD,IAAI,IAAI,CAAC,SAAS,YAAY,oEAA+B,IAAI,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YACxH,OAAO,IAAI,CAAC,SAAS,CAAC;SACzB;QACD,OAAO,IAAI,CAAC,4BAA4B,CAAC;YACrC,YAAY,EAAE,SAAS,CAAC,QAAQ;SACnC,CAAC,CAAC;IACP,CAAC;IAEQ,GAAG,CAAI,cAAsB,EAAE,cAAkC,IAAI,CAAC,iBAAiB,EAAE;QAC9F,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/B,OAAO,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAI,cAAc,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC/E,CAAC;IAEQ,OAAO,CAAI,cAAsB,EAAE,cAAkC,IAAI,CAAC,iBAAiB,EAAE;QAClG,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/B,OAAO,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAI,cAAc,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC5E,CAAC;IAED,cAAc,CAAC,cAAkC,IAAI,CAAC,iBAAiB,EAAE;QACrE,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/B,OAAO,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAChE,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,cAAsB,EAAE,KAAU,EAAE,cAAkC,IAAI,CAAC,iBAAiB,EAAE;QAC9G,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/B,IAAI,QAAQ,EAAE;YACV,OAAO,QAAQ,CAAC,aAAa,CAAC,cAAc,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;SACrE;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAES,iBAAiB;QACvB,IAAI,IAAI,CAAC,gBAAgB,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,EAAE;YACtF,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;SAC9D;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;CAEJ;AAxGG;IADC,sBAAM,EAAC,oCAAgB,CAAC;8BACY,oCAAgB;qEAAC;AAGtD;IADC,sBAAM,EAAC,2EAAsC,CAAC;;iFACyC;AAGxF;IADC,sBAAM,EAAC,gCAAkB,CAAC;IAAE,qBAAK,EAAC,6BAAe,CAAC,MAAM,CAAC;8BACb,gCAAkB;6EAAC;AAKhE;IADC,6BAAa,GAAE;;;;uDAWf;AAxBQ,2BAA2B;IADvC,0BAAU,GAAE;GACA,2BAA2B,CA2GvC;AA3GY,kEAA2B","sources":["webpack:///./node_modules/@theia/core/shared/markdown-it.js?","webpack:///./node_modules/@theia/preferences/src/browser/abstract-resource-preference-provider.ts?","webpack:///./node_modules/@theia/preferences/src/browser/folder-preference-provider.ts?","webpack:///./node_modules/@theia/preferences/src/browser/folders-preferences-provider.ts?","webpack:///./node_modules/@theia/preferences/src/browser/monaco-jsonc-editor.ts?","webpack:///./node_modules/@theia/preferences/src/browser/preference-bindings.ts?","webpack:///./node_modules/@theia/preferences/src/browser/preference-transaction-manager.ts?","webpack:///./node_modules/@theia/preferences/src/browser/section-preference-provider.ts?","webpack:///./node_modules/@theia/preferences/src/browser/user-configs-preference-provider.ts?","webpack:///./node_modules/@theia/preferences/src/browser/user-preference-provider.ts?","webpack:///./node_modules/@theia/preferences/src/browser/workspace-file-preference-provider.ts?","webpack:///./node_modules/@theia/preferences/src/browser/workspace-preference-provider.ts?"],"sourcesContent":["module.exports = require('markdown-it');\n","// *****************************************************************************\n// Copyright (C) 2018 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-null/no-null */\n\nimport * as jsoncparser from 'jsonc-parser';\nimport { inject, injectable, postConstruct } from '@theia/core/shared/inversify';\nimport { Disposable } from '@theia/core/lib/common/disposable';\nimport { PreferenceProvider, PreferenceSchemaProvider, PreferenceScope, PreferenceProviderDataChange } from '@theia/core/lib/browser';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceConfigurations } from '@theia/core/lib/browser/preferences/preference-configurations';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\nimport { FileService } from '@theia/filesystem/lib/browser/file-service';\nimport { PreferenceContext, PreferenceTransaction, PreferenceTransactionFactory } from './preference-transaction-manager';\nimport { Emitter, Event } from '@theia/core';\n\n@injectable()\nexport abstract class AbstractResourcePreferenceProvider extends PreferenceProvider {\n\n    protected preferences: Record<string, any> = {};\n    protected _fileExists = false;\n    protected readonly loading = new Deferred();\n    protected transaction: PreferenceTransaction | undefined;\n    protected readonly onDidChangeValidityEmitter = new Emitter<boolean>();\n\n    set fileExists(exists: boolean) {\n        if (exists !== this._fileExists) {\n            this._fileExists = exists;\n            this.onDidChangeValidityEmitter.fire(exists);\n        }\n    }\n\n    get onDidChangeValidity(): Event<boolean> {\n        return this.onDidChangeValidityEmitter.event;\n    }\n\n    @inject(PreferenceTransactionFactory) protected readonly transactionFactory: PreferenceTransactionFactory;\n    @inject(PreferenceSchemaProvider) protected readonly schemaProvider: PreferenceSchemaProvider;\n    @inject(FileService) protected readonly fileService: FileService;\n    @inject(PreferenceConfigurations) protected readonly configurations: PreferenceConfigurations;\n\n    @postConstruct()\n    protected init(): void {\n        this.doInit();\n    }\n\n    protected async doInit(): Promise<void> {\n        const uri = this.getUri();\n        this.toDispose.push(Disposable.create(() => this.loading.reject(new Error(`Preference provider for '${uri}' was disposed.`))));\n        await this.readPreferencesFromFile();\n        this._ready.resolve();\n        this.loading.resolve();\n        const storageUri = this.toFileManager().getConfigUri();\n        this.toDispose.pushAll([\n            this.fileService.watch(storageUri),\n            this.fileService.onDidFilesChange(e => {\n                if (e.contains(storageUri)) {\n                    this.readPreferencesFromFile();\n                }\n            }),\n            Disposable.create(() => this.reset()),\n        ]);\n    }\n\n    protected abstract getUri(): URI;\n    abstract getScope(): PreferenceScope;\n\n    get valid(): boolean {\n        return this._fileExists;\n    }\n\n    override getConfigUri(): URI;\n    override getConfigUri(resourceUri: string | undefined): URI | undefined;\n    override getConfigUri(resourceUri?: string): URI | undefined {\n        if (!resourceUri) {\n            return this.getUri();\n        }\n        return this.valid && this.contains(resourceUri) ? this.getUri() : undefined;\n    }\n\n    contains(resourceUri: string | undefined): boolean {\n        if (!resourceUri) {\n            return true;\n        }\n        const domain = this.getDomain();\n        if (!domain) {\n            return true;\n        }\n        const resourcePath = new URI(resourceUri).path;\n        return domain.some(uri => new URI(uri).path.relativity(resourcePath) >= 0);\n    }\n\n    getPreferences(resourceUri?: string): { [key: string]: any } {\n        return this.valid && this.contains(resourceUri) ? this.preferences : {};\n    }\n\n    async setPreference(key: string, value: any, resourceUri?: string): Promise<boolean> {\n        let path: string[] | undefined;\n        if (this.toDispose.disposed || !(path = this.getPath(key)) || !this.contains(resourceUri)) {\n            return false;\n        }\n        return this.doSetPreference(key, path, value);\n    }\n\n    protected async doSetPreference(key: string, path: string[], value: unknown): Promise<boolean> {\n        if (!this.transaction?.open) {\n            const current = this.transaction;\n            this.transaction = this.transactionFactory(this.toFileManager(), current?.result);\n            this.transaction.onWillConclude(({ status, waitUntil }) => {\n                if (status) {\n                    waitUntil((async () => {\n                        await this.readPreferencesFromFile();\n                        await this.fireDidPreferencesChanged(); // Ensure all consumers of the event have received it.\n                    })());\n                }\n            });\n            this.toDispose.push(this.transaction);\n        }\n        return this.transaction.enqueueAction(key, path, value);\n    }\n\n    /**\n     * Use this method as intermediary for interactions with actual files.\n     * Allows individual providers to modify where they store their files without disrupting the preference system's\n     * conventions about scope and file location.\n     */\n    protected toFileManager(): PreferenceContext {\n        return this;\n    }\n\n    protected getPath(preferenceName: string): string[] | undefined {\n        const asOverride = this.preferenceOverrideService.overriddenPreferenceName(preferenceName);\n        if (asOverride?.overrideIdentifier) {\n            return [this.preferenceOverrideService.markLanguageOverride(asOverride.overrideIdentifier), asOverride.preferenceName];\n        }\n        return [preferenceName];\n    }\n\n    protected async readPreferencesFromFile(): Promise<void> {\n        const content = await this.fileService.read(this.toFileManager().getConfigUri())\n            .then(value => {\n                this.fileExists = true;\n                return value;\n            })\n            .catch(() => {\n                this.fileExists = false;\n                return { value: '' };\n            });\n        this.readPreferencesFromContent(content.value);\n    }\n\n    protected readPreferencesFromContent(content: string): void {\n        let preferencesInJson;\n        try {\n            preferencesInJson = this.parse(content);\n        } catch {\n            preferencesInJson = {};\n        }\n        const parsedPreferences = this.getParsedContent(preferencesInJson);\n        this.handlePreferenceChanges(parsedPreferences);\n    }\n\n    protected parse(content: string): any {\n        content = content.trim();\n        if (!content) {\n            return undefined;\n        }\n        const strippedContent = jsoncparser.stripComments(content);\n        return jsoncparser.parse(strippedContent);\n    }\n\n    protected handlePreferenceChanges(newPrefs: { [key: string]: any }): void {\n        const oldPrefs = Object.assign({}, this.preferences);\n        this.preferences = newPrefs;\n        const prefNames = new Set([...Object.keys(oldPrefs), ...Object.keys(newPrefs)]);\n        const prefChanges: PreferenceProviderDataChange[] = [];\n        const uri = this.getUri();\n        for (const prefName of prefNames.values()) {\n            const oldValue = oldPrefs[prefName];\n            const newValue = newPrefs[prefName];\n            const schemaProperties = this.schemaProvider.getCombinedSchema().properties[prefName];\n            if (schemaProperties) {\n                const scope = schemaProperties.scope;\n                // do not emit the change event if the change is made out of the defined preference scope\n                if (!this.schemaProvider.isValidInScope(prefName, this.getScope())) {\n                    console.warn(`Preference ${prefName} in ${uri} can only be defined in scopes: ${PreferenceScope.getScopeNames(scope).join(', ')}.`);\n                    continue;\n                }\n            }\n            if (!PreferenceProvider.deepEqual(newValue, oldValue)) {\n                prefChanges.push({\n                    preferenceName: prefName, newValue, oldValue, scope: this.getScope(), domain: this.getDomain()\n                });\n            }\n        }\n\n        if (prefChanges.length > 0) {\n            this.emitPreferencesChangedEvent(prefChanges);\n        }\n    }\n\n    protected reset(): void {\n        const preferences = this.preferences;\n        this.preferences = {};\n        const changes: PreferenceProviderDataChange[] = [];\n        for (const prefName of Object.keys(preferences)) {\n            const value = preferences[prefName];\n            if (value !== undefined) {\n                changes.push({\n                    preferenceName: prefName, newValue: undefined, oldValue: value, scope: this.getScope(), domain: this.getDomain()\n                });\n            }\n        }\n        if (changes.length > 0) {\n            this.emitPreferencesChangedEvent(changes);\n        }\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2019 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceScope } from '@theia/core/lib/browser';\nimport { FileStat } from '@theia/filesystem/lib/common/files';\nimport { SectionPreferenceProvider } from './section-preference-provider';\n\nexport const FolderPreferenceProviderFactory = Symbol('FolderPreferenceProviderFactory');\nexport interface FolderPreferenceProviderFactory {\n    (uri: URI, section: string, folder: FileStat): FolderPreferenceProvider;\n}\n\nexport const FolderPreferenceProviderFolder = Symbol('FolderPreferenceProviderFolder');\nexport interface FolderPreferenceProviderOptions {\n    readonly configUri: URI;\n    readonly sectionName: string | undefined;\n}\n\n@injectable()\nexport class FolderPreferenceProvider extends SectionPreferenceProvider {\n\n    @inject(FolderPreferenceProviderFolder) protected readonly folder: FileStat;\n\n    private _folderUri: URI;\n\n    get folderUri(): URI {\n        if (!this._folderUri) {\n            this._folderUri = this.folder.resource;\n        }\n        return this._folderUri;\n    }\n    getScope(): PreferenceScope {\n        if (!this.workspaceService.isMultiRootWorkspaceOpened) {\n            // when FolderPreferenceProvider is used as a delegate of WorkspacePreferenceProvider in a one-folder workspace\n            return PreferenceScope.Workspace;\n        }\n        return PreferenceScope.Folder;\n    }\n\n    override getDomain(): string[] {\n        return [this.folderUri.toString()];\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2019 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { inject, injectable, postConstruct } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceProvider, PreferenceResolveResult, PreferenceScope } from '@theia/core/lib/browser/preferences';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\nimport { PreferenceConfigurations } from '@theia/core/lib/browser/preferences/preference-configurations';\nimport { FolderPreferenceProvider, FolderPreferenceProviderFactory } from './folder-preference-provider';\nimport { FileStat } from '@theia/filesystem/lib/common/files';\n\n@injectable()\nexport class FoldersPreferencesProvider extends PreferenceProvider {\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(FolderPreferenceProviderFactory)\n    protected readonly folderPreferenceProviderFactory: FolderPreferenceProviderFactory;\n\n    @inject(PreferenceConfigurations)\n    protected readonly configurations: PreferenceConfigurations;\n\n    protected readonly providers = new Map<string, FolderPreferenceProvider>();\n\n    @postConstruct()\n    protected init(): void {\n        this.doInit();\n    }\n\n    protected async doInit(): Promise<void> {\n        await this.workspaceService.roots;\n\n        this.updateProviders();\n        this.workspaceService.onWorkspaceChanged(() => this.updateProviders());\n\n        const readyPromises: Promise<void>[] = [];\n        for (const provider of this.providers.values()) {\n            readyPromises.push(provider.ready.catch(e => console.error(e)));\n        }\n        Promise.all(readyPromises).then(() => this._ready.resolve());\n    }\n\n    protected updateProviders(): void {\n        const roots = this.workspaceService.tryGetRoots();\n        const toDelete = new Set(this.providers.keys());\n        for (const folder of roots) {\n            for (const configPath of this.configurations.getPaths()) {\n                for (const configName of [...this.configurations.getSectionNames(), this.configurations.getConfigName()]) {\n                    const sectionUri = this.configurations.createUri(folder.resource, configPath, configName);\n                    const sectionKey = sectionUri.toString();\n                    toDelete.delete(sectionKey);\n                    if (!this.providers.has(sectionKey)) {\n                        const provider = this.createProvider(sectionUri, configName, folder);\n                        this.providers.set(sectionKey, provider);\n                    }\n                }\n            }\n        }\n        for (const key of toDelete) {\n            const provider = this.providers.get(key);\n            if (provider) {\n                this.providers.delete(key);\n                provider.dispose();\n            }\n        }\n    }\n\n    override getConfigUri(resourceUri?: string, sectionName: string = this.configurations.getConfigName()): URI | undefined {\n        for (const provider of this.getFolderProviders(resourceUri)) {\n            const configUri = provider.getConfigUri(resourceUri);\n            if (configUri && this.configurations.getName(configUri) === sectionName) {\n                return configUri;\n            }\n        }\n        return undefined;\n    }\n\n    override getContainingConfigUri(resourceUri?: string, sectionName: string = this.configurations.getConfigName()): URI | undefined {\n        for (const provider of this.getFolderProviders(resourceUri)) {\n            const configUri = provider.getConfigUri();\n            if (provider.contains(resourceUri) && this.configurations.getName(configUri) === sectionName) {\n                return configUri;\n            }\n        }\n        return undefined;\n    }\n\n    override getDomain(): string[] {\n        return this.workspaceService.tryGetRoots().map(root => root.resource.toString());\n    }\n\n    override resolve<T>(preferenceName: string, resourceUri?: string): PreferenceResolveResult<T> {\n        const result: PreferenceResolveResult<T> = {};\n        const groups = this.groupProvidersByConfigName(resourceUri);\n        for (const group of groups.values()) {\n            for (const provider of group) {\n                const { value, configUri } = provider.resolve<T>(preferenceName, resourceUri);\n                if (configUri && value !== undefined) {\n                    result.configUri = configUri;\n                    result.value = PreferenceProvider.merge(result.value as any, value as any) as any;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    getPreferences(resourceUri?: string): { [p: string]: any } {\n        let result = {};\n        const groups = this.groupProvidersByConfigName(resourceUri);\n        for (const group of groups.values()) {\n            for (const provider of group) {\n                if (provider.getConfigUri(resourceUri)) {\n                    const preferences = provider.getPreferences();\n                    result = PreferenceProvider.merge(result, preferences) as any;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    async setPreference(preferenceName: string, value: any, resourceUri?: string): Promise<boolean> {\n        const firstPathFragment = preferenceName.split('.', 1)[0];\n        const defaultConfigName = this.configurations.getConfigName();\n        const configName = this.configurations.isSectionName(firstPathFragment) ? firstPathFragment : defaultConfigName;\n\n        const providers = this.getFolderProviders(resourceUri);\n        let configPath: string | undefined;\n        const candidates = providers.filter(provider => {\n            // Attempt to figure out the settings folder (.vscode or .theia) we're interested in.\n            const containingConfigUri = provider.getConfigUri(resourceUri);\n            if (configPath === undefined && containingConfigUri) {\n                configPath = this.configurations.getPath(containingConfigUri);\n            }\n            const providerName = this.configurations.getName(containingConfigUri ?? provider.getConfigUri());\n            return providerName === configName || providerName === defaultConfigName;\n        });\n\n        const configNameAndPathMatches = [];\n        const configNameOnlyMatches = [];\n        const configUriMatches = [];\n        const otherMatches = [];\n\n        for (const candidate of candidates) {\n            const domainMatches = candidate.getConfigUri(resourceUri);\n            const configUri = domainMatches ?? candidate.getConfigUri();\n            const nameMatches = this.configurations.getName(configUri) === configName;\n            const pathMatches = this.configurations.getPath(configUri) === configPath;\n\n            // Perfect match, run immediately in case we can bail out early.\n            if (nameMatches && domainMatches) {\n                if (await candidate.setPreference(preferenceName, value, resourceUri)) {\n                    return true;\n                }\n            } else if (nameMatches && pathMatches) { // Right file in the right folder.\n                configNameAndPathMatches.push(candidate);\n            } else if (nameMatches) { // Right file.\n                configNameOnlyMatches.push(candidate);\n            } else if (domainMatches) { // Currently valid and governs target URI\n                configUriMatches.push(candidate);\n            } else {\n                otherMatches.push(candidate);\n            }\n        }\n\n        const candidateSets = [configNameAndPathMatches, configNameOnlyMatches, configUriMatches, otherMatches];\n\n        for (const candidateSet of candidateSets) {\n            for (const candidate of candidateSet) {\n                if (await candidate.setPreference(preferenceName, value, resourceUri)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    override canHandleScope(scope: PreferenceScope): boolean {\n        return this.workspaceService.isMultiRootWorkspaceOpened && scope === PreferenceScope.Folder || scope === PreferenceScope.Workspace;\n    }\n\n    protected groupProvidersByConfigName(resourceUri?: string): Map<string, FolderPreferenceProvider[]> {\n        const groups = new Map<string, FolderPreferenceProvider[]>();\n        const providers = this.getFolderProviders(resourceUri);\n        for (const configName of [this.configurations.getConfigName(), ...this.configurations.getSectionNames()]) {\n            const group = [];\n            for (const provider of providers) {\n                if (this.configurations.getName(provider.getConfigUri()) === configName) {\n                    group.push(provider);\n                }\n            }\n            groups.set(configName, group);\n        }\n        return groups;\n    }\n\n    protected getFolderProviders(resourceUri?: string): FolderPreferenceProvider[] {\n        if (!resourceUri) {\n            return [];\n        }\n        const resourcePath = new URI(resourceUri).path;\n        let folder: Readonly<{ relativity: number, uri?: string }> = { relativity: Number.MAX_SAFE_INTEGER };\n        const providers = new Map<string, FolderPreferenceProvider[]>();\n        for (const provider of this.providers.values()) {\n            const uri = provider.folderUri.toString();\n            const folderProviders = (providers.get(uri) || []);\n            folderProviders.push(provider);\n            providers.set(uri, folderProviders);\n\n            // in case we have nested folders mounted as workspace roots, select the innermost enclosing folder\n            const relativity = provider.folderUri.path.relativity(resourcePath);\n            if (relativity >= 0 && folder.relativity > relativity) {\n                folder = { relativity, uri };\n            }\n        }\n        return folder.uri && providers.get(folder.uri) || [];\n    }\n\n    protected createProvider(uri: URI, section: string, folder: FileStat): FolderPreferenceProvider {\n        const provider = this.folderPreferenceProviderFactory(uri, section, folder);\n        this.toDispose.push(provider);\n        this.toDispose.push(provider.onDidPreferencesChanged(change => this.onDidPreferencesChangedEmitter.fire(change)));\n        return provider;\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2021 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport * as jsoncparser from 'jsonc-parser';\nimport { MonacoEditorModel } from '@theia/monaco/lib/browser/monaco-editor-model';\nimport { MonacoWorkspace } from '@theia/monaco/lib/browser/monaco-workspace';\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport * as monaco from '@theia/monaco-editor-core';\n\n@injectable()\nexport class MonacoJSONCEditor {\n    @inject(MonacoWorkspace) protected readonly workspace: MonacoWorkspace;\n\n    async setValue(model: MonacoEditorModel, path: jsoncparser.JSONPath, value: unknown, shouldSave = true): Promise<void> {\n        const edits = this.getEditOperations(model, path, value);\n        if (edits.length > 0) {\n            await this.workspace.applyBackgroundEdit(model, edits, shouldSave);\n        }\n    }\n\n    getEditOperations(model: MonacoEditorModel, path: jsoncparser.JSONPath, value: unknown): monaco.editor.IIdentifiedSingleEditOperation[] {\n        const textModel = model.textEditorModel;\n        const content = model.getText().trim();\n        // Everything is already undefined - no need for changes.\n        if (!content && value === undefined) {\n            return [];\n        }\n        // Delete the entire document.\n        if (!path.length && value === undefined) {\n            return [{\n                range: textModel.getFullModelRange(),\n                text: null, // eslint-disable-line no-null/no-null\n                forceMoveMarkers: false\n            }];\n        }\n        const { insertSpaces, tabSize, defaultEOL } = textModel.getOptions();\n        const jsonCOptions = {\n            formattingOptions: {\n                insertSpaces,\n                tabSize,\n                eol: defaultEOL === monaco.editor.DefaultEndOfLine.LF ? '\\n' : '\\r\\n'\n            }\n        };\n        return jsoncparser.modify(content, path, value, jsonCOptions).map(edit => {\n            const start = textModel.getPositionAt(edit.offset);\n            const end = textModel.getPositionAt(edit.offset + edit.length);\n            return {\n                range: monaco.Range.fromPositions(start, end),\n                text: edit.content || null, // eslint-disable-line no-null/no-null\n                forceMoveMarkers: false\n            };\n        });\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2018 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { Container, interfaces } from '@theia/core/shared/inversify';\nimport { PreferenceProvider, PreferenceScope } from '@theia/core/lib/browser/preferences';\nimport { UserPreferenceProvider, UserPreferenceProviderFactory } from './user-preference-provider';\nimport { WorkspacePreferenceProvider } from './workspace-preference-provider';\nimport { WorkspaceFilePreferenceProvider, WorkspaceFilePreferenceProviderFactory, WorkspaceFilePreferenceProviderOptions } from './workspace-file-preference-provider';\nimport { FoldersPreferencesProvider } from './folders-preferences-provider';\nimport { FolderPreferenceProvider, FolderPreferenceProviderFactory, FolderPreferenceProviderFolder } from './folder-preference-provider';\nimport { UserConfigsPreferenceProvider } from './user-configs-preference-provider';\nimport { SectionPreferenceProviderUri, SectionPreferenceProviderSection } from './section-preference-provider';\n\nexport function bindWorkspaceFilePreferenceProvider(bind: interfaces.Bind): void {\n    bind(WorkspaceFilePreferenceProviderFactory).toFactory(ctx => (options: WorkspaceFilePreferenceProviderOptions) => {\n        const child = new Container({ defaultScope: 'Singleton' });\n        child.parent = ctx.container;\n        child.bind(WorkspaceFilePreferenceProvider).toSelf();\n        child.bind(WorkspaceFilePreferenceProviderOptions).toConstantValue(options);\n        return child.get(WorkspaceFilePreferenceProvider);\n    });\n}\n\nexport function bindFactory<F, C>(bind: interfaces.Bind,\n    factoryId: interfaces.ServiceIdentifier<F>,\n    constructor: interfaces.Newable<C>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...parameterBindings: interfaces.ServiceIdentifier<any>[]): void {\n    bind(factoryId).toFactory(ctx =>\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (...args: any[]) => {\n            const child = new Container({ defaultScope: 'Singleton' });\n            child.parent = ctx.container;\n            for (let i = 0; i < parameterBindings.length; i++) {\n                child.bind(parameterBindings[i]).toConstantValue(args[i]);\n            }\n            child.bind(constructor).to(constructor);\n            return child.get(constructor);\n        }\n    );\n}\n\nexport function bindPreferenceProviders(bind: interfaces.Bind, unbind: interfaces.Unbind): void {\n    unbind(PreferenceProvider);\n\n    bind(PreferenceProvider).to(UserConfigsPreferenceProvider).inSingletonScope().whenTargetNamed(PreferenceScope.User);\n    bind(PreferenceProvider).to(WorkspacePreferenceProvider).inSingletonScope().whenTargetNamed(PreferenceScope.Workspace);\n    bind(PreferenceProvider).to(FoldersPreferencesProvider).inSingletonScope().whenTargetNamed(PreferenceScope.Folder);\n    bindWorkspaceFilePreferenceProvider(bind);\n    bindFactory(bind, UserPreferenceProviderFactory, UserPreferenceProvider, SectionPreferenceProviderUri, SectionPreferenceProviderSection);\n    bindFactory(bind, FolderPreferenceProviderFactory, FolderPreferenceProvider, SectionPreferenceProviderUri, SectionPreferenceProviderSection, FolderPreferenceProviderFolder);\n}\n","// *****************************************************************************\n// Copyright (C) 2021 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { CancellationError, Emitter, Event, MaybePromise, MessageService, nls, WaitUntilEvent } from '@theia/core';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\nimport { inject, injectable, interfaces, postConstruct } from '@theia/core/shared/inversify';\nimport { PreferenceScope } from '@theia/core/lib/common/preferences/preference-scope';\nimport URI from '@theia/core/lib/common/uri';\nimport { MonacoEditorModel } from '@theia/monaco/lib/browser/monaco-editor-model';\nimport { Mutex, MutexInterface } from 'async-mutex';\nimport { MonacoTextModelService } from '@theia/monaco/lib/browser/monaco-text-model-service';\nimport { MonacoJSONCEditor } from './monaco-jsonc-editor';\nimport { EditorManager } from '@theia/editor/lib/browser/editor-manager';\nimport { IReference } from '@theia/monaco-editor-core/esm/vs/base/common/lifecycle';\n\nexport interface OnWillConcludeEvent<T> extends WaitUntilEvent {\n    status: T | false;\n}\n\n@injectable()\n/**\n * Represents a batch of interactions with an underlying resource.\n */\nexport abstract class Transaction<Arguments extends unknown[], Result = unknown, Status = unknown> {\n    protected _open = true;\n    /**\n     * Whether the transaction is still accepting new interactions.\n     * Enqueueing an action when the Transaction is no longer open will throw an error.\n     */\n    get open(): boolean {\n        return this._open;\n    }\n    protected _result = new Deferred<Result | false>();\n    /**\n     * The status of the transaction when complete.\n     */\n    get result(): Promise<Result | false> {\n        return this._result.promise;\n    }\n    /**\n     * The transaction will self-dispose when the queue is empty, once at least one action has been processed.\n     */\n    protected readonly queue = new Mutex(new CancellationError());\n    protected readonly onWillConcludeEmitter = new Emitter<OnWillConcludeEvent<Status>>();\n    /**\n     * An event fired when the transaction is wrapping up.\n     * Consumers can call `waitUntil` on the event to delay the resolution of the `result` Promise.\n     */\n    get onWillConclude(): Event<OnWillConcludeEvent<Status>> {\n        return this.onWillConcludeEmitter.event;\n    }\n\n    protected status = new Deferred<Status>();\n    /**\n     * Whether any actions have been added to the transaction.\n     * The Transaction will not self-dispose until at least one action has been performed.\n     */\n    protected inUse = false;\n\n    @postConstruct()\n    protected init(): void {\n        this.doInit();\n    }\n\n    protected async doInit(): Promise<void> {\n        const release = await this.queue.acquire();\n        try {\n            const status = await this.setUp();\n            this.status.resolve(status);\n        } catch {\n            this.dispose();\n        } finally {\n            release();\n        }\n    }\n\n    async waitFor(delay?: Promise<unknown>, disposeIfRejected?: boolean): Promise<void> {\n        try {\n            await this.queue.runExclusive(() => delay);\n        } catch {\n            if (disposeIfRejected) {\n                this.dispose();\n            }\n        }\n    }\n\n    /**\n     * @returns a promise reflecting the result of performing an action. Typically the promise will not resolve until the whole transaction is complete.\n     */\n    async enqueueAction(...args: Arguments): Promise<Result | false> {\n        if (this._open) {\n            let release: MutexInterface.Releaser | undefined;\n            try {\n                release = await this.queue.acquire();\n                if (!this.inUse) {\n                    this.inUse = true;\n                    this.disposeWhenDone();\n                }\n                return this.act(...args);\n            } catch (e) {\n                if (e instanceof CancellationError) {\n                    throw e;\n                }\n                return false;\n            } finally {\n                release?.();\n            }\n        } else {\n            throw new Error('Transaction used after disposal.');\n        }\n    }\n\n    protected disposeWhenDone(): void {\n        // Due to properties of the micro task system, it's possible for something to have been enqueued between\n        // the resolution of the waitForUnlock() promise and the the time this code runs, so we have to check.\n        this.queue.waitForUnlock().then(() => {\n            if (!this.queue.isLocked()) {\n                this.dispose();\n            } else {\n                this.disposeWhenDone();\n            }\n        });\n    }\n\n    protected async conclude(): Promise<void> {\n        if (this._open) {\n            try {\n                this._open = false;\n                this.queue.cancel();\n                const result = await this.tearDown();\n                const status = this.status.state === 'unresolved' || this.status.state === 'rejected' ? false : await this.status.promise;\n                await WaitUntilEvent.fire(this.onWillConcludeEmitter, { status });\n                this.onWillConcludeEmitter.dispose();\n                this._result.resolve(result);\n            } catch {\n                this._result.resolve(false);\n            }\n        }\n    }\n\n    dispose(): void {\n        this.conclude();\n    }\n\n    /**\n     * Runs any code necessary to initialize the batch of interactions. No interaction will be run until the setup is complete.\n     *\n     * @returns a representation of the success of setup specific to a given transaction implementation.\n     */\n    protected abstract setUp(): MaybePromise<Status>;\n    /**\n     * Performs a single interaction\n     *\n     * @returns the result of that interaction, specific to a given transaction type.\n     */\n    protected abstract act(...args: Arguments): MaybePromise<Result>;\n    /**\n     * Runs any code necessary to complete a transaction and release any resources it holds.\n     *\n     * @returns implementation-specific information about the success of the transaction. Will be used as the final status of the transaction.\n     */\n    protected abstract tearDown(): MaybePromise<Result>;\n}\n\nexport interface PreferenceContext {\n    getConfigUri(): URI;\n    getScope(): PreferenceScope;\n}\nexport const PreferenceContext = Symbol('PreferenceContext');\nexport const PreferenceTransactionPreludeProvider = Symbol('PreferenceTransactionPreludeProvider');\nexport type PreferenceTransactionPreludeProvider = () => Promise<unknown>;\n\n@injectable()\nexport class PreferenceTransaction extends Transaction<[string, string[], unknown], boolean> {\n    reference: IReference<MonacoEditorModel> | undefined;\n    @inject(PreferenceContext) protected readonly context: PreferenceContext;\n    @inject(PreferenceTransactionPreludeProvider) protected readonly prelude?: PreferenceTransactionPreludeProvider;\n    @inject(MonacoTextModelService) protected readonly textModelService: MonacoTextModelService;\n    @inject(MonacoJSONCEditor) protected readonly jsoncEditor: MonacoJSONCEditor;\n    @inject(MessageService) protected readonly messageService: MessageService;\n    @inject(EditorManager) protected readonly editorManager: EditorManager;\n\n    protected override async doInit(): Promise<void> {\n        this.waitFor(this.prelude?.());\n        await super.doInit();\n    }\n\n    protected async setUp(): Promise<boolean> {\n        const reference = await this.textModelService.createModelReference(this.context.getConfigUri()!);\n        if (this._open) {\n            this.reference = reference;\n        } else {\n            reference.dispose();\n            return false;\n        }\n        if (reference.object.dirty) {\n            const shouldContinue = await this.handleDirtyEditor();\n            if (!shouldContinue) {\n                this.dispose();\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @returns whether the setting operation in progress, and any others started in the meantime, should continue.\n     */\n    protected async handleDirtyEditor(): Promise<boolean> {\n        const saveAndRetry = nls.localizeByDefault('Save and Retry');\n        const open = nls.localizeByDefault('Open File');\n        const msg = await this.messageService.error(\n            // eslint-disable-next-line @theia/localization-check\n            nls.localizeByDefault('Unable to write into {0} settings because the file has unsaved changes. Please save the {0} settings file first and then try again.',\n                nls.localizeByDefault(PreferenceScope[this.context.getScope()].toLocaleLowerCase())\n            ),\n            saveAndRetry, open);\n\n        if (this.reference?.object) {\n            if (msg === open) {\n                this.editorManager.open(new URI(this.reference.object.uri));\n            } else if (msg === saveAndRetry) {\n                await this.reference.object.save();\n                return true;\n            }\n        }\n        return false;\n    }\n\n    protected async act(key: string, path: string[], value: unknown): Promise<boolean> {\n        const model = this.reference?.object;\n        try {\n            if (model) {\n                await this.jsoncEditor.setValue(model, path, value);\n                return this.result;\n            }\n            return false;\n        } catch (e) {\n            const message = `Failed to update the value of '${key}' in '${this.context.getConfigUri()}'.`;\n            this.messageService.error(`${message} Please check if it is corrupted.`);\n            console.error(`${message}`, e);\n            return false;\n        }\n    }\n\n    protected async tearDown(): Promise<boolean> {\n        try {\n            const model = this.reference?.object;\n            if (model) {\n                if (this.status.state === 'resolved' && await this.status.promise) {\n                    await model.save();\n                    return true;\n                }\n            }\n            return false;\n        } finally {\n            this.reference?.dispose();\n            this.reference = undefined;\n        }\n    }\n}\n\nexport interface PreferenceTransactionFactory {\n    (context: PreferenceContext, waitFor?: Promise<unknown>): PreferenceTransaction;\n}\nexport const PreferenceTransactionFactory = Symbol('PreferenceTransactionFactory');\n\nexport const preferenceTransactionFactoryCreator: interfaces.FactoryCreator<PreferenceTransaction> = ({ container }) =>\n    (context: PreferenceContext, waitFor?: Promise<unknown>) => {\n        const child = container.createChild();\n        child.bind(PreferenceContext).toConstantValue(context);\n        child.bind(PreferenceTransactionPreludeProvider).toConstantValue(() => waitFor);\n        return child.get(PreferenceTransaction);\n    };\n","// *****************************************************************************\n// Copyright (C) 2019 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { AbstractResourcePreferenceProvider } from './abstract-resource-preference-provider';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\nimport { PreferenceConfigurations } from '@theia/core/lib/browser/preferences/preference-configurations';\n\nexport const SectionPreferenceProviderUri = Symbol('SectionPreferenceProviderUri');\nexport const SectionPreferenceProviderSection = Symbol('SectionPreferenceProviderSection');\n\n/**\n * This class encapsulates the logic of using separate files for some workspace configuration like 'launch.json' or 'tasks.json'.\n * Anything that is not a contributed section will be in the main config file.\n */\n@injectable()\nexport abstract class SectionPreferenceProvider extends AbstractResourcePreferenceProvider {\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n    @inject(SectionPreferenceProviderUri)\n    protected readonly uri: URI;\n    @inject(SectionPreferenceProviderSection)\n    protected readonly section: string;\n    @inject(PreferenceConfigurations)\n    protected readonly preferenceConfigurations: PreferenceConfigurations;\n\n    private _isSection?: boolean;\n\n    private get isSection(): boolean {\n        if (typeof this._isSection === 'undefined') {\n            this._isSection = this.preferenceConfigurations.isSectionName(this.section);\n        }\n        return this._isSection;\n    }\n\n    protected getUri(): URI {\n        return this.uri;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected override parse(content: string): any {\n        const prefs = super.parse(content);\n        if (this.isSection) {\n            if (prefs === undefined) {\n                return undefined;\n            }\n            const result: { [k: string]: unknown } = {\n\n            };\n            result[this.section] = { ...prefs };\n            return result;\n        } else {\n            return prefs;\n        }\n    }\n\n    protected override getPath(preferenceName: string): string[] | undefined {\n        if (!this.isSection) {\n            return super.getPath(preferenceName);\n        }\n        if (preferenceName === this.section) {\n            return [];\n        }\n        if (preferenceName.startsWith(`${this.section}.`)) {\n            return [preferenceName.slice(this.section.length + 1)];\n        }\n        return undefined;\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2019 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { inject, injectable, postConstruct } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceProvider, PreferenceResolveResult } from '@theia/core/lib/browser/preferences/preference-provider';\nimport { PreferenceConfigurations } from '@theia/core/lib/browser/preferences/preference-configurations';\nimport { UserStorageUri } from '@theia/userstorage/lib/browser';\nimport { UserPreferenceProvider, UserPreferenceProviderFactory } from './user-preference-provider';\n\n/**\n * Binds together preference section prefs providers for user-level preferences.\n */\n@injectable()\nexport class UserConfigsPreferenceProvider extends PreferenceProvider {\n\n    @inject(UserPreferenceProviderFactory)\n    protected readonly providerFactory: UserPreferenceProviderFactory;\n\n    @inject(PreferenceConfigurations)\n    protected readonly configurations: PreferenceConfigurations;\n\n    protected readonly providers = new Map<string, UserPreferenceProvider>();\n\n    @postConstruct()\n    protected init(): void {\n        this.doInit();\n    }\n\n    protected async doInit(): Promise<void> {\n        this.createProviders();\n\n        const readyPromises: Promise<void>[] = [];\n        for (const provider of this.providers.values()) {\n            readyPromises.push(provider.ready.catch(e => console.error(e)));\n        }\n        Promise.all(readyPromises).then(() => this._ready.resolve());\n    }\n\n    protected createProviders(): void {\n        for (const configName of [...this.configurations.getSectionNames(), this.configurations.getConfigName()]) {\n            const sectionUri = UserStorageUri.resolve(configName + '.json');\n            const sectionKey = sectionUri.toString();\n            if (!this.providers.has(sectionKey)) {\n                const provider = this.createProvider(sectionUri, configName);\n                this.providers.set(sectionKey, provider);\n            }\n        }\n    }\n\n    override getConfigUri(resourceUri?: string, sectionName: string = this.configurations.getConfigName()): URI | undefined {\n        for (const provider of this.providers.values()) {\n            const configUri = provider.getConfigUri(resourceUri);\n            if (configUri && this.configurations.getName(configUri) === sectionName) {\n                return configUri;\n            }\n        }\n        return undefined;\n    }\n\n    override resolve<T>(preferenceName: string, resourceUri?: string): PreferenceResolveResult<T> {\n        const result: PreferenceResolveResult<T> = {};\n        for (const provider of this.providers.values()) {\n            const { value, configUri } = provider.resolve<T>(preferenceName, resourceUri);\n            if (configUri && value !== undefined) {\n                result.configUri = configUri;\n                result.value = PreferenceProvider.merge(result.value as any, value as any) as any;\n            }\n        }\n        return result;\n    }\n\n    getPreferences(resourceUri?: string): { [p: string]: any } {\n        let result = {};\n        for (const provider of this.providers.values()) {\n            const preferences = provider.getPreferences();\n            result = PreferenceProvider.merge(result, preferences) as any;\n        }\n        return result;\n    }\n\n    async setPreference(preferenceName: string, value: any, resourceUri?: string): Promise<boolean> {\n        const sectionName = preferenceName.split('.', 1)[0];\n        const defaultConfigName = this.configurations.getConfigName();\n        const configName = this.configurations.isSectionName(sectionName) ? sectionName : defaultConfigName;\n\n        const setWithConfigName = async (name: string): Promise<boolean> => {\n            for (const provider of this.providers.values()) {\n                if (this.configurations.getName(provider.getConfigUri()) === name) {\n                    if (await provider.setPreference(preferenceName, value, resourceUri)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        if (await setWithConfigName(configName)) { // Try in the section we believe it belongs in.\n            return true;\n        } else if (configName !== defaultConfigName) { // Fall back to `settings.json` if that fails.\n            return setWithConfigName(defaultConfigName);\n        }\n        return false;\n    }\n\n    protected createProvider(uri: URI, sectionName: string): UserPreferenceProvider {\n        const provider = this.providerFactory(uri, sectionName);\n        this.toDispose.push(provider);\n        this.toDispose.push(provider.onDidPreferencesChanged(change => this.onDidPreferencesChangedEmitter.fire(change)));\n        return provider;\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2018 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceScope } from '@theia/core/lib/browser';\nimport { SectionPreferenceProvider } from './section-preference-provider';\n\nexport const UserPreferenceProviderFactory = Symbol('UserPreferenceProviderFactory');\nexport interface UserPreferenceProviderFactory {\n    (uri: URI, section: string): UserPreferenceProvider;\n};\n\n/**\n * A @SectionPreferenceProvider that targets the user-level settings\n */\n@injectable()\nexport class UserPreferenceProvider extends SectionPreferenceProvider {\n    getScope(): PreferenceScope {\n        return PreferenceScope.User;\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2019 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceScope } from '@theia/core/lib/browser/preferences';\nimport { WorkspaceService, WorkspaceData } from '@theia/workspace/lib/browser/workspace-service';\nimport { AbstractResourcePreferenceProvider } from './abstract-resource-preference-provider';\n\n@injectable()\nexport class WorkspaceFilePreferenceProviderOptions {\n    workspaceUri: URI;\n}\n\nexport const WorkspaceFilePreferenceProviderFactory = Symbol('WorkspaceFilePreferenceProviderFactory');\nexport type WorkspaceFilePreferenceProviderFactory = (options: WorkspaceFilePreferenceProviderOptions) => WorkspaceFilePreferenceProvider;\n\n@injectable()\nexport class WorkspaceFilePreferenceProvider extends AbstractResourcePreferenceProvider {\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(WorkspaceFilePreferenceProviderOptions)\n    protected readonly options: WorkspaceFilePreferenceProviderOptions;\n\n    protected sectionsInsideSettings = new Set<string>();\n\n    protected getUri(): URI {\n        return this.options.workspaceUri;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected override parse(content: string): any {\n        const data = super.parse(content);\n        if (WorkspaceData.is(data)) {\n            const settings = { ...data.settings };\n            for (const key of this.configurations.getSectionNames().filter(name => name !== 'settings')) {\n                // If the user has written configuration inside the \"settings\" object, we will respect that.\n                if (settings[key]) {\n                    this.sectionsInsideSettings.add(key);\n                }\n                // Favor sections outside the \"settings\" object to agree with VSCode behavior\n                if (data[key]) {\n                    settings[key] = data[key];\n                    this.sectionsInsideSettings.delete(key);\n                }\n            }\n            return settings;\n        }\n        return {};\n    }\n\n    protected override getPath(preferenceName: string): string[] {\n        const firstSegment = preferenceName.split('.', 1)[0];\n        const remainder = preferenceName.slice(firstSegment.length + 1);\n        if (this.belongsInSection(firstSegment, remainder)) {\n            // Default to writing sections outside the \"settings\" object.\n            const path = [firstSegment];\n            if (remainder) {\n                path.push(remainder);\n            }\n            // If the user has already written this section inside the \"settings\" object, modify it there.\n            if (this.sectionsInsideSettings.has(firstSegment)) {\n                path.unshift('settings');\n            }\n            return path;\n        }\n        return ['settings'].concat(super.getPath(preferenceName) ?? []);\n    }\n\n    /**\n     * @returns `true` if `firstSegment` is a section name (e.g. `tasks`, `launch`)\n     */\n    protected belongsInSection(firstSegment: string, remainder: string): boolean {\n        return this.configurations.isSectionName(firstSegment);\n    }\n\n    getScope(): PreferenceScope {\n        return PreferenceScope.Workspace;\n    }\n\n    override getDomain(): string[] {\n        // workspace file is treated as part of the workspace\n        return this.workspaceService.tryGetRoots().map(r => r.resource.toString()).concat([this.options.workspaceUri.toString()]);\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2018 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { inject, injectable, postConstruct, named } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { DisposableCollection } from '@theia/core/lib/common/disposable';\nimport { PreferenceScope, PreferenceProvider } from '@theia/core/lib/browser/preferences';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\nimport { WorkspaceFilePreferenceProviderFactory, WorkspaceFilePreferenceProvider } from './workspace-file-preference-provider';\n\n@injectable()\nexport class WorkspacePreferenceProvider extends PreferenceProvider {\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(WorkspaceFilePreferenceProviderFactory)\n    protected readonly workspaceFileProviderFactory: WorkspaceFilePreferenceProviderFactory;\n\n    @inject(PreferenceProvider) @named(PreferenceScope.Folder)\n    protected readonly folderPreferenceProvider: PreferenceProvider;\n\n    protected readonly toDisposeOnEnsureDelegateUpToDate = new DisposableCollection();\n\n    @postConstruct()\n    protected init(): void {\n        this.workspaceService.ready.then(() => {\n            // If there is no workspace after the workspace service is initialized, then no more work is needed for this provider to be ready.\n            // If there is a workspace, then we wait for the new delegate to be ready before declaring this provider ready.\n            if (!this.workspaceService.workspace) {\n                this._ready.resolve();\n            }\n        });\n        this.workspaceService.onWorkspaceLocationChanged(() => this.ensureDelegateUpToDate());\n        this.workspaceService.onWorkspaceChanged(() => this.ensureDelegateUpToDate());\n    }\n\n    override getConfigUri(resourceUri: string | undefined = this.ensureResourceUri(), sectionName?: string): URI | undefined {\n        return this.delegate?.getConfigUri(resourceUri, sectionName);\n    }\n\n    override getContainingConfigUri(resourceUri: string | undefined = this.ensureResourceUri(), sectionName?: string): URI | undefined {\n        return this.delegate?.getContainingConfigUri?.(resourceUri, sectionName);\n    }\n\n    protected _delegate: PreferenceProvider | undefined;\n    protected get delegate(): PreferenceProvider | undefined {\n        return this._delegate;\n    }\n\n    protected ensureDelegateUpToDate(): void {\n        const delegate = this.createDelegate();\n        if (this._delegate !== delegate) {\n            this.toDisposeOnEnsureDelegateUpToDate.dispose();\n            this.toDispose.push(this.toDisposeOnEnsureDelegateUpToDate);\n\n            this._delegate = delegate;\n\n            if (delegate) {\n                // If this provider has not yet declared itself ready, it should do so when the new delegate is ready.\n                delegate.ready.then(() => this._ready.resolve(), () => { });\n            }\n\n            if (delegate instanceof WorkspaceFilePreferenceProvider) {\n                this.toDisposeOnEnsureDelegateUpToDate.pushAll([\n                    delegate,\n                    delegate.onDidPreferencesChanged(changes => this.onDidPreferencesChangedEmitter.fire(changes))\n                ]);\n            }\n        }\n    }\n\n    protected createDelegate(): PreferenceProvider | undefined {\n        const workspace = this.workspaceService.workspace;\n        if (!workspace) {\n            return undefined;\n        }\n        if (!this.workspaceService.isMultiRootWorkspaceOpened) {\n            return this.folderPreferenceProvider;\n        }\n        if (this._delegate instanceof WorkspaceFilePreferenceProvider && this._delegate.getConfigUri().isEqual(workspace.resource)) {\n            return this._delegate;\n        }\n        return this.workspaceFileProviderFactory({\n            workspaceUri: workspace.resource\n        });\n    }\n\n    override get<T>(preferenceName: string, resourceUri: string | undefined = this.ensureResourceUri()): T | undefined {\n        const delegate = this.delegate;\n        return delegate ? delegate.get<T>(preferenceName, resourceUri) : undefined;\n    }\n\n    override resolve<T>(preferenceName: string, resourceUri: string | undefined = this.ensureResourceUri()): { value?: T, configUri?: URI } {\n        const delegate = this.delegate;\n        return delegate ? delegate.resolve<T>(preferenceName, resourceUri) : {};\n    }\n\n    getPreferences(resourceUri: string | undefined = this.ensureResourceUri()): { [p: string]: any } {\n        const delegate = this.delegate;\n        return delegate ? delegate.getPreferences(resourceUri) : {};\n    }\n\n    async setPreference(preferenceName: string, value: any, resourceUri: string | undefined = this.ensureResourceUri()): Promise<boolean> {\n        const delegate = this.delegate;\n        if (delegate) {\n            return delegate.setPreference(preferenceName, value, resourceUri);\n        }\n        return false;\n    }\n\n    protected ensureResourceUri(): string | undefined {\n        if (this.workspaceService.workspace && !this.workspaceService.isMultiRootWorkspaceOpened) {\n            return this.workspaceService.workspace.resource.toString();\n        }\n        return undefined;\n    }\n\n}\n"],"names":[],"sourceRoot":""}