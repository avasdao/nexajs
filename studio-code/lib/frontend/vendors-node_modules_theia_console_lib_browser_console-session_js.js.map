{"version":3,"file":"vendors-node_modules_theia_console_lib_browser_console-session_js.js","mappings":"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","sources":["webpack:///./node_modules/@theia/console/src/browser/console-session.ts?","webpack:///./node_modules/@theia/core/src/browser/source-tree/index.ts?","webpack:///./node_modules/@theia/core/src/browser/source-tree/source-tree-widget.tsx?","webpack:///./node_modules/@theia/core/src/browser/source-tree/source-tree.ts?","webpack:///./node_modules/@theia/core/src/browser/source-tree/tree-source.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2018 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable } from '@theia/core/shared/inversify';\nimport { MaybePromise } from '@theia/core/lib/common/types';\nimport { TreeSource, TreeElement, CompositeTreeElement } from '@theia/core/lib/browser/source-tree';\nimport { Emitter } from '@theia/core/lib/common/event';\nimport { Severity } from '@theia/core/lib/common/severity';\n\nexport interface ConsoleItem extends TreeElement {\n    readonly severity?: Severity;\n}\nexport namespace ConsoleItem {\n    export const errorClassName = 'theia-console-error';\n    export const warningClassName = 'theia-console-warning';\n    export const infoClassName = 'theia-console-info';\n    export const logClassName = 'theia-console-log';\n}\n\nexport interface CompositeConsoleItem extends ConsoleItem, CompositeTreeElement {\n    getElements(): MaybePromise<IterableIterator<ConsoleItem>>\n}\n\n@injectable()\nexport abstract class ConsoleSession extends TreeSource {\n    protected selectedSeverity?: Severity;\n    protected readonly selectionEmitter: Emitter<void> = new Emitter<void>();\n    readonly onSelectionChange = this.selectionEmitter.event;\n    override id: string;\n\n    get severity(): Severity | undefined {\n        return this.selectedSeverity;\n    }\n\n    set severity(severity: Severity | undefined) {\n        if (severity === this.selectedSeverity) {\n            return;\n        }\n\n        this.selectedSeverity = severity;\n        this.selectionEmitter.fire(undefined);\n        this.fireDidChange();\n    }\n\n    abstract override getElements(): MaybePromise<IterableIterator<ConsoleItem>>;\n    abstract execute(value: string): MaybePromise<void>;\n    abstract clear(): MaybePromise<void>;\n}\n","// *****************************************************************************\n// Copyright (C) 2018 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nexport * from './tree-source';\nexport * from './source-tree';\nexport * from './source-tree-widget';\n","// *****************************************************************************\n// Copyright (C) 2018 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport * as React from 'react';\nimport { injectable, postConstruct, interfaces, Container } from 'inversify';\nimport { DisposableCollection } from '../../common/disposable';\nimport { TreeWidget, TreeNode, createTreeContainer, TreeProps, TreeModel, TREE_NODE_SEGMENT_GROW_CLASS } from '../tree';\nimport { TreeSource, TreeElement } from './tree-source';\nimport { SourceTree, TreeElementNode, TreeSourceNode } from './source-tree';\n\n@injectable()\nexport class SourceTreeWidget extends TreeWidget {\n\n    static createContainer(parent: interfaces.Container, props?: Partial<TreeProps>): Container {\n        const child = createTreeContainer(parent, {\n            props,\n            tree: SourceTree,\n            widget: SourceTreeWidget,\n        });\n\n        return child;\n    }\n\n    @postConstruct()\n    protected override init(): void {\n        super.init();\n        this.addClass('theia-source-tree');\n        this.toDispose.push(this.model.onOpenNode(node => {\n            if (TreeElementNode.is(node) && node.element.open) {\n                node.element.open();\n            }\n        }));\n    }\n\n    protected readonly toDisposeOnSource = new DisposableCollection();\n    get source(): TreeSource | undefined {\n        const root = this.model.root;\n        return TreeSourceNode.is(root) ? root.source : undefined;\n    }\n    set source(source: TreeSource | undefined) {\n        if (this.source === source) {\n            return;\n        }\n        this.toDisposeOnSource.dispose();\n        this.toDispose.push(this.toDisposeOnSource);\n        this.model.root = TreeSourceNode.to(source);\n        if (source) {\n            this.toDisposeOnSource.push(source.onDidChange(() => this.model.refresh()));\n        }\n    }\n\n    get selectedElement(): TreeElement | undefined {\n        const node = this.model.selectedNodes[0];\n        return TreeElementNode.is(node) && node.element || undefined;\n    }\n\n    protected override renderTree(model: TreeModel): React.ReactNode {\n        if (TreeSourceNode.is(model.root) && model.root.children.length === 0) {\n            const { placeholder } = model.root.source;\n            if (placeholder) {\n                return <div className='theia-tree-source-node-placeholder noselect'>{placeholder}</div>;\n            }\n        }\n        return super.renderTree(model);\n\n    }\n\n    protected override renderCaption(node: TreeNode): React.ReactNode {\n        if (TreeElementNode.is(node)) {\n            const classNames = this.createTreeElementNodeClassNames(node);\n            return <div className={classNames.join(' ')}>{node.element.render(this)}</div>;\n        }\n        return undefined;\n    }\n    protected createTreeElementNodeClassNames(node: TreeElementNode): string[] {\n        return [TREE_NODE_SEGMENT_GROW_CLASS];\n    }\n\n    override storeState(): object {\n        // no-op\n        return {};\n    }\n    protected superStoreState(): object {\n        return super.storeState();\n    }\n    override restoreState(state: object): void {\n        // no-op\n    }\n    protected superRestoreState(state: object): void {\n        super.restoreState(state);\n        return;\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2018 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { injectable } from 'inversify';\nimport { MaybePromise } from '../../common/types';\nimport { TreeImpl, CompositeTreeNode, TreeNode, SelectableTreeNode, ExpandableTreeNode } from '../tree';\nimport { TreeElement, CompositeTreeElement, TreeSource } from './tree-source';\n\n@injectable()\nexport class SourceTree extends TreeImpl {\n\n    override async resolveChildren(parent: TreeElementNodeParent): Promise<TreeNode[]> {\n        const elements = await this.resolveElements(parent);\n        const nodes: TreeNode[] = [];\n        let index = 0;\n        for (const element of elements) {\n            if (element.visible !== false) {\n                nodes.push(this.toNode(element, index++, parent));\n            }\n        }\n        return nodes;\n    }\n\n    protected resolveElements(parent: TreeElementNodeParent): MaybePromise<IterableIterator<TreeElement>> {\n        if (TreeSourceNode.is(parent)) {\n            return parent.source.getElements();\n        }\n        return parent.element.getElements();\n    }\n\n    protected toNode(element: TreeElement, index: number, parent: TreeElementNodeParent): TreeElementNode {\n        const id = element.id ? String(element.id) : (parent.id + ':' + index);\n        const name = id;\n        const existing = this.getNode(id);\n        const updated = existing && <TreeElementNode>Object.assign(existing, { element, parent });\n        if (CompositeTreeElement.hasElements(element)) {\n            if (updated) {\n                if (!ExpandableTreeNode.is(updated)) {\n                    Object.assign(updated, { expanded: false });\n                }\n                if (!CompositeTreeNode.is(updated)) {\n                    Object.assign(updated, { children: [] });\n                }\n                return updated;\n            }\n            return {\n                element,\n                parent,\n                id,\n                name,\n                selected: false,\n                expanded: false,\n                children: []\n            } as TreeElementNode;\n        }\n        if (CompositeTreeElementNode.is(updated)) {\n            delete (updated as any).expanded;\n            delete (updated as any).children;\n        }\n        if (updated) {\n            if (ExpandableTreeNode.is(updated)) {\n                delete (updated as any).expanded;\n            }\n            if (CompositeTreeNode.is(updated)) {\n                delete (updated as any).children;\n            }\n            return updated;\n        }\n        return {\n            element,\n            parent,\n            id,\n            name,\n            selected: false\n        };\n    }\n\n}\n\nexport type TreeElementNodeParent = CompositeTreeElementNode | TreeSourceNode;\n\nexport interface TreeElementNode extends TreeNode, SelectableTreeNode {\n    element: TreeElement\n    parent: TreeElementNodeParent\n}\nexport namespace TreeElementNode {\n    export function is(node: TreeNode | undefined): node is TreeElementNode {\n        return SelectableTreeNode.is(node) && 'element' in node;\n    }\n}\n\nexport interface CompositeTreeElementNode extends TreeElementNode, CompositeTreeNode, ExpandableTreeNode {\n    element: CompositeTreeElement\n    children: TreeElementNode[]\n    parent: TreeElementNodeParent\n}\nexport namespace CompositeTreeElementNode {\n    export function is(node: TreeNode | undefined): node is CompositeTreeElementNode {\n        return TreeElementNode.is(node) && CompositeTreeNode.is(node) && ExpandableTreeNode.is(node) && !!node.visible;\n    }\n}\n\nexport interface TreeSourceNode extends CompositeTreeNode, SelectableTreeNode {\n    visible: false\n    children: TreeElementNode[]\n    parent: undefined\n    source: TreeSource\n}\nexport namespace TreeSourceNode {\n    export function is(node: TreeNode | undefined): node is TreeSourceNode {\n        return CompositeTreeNode.is(node) && !node.visible && 'source' in node;\n    }\n    export function to(source: undefined): undefined;\n    export function to(source: TreeSource): TreeSourceNode;\n    export function to(source: TreeSource | undefined): TreeSourceNode | undefined;\n    export function to(source: TreeSource | undefined): TreeSourceNode | undefined {\n        if (!source) {\n            return source;\n        }\n        const id = source.id || '__source__';\n        return {\n            id,\n            name: id,\n            visible: false,\n            children: [],\n            source,\n            parent: undefined,\n            selected: false\n        };\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2018 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { ReactNode } from 'react';\nimport { injectable, unmanaged } from 'inversify';\nimport { Disposable, DisposableCollection, Emitter, Event, isObject, MaybePromise } from '../../common';\nimport { TreeWidget } from '../tree';\n\nexport interface TreeElement {\n    /** default: parent id + position among siblings */\n    readonly id?: number | string | undefined\n    /** default: true */\n    readonly visible?: boolean\n    render(host: TreeWidget): ReactNode\n    open?(): MaybePromise<any>\n}\n\nexport interface CompositeTreeElement extends TreeElement {\n    /** default: true */\n    readonly hasElements?: boolean\n    getElements(): MaybePromise<IterableIterator<TreeElement>>\n}\nexport namespace CompositeTreeElement {\n    export function is(element: unknown): element is CompositeTreeElement {\n        return isObject(element) && 'getElements' in element;\n    }\n    export function hasElements(element: unknown): element is CompositeTreeElement {\n        return is(element) && element.hasElements !== false;\n    }\n}\n\n@injectable()\nexport abstract class TreeSource implements Disposable {\n    protected readonly onDidChangeEmitter = new Emitter<void>();\n    readonly onDidChange: Event<void> = this.onDidChangeEmitter.event;\n    protected fireDidChange(): void {\n        this.onDidChangeEmitter.fire(undefined);\n    }\n\n    readonly id: string | undefined;\n    readonly placeholder: string | undefined;\n\n    constructor(@unmanaged() options: TreeSourceOptions = {}) {\n        this.id = options.id;\n        this.placeholder = options.placeholder;\n    }\n\n    protected readonly toDispose = new DisposableCollection(this.onDidChangeEmitter);\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    abstract getElements(): MaybePromise<IterableIterator<TreeElement>>;\n}\nexport interface TreeSourceOptions {\n    id?: string\n    placeholder?: string\n}\n"],"names":[],"sourceRoot":""}