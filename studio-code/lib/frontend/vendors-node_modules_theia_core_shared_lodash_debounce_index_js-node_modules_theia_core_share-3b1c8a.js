(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_theia_core_shared_lodash_debounce_index_js-node_modules_theia_core_share-3b1c8a"],{

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/@theia/debug/src/browser/style/index.css":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/@theia/debug/src/browser/style/index.css ***!
  \*****************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/

.theia-debug-container,
.theia-session-container {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.theia-debug-container .theia-select {
  margin-left: var(--theia-ui-padding);
}

.theia-source-breakpoint,
.theia-debug-session,
.theia-debug-thread,
.theia-debug-stack-frame {
  display: flex;
  align-items: center;
}

.theia-source-breakpoint > span,
.theia-debug-session > span,
.theia-debug-thread > span,
.theia-debug-stack-frame > span,
.theia-debug-stack-frame .file > span {
  margin-left: calc(var(--theia-ui-padding) / 2);
}

.theia-debug-session .label,
.theia-debug-thread .label,
.theia-debug-stack-frame .expression {
  width: 100%;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.theia-source-breakpoint .path {
  font-size: var(--theia-ui-font-size0);
}

.theia-source-breakpoint .line-info {
  overflow: hidden;
  text-overflow: ellipsis;
  width: 100%;
  white-space: nowrap;
}

.theia-source-breakpoint .line,
.theia-debug-stack-frame .line {
  background: var(--theia-descriptionForeground);
  color: var(--theia-editor-background);
  padding: calc(var(--theia-ui-padding) / 3);
  font-size: var(--theia-ui-font-size0);
  line-height: calc(var(--theia-private-horizontal-tab-height) / 2);
  border-radius: 2px;
}

.theia-debug-session .status,
.theia-debug-thread .status {
  text-transform: uppercase;
  white-space: nowrap;
}

.theia-debug-stack-frame .expression {
  white-space: pre;
}

.theia-debug-stack-frame.label {
  text-align: center;
  font-style: italic;
}

.theia-debug-stack-frame.subtle {
  font-style: italic;
}

.theia-debug-stack-frame .file > span {
  white-space: nowrap;
}

.theia-load-more-frames {
  text-align: center;
  font-style: italic;
  white-space: nowrap;
  display: flex;
  flex-direction: column;
}

/** Miscellaneous */

.debug-toolbar {
  display: flex;
  align-items: center;
  padding-top: calc(var(--theia-ui-padding) * 2);
  padding-right: calc(var(--theia-ui-padding) * 3);
  padding-bottom: var(--theia-ui-padding);
  padding-left: calc(var(--theia-ui-padding) * 2);
}

.theia-session-container > .debug-toolbar {
  padding-top: var(--theia-ui-padding);
  padding-bottom: var(--theia-ui-padding);
  border-bottom: 1px solid var(--theia-sideBarSectionHeader-border);
}

.debug-toolbar .theia-select-component {
  width: 100%;
  min-width: 40px;
  margin: 0px 4px;
}

.debug-toolbar .debug-action {
  opacity: 0.9;
  cursor: pointer;
  pointer-events: all;
  padding-left: var(--theia-ui-padding);
  padding-right: var(--theia-ui-padding);
  min-width: var(--theia-icon-size);
  min-height: var(--theia-icon-size);
}

.debug-toolbar .debug-action.theia-mod-disabled {
  opacity: 0.5 !important;
  user-select: none;
  pointer-events: none;
}

.debug-toolbar .debug-action:not(.theia-mod-disabled):hover {
  opacity: 1;
}

.debug-toolbar .debug-action > div {
  font-family: var(--theia-ui-font-family);
  font-size: var(--theia-ui-font-size0);
  display: flex;
  align-items: center;
  align-self: center;
  justify-content: center;
  text-align: center;
  min-height: inherit;
}

/** Console */

#debug-console .theia-console-info {
  color: var(--theia-debugConsole-infoForeground) !important;
}
#debug-console .theia-console-warning {
  color: var(--theia-debugConsole-warningForeground) !important;
}
#debug-console .theia-console-error {
  color: var(--theia-debugConsole-errorForeground) !important;
}

.theia-debug-console-unavailable {
  font-style: italic;
}

.theia-debug-console-expression {
  display: flex;
  flex-direction: column;
  white-space: pre-wrap;
}

.theia-debug-console-variable {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  color: var(--theia-variable-value-color);
}

.theia-debug-hover-title.number,
.theia-debug-console-variable.number {
  color: var(--theia-variable-number-variable-color);
}

.theia-debug-hover-title.boolean,
.theia-debug-console-variable.boolean {
  color: var(--theia-variable-boolean-variable-color);
}

.theia-debug-hover-title.string,
.theia-debug-console-variable.string {
  color: var(--theia-variable-string-variable-color);
}

.theia-debug-console-variable .name {
  color: var(--theia-variable-name-color);
}

.theia-TreeNode:not(:hover) .theia-debug-console-variable .action-label {
  visibility: hidden;
}

.theia-debug-console-variable .action-label {
  /* Vertically center the button in the tree node */
  margin: auto;
}

.theia-debug-console-variable .watch-error {
  font-style: italic;
  color: var(--theia-debugConsole-errorForeground);
}

.theia-debug-watch-expression {
  display: flex;
}

/** Editor **/

.theia-debug-breakpoint-icon {
  font-size: 19px !important;
  width: 19px;
  height: 19px;
  min-width: 19px;
  margin-left: 0px !important;
}

.codicon-debug-hint {
  cursor: pointer;
}

.codicon-debug-breakpoint,
.codicon-debug-breakpoint-conditional,
.codicon-debug-breakpoint-log,
.codicon-debug-breakpoint-function,
.codicon-debug-breakpoint-data,
.codicon-debug-breakpoint-unsupported,
.codicon-debug-hint:not([class*="codicon-debug-breakpoint"]):not(
    [class*="codicon-debug-stackframe"]
  ),
.codicon-debug-breakpoint.codicon-debug-stackframe-focused::after,
.codicon-debug-breakpoint.codicon-debug-stackframe::after {
  color: var(--theia-debugIcon-breakpointForeground) !important;
}

.codicon[class*="-disabled"] {
  color: var(--theia-debugIcon-breakpointDisabledForeground) !important;
}

.codicon[class*="-unverified"] {
  color: var(--theia-debugIcon-breakpointUnverifiedForeground) !important;
}

.codicon-debug-stackframe,
.monaco-editor .theia-debug-top-stack-frame-column::before {
  color: var(
    --theia-debugIcon-breakpointCurrentStackframeForeground
  ) !important;
}

.codicon-debug-stackframe-focused {
  color: var(--theia-debugIcon-breakpointStackframeForeground) !important;
}

.codicon-debug-breakpoint.codicon-debug-stackframe-focused::after,
.codicon-debug-breakpoint.codicon-debug-stackframe::after {
  content: "\\eb8a";
  position: absolute;
}

.monaco-editor .theia-debug-breakpoint-column::before {
  height: 0.9em;
  display: inline-flex;
  vertical-align: middle;
}

.monaco-editor .theia-debug-top-stack-frame-column::before {
  content: " ";
  width: 0.9em;
  display: inline-flex;
  vertical-align: middle;
  margin-top: -1px; /* TODO @misolori: figure out a way to not use negative margin for alignment */
}

.monaco-editor .theia-debug-top-stack-frame-column {
  display: inline-flex;
  vertical-align: middle;
}

.monaco-editor .theia-debug-top-stack-frame-column::before {
  content: "\\eb8b";
  font: normal normal normal 16px/1 codicon;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  margin-left: 0;
  margin-right: 4px;
}

.codicon-debug-hint:not([class*="codicon-debug-breakpoint"]):not(
    [class*="codicon-debug-stackframe"]
  ) {
  opacity: 0.4 !important;
}

.monaco-editor .view-overlays .theia-debug-top-stack-frame-line {
  background: var(--theia-editor-stackFrameHighlightBackground);
}

.monaco-editor .view-overlays .theia-debug-focused-stack-frame-line {
  background: var(--theia-editor-focusedStackFrameHighlightBackground);
}

/** Toolbars */

.codicon-debug-start {
  color: var(--theia-debugIcon-startForeground) !important;
}
.codicon-debug-pause {
  color: var(--theia-debugIcon-pauseForeground) !important;
}

.codicon-debug-stop {
  color: var(--theia-debugIcon-stopForeground) !important;
}
.codicon-debug-disconnect {
  color: var(--theia-debugIcon-disconnectForeground) !important;
}
.codicon-debug-restart,
.codicon-debug-restart-frame {
  color: var(--theia-debugIcon-restartForeground) !important;
}
.codicon-debug-step-over {
  color: var(--theia-debugIcon-stepOverForeground) !important;
}
.codicon-debug-step-into {
  color: var(--theia-debugIcon-stepIntoForeground) !important;
}
.codicon-debug-step-out {
  color: var(--theia-debugIcon-stepOutForeground) !important;
}
.codicon-debug-continue,
.codicon-debug-reverse-continue {
  color: var(--theia-debugIcon-continueForeground) !important;
}

.codicon-debug-step-back {
  color: var(--theia-debugIcon-stepBackForeground) !important;
}

/** Hover */
.theia-debug-hover {
  display: flex !important;
  flex-direction: column;
  border: 1px solid var(--theia-editorHoverWidget-border);
  background: var(--theia-editorHoverWidget-background);
  color: var(--theia-editorHoverWidget-foreground);
}

.theia-debug-hover.complex-value {
  min-width: 324px;
  min-height: 324px;
  width: 324px;
  height: 324px;
}

.theia-debug-hover .theia-source-tree {
  height: 100%;
  width: 100%;
}

.theia-debug-hover-title {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  padding: var(--theia-ui-padding);
  border-bottom: 1px solid var(--theia-editorHoverWidget-border);
}

.theia-debug-hover-content {
  display: flex;
  flex: 1;
  overflow-y: auto;
}

/** Breakpoint Widget */
.theia-debug-breakpoint-widget {
  display: flex;
}

.theia-debug-breakpoint-select {
  display: flex;
  justify-content: center;
  flex-direction: column;
  padding: 0 10px;
  flex-shrink: 0;
}

.theia-debug-breakpoint-input {
  flex: 1;
  margin-top: var(--theia-ui-padding);
  margin-bottom: var(--theia-ui-padding);
}

/* Status Bar */
.theia-mod-debugging #theia-statusBar {
  background: var(--theia-statusBar-debuggingBackground);
  border-top: var(--theia-border-width) solid
    var(--theia-statusBar-debuggingBorder);
}

.theia-mod-debugging #theia-statusBar .area .element {
  color: var(--theia-statusBar-debuggingForeground);
}

/** Exception Widget */
.monaco-editor
  .zone-widget
  .zone-widget-container.theia-debug-exception-widget {
  color: var(--theia-editor-foreground);
  font-size: var(--theia-code-font-size);
  line-height: var(--theia-code-line-height);
  font-family: var(--theia-code-font-family);
  border-top-color: var(--theia-debugExceptionWidget-border);
  border-bottom-color: var(--theia-debugExceptionWidget-border);
  background-color: var(--theia-debugExceptionWidget-background);
  padding: var(--theia-ui-padding) calc(var(--theia-ui-padding) * 1.5);
  white-space: pre-wrap;
  user-select: text;
  overflow: hidden;
}

.theia-debug-exception-widget .title {
  font-family: var(--theia-ui-font-family);
  font-weight: bold;
}

.theia-debug-exception-widget .stack-trace {
  margin-top: 0.5em;
}

.theia-debug-exception-widget #exception-close {
  cursor: pointer;
  margin-left: 5px;
  vertical-align: middle;
}
`, "",{"version":3,"sources":["webpack://./node_modules/@theia/debug/src/browser/style/index.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;;EAEE,aAAa;EACb,sBAAsB;EACtB,YAAY;AACd;;AAEA;EACE,oCAAoC;AACtC;;AAEA;;;;EAIE,aAAa;EACb,mBAAmB;AACrB;;AAEA;;;;;EAKE,8CAA8C;AAChD;;AAEA;;;EAGE,WAAW;EACX,gBAAgB;EAChB,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,qCAAqC;AACvC;;AAEA;EACE,gBAAgB;EAChB,uBAAuB;EACvB,WAAW;EACX,mBAAmB;AACrB;;AAEA;;EAEE,8CAA8C;EAC9C,qCAAqC;EACrC,0CAA0C;EAC1C,qCAAqC;EACrC,iEAAiE;EACjE,kBAAkB;AACpB;;AAEA;;EAEE,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,mBAAmB;EACnB,aAAa;EACb,sBAAsB;AACxB;;AAEA,mBAAmB;;AAEnB;EACE,aAAa;EACb,mBAAmB;EACnB,8CAA8C;EAC9C,gDAAgD;EAChD,uCAAuC;EACvC,+CAA+C;AACjD;;AAEA;EACE,oCAAoC;EACpC,uCAAuC;EACvC,iEAAiE;AACnE;;AAEA;EACE,WAAW;EACX,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,mBAAmB;EACnB,qCAAqC;EACrC,sCAAsC;EACtC,iCAAiC;EACjC,kCAAkC;AACpC;;AAEA;EACE,uBAAuB;EACvB,iBAAiB;EACjB,oBAAoB;AACtB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,wCAAwC;EACxC,qCAAqC;EACrC,aAAa;EACb,mBAAmB;EACnB,kBAAkB;EAClB,uBAAuB;EACvB,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA,aAAa;;AAEb;EACE,0DAA0D;AAC5D;AACA;EACE,6DAA6D;AAC/D;AACA;EACE,2DAA2D;AAC7D;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,qBAAqB;AACvB;;AAEA;EACE,mBAAmB;EACnB,gBAAgB;EAChB,uBAAuB;EACvB,wCAAwC;AAC1C;;AAEA;;EAEE,kDAAkD;AACpD;;AAEA;;EAEE,mDAAmD;AACrD;;AAEA;;EAEE,kDAAkD;AACpD;;AAEA;EACE,uCAAuC;AACzC;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kDAAkD;EAClD,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,gDAAgD;AAClD;;AAEA;EACE,aAAa;AACf;;AAEA,aAAa;;AAEb;EACE,0BAA0B;EAC1B,WAAW;EACX,YAAY;EACZ,eAAe;EACf,2BAA2B;AAC7B;;AAEA;EACE,eAAe;AACjB;;AAEA;;;;;;;;;;;EAWE,6DAA6D;AAC/D;;AAEA;EACE,qEAAqE;AACvE;;AAEA;EACE,uEAAuE;AACzE;;AAEA;;EAEE;;cAEY;AACd;;AAEA;EACE,uEAAuE;AACzE;;AAEA;;EAEE,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,oBAAoB;EACpB,sBAAsB;AACxB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,oBAAoB;EACpB,sBAAsB;EACtB,gBAAgB,EAAE,8EAA8E;AAClG;;AAEA;EACE,oBAAoB;EACpB,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,yCAAyC;EACzC,oBAAoB;EACpB,mCAAmC;EACnC,kCAAkC;EAClC,cAAc;EACd,iBAAiB;AACnB;;AAEA;;;EAGE,uBAAuB;AACzB;;AAEA;EACE,6DAA6D;AAC/D;;AAEA;EACE,oEAAoE;AACtE;;AAEA,cAAc;;AAEd;EACE,wDAAwD;AAC1D;AACA;EACE,wDAAwD;AAC1D;;AAEA;EACE,uDAAuD;AACzD;AACA;EACE,6DAA6D;AAC/D;AACA;;EAEE,0DAA0D;AAC5D;AACA;EACE,2DAA2D;AAC7D;AACA;EACE,2DAA2D;AAC7D;AACA;EACE,0DAA0D;AAC5D;AACA;;EAEE,2DAA2D;AAC7D;;AAEA;EACE,2DAA2D;AAC7D;;AAEA,WAAW;AACX;EACE,wBAAwB;EACxB,sBAAsB;EACtB,uDAAuD;EACvD,qDAAqD;EACrD,gDAAgD;AAClD;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,uBAAuB;EACvB,gCAAgC;EAChC,8DAA8D;AAChE;;AAEA;EACE,aAAa;EACb,OAAO;EACP,gBAAgB;AAClB;;AAEA,uBAAuB;AACvB;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,sBAAsB;EACtB,eAAe;EACf,cAAc;AAChB;;AAEA;EACE,OAAO;EACP,mCAAmC;EACnC,sCAAsC;AACxC;;AAEA,eAAe;AACf;EACE,sDAAsD;EACtD;0CACwC;AAC1C;;AAEA;EACE,iDAAiD;AACnD;;AAEA,sBAAsB;AACtB;;;EAGE,qCAAqC;EACrC,sCAAsC;EACtC,0CAA0C;EAC1C,0CAA0C;EAC1C,0DAA0D;EAC1D,6DAA6D;EAC7D,8DAA8D;EAC9D,oEAAoE;EACpE,qBAAqB;EACrB,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,wCAAwC;EACxC,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,sBAAsB;AACxB","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.theia-debug-container,\n.theia-session-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.theia-debug-container .theia-select {\n  margin-left: var(--theia-ui-padding);\n}\n\n.theia-source-breakpoint,\n.theia-debug-session,\n.theia-debug-thread,\n.theia-debug-stack-frame {\n  display: flex;\n  align-items: center;\n}\n\n.theia-source-breakpoint > span,\n.theia-debug-session > span,\n.theia-debug-thread > span,\n.theia-debug-stack-frame > span,\n.theia-debug-stack-frame .file > span {\n  margin-left: calc(var(--theia-ui-padding) / 2);\n}\n\n.theia-debug-session .label,\n.theia-debug-thread .label,\n.theia-debug-stack-frame .expression {\n  width: 100%;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n\n.theia-source-breakpoint .path {\n  font-size: var(--theia-ui-font-size0);\n}\n\n.theia-source-breakpoint .line-info {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 100%;\n  white-space: nowrap;\n}\n\n.theia-source-breakpoint .line,\n.theia-debug-stack-frame .line {\n  background: var(--theia-descriptionForeground);\n  color: var(--theia-editor-background);\n  padding: calc(var(--theia-ui-padding) / 3);\n  font-size: var(--theia-ui-font-size0);\n  line-height: calc(var(--theia-private-horizontal-tab-height) / 2);\n  border-radius: 2px;\n}\n\n.theia-debug-session .status,\n.theia-debug-thread .status {\n  text-transform: uppercase;\n  white-space: nowrap;\n}\n\n.theia-debug-stack-frame .expression {\n  white-space: pre;\n}\n\n.theia-debug-stack-frame.label {\n  text-align: center;\n  font-style: italic;\n}\n\n.theia-debug-stack-frame.subtle {\n  font-style: italic;\n}\n\n.theia-debug-stack-frame .file > span {\n  white-space: nowrap;\n}\n\n.theia-load-more-frames {\n  text-align: center;\n  font-style: italic;\n  white-space: nowrap;\n  display: flex;\n  flex-direction: column;\n}\n\n/** Miscellaneous */\n\n.debug-toolbar {\n  display: flex;\n  align-items: center;\n  padding-top: calc(var(--theia-ui-padding) * 2);\n  padding-right: calc(var(--theia-ui-padding) * 3);\n  padding-bottom: var(--theia-ui-padding);\n  padding-left: calc(var(--theia-ui-padding) * 2);\n}\n\n.theia-session-container > .debug-toolbar {\n  padding-top: var(--theia-ui-padding);\n  padding-bottom: var(--theia-ui-padding);\n  border-bottom: 1px solid var(--theia-sideBarSectionHeader-border);\n}\n\n.debug-toolbar .theia-select-component {\n  width: 100%;\n  min-width: 40px;\n  margin: 0px 4px;\n}\n\n.debug-toolbar .debug-action {\n  opacity: 0.9;\n  cursor: pointer;\n  pointer-events: all;\n  padding-left: var(--theia-ui-padding);\n  padding-right: var(--theia-ui-padding);\n  min-width: var(--theia-icon-size);\n  min-height: var(--theia-icon-size);\n}\n\n.debug-toolbar .debug-action.theia-mod-disabled {\n  opacity: 0.5 !important;\n  user-select: none;\n  pointer-events: none;\n}\n\n.debug-toolbar .debug-action:not(.theia-mod-disabled):hover {\n  opacity: 1;\n}\n\n.debug-toolbar .debug-action > div {\n  font-family: var(--theia-ui-font-family);\n  font-size: var(--theia-ui-font-size0);\n  display: flex;\n  align-items: center;\n  align-self: center;\n  justify-content: center;\n  text-align: center;\n  min-height: inherit;\n}\n\n/** Console */\n\n#debug-console .theia-console-info {\n  color: var(--theia-debugConsole-infoForeground) !important;\n}\n#debug-console .theia-console-warning {\n  color: var(--theia-debugConsole-warningForeground) !important;\n}\n#debug-console .theia-console-error {\n  color: var(--theia-debugConsole-errorForeground) !important;\n}\n\n.theia-debug-console-unavailable {\n  font-style: italic;\n}\n\n.theia-debug-console-expression {\n  display: flex;\n  flex-direction: column;\n  white-space: pre-wrap;\n}\n\n.theia-debug-console-variable {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: var(--theia-variable-value-color);\n}\n\n.theia-debug-hover-title.number,\n.theia-debug-console-variable.number {\n  color: var(--theia-variable-number-variable-color);\n}\n\n.theia-debug-hover-title.boolean,\n.theia-debug-console-variable.boolean {\n  color: var(--theia-variable-boolean-variable-color);\n}\n\n.theia-debug-hover-title.string,\n.theia-debug-console-variable.string {\n  color: var(--theia-variable-string-variable-color);\n}\n\n.theia-debug-console-variable .name {\n  color: var(--theia-variable-name-color);\n}\n\n.theia-TreeNode:not(:hover) .theia-debug-console-variable .action-label {\n  visibility: hidden;\n}\n\n.theia-debug-console-variable .action-label {\n  /* Vertically center the button in the tree node */\n  margin: auto;\n}\n\n.theia-debug-console-variable .watch-error {\n  font-style: italic;\n  color: var(--theia-debugConsole-errorForeground);\n}\n\n.theia-debug-watch-expression {\n  display: flex;\n}\n\n/** Editor **/\n\n.theia-debug-breakpoint-icon {\n  font-size: 19px !important;\n  width: 19px;\n  height: 19px;\n  min-width: 19px;\n  margin-left: 0px !important;\n}\n\n.codicon-debug-hint {\n  cursor: pointer;\n}\n\n.codicon-debug-breakpoint,\n.codicon-debug-breakpoint-conditional,\n.codicon-debug-breakpoint-log,\n.codicon-debug-breakpoint-function,\n.codicon-debug-breakpoint-data,\n.codicon-debug-breakpoint-unsupported,\n.codicon-debug-hint:not([class*=\"codicon-debug-breakpoint\"]):not(\n    [class*=\"codicon-debug-stackframe\"]\n  ),\n.codicon-debug-breakpoint.codicon-debug-stackframe-focused::after,\n.codicon-debug-breakpoint.codicon-debug-stackframe::after {\n  color: var(--theia-debugIcon-breakpointForeground) !important;\n}\n\n.codicon[class*=\"-disabled\"] {\n  color: var(--theia-debugIcon-breakpointDisabledForeground) !important;\n}\n\n.codicon[class*=\"-unverified\"] {\n  color: var(--theia-debugIcon-breakpointUnverifiedForeground) !important;\n}\n\n.codicon-debug-stackframe,\n.monaco-editor .theia-debug-top-stack-frame-column::before {\n  color: var(\n    --theia-debugIcon-breakpointCurrentStackframeForeground\n  ) !important;\n}\n\n.codicon-debug-stackframe-focused {\n  color: var(--theia-debugIcon-breakpointStackframeForeground) !important;\n}\n\n.codicon-debug-breakpoint.codicon-debug-stackframe-focused::after,\n.codicon-debug-breakpoint.codicon-debug-stackframe::after {\n  content: \"\\eb8a\";\n  position: absolute;\n}\n\n.monaco-editor .theia-debug-breakpoint-column::before {\n  height: 0.9em;\n  display: inline-flex;\n  vertical-align: middle;\n}\n\n.monaco-editor .theia-debug-top-stack-frame-column::before {\n  content: \" \";\n  width: 0.9em;\n  display: inline-flex;\n  vertical-align: middle;\n  margin-top: -1px; /* TODO @misolori: figure out a way to not use negative margin for alignment */\n}\n\n.monaco-editor .theia-debug-top-stack-frame-column {\n  display: inline-flex;\n  vertical-align: middle;\n}\n\n.monaco-editor .theia-debug-top-stack-frame-column::before {\n  content: \"\\eb8b\";\n  font: normal normal normal 16px/1 codicon;\n  text-rendering: auto;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  margin-left: 0;\n  margin-right: 4px;\n}\n\n.codicon-debug-hint:not([class*=\"codicon-debug-breakpoint\"]):not(\n    [class*=\"codicon-debug-stackframe\"]\n  ) {\n  opacity: 0.4 !important;\n}\n\n.monaco-editor .view-overlays .theia-debug-top-stack-frame-line {\n  background: var(--theia-editor-stackFrameHighlightBackground);\n}\n\n.monaco-editor .view-overlays .theia-debug-focused-stack-frame-line {\n  background: var(--theia-editor-focusedStackFrameHighlightBackground);\n}\n\n/** Toolbars */\n\n.codicon-debug-start {\n  color: var(--theia-debugIcon-startForeground) !important;\n}\n.codicon-debug-pause {\n  color: var(--theia-debugIcon-pauseForeground) !important;\n}\n\n.codicon-debug-stop {\n  color: var(--theia-debugIcon-stopForeground) !important;\n}\n.codicon-debug-disconnect {\n  color: var(--theia-debugIcon-disconnectForeground) !important;\n}\n.codicon-debug-restart,\n.codicon-debug-restart-frame {\n  color: var(--theia-debugIcon-restartForeground) !important;\n}\n.codicon-debug-step-over {\n  color: var(--theia-debugIcon-stepOverForeground) !important;\n}\n.codicon-debug-step-into {\n  color: var(--theia-debugIcon-stepIntoForeground) !important;\n}\n.codicon-debug-step-out {\n  color: var(--theia-debugIcon-stepOutForeground) !important;\n}\n.codicon-debug-continue,\n.codicon-debug-reverse-continue {\n  color: var(--theia-debugIcon-continueForeground) !important;\n}\n\n.codicon-debug-step-back {\n  color: var(--theia-debugIcon-stepBackForeground) !important;\n}\n\n/** Hover */\n.theia-debug-hover {\n  display: flex !important;\n  flex-direction: column;\n  border: 1px solid var(--theia-editorHoverWidget-border);\n  background: var(--theia-editorHoverWidget-background);\n  color: var(--theia-editorHoverWidget-foreground);\n}\n\n.theia-debug-hover.complex-value {\n  min-width: 324px;\n  min-height: 324px;\n  width: 324px;\n  height: 324px;\n}\n\n.theia-debug-hover .theia-source-tree {\n  height: 100%;\n  width: 100%;\n}\n\n.theia-debug-hover-title {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  padding: var(--theia-ui-padding);\n  border-bottom: 1px solid var(--theia-editorHoverWidget-border);\n}\n\n.theia-debug-hover-content {\n  display: flex;\n  flex: 1;\n  overflow-y: auto;\n}\n\n/** Breakpoint Widget */\n.theia-debug-breakpoint-widget {\n  display: flex;\n}\n\n.theia-debug-breakpoint-select {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  padding: 0 10px;\n  flex-shrink: 0;\n}\n\n.theia-debug-breakpoint-input {\n  flex: 1;\n  margin-top: var(--theia-ui-padding);\n  margin-bottom: var(--theia-ui-padding);\n}\n\n/* Status Bar */\n.theia-mod-debugging #theia-statusBar {\n  background: var(--theia-statusBar-debuggingBackground);\n  border-top: var(--theia-border-width) solid\n    var(--theia-statusBar-debuggingBorder);\n}\n\n.theia-mod-debugging #theia-statusBar .area .element {\n  color: var(--theia-statusBar-debuggingForeground);\n}\n\n/** Exception Widget */\n.monaco-editor\n  .zone-widget\n  .zone-widget-container.theia-debug-exception-widget {\n  color: var(--theia-editor-foreground);\n  font-size: var(--theia-code-font-size);\n  line-height: var(--theia-code-line-height);\n  font-family: var(--theia-code-font-family);\n  border-top-color: var(--theia-debugExceptionWidget-border);\n  border-bottom-color: var(--theia-debugExceptionWidget-border);\n  background-color: var(--theia-debugExceptionWidget-background);\n  padding: var(--theia-ui-padding) calc(var(--theia-ui-padding) * 1.5);\n  white-space: pre-wrap;\n  user-select: text;\n  overflow: hidden;\n}\n\n.theia-debug-exception-widget .title {\n  font-family: var(--theia-ui-font-family);\n  font-weight: bold;\n}\n\n.theia-debug-exception-widget .stack-trace {\n  margin-top: 0.5em;\n}\n\n.theia-debug-exception-widget #exception-close {\n  cursor: pointer;\n  margin-left: 5px;\n  vertical-align: middle;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/@theia/core/shared/lodash.debounce/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@theia/core/shared/lodash.debounce/index.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! lodash.debounce */ "./node_modules/lodash.debounce/index.js");


/***/ }),

/***/ "./node_modules/@theia/core/shared/vscode-uri/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@theia/core/shared/vscode-uri/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! vscode-uri */ "./node_modules/vscode-uri/lib/esm/index.js");


/***/ }),

/***/ "./node_modules/@theia/debug/lib/browser/debug-frontend-module.js":
/*!************************************************************************!*\
  !*** ./node_modules/@theia/debug/lib/browser/debug-frontend-module.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(/*! ../../src/browser/style/index.css */ "./node_modules/@theia/debug/src/browser/style/index.css");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const debug_configuration_manager_1 = __webpack_require__(/*! ./debug-configuration-manager */ "./node_modules/@theia/debug/lib/browser/debug-configuration-manager.js");
const debug_widget_1 = __webpack_require__(/*! ./view/debug-widget */ "./node_modules/@theia/debug/lib/browser/view/debug-widget.js");
const debug_service_1 = __webpack_require__(/*! ../common/debug-service */ "./node_modules/@theia/debug/lib/common/debug-service.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "./node_modules/@theia/core/lib/browser/index.js");
const debug_session_manager_1 = __webpack_require__(/*! ./debug-session-manager */ "./node_modules/@theia/debug/lib/browser/debug-session-manager.js");
const debug_resource_1 = __webpack_require__(/*! ./debug-resource */ "./node_modules/@theia/debug/lib/browser/debug-resource.js");
const debug_session_contribution_1 = __webpack_require__(/*! ./debug-session-contribution */ "./node_modules/@theia/debug/lib/browser/debug-session-contribution.js");
const core_1 = __webpack_require__(/*! @theia/core */ "./node_modules/@theia/core/lib/common/index.js");
const context_key_service_1 = __webpack_require__(/*! @theia/core/lib/browser/context-key-service */ "./node_modules/@theia/core/lib/browser/context-key-service.js");
const debug_frontend_application_contribution_1 = __webpack_require__(/*! ./debug-frontend-application-contribution */ "./node_modules/@theia/debug/lib/browser/debug-frontend-application-contribution.js");
const debug_console_contribution_1 = __webpack_require__(/*! ./console/debug-console-contribution */ "./node_modules/@theia/debug/lib/browser/console/debug-console-contribution.js");
const breakpoint_manager_1 = __webpack_require__(/*! ./breakpoint/breakpoint-manager */ "./node_modules/@theia/debug/lib/browser/breakpoint/breakpoint-manager.js");
const debug_editor_service_1 = __webpack_require__(/*! ./editor/debug-editor-service */ "./node_modules/@theia/debug/lib/browser/editor/debug-editor-service.js");
const debug_editor_model_1 = __webpack_require__(/*! ./editor/debug-editor-model */ "./node_modules/@theia/debug/lib/browser/editor/debug-editor-model.js");
const debug_preferences_1 = __webpack_require__(/*! ./debug-preferences */ "./node_modules/@theia/debug/lib/browser/debug-preferences.js");
const debug_schema_updater_1 = __webpack_require__(/*! ./debug-schema-updater */ "./node_modules/@theia/debug/lib/browser/debug-schema-updater.js");
const debug_call_stack_item_type_key_1 = __webpack_require__(/*! ./debug-call-stack-item-type-key */ "./node_modules/@theia/debug/lib/browser/debug-call-stack-item-type-key.js");
const launch_preferences_1 = __webpack_require__(/*! ./preferences/launch-preferences */ "./node_modules/@theia/debug/lib/browser/preferences/launch-preferences.js");
const debug_prefix_configuration_1 = __webpack_require__(/*! ./debug-prefix-configuration */ "./node_modules/@theia/debug/lib/browser/debug-prefix-configuration.js");
const command_1 = __webpack_require__(/*! @theia/core/lib/common/command */ "./node_modules/@theia/core/lib/common/command.js");
const tab_bar_toolbar_1 = __webpack_require__(/*! @theia/core/lib/browser/shell/tab-bar-toolbar */ "./node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/index.js");
const color_application_contribution_1 = __webpack_require__(/*! @theia/core/lib/browser/color-application-contribution */ "./node_modules/@theia/core/lib/browser/color-application-contribution.js");
const debug_watch_manager_1 = __webpack_require__(/*! ./debug-watch-manager */ "./node_modules/@theia/debug/lib/browser/debug-watch-manager.js");
const monaco_editor_service_1 = __webpack_require__(/*! @theia/monaco/lib/browser/monaco-editor-service */ "./node_modules/@theia/monaco/lib/browser/monaco-editor-service.js");
const debug_breakpoint_widget_1 = __webpack_require__(/*! ./editor/debug-breakpoint-widget */ "./node_modules/@theia/debug/lib/browser/editor/debug-breakpoint-widget.js");
const debug_inline_value_decorator_1 = __webpack_require__(/*! ./editor/debug-inline-value-decorator */ "./node_modules/@theia/debug/lib/browser/editor/debug-inline-value-decorator.js");
const json_schema_store_1 = __webpack_require__(/*! @theia/core/lib/browser/json-schema-store */ "./node_modules/@theia/core/lib/browser/json-schema-store.js");
const tab_bar_decorator_1 = __webpack_require__(/*! @theia/core/lib/browser/shell/tab-bar-decorator */ "./node_modules/@theia/core/lib/browser/shell/tab-bar-decorator.js");
const debug_tab_bar_decorator_1 = __webpack_require__(/*! ./debug-tab-bar-decorator */ "./node_modules/@theia/debug/lib/browser/debug-tab-bar-decorator.js");
const debug_contribution_1 = __webpack_require__(/*! ./debug-contribution */ "./node_modules/@theia/debug/lib/browser/debug-contribution.js");
const quick_access_1 = __webpack_require__(/*! @theia/core/lib/browser/quick-input/quick-access */ "./node_modules/@theia/core/lib/browser/quick-input/quick-access.js");
const debug_view_model_1 = __webpack_require__(/*! ./view/debug-view-model */ "./node_modules/@theia/debug/lib/browser/view/debug-view-model.js");
const debug_toolbar_widget_1 = __webpack_require__(/*! ./view/debug-toolbar-widget */ "./node_modules/@theia/debug/lib/browser/view/debug-toolbar-widget.js");
const debug_session_widget_1 = __webpack_require__(/*! ./view/debug-session-widget */ "./node_modules/@theia/debug/lib/browser/view/debug-session-widget.js");
const disassembly_view_contribution_1 = __webpack_require__(/*! ./disassembly-view/disassembly-view-contribution */ "./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-contribution.js");
exports["default"] = new inversify_1.ContainerModule((bind) => {
    (0, core_1.bindContributionProvider)(bind, debug_contribution_1.DebugContribution);
    bind(debug_call_stack_item_type_key_1.DebugCallStackItemTypeKey).toDynamicValue(({ container }) => container.get(context_key_service_1.ContextKeyService).createKey('callStackItemType', undefined)).inSingletonScope();
    (0, core_1.bindContributionProvider)(bind, debug_session_contribution_1.DebugSessionContribution);
    bind(debug_session_contribution_1.DebugSessionFactory).to(debug_session_contribution_1.DefaultDebugSessionFactory).inSingletonScope();
    bind(debug_session_manager_1.DebugSessionManager).toSelf().inSingletonScope();
    bind(breakpoint_manager_1.BreakpointManager).toSelf().inSingletonScope();
    bind(debug_editor_model_1.DebugEditorModelFactory).toDynamicValue(({ container }) => (editor => debug_editor_model_1.DebugEditorModel.createModel(container, editor))).inSingletonScope();
    bind(debug_editor_service_1.DebugEditorService).toSelf().inSingletonScope().onActivation((context, service) => {
        context.container.get(monaco_editor_service_1.MonacoEditorService).registerDecorationType('Debug breakpoint placeholder', debug_breakpoint_widget_1.DebugBreakpointWidget.PLACEHOLDER_DECORATION, {});
        return service;
    });
    bind(browser_1.WidgetFactory).toDynamicValue(({ container }) => ({
        id: debug_widget_1.DebugWidget.ID,
        createWidget: () => debug_widget_1.DebugWidget.createWidget(container)
    })).inSingletonScope();
    debug_console_contribution_1.DebugConsoleContribution.bindContribution(bind);
    bind(debug_schema_updater_1.DebugSchemaUpdater).toSelf().inSingletonScope();
    bind(json_schema_store_1.JsonSchemaContribution).toService(debug_schema_updater_1.DebugSchemaUpdater);
    bind(debug_configuration_manager_1.DebugConfigurationManager).toSelf().inSingletonScope();
    bind(debug_inline_value_decorator_1.DebugInlineValueDecorator).toSelf().inSingletonScope();
    bind(browser_1.FrontendApplicationContribution).toService(debug_inline_value_decorator_1.DebugInlineValueDecorator);
    bind(debug_service_1.DebugService).toDynamicValue(context => browser_1.WebSocketConnectionProvider.createProxy(context.container, debug_service_1.DebugPath)).inSingletonScope();
    bind(debug_resource_1.DebugResourceResolver).toSelf().inSingletonScope();
    bind(core_1.ResourceResolver).toService(debug_resource_1.DebugResourceResolver);
    (0, browser_1.bindViewContribution)(bind, debug_frontend_application_contribution_1.DebugFrontendApplicationContribution);
    bind(browser_1.FrontendApplicationContribution).toService(debug_frontend_application_contribution_1.DebugFrontendApplicationContribution);
    bind(tab_bar_toolbar_1.TabBarToolbarContribution).toService(debug_frontend_application_contribution_1.DebugFrontendApplicationContribution);
    bind(color_application_contribution_1.ColorContribution).toService(debug_frontend_application_contribution_1.DebugFrontendApplicationContribution);
    bind(debug_session_contribution_1.DebugSessionContributionRegistryImpl).toSelf().inSingletonScope();
    bind(debug_session_contribution_1.DebugSessionContributionRegistry).toService(debug_session_contribution_1.DebugSessionContributionRegistryImpl);
    bind(debug_prefix_configuration_1.DebugPrefixConfiguration).toSelf().inSingletonScope();
    for (const identifier of [command_1.CommandContribution, quick_access_1.QuickAccessContribution]) {
        bind(identifier).toService(debug_prefix_configuration_1.DebugPrefixConfiguration);
    }
    (0, debug_preferences_1.bindDebugPreferences)(bind);
    (0, launch_preferences_1.bindLaunchPreferences)(bind);
    bind(debug_watch_manager_1.DebugWatchManager).toSelf().inSingletonScope();
    bind(debug_tab_bar_decorator_1.DebugTabBarDecorator).toSelf().inSingletonScope();
    bind(tab_bar_decorator_1.TabBarDecorator).toService(debug_tab_bar_decorator_1.DebugTabBarDecorator);
    bind(debug_view_model_1.DebugViewModel).toSelf().inSingletonScope();
    bind(debug_toolbar_widget_1.DebugToolBar).toSelf().inSingletonScope();
    for (const subwidget of debug_session_widget_1.DebugSessionWidget.subwidgets) {
        bind(browser_1.WidgetFactory).toDynamicValue(({ container }) => ({
            id: subwidget.FACTORY_ID,
            createWidget: () => subwidget.createWidget(container),
        }));
    }
    (0, disassembly_view_contribution_1.bindDisassemblyView)(bind);
});


/***/ }),

/***/ "./node_modules/@theia/debug/lib/browser/debug-prefix-configuration.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@theia/debug/lib/browser/debug-prefix-configuration.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DebugPrefixConfiguration_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugPrefixConfiguration = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const command_1 = __webpack_require__(/*! @theia/core/lib/common/command */ "./node_modules/@theia/core/lib/common/command.js");
const debug_session_manager_1 = __webpack_require__(/*! ./debug-session-manager */ "./node_modules/@theia/debug/lib/browser/debug-session-manager.js");
const debug_configuration_manager_1 = __webpack_require__(/*! ./debug-configuration-manager */ "./node_modules/@theia/debug/lib/browser/debug-configuration-manager.js");
const debug_frontend_application_contribution_1 = __webpack_require__(/*! ./debug-frontend-application-contribution */ "./node_modules/@theia/debug/lib/browser/debug-frontend-application-contribution.js");
const browser_1 = __webpack_require__(/*! @theia/workspace/lib/browser */ "./node_modules/@theia/workspace/lib/browser/index.js");
const label_provider_1 = __webpack_require__(/*! @theia/core/lib/browser/label-provider */ "./node_modules/@theia/core/lib/browser/label-provider.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "./node_modules/@theia/core/lib/common/uri.js");
const browser_2 = __webpack_require__(/*! @theia/core/lib/browser */ "./node_modules/@theia/core/lib/browser/index.js");
const debug_preferences_1 = __webpack_require__(/*! ./debug-preferences */ "./node_modules/@theia/debug/lib/browser/debug-preferences.js");
const quick_input_service_1 = __webpack_require__(/*! @theia/core/lib/browser/quick-input/quick-input-service */ "./node_modules/@theia/core/lib/browser/quick-input/quick-input-service.js");
let DebugPrefixConfiguration = DebugPrefixConfiguration_1 = class DebugPrefixConfiguration {
    constructor() {
        this.statusBarId = 'select-run-debug-statusbar-item';
        this.command = command_1.Command.toDefaultLocalizedCommand({
            id: 'select.debug.configuration',
            category: debug_frontend_application_contribution_1.DebugCommands.DEBUG_CATEGORY,
            label: 'Select and Start Debugging'
        });
    }
    init() {
        this.handleDebugStatusBarVisibility();
        this.preference.onPreferenceChanged(e => {
            if (e.preferenceName === 'debug.showInStatusBar') {
                this.handleDebugStatusBarVisibility();
            }
        });
        const toDisposeOnStart = this.debugSessionManager.onDidStartDebugSession(() => {
            toDisposeOnStart.dispose();
            this.handleDebugStatusBarVisibility(true);
            this.debugConfigurationManager.onDidChange(() => this.handleDebugStatusBarVisibility(true));
        });
    }
    execute() {
        var _a;
        (_a = this.quickInputService) === null || _a === void 0 ? void 0 : _a.open(DebugPrefixConfiguration_1.PREFIX);
    }
    isEnabled() {
        return true;
    }
    isVisible() {
        return true;
    }
    registerCommands(commands) {
        commands.registerCommand(this.command, this);
    }
    registerQuickAccessProvider() {
        this.quickAccessRegistry.registerQuickAccessProvider({
            getInstance: () => this,
            prefix: DebugPrefixConfiguration_1.PREFIX,
            placeholder: '',
            helpEntries: [{ description: 'Debug Configuration', needsEditor: false }]
        });
    }
    resolveRootFolderName(uri) {
        return uri && this.workspaceService.isMultiRootWorkspaceOpened
            ? this.labelProvider.getName(new uri_1.default(uri))
            : '';
    }
    async getPicks(filter, token) {
        const items = [];
        const configurations = this.debugConfigurationManager.all;
        for (const config of configurations) {
            items.push({
                label: config.name,
                description: this.resolveRootFolderName(config.workspaceFolderUri),
                execute: () => this.runConfiguration(config)
            });
        }
        // Resolve dynamic configurations from providers
        const record = await this.debugConfigurationManager.provideDynamicDebugConfigurations();
        for (const [providerType, configurationOptions] of Object.entries(record)) {
            if (configurationOptions.length > 0) {
                items.push({
                    label: providerType,
                    type: 'separator'
                });
            }
            for (const options of configurationOptions) {
                items.push({
                    label: options.name,
                    description: this.resolveRootFolderName(options.workspaceFolderUri),
                    execute: () => this.runConfiguration({ name: options.name, configuration: options.configuration, providerType, workspaceFolderUri: options.workspaceFolderUri })
                });
            }
        }
        return (0, quick_input_service_1.filterItems)(items, filter);
    }
    /**
     * Set the current debug configuration, and execute debug start command.
     *
     * @param configurationOptions the `DebugSessionOptions`.
     */
    runConfiguration(configurationOptions) {
        this.debugConfigurationManager.current = configurationOptions;
        this.commandRegistry.executeCommand(debug_frontend_application_contribution_1.DebugCommands.START.id);
    }
    /**
     * Handle the visibility of the debug status bar.
     * @param event the preference change event.
     */
    handleDebugStatusBarVisibility(started) {
        const showInStatusBar = this.preference['debug.showInStatusBar'];
        if (showInStatusBar === 'never') {
            return this.removeDebugStatusBar();
        }
        else if (showInStatusBar === 'always' || started) {
            return this.updateStatusBar();
        }
    }
    /**
     * Update the debug status bar element based on the current configuration.
     */
    updateStatusBar() {
        const text = this.debugConfigurationManager.current
            ? this.debugConfigurationManager.current.name
            : '';
        const icon = '$(codicon-debug-alt-small)';
        this.statusBar.setElement(this.statusBarId, {
            alignment: browser_2.StatusBarAlignment.LEFT,
            text: text.length ? `${icon} ${text}` : icon,
            tooltip: this.command.label,
            command: this.command.id,
        });
    }
    /**
     * Remove the debug status bar element.
     */
    removeDebugStatusBar() {
        this.statusBar.removeElement(this.statusBarId);
    }
};
DebugPrefixConfiguration.PREFIX = 'debug ';
__decorate([
    (0, inversify_1.inject)(command_1.CommandRegistry),
    __metadata("design:type", command_1.CommandRegistry)
], DebugPrefixConfiguration.prototype, "commandRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(debug_session_manager_1.DebugSessionManager),
    __metadata("design:type", debug_session_manager_1.DebugSessionManager)
], DebugPrefixConfiguration.prototype, "debugSessionManager", void 0);
__decorate([
    (0, inversify_1.inject)(debug_preferences_1.DebugPreferences),
    __metadata("design:type", Object)
], DebugPrefixConfiguration.prototype, "preference", void 0);
__decorate([
    (0, inversify_1.inject)(debug_configuration_manager_1.DebugConfigurationManager),
    __metadata("design:type", debug_configuration_manager_1.DebugConfigurationManager)
], DebugPrefixConfiguration.prototype, "debugConfigurationManager", void 0);
__decorate([
    (0, inversify_1.inject)(browser_2.QuickInputService),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], DebugPrefixConfiguration.prototype, "quickInputService", void 0);
__decorate([
    (0, inversify_1.inject)(browser_2.QuickAccessRegistry),
    __metadata("design:type", Object)
], DebugPrefixConfiguration.prototype, "quickAccessRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(browser_1.WorkspaceService),
    __metadata("design:type", browser_1.WorkspaceService)
], DebugPrefixConfiguration.prototype, "workspaceService", void 0);
__decorate([
    (0, inversify_1.inject)(label_provider_1.LabelProvider),
    __metadata("design:type", label_provider_1.LabelProvider)
], DebugPrefixConfiguration.prototype, "labelProvider", void 0);
__decorate([
    (0, inversify_1.inject)(browser_2.StatusBar),
    __metadata("design:type", Object)
], DebugPrefixConfiguration.prototype, "statusBar", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DebugPrefixConfiguration.prototype, "init", null);
DebugPrefixConfiguration = DebugPrefixConfiguration_1 = __decorate([
    (0, inversify_1.injectable)()
], DebugPrefixConfiguration);
exports.DebugPrefixConfiguration = DebugPrefixConfiguration;


/***/ }),

/***/ "./node_modules/@theia/debug/lib/browser/debug-resource.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@theia/debug/lib/browser/debug-resource.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugResourceResolver = exports.DebugResource = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const debug_session_manager_1 = __webpack_require__(/*! ./debug-session-manager */ "./node_modules/@theia/debug/lib/browser/debug-session-manager.js");
const debug_source_1 = __webpack_require__(/*! ./model/debug-source */ "./node_modules/@theia/debug/lib/browser/model/debug-source.js");
class DebugResource {
    constructor(uri, manager) {
        this.uri = uri;
        this.manager = manager;
    }
    dispose() { }
    async readContents() {
        const { currentSession } = this.manager;
        if (!currentSession) {
            throw new Error(`There is no active debug session to load content '${this.uri}'`);
        }
        const source = await currentSession.toSource(this.uri);
        if (!source) {
            throw new Error(`There is no source for '${this.uri}'`);
        }
        return source.load();
    }
}
exports.DebugResource = DebugResource;
let DebugResourceResolver = class DebugResourceResolver {
    resolve(uri) {
        if (uri.scheme !== debug_source_1.DebugSource.SCHEME) {
            throw new Error('The given URI is not a valid debug URI: ' + uri);
        }
        return new DebugResource(uri, this.manager);
    }
};
__decorate([
    (0, inversify_1.inject)(debug_session_manager_1.DebugSessionManager),
    __metadata("design:type", debug_session_manager_1.DebugSessionManager)
], DebugResourceResolver.prototype, "manager", void 0);
DebugResourceResolver = __decorate([
    (0, inversify_1.injectable)()
], DebugResourceResolver);
exports.DebugResourceResolver = DebugResourceResolver;


/***/ }),

/***/ "./node_modules/@theia/debug/lib/browser/debug-tab-bar-decorator.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@theia/debug/lib/browser/debug-tab-bar-decorator.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugTabBarDecorator = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const debug_session_manager_1 = __webpack_require__(/*! ./debug-session-manager */ "./node_modules/@theia/debug/lib/browser/debug-session-manager.js");
const debug_widget_1 = __webpack_require__(/*! ./view/debug-widget */ "./node_modules/@theia/debug/lib/browser/view/debug-widget.js");
const event_1 = __webpack_require__(/*! @theia/core/lib/common/event */ "./node_modules/@theia/core/lib/common/event.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "./node_modules/@theia/core/lib/common/index.js");
let DebugTabBarDecorator = class DebugTabBarDecorator {
    constructor() {
        this.id = 'theia-debug-tabbar-decorator';
        this.emitter = new event_1.Emitter();
        this.toDispose = new common_1.DisposableCollection();
    }
    init() {
        this.toDispose.pushAll([
            this.debugSessionManager.onDidStartDebugSession(() => this.fireDidChangeDecorations()),
            this.debugSessionManager.onDidDestroyDebugSession(() => this.fireDidChangeDecorations())
        ]);
    }
    decorate(title) {
        return (title.owner.id === debug_widget_1.DebugWidget.ID)
            ? [{ badge: this.debugSessionManager.sessions.length }]
            : [];
    }
    get onDidChangeDecorations() {
        return this.emitter.event;
    }
    fireDidChangeDecorations() {
        this.emitter.fire(undefined);
    }
};
__decorate([
    (0, inversify_1.inject)(debug_session_manager_1.DebugSessionManager),
    __metadata("design:type", debug_session_manager_1.DebugSessionManager)
], DebugTabBarDecorator.prototype, "debugSessionManager", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DebugTabBarDecorator.prototype, "init", null);
DebugTabBarDecorator = __decorate([
    (0, inversify_1.injectable)()
], DebugTabBarDecorator);
exports.DebugTabBarDecorator = DebugTabBarDecorator;


/***/ }),

/***/ "./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-accessibility-provider.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-accessibility-provider.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AccessibilityProvider = void 0;
const core_1 = __webpack_require__(/*! @theia/core */ "./node_modules/@theia/core/lib/common/index.js");
// This file is adapted from https://github.com/microsoft/vscode/blob/c061ce5c24fc480342fbc5f23244289d633c56eb/src/vs/workbench/contrib/debug/browser/disassemblyView.ts
class AccessibilityProvider {
    getWidgetAriaLabel() {
        return core_1.nls.localizeByDefault('Disassembly View');
    }
    getAriaLabel(element) {
        let label = '';
        const instruction = element.instruction;
        if (instruction.address !== '-1') {
            label += `${core_1.nls.localizeByDefault('Address')}: ${instruction.address}`;
        }
        if (instruction.instructionBytes) {
            label += `, ${core_1.nls.localizeByDefault('Bytes')}: ${instruction.instructionBytes}`;
        }
        label += `, ${core_1.nls.localizeByDefault('Instruction')}: ${instruction.instruction}`;
        return label;
    }
}
exports.AccessibilityProvider = AccessibilityProvider;


/***/ }),

/***/ "./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-breakpoint-renderer.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-breakpoint-renderer.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BreakpointRenderer = void 0;
const dom_1 = __webpack_require__(/*! @theia/monaco-editor-core/esm/vs/base/browser/dom */ "./node_modules/@theia/monaco-editor-core/esm/vs/base/browser/dom.js");
const lifecycle_1 = __webpack_require__(/*! @theia/monaco-editor-core/esm/vs/base/common/lifecycle */ "./node_modules/@theia/monaco-editor-core/esm/vs/base/common/lifecycle.js");
// This file is adapted from https://github.com/microsoft/vscode/blob/c061ce5c24fc480342fbc5f23244289d633c56eb/src/vs/workbench/contrib/debug/browser/disassemblyView.ts
class BreakpointRenderer {
    constructor(_disassemblyView, _debugService) {
        this._disassemblyView = _disassemblyView;
        this._debugService = _debugService;
        this.templateId = BreakpointRenderer.TEMPLATE_ID;
        this._breakpointIcon = 'codicon-debug-breakpoint';
        this._breakpointDisabledIcon = 'codicon-debug-breakpoint-disabled';
        this._breakpointHintIcon = 'codicon-debug-hint';
        this._debugStackframe = 'codicon-debug-stackframe';
        this._debugStackframeFocused = 'codicon-debug-stackframe-focused';
    }
    renderTemplate(container) {
        // align from the bottom so that it lines up with instruction when source code is present.
        container.style.alignSelf = 'flex-end';
        const icon = (0, dom_1.append)(container, (0, dom_1.$)('.disassembly-view'));
        icon.classList.add('codicon');
        icon.style.display = 'flex';
        icon.style.alignItems = 'center';
        icon.style.justifyContent = 'center';
        icon.style.height = this._disassemblyView.fontInfo.lineHeight + 'px';
        const currentElement = { element: undefined };
        const disposables = [
            this._disassemblyView.onDidChangeStackFrame(() => this.rerenderDebugStackframe(icon, currentElement.element)),
            (0, dom_1.addStandardDisposableListener)(container, 'mouseover', () => {
                var _a;
                if ((_a = currentElement.element) === null || _a === void 0 ? void 0 : _a.allowBreakpoint) {
                    icon.classList.add(this._breakpointHintIcon);
                }
            }),
            (0, dom_1.addStandardDisposableListener)(container, 'mouseout', () => {
                var _a;
                if ((_a = currentElement.element) === null || _a === void 0 ? void 0 : _a.allowBreakpoint) {
                    icon.classList.remove(this._breakpointHintIcon);
                }
            }),
            (0, dom_1.addStandardDisposableListener)(container, 'click', () => {
                var _a;
                if ((_a = currentElement.element) === null || _a === void 0 ? void 0 : _a.allowBreakpoint) {
                    // click show hint while waiting for BP to resolve.
                    icon.classList.add(this._breakpointHintIcon);
                    if (currentElement.element.isBreakpointSet) {
                        this._debugService.removeInstructionBreakpoint(currentElement.element.instruction.address);
                    }
                    else if (currentElement.element.allowBreakpoint && !currentElement.element.isBreakpointSet) {
                        this._debugService.addInstructionBreakpoint(currentElement.element.instruction.address, 0);
                    }
                }
            })
        ];
        return { currentElement, icon, disposables };
    }
    renderElement(element, index, templateData, height) {
        templateData.currentElement.element = element;
        this.rerenderDebugStackframe(templateData.icon, element);
    }
    disposeTemplate(templateData) {
        (0, lifecycle_1.dispose)(templateData.disposables);
        templateData.disposables = [];
    }
    rerenderDebugStackframe(icon, element) {
        if ((element === null || element === void 0 ? void 0 : element.instruction.address) === this._disassemblyView.focusedCurrentInstructionAddress) {
            icon.classList.add(this._debugStackframe);
        }
        else if ((element === null || element === void 0 ? void 0 : element.instruction.address) === this._disassemblyView.focusedInstructionAddress) {
            icon.classList.add(this._debugStackframeFocused);
        }
        else {
            icon.classList.remove(this._debugStackframe);
            icon.classList.remove(this._debugStackframeFocused);
        }
        icon.classList.remove(this._breakpointHintIcon);
        if (element === null || element === void 0 ? void 0 : element.isBreakpointSet) {
            if (element.isBreakpointEnabled) {
                icon.classList.add(this._breakpointIcon);
                icon.classList.remove(this._breakpointDisabledIcon);
            }
            else {
                icon.classList.remove(this._breakpointIcon);
                icon.classList.add(this._breakpointDisabledIcon);
            }
        }
        else {
            icon.classList.remove(this._breakpointIcon);
            icon.classList.remove(this._breakpointDisabledIcon);
        }
    }
}
exports.BreakpointRenderer = BreakpointRenderer;
BreakpointRenderer.TEMPLATE_ID = 'breakpoint';


/***/ }),

/***/ "./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-contribution.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-contribution.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindDisassemblyView = exports.DisassemblyViewContribution = exports.DISASSEMBLY_VIEW_FOCUS = exports.DISASSEMBLE_REQUEST_SUPPORTED = exports.FOCUSED_STACK_FRAME_HAS_INSTRUCTION_REFERENCE = exports.LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST = exports.OPEN_DISASSEMBLY_VIEW_COMMAND = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "./node_modules/@theia/core/lib/browser/index.js");
const disassembly_view_widget_1 = __webpack_require__(/*! ./disassembly-view-widget */ "./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-widget.js");
const core_1 = __webpack_require__(/*! @theia/core */ "./node_modules/@theia/core/lib/common/index.js");
const debug_service_1 = __webpack_require__(/*! ../../common/debug-service */ "./node_modules/@theia/debug/lib/common/debug-service.js");
const browser_2 = __webpack_require__(/*! @theia/editor/lib/browser */ "./node_modules/@theia/editor/lib/browser/index.js");
const context_key_service_1 = __webpack_require__(/*! @theia/core/lib/browser/context-key-service */ "./node_modules/@theia/core/lib/browser/context-key-service.js");
const debug_session_manager_1 = __webpack_require__(/*! ../debug-session-manager */ "./node_modules/@theia/debug/lib/browser/debug-session-manager.js");
const debug_session_1 = __webpack_require__(/*! ../debug-session */ "./node_modules/@theia/debug/lib/browser/debug-session.js");
const debug_stack_frames_widget_1 = __webpack_require__(/*! ../view/debug-stack-frames-widget */ "./node_modules/@theia/debug/lib/browser/view/debug-stack-frames-widget.js");
exports.OPEN_DISASSEMBLY_VIEW_COMMAND = {
    id: 'open-disassembly-view',
    label: core_1.nls.localizeByDefault('Open Disassembly View')
};
exports.LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST = 'languageSupportsDisassembleRequest';
exports.FOCUSED_STACK_FRAME_HAS_INSTRUCTION_REFERENCE = 'focusedStackFrameHasInstructionReference';
exports.DISASSEMBLE_REQUEST_SUPPORTED = 'disassembleRequestSupported';
exports.DISASSEMBLY_VIEW_FOCUS = 'disassemblyViewFocus';
let DisassemblyViewContribution = class DisassemblyViewContribution extends browser_1.AbstractViewContribution {
    constructor() {
        super({
            widgetId: disassembly_view_widget_1.DisassemblyViewWidget.ID,
            widgetName: 'Disassembly View',
            defaultWidgetOptions: { area: 'main' }
        });
    }
    init() {
        var _a, _b;
        let activeEditorChangeCancellation = { cancelled: false };
        const updateLanguageSupportsDisassemblyKey = async () => {
            const editor = this.editorManager.currentEditor;
            activeEditorChangeCancellation.cancelled = true;
            const localCancellation = activeEditorChangeCancellation = { cancelled: false };
            const language = editor === null || editor === void 0 ? void 0 : editor.editor.document.languageId;
            const debuggersForLanguage = language && await this.debugService.getDebuggersForLanguage(language);
            if (!localCancellation.cancelled) {
                this.contextKeyService.setContext(exports.LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST, Boolean(debuggersForLanguage === null || debuggersForLanguage === void 0 ? void 0 : debuggersForLanguage.length));
            }
        };
        this.editorManager.onCurrentEditorChanged(updateLanguageSupportsDisassemblyKey);
        (_b = (_a = this.debugService).onDidChangeDebuggers) === null || _b === void 0 ? void 0 : _b.call(_a, updateLanguageSupportsDisassemblyKey);
        let lastSession;
        let lastFrame;
        this.debugSessionManager.onDidChange(() => {
            const { currentFrame, currentSession } = this.debugSessionManager;
            if (currentFrame !== lastFrame) {
                lastFrame = currentFrame;
                this.contextKeyService.setContext(exports.FOCUSED_STACK_FRAME_HAS_INSTRUCTION_REFERENCE, Boolean(currentFrame === null || currentFrame === void 0 ? void 0 : currentFrame.raw.instructionPointerReference));
            }
            if (currentSession !== lastSession) {
                lastSession = currentSession;
                this.contextKeyService.setContext(exports.DISASSEMBLE_REQUEST_SUPPORTED, Boolean(currentSession === null || currentSession === void 0 ? void 0 : currentSession.capabilities.supportsDisassembleRequest));
            }
        });
        this.shell.onDidChangeCurrentWidget(widget => {
            this.contextKeyService.setContext(exports.DISASSEMBLY_VIEW_FOCUS, widget instanceof disassembly_view_widget_1.DisassemblyViewWidget);
        });
    }
    registerCommands(commands) {
        commands.registerCommand(exports.OPEN_DISASSEMBLY_VIEW_COMMAND, {
            isEnabled: () => this.debugSessionManager.inDebugMode
                && this.debugSessionManager.state === debug_session_1.DebugState.Stopped
                && this.contextKeyService.match('focusedStackFrameHasInstructionReference'),
            execute: () => this.openView({ activate: true }),
        });
    }
    registerMenus(menus) {
        menus.registerMenuAction(debug_stack_frames_widget_1.DebugStackFramesWidget.CONTEXT_MENU, { commandId: exports.OPEN_DISASSEMBLY_VIEW_COMMAND.id, label: exports.OPEN_DISASSEMBLY_VIEW_COMMAND.label });
        menus.registerMenuAction([...browser_2.EDITOR_CONTEXT_MENU, 'a_debug'], { commandId: exports.OPEN_DISASSEMBLY_VIEW_COMMAND.id, label: exports.OPEN_DISASSEMBLY_VIEW_COMMAND.label, when: exports.LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST });
    }
};
__decorate([
    (0, inversify_1.inject)(debug_service_1.DebugService),
    __metadata("design:type", Object)
], DisassemblyViewContribution.prototype, "debugService", void 0);
__decorate([
    (0, inversify_1.inject)(browser_2.EditorManager),
    __metadata("design:type", browser_2.EditorManager)
], DisassemblyViewContribution.prototype, "editorManager", void 0);
__decorate([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    __metadata("design:type", Object)
], DisassemblyViewContribution.prototype, "contextKeyService", void 0);
__decorate([
    (0, inversify_1.inject)(debug_session_manager_1.DebugSessionManager),
    __metadata("design:type", debug_session_manager_1.DebugSessionManager)
], DisassemblyViewContribution.prototype, "debugSessionManager", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DisassemblyViewContribution.prototype, "init", null);
DisassemblyViewContribution = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], DisassemblyViewContribution);
exports.DisassemblyViewContribution = DisassemblyViewContribution;
function bindDisassemblyView(bind) {
    bind(disassembly_view_widget_1.DisassemblyViewWidget).toSelf();
    bind(browser_1.WidgetFactory).toDynamicValue(({ container }) => ({ id: disassembly_view_widget_1.DisassemblyViewWidget.ID, createWidget: () => container.get(disassembly_view_widget_1.DisassemblyViewWidget) }));
    (0, browser_1.bindViewContribution)(bind, DisassemblyViewContribution);
}
exports.bindDisassemblyView = bindDisassemblyView;


/***/ }),

/***/ "./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-instruction-renderer.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-instruction-renderer.js ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getUriFromSource = exports.InstructionRenderer = void 0;
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "./node_modules/@theia/core/lib/browser/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "./node_modules/@theia/core/lib/common/uri.js");
const monaco_editor_core_1 = __webpack_require__(/*! @theia/monaco-editor-core */ "./node_modules/@theia/monaco-editor-core/esm/vs/editor/editor.main.js");
const dom_1 = __webpack_require__(/*! @theia/monaco-editor-core/esm/vs/base/browser/dom */ "./node_modules/@theia/monaco-editor-core/esm/vs/base/browser/dom.js");
const lifecycle_1 = __webpack_require__(/*! @theia/monaco-editor-core/esm/vs/base/common/lifecycle */ "./node_modules/@theia/monaco-editor-core/esm/vs/base/common/lifecycle.js");
const path_1 = __webpack_require__(/*! @theia/monaco-editor-core/esm/vs/base/common/path */ "./node_modules/@theia/monaco-editor-core/esm/vs/base/common/path.js");
const domFontInfo_1 = __webpack_require__(/*! @theia/monaco-editor-core/esm/vs/editor/browser/config/domFontInfo */ "./node_modules/@theia/monaco-editor-core/esm/vs/editor/browser/config/domFontInfo.js");
const stringBuilder_1 = __webpack_require__(/*! @theia/monaco-editor-core/esm/vs/editor/common/core/stringBuilder */ "./node_modules/@theia/monaco-editor-core/esm/vs/editor/common/core/stringBuilder.js");
const resolverService_1 = __webpack_require__(/*! @theia/monaco-editor-core/esm/vs/editor/common/services/resolverService */ "./node_modules/@theia/monaco-editor-core/esm/vs/editor/common/services/resolverService.js");
const themeService_1 = __webpack_require__(/*! @theia/monaco-editor-core/esm/vs/platform/theme/common/themeService */ "./node_modules/@theia/monaco-editor-core/esm/vs/platform/theme/common/themeService.js");
const debug_source_1 = __webpack_require__(/*! ../model/debug-source */ "./node_modules/@theia/debug/lib/browser/model/debug-source.js");
// This file is adapted from https://github.com/microsoft/vscode/blob/c061ce5c24fc480342fbc5f23244289d633c56eb/src/vs/workbench/contrib/debug/browser/disassemblyView.ts
const topStackFrameColor = 'editor.stackFrameHighlightBackground';
const focusedStackFrameColor = 'editor.focusedStackFrameHighlightBackground';
let InstructionRenderer = class InstructionRenderer extends lifecycle_1.Disposable {
    constructor(_disassemblyView, openerService, uriService, themeService, textModelService) {
        super();
        this._disassemblyView = _disassemblyView;
        this.openerService = openerService;
        this.uriService = uriService;
        this.textModelService = textModelService;
        this.templateId = InstructionRenderer.TEMPLATE_ID;
        this._topStackFrameColor = themeService.getColorTheme().getColor(topStackFrameColor);
        this._focusedStackFrameColor = themeService.getColorTheme().getColor(focusedStackFrameColor);
        this._register(themeService.onDidColorThemeChange(e => {
            this._topStackFrameColor = e.getColor(topStackFrameColor);
            this._focusedStackFrameColor = e.getColor(focusedStackFrameColor);
        }));
    }
    renderTemplate(container) {
        const sourcecode = (0, dom_1.append)(container, (0, dom_1.$)('.sourcecode'));
        const instruction = (0, dom_1.append)(container, (0, dom_1.$)('.instruction'));
        this.applyFontInfo(sourcecode);
        this.applyFontInfo(instruction);
        const currentElement = { element: undefined };
        const cellDisposable = [];
        const disposables = [
            this._disassemblyView.onDidChangeStackFrame(() => this.rerenderBackground(instruction, sourcecode, currentElement.element)),
            (0, dom_1.addStandardDisposableListener)(sourcecode, 'dblclick', () => { var _a; return this.openSourceCode((_a = currentElement.element) === null || _a === void 0 ? void 0 : _a.instruction); }),
        ];
        return { currentElement, instruction, sourcecode, cellDisposable, disposables };
    }
    renderElement(element, index, templateData, height) {
        this.renderElementInner(element, index, templateData, height);
    }
    async renderElementInner(element, index, column, height) {
        var _a;
        column.currentElement.element = element;
        const instruction = element.instruction;
        column.sourcecode.innerText = '';
        const sb = new stringBuilder_1.StringBuilder(1000);
        if (this._disassemblyView.isSourceCodeRender && ((_a = instruction.location) === null || _a === void 0 ? void 0 : _a.path) && instruction.line) {
            const sourceURI = this.getUriFromSource(instruction);
            if (sourceURI) {
                let textModel = undefined;
                const sourceSB = new stringBuilder_1.StringBuilder(10000);
                const ref = await this.textModelService.createModelReference(sourceURI);
                textModel = ref.object.textEditorModel;
                column.cellDisposable.push(ref);
                // templateData could have moved on during async.  Double check if it is still the same source.
                if (textModel && column.currentElement.element === element) {
                    let lineNumber = instruction.line;
                    while (lineNumber && lineNumber >= 1 && lineNumber <= textModel.getLineCount()) {
                        const lineContent = textModel.getLineContent(lineNumber);
                        sourceSB.appendASCIIString(`  ${lineNumber}: `);
                        sourceSB.appendASCIIString(lineContent + '\n');
                        if (instruction.endLine && lineNumber < instruction.endLine) {
                            lineNumber++;
                            continue;
                        }
                        break;
                    }
                    column.sourcecode.innerText = sourceSB.build();
                }
            }
        }
        let spacesToAppend = 10;
        if (instruction.address !== '-1') {
            sb.appendASCIIString(instruction.address);
            if (instruction.address.length < InstructionRenderer.INSTRUCTION_ADDR_MIN_LENGTH) {
                spacesToAppend = InstructionRenderer.INSTRUCTION_ADDR_MIN_LENGTH - instruction.address.length;
            }
            for (let i = 0; i < spacesToAppend; i++) {
                sb.appendASCIIString(' ');
            }
        }
        if (instruction.instructionBytes) {
            sb.appendASCIIString(instruction.instructionBytes);
            spacesToAppend = 10;
            if (instruction.instructionBytes.length < InstructionRenderer.INSTRUCTION_BYTES_MIN_LENGTH) {
                spacesToAppend = InstructionRenderer.INSTRUCTION_BYTES_MIN_LENGTH - instruction.instructionBytes.length;
            }
            for (let i = 0; i < spacesToAppend; i++) {
                sb.appendASCIIString(' ');
            }
        }
        sb.appendASCIIString(instruction.instruction);
        column.instruction.innerText = sb.build();
        this.rerenderBackground(column.instruction, column.sourcecode, element);
    }
    disposeElement(element, index, templateData, height) {
        (0, lifecycle_1.dispose)(templateData.cellDisposable);
        templateData.cellDisposable = [];
    }
    disposeTemplate(templateData) {
        (0, lifecycle_1.dispose)(templateData.disposables);
        templateData.disposables = [];
    }
    rerenderBackground(instruction, sourceCode, element) {
        var _a, _b;
        if (element && this._disassemblyView.currentInstructionAddresses.includes(element.instruction.address)) {
            instruction.style.background = ((_a = this._topStackFrameColor) === null || _a === void 0 ? void 0 : _a.toString()) || 'transparent';
        }
        else if ((element === null || element === void 0 ? void 0 : element.instruction.address) === this._disassemblyView.focusedInstructionAddress) {
            instruction.style.background = ((_b = this._focusedStackFrameColor) === null || _b === void 0 ? void 0 : _b.toString()) || 'transparent';
        }
        else {
            instruction.style.background = 'transparent';
        }
    }
    openSourceCode(instruction) {
        var _a, _b, _c, _d;
        if (instruction) {
            const sourceURI = this.getUriFromSource(instruction);
            const selection = instruction.endLine ? {
                start: { line: instruction.line, character: (_a = instruction.column) !== null && _a !== void 0 ? _a : 0 },
                end: { line: instruction.endLine, character: (_b = instruction.endColumn) !== null && _b !== void 0 ? _b : 1073741824 /* MAX_SAFE_SMALL_INTEGER */ }
            } : {
                start: { line: instruction.line, character: (_c = instruction.column) !== null && _c !== void 0 ? _c : 0 },
                end: { line: instruction.line, character: (_d = instruction.endColumn) !== null && _d !== void 0 ? _d : 1073741824 /* MAX_SAFE_SMALL_INTEGER */ }
            };
            const openerOptions = {
                selection,
                mode: 'activate',
                widgetOptions: { area: 'main' }
            };
            (0, browser_1.open)(this.openerService, new uri_1.URI(sourceURI), openerOptions);
        }
    }
    getUriFromSource(instruction) {
        // Try to resolve path before consulting the debugSession.
        const path = instruction.location.path;
        if (path && isUri(path)) { // path looks like a uri
            return this.uriService.asCanonicalUri(monaco_editor_core_1.Uri.parse(path));
        }
        // assume a filesystem path
        if (path && (0, path_1.isAbsolute)(path)) {
            return this.uriService.asCanonicalUri(monaco_editor_core_1.Uri.file(path));
        }
        return getUriFromSource(instruction.location, instruction.location.path, this._disassemblyView.debugSession.id, this.uriService);
    }
    applyFontInfo(element) {
        (0, domFontInfo_1.applyFontInfo)(element, this._disassemblyView.fontInfo);
        element.style.whiteSpace = 'pre';
    }
};
InstructionRenderer.TEMPLATE_ID = 'instruction';
InstructionRenderer.INSTRUCTION_ADDR_MIN_LENGTH = 25;
InstructionRenderer.INSTRUCTION_BYTES_MIN_LENGTH = 30;
InstructionRenderer = __decorate([
    __param(3, themeService_1.IThemeService),
    __param(4, resolverService_1.ITextModelService),
    __metadata("design:paramtypes", [Object, Object, Object, Object, Object])
], InstructionRenderer);
exports.InstructionRenderer = InstructionRenderer;
function getUriFromSource(raw, path, sessionId, uriIdentityService) {
    if (typeof raw.sourceReference === 'number' && raw.sourceReference > 0) {
        return monaco_editor_core_1.Uri.from({
            scheme: debug_source_1.DebugSource.SCHEME,
            path,
            query: `session=${sessionId}&ref=${raw.sourceReference}`
        });
    }
    if (path && isUri(path)) { // path looks like a uri
        return uriIdentityService.asCanonicalUri(monaco_editor_core_1.Uri.parse(path));
    }
    // assume a filesystem path
    if (path && (0, path_1.isAbsolute)(path)) {
        return uriIdentityService.asCanonicalUri(monaco_editor_core_1.Uri.file(path));
    }
    // path is relative: since VS Code cannot deal with this by itself
    // create a debug url that will result in a DAP 'source' request when the url is resolved.
    return uriIdentityService.asCanonicalUri(monaco_editor_core_1.Uri.from({
        scheme: debug_source_1.DebugSource.SCHEME,
        path,
        query: `session=${sessionId}`
    }));
}
exports.getUriFromSource = getUriFromSource;
function isUri(candidate) {
    return Boolean(candidate && candidate.match(debug_source_1.DebugSource.SCHEME_PATTERN));
}


/***/ }),

/***/ "./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-table-delegate.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-table-delegate.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DisassemblyViewTableDelegate = void 0;
// This file is adapted from https://github.com/microsoft/vscode/blob/c061ce5c24fc480342fbc5f23244289d633c56eb/src/vs/workbench/contrib/debug/browser/disassemblyView.ts
class DisassemblyViewTableDelegate {
    constructor(fontInfoProvider) {
        this.fontInfoProvider = fontInfoProvider;
        this.headerRowHeight = 0;
    }
    getHeight(row) {
        var _a;
        if (this.fontInfoProvider.isSourceCodeRender && ((_a = row.instruction.location) === null || _a === void 0 ? void 0 : _a.path) && row.instruction.line !== undefined) {
            if (row.instruction.endLine !== undefined) {
                return this.fontInfoProvider.fontInfo.lineHeight + (row.instruction.endLine - row.instruction.line + 2);
            }
            else {
                return this.fontInfoProvider.fontInfo.lineHeight * 2;
            }
        }
        return this.fontInfoProvider.fontInfo.lineHeight;
    }
}
exports.DisassemblyViewTableDelegate = DisassemblyViewTableDelegate;


/***/ }),

/***/ "./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-widget.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-widget.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DisassemblyViewWidget_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DisassemblyViewWidget = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "./node_modules/@theia/core/lib/browser/index.js");
const types_1 = __webpack_require__(/*! @theia/core/lib/common/types */ "./node_modules/@theia/core/lib/common/types.js");
const breakpoint_marker_1 = __webpack_require__(/*! ../breakpoint/breakpoint-marker */ "./node_modules/@theia/debug/lib/browser/breakpoint/breakpoint-marker.js");
const breakpoint_manager_1 = __webpack_require__(/*! ../breakpoint/breakpoint-manager */ "./node_modules/@theia/debug/lib/browser/breakpoint/breakpoint-manager.js");
const debug_session_manager_1 = __webpack_require__(/*! ../debug-session-manager */ "./node_modules/@theia/debug/lib/browser/debug-session-manager.js");
const monaco_editor_core_1 = __webpack_require__(/*! @theia/monaco-editor-core */ "./node_modules/@theia/monaco-editor-core/esm/vs/editor/editor.main.js");
const core_1 = __webpack_require__(/*! @theia/core */ "./node_modules/@theia/core/lib/common/index.js");
const fontInfo_1 = __webpack_require__(/*! @theia/monaco-editor-core/esm/vs/editor/common/config/fontInfo */ "./node_modules/@theia/monaco-editor-core/esm/vs/editor/common/config/fontInfo.js");
const listService_1 = __webpack_require__(/*! @theia/monaco-editor-core/esm/vs/platform/list/browser/listService */ "./node_modules/@theia/monaco-editor-core/esm/vs/platform/list/browser/listService.js");
const debug_session_1 = __webpack_require__(/*! ../debug-session */ "./node_modules/@theia/debug/lib/browser/debug-session.js");
const browser_2 = __webpack_require__(/*! @theia/editor/lib/browser */ "./node_modules/@theia/editor/lib/browser/index.js");
const browser_3 = __webpack_require__(/*! @theia/monaco-editor-core/esm/vs/base/browser/browser */ "./node_modules/@theia/monaco-editor-core/esm/vs/base/browser/browser.js");
const debug_preferences_1 = __webpack_require__(/*! ../debug-preferences */ "./node_modules/@theia/debug/lib/browser/debug-preferences.js");
const disassembly_view_table_delegate_1 = __webpack_require__(/*! ./disassembly-view-table-delegate */ "./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-table-delegate.js");
const standaloneServices_1 = __webpack_require__(/*! @theia/monaco-editor-core/esm/vs/editor/standalone/browser/standaloneServices */ "./node_modules/@theia/monaco-editor-core/esm/vs/editor/standalone/browser/standaloneServices.js");
const disassembly_view_instruction_renderer_1 = __webpack_require__(/*! ./disassembly-view-instruction-renderer */ "./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-instruction-renderer.js");
const disassembly_view_breakpoint_renderer_1 = __webpack_require__(/*! ./disassembly-view-breakpoint-renderer */ "./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-breakpoint-renderer.js");
const disassembly_view_accessibility_provider_1 = __webpack_require__(/*! ./disassembly-view-accessibility-provider */ "./node_modules/@theia/debug/lib/browser/disassembly-view/disassembly-view-accessibility-provider.js");
const colorRegistry_1 = __webpack_require__(/*! @theia/monaco-editor-core/esm/vs/platform/theme/common/colorRegistry */ "./node_modules/@theia/monaco-editor-core/esm/vs/platform/theme/common/colorRegistry.js");
const dom_1 = __webpack_require__(/*! @theia/monaco-editor-core/esm/vs/base/browser/dom */ "./node_modules/@theia/monaco-editor-core/esm/vs/base/browser/dom.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "./node_modules/@theia/core/lib/common/uri.js");
// This file is adapted from https://github.com/microsoft/vscode/blob/c061ce5c24fc480342fbc5f23244289d633c56eb/src/vs/workbench/contrib/debug/browser/disassemblyView.ts
// Special entry as a placeholder when disassembly is not available
const disassemblyNotAvailable = {
    allowBreakpoint: false,
    isBreakpointSet: false,
    isBreakpointEnabled: false,
    instruction: {
        address: '-1',
        instruction: core_1.nls.localizeByDefault('Disassembly not available.')
    },
    instructionAddress: BigInt(-1)
};
let DisassemblyViewWidget = DisassemblyViewWidget_1 = class DisassemblyViewWidget extends browser_1.BaseWidget {
    constructor() {
        super(...arguments);
        this.iconReferenceUri = new uri_1.URI().withScheme('file').withPath('disassembly-view.disassembly-view');
        this._disassembledInstructions = undefined;
        this._onDidChangeStackFrame = new monaco_editor_core_1.Emitter();
        this._instructionBpList = [];
        this._enableSourceCodeRender = true;
        this._loadingLock = false;
    }
    init() {
        var _a, _b;
        this.id = DisassemblyViewWidget_1.ID;
        this.addClass(DisassemblyViewWidget_1.ID);
        this.title.closable = true;
        this.title.label = core_1.nls.localizeByDefault('Disassembly');
        const updateIcon = () => this.title.iconClass = this.labelProvider.getIcon(this.iconReferenceUri) + ' file-icon';
        updateIcon();
        this.toDispose.push(this.labelProvider.onDidChange(updateIcon));
        this.node.tabIndex = -1;
        this.node.style.outline = 'none';
        this._previousDebuggingState = (_b = (_a = this.debugSessionManager.currentSession) === null || _a === void 0 ? void 0 : _a.state) !== null && _b !== void 0 ? _b : debug_session_1.DebugState.Inactive;
        this._fontInfo = fontInfo_1.BareFontInfo.createFromRawSettings(this.toFontInfo(), browser_3.PixelRatio.value);
        this.editorPreferences.onPreferenceChanged(() => this._fontInfo = fontInfo_1.BareFontInfo.createFromRawSettings(this.toFontInfo(), browser_3.PixelRatio.value));
        this.debugPreferences.onPreferenceChanged(e => {
            var _a;
            if (e.preferenceName === 'debug.disassemblyView.showSourceCode' && e.newValue !== this._enableSourceCodeRender) {
                this._enableSourceCodeRender = e.newValue;
                this.reloadDisassembly(undefined);
            }
            else {
                (_a = this._disassembledInstructions) === null || _a === void 0 ? void 0 : _a.rerender();
            }
        });
        this.createPane();
    }
    get fontInfo() { return this._fontInfo; }
    get currentInstructionAddresses() {
        return this.debugSessionManager.sessions
            .map(session => session.getThreads(() => true))
            .reduce((prev, curr) => prev.concat(Array.from(curr)), [])
            .map(thread => thread.topFrame)
            .map(frame => frame === null || frame === void 0 ? void 0 : frame.raw.instructionPointerReference);
    }
    get focusedCurrentInstructionAddress() {
        var _a, _b;
        return (_b = (_a = this.debugSessionManager.currentFrame) === null || _a === void 0 ? void 0 : _a.thread.topFrame) === null || _b === void 0 ? void 0 : _b.raw.instructionPointerReference;
    }
    get isSourceCodeRender() { return this._enableSourceCodeRender; }
    get debugSession() { return this.debugSessionManager.currentSession; }
    get focusedInstructionAddress() {
        var _a;
        return (_a = this.debugSessionManager.currentFrame) === null || _a === void 0 ? void 0 : _a.raw.instructionPointerReference;
    }
    get onDidChangeStackFrame() { return this._onDidChangeStackFrame.event; }
    createPane() {
        this._enableSourceCodeRender = this.debugPreferences['debug.disassemblyView.showSourceCode'];
        const monacoInstantiationService = standaloneServices_1.StandaloneServices.initialize({});
        const tableDelegate = new disassembly_view_table_delegate_1.DisassemblyViewTableDelegate(this);
        const instructionRenderer = monacoInstantiationService.createInstance(disassembly_view_instruction_renderer_1.InstructionRenderer, this, this.openerService, { asCanonicalUri(thing) { return thing; } });
        this.toDispose.push(instructionRenderer);
        this.getTable(monacoInstantiationService, tableDelegate, instructionRenderer);
        this.reloadDisassembly();
        this._register(this._disassembledInstructions.onDidScroll(e => {
            if (this._loadingLock) {
                return;
            }
            if (e.oldScrollTop > e.scrollTop && e.scrollTop < e.height) {
                this._loadingLock = true;
                const topElement = Math.floor(e.scrollTop / this.fontInfo.lineHeight) + DisassemblyViewWidget_1.NUM_INSTRUCTIONS_TO_LOAD;
                this.scrollUp_LoadDisassembledInstructions(DisassemblyViewWidget_1.NUM_INSTRUCTIONS_TO_LOAD).then(success => {
                    if (success) {
                        this._disassembledInstructions.reveal(topElement, 0);
                    }
                    this._loadingLock = false;
                });
            }
            else if (e.oldScrollTop < e.scrollTop && e.scrollTop + e.height > e.scrollHeight - e.height) {
                this._loadingLock = true;
                this.scrollDown_LoadDisassembledInstructions(DisassemblyViewWidget_1.NUM_INSTRUCTIONS_TO_LOAD).then(() => { this._loadingLock = false; });
            }
        }));
        this._register(this.debugSessionManager.onDidFocusStackFrame(() => {
            if (this._disassembledInstructions) {
                this.goToAddress();
                this._onDidChangeStackFrame.fire();
            }
        }));
        this._register(this.breakpointManager.onDidChangeInstructionBreakpoints(bpEvent => {
            var _a, _b, _c;
            if (bpEvent && this._disassembledInstructions) {
                // draw viewable BP
                let changed = false;
                (_a = bpEvent.added) === null || _a === void 0 ? void 0 : _a.forEach(bp => {
                    if (breakpoint_marker_1.InstructionBreakpoint.is(bp)) {
                        const index = this.getIndexFromAddress(bp.instructionReference);
                        if (index >= 0) {
                            this._disassembledInstructions.row(index).isBreakpointSet = true;
                            this._disassembledInstructions.row(index).isBreakpointEnabled = bp.enabled;
                            changed = true;
                        }
                    }
                });
                (_b = bpEvent.removed) === null || _b === void 0 ? void 0 : _b.forEach(bp => {
                    if (breakpoint_marker_1.InstructionBreakpoint.is(bp)) {
                        const index = this.getIndexFromAddress(bp.instructionReference);
                        if (index >= 0) {
                            this._disassembledInstructions.row(index).isBreakpointSet = false;
                            changed = true;
                        }
                    }
                });
                (_c = bpEvent.changed) === null || _c === void 0 ? void 0 : _c.forEach(bp => {
                    if (breakpoint_marker_1.InstructionBreakpoint.is(bp)) {
                        const index = this.getIndexFromAddress(bp.instructionReference);
                        if (index >= 0) {
                            if (this._disassembledInstructions.row(index).isBreakpointEnabled !== bp.enabled) {
                                this._disassembledInstructions.row(index).isBreakpointEnabled = bp.enabled;
                                changed = true;
                            }
                        }
                    }
                });
                // get an updated list so that items beyond the current range would render when reached.
                this._instructionBpList = this.breakpointManager.getInstructionBreakpoints();
                if (changed) {
                    this._onDidChangeStackFrame.fire();
                }
            }
        }));
        // This would like to be more specific: onDidChangeState
        this._register(this.debugSessionManager.onDidChange(() => {
            var _a, _b;
            const state = (_a = this.debugSession) === null || _a === void 0 ? void 0 : _a.state;
            if ((state === debug_session_1.DebugState.Running || state === debug_session_1.DebugState.Stopped) &&
                (this._previousDebuggingState !== debug_session_1.DebugState.Running && this._previousDebuggingState !== debug_session_1.DebugState.Stopped)) {
                // Just started debugging, clear the view
                (_b = this._disassembledInstructions) === null || _b === void 0 ? void 0 : _b.splice(0, this._disassembledInstructions.length, [disassemblyNotAvailable]);
                this._enableSourceCodeRender = this.debugPreferences['debug.disassemblyView.showSourceCode'];
            }
            if (state !== undefined && state !== this._previousDebuggingState) {
                this._previousDebuggingState = state;
            }
        }));
    }
    getTable(monacoInstantiationService, tableDelegate, instructionRenderer) {
        return this._disassembledInstructions = this._register(monacoInstantiationService.createInstance(listService_1.WorkbenchTable, 'DisassemblyView', this.node, tableDelegate, [
            {
                label: '',
                tooltip: '',
                weight: 0,
                minimumWidth: this.fontInfo.lineHeight,
                maximumWidth: this.fontInfo.lineHeight,
                templateId: disassembly_view_breakpoint_renderer_1.BreakpointRenderer.TEMPLATE_ID,
                project(row) { return row; }
            },
            {
                label: core_1.nls.localizeByDefault('instructions'),
                tooltip: '',
                weight: 0.3,
                templateId: disassembly_view_instruction_renderer_1.InstructionRenderer.TEMPLATE_ID,
                project(row) { return row; }
            },
        ], [
            new disassembly_view_breakpoint_renderer_1.BreakpointRenderer(this, this.breakpointManager),
            instructionRenderer,
        ], {
            identityProvider: { getId: (e) => e.instruction.address },
            horizontalScrolling: false,
            overrideStyles: {
                listBackground: colorRegistry_1.editorBackground
            },
            multipleSelectionSupport: false,
            setRowLineHeight: false,
            openOnSingleClick: false,
            accessibilityProvider: new disassembly_view_accessibility_provider_1.AccessibilityProvider(),
            mouseSupport: false
        }));
    }
    adjustLayout(dimension) {
        if (this._disassembledInstructions) {
            this._disassembledInstructions.layout(dimension.height);
        }
    }
    goToAddress(address, focus) {
        if (!this._disassembledInstructions) {
            return;
        }
        if (!address) {
            address = this.focusedInstructionAddress;
        }
        if (!address) {
            return;
        }
        const index = this.getIndexFromAddress(address);
        if (index >= 0) {
            this._disassembledInstructions.reveal(index);
            if (focus) {
                this._disassembledInstructions.domFocus();
                this._disassembledInstructions.setFocus([index]);
            }
        }
        else if (this.debugSessionManager.state === debug_session_1.DebugState.Stopped) {
            // Address is not provided or not in the table currently, clear the table
            // and reload if we are in the state where we can load disassembly.
            this.reloadDisassembly(address);
        }
    }
    async scrollUp_LoadDisassembledInstructions(instructionCount) {
        var _a;
        if (this._disassembledInstructions && this._disassembledInstructions.length > 0) {
            const address = (_a = this._disassembledInstructions) === null || _a === void 0 ? void 0 : _a.row(0).instruction.address;
            return this.loadDisassembledInstructions(address, -instructionCount, instructionCount);
        }
        return false;
    }
    async scrollDown_LoadDisassembledInstructions(instructionCount) {
        var _a, _b;
        if (this._disassembledInstructions && this._disassembledInstructions.length > 0) {
            const address = (_a = this._disassembledInstructions) === null || _a === void 0 ? void 0 : _a.row(((_b = this._disassembledInstructions) === null || _b === void 0 ? void 0 : _b.length) - 1).instruction.address;
            return this.loadDisassembledInstructions(address, 1, instructionCount);
        }
        return false;
    }
    async loadDisassembledInstructions(memoryReference, instructionOffset, instructionCount) {
        var _a, _b, _c, _d, _e;
        // if address is null, then use current stack frame.
        if (!memoryReference || memoryReference === '-1') {
            memoryReference = this.focusedInstructionAddress;
        }
        if (!memoryReference) {
            return false;
        }
        const session = this.debugSession;
        const resultEntries = (_b = (_a = (await (session === null || session === void 0 ? void 0 : session.sendRequest('disassemble', {
            instructionCount,
            memoryReference,
            instructionOffset,
            offset: 0,
            resolveSymbols: true,
        })))) === null || _a === void 0 ? void 0 : _a.body) === null || _b === void 0 ? void 0 : _b.instructions;
        if (session && resultEntries && this._disassembledInstructions) {
            const newEntries = [];
            const allowBreakpoint = Boolean(session.capabilities.supportsInstructionBreakpoints);
            let lastLocation;
            let lastLine;
            for (let i = 0; i < resultEntries.length; i++) {
                const found = this._instructionBpList.find(p => p.instructionReference === resultEntries[i].address);
                const instruction = resultEntries[i];
                // Forward fill the missing location as detailed in the DAP spec.
                if (instruction.location) {
                    lastLocation = instruction.location;
                    lastLine = undefined;
                }
                if (instruction.line) {
                    const currentLine = {
                        startLineNumber: instruction.line,
                        startColumn: (_c = instruction.column) !== null && _c !== void 0 ? _c : 0,
                        endLineNumber: (_d = instruction.endLine) !== null && _d !== void 0 ? _d : instruction.line,
                        endColumn: (_e = instruction.endColumn) !== null && _e !== void 0 ? _e : 0,
                    };
                    // Add location only to the first unique range. This will give the appearance of grouping of instructions.
                    if (!monaco_editor_core_1.Range.equalsRange(currentLine, lastLine !== null && lastLine !== void 0 ? lastLine : null)) { // eslint-disable-line no-null/no-null
                        lastLine = currentLine;
                        instruction.location = lastLocation;
                    }
                }
                newEntries.push({ allowBreakpoint, isBreakpointSet: found !== undefined, isBreakpointEnabled: !!(found === null || found === void 0 ? void 0 : found.enabled), instruction: instruction });
            }
            const specialEntriesToRemove = this._disassembledInstructions.length === 1 ? 1 : 0;
            // request is either at the start or end
            if (instructionOffset >= 0) {
                this._disassembledInstructions.splice(this._disassembledInstructions.length, specialEntriesToRemove, newEntries);
            }
            else {
                this._disassembledInstructions.splice(0, specialEntriesToRemove, newEntries);
            }
            return true;
        }
        return false;
    }
    getIndexFromAddress(instructionAddress) {
        const disassembledInstructions = this._disassembledInstructions;
        if (disassembledInstructions && disassembledInstructions.length > 0) {
            const address = BigInt(instructionAddress);
            if (address) {
                return types_1.ArrayUtils.binarySearch2(disassembledInstructions.length, index => {
                    const row = disassembledInstructions.row(index);
                    this.ensureAddressParsed(row);
                    if (row.instructionAddress > address) {
                        return 1;
                    }
                    else if (row.instructionAddress < address) {
                        return -1;
                    }
                    else {
                        return 0;
                    }
                });
            }
        }
        return -1;
    }
    ensureAddressParsed(entry) {
        if (entry.instructionAddress !== undefined) {
            return;
        }
        else {
            entry.instructionAddress = BigInt(entry.instruction.address);
        }
    }
    /**
     * Clears the table and reload instructions near the target address
     */
    reloadDisassembly(targetAddress) {
        if (this._disassembledInstructions) {
            this._loadingLock = true; // stop scrolling during the load.
            this._disassembledInstructions.splice(0, this._disassembledInstructions.length, [disassemblyNotAvailable]);
            this._instructionBpList = this.breakpointManager.getInstructionBreakpoints();
            this.loadDisassembledInstructions(targetAddress, -DisassemblyViewWidget_1.NUM_INSTRUCTIONS_TO_LOAD * 4, DisassemblyViewWidget_1.NUM_INSTRUCTIONS_TO_LOAD * 8).then(() => {
                // on load, set the target instruction in the middle of the page.
                if (this._disassembledInstructions.length > 0) {
                    const targetIndex = Math.floor(this._disassembledInstructions.length / 2);
                    this._disassembledInstructions.reveal(targetIndex, 0.5);
                    // Always focus the target address on reload, or arrow key navigation would look terrible
                    this._disassembledInstructions.domFocus();
                    this._disassembledInstructions.setFocus([targetIndex]);
                }
                this._loadingLock = false;
            });
        }
    }
    onResize(msg) {
        this.adjustLayout(new dom_1.Dimension(msg.width, msg.height));
    }
    onActivateRequest(msg) {
        this.node.focus();
        super.onActivateRequest(msg);
    }
    toFontInfo() {
        return {
            fontFamily: this.editorPreferences['editor.fontFamily'],
            fontWeight: String(this.editorPreferences['editor.fontWeight']),
            fontSize: this.editorPreferences['editor.fontSize'],
            fontLigatures: this.editorPreferences['editor.fontLigatures'],
            lineHeight: this.editorPreferences['editor.lineHeight'],
            letterSpacing: this.editorPreferences['editor.letterSpacing'],
        };
    }
    _register(disposable) {
        this.toDispose.push(disposable);
        return disposable;
    }
};
DisassemblyViewWidget.ID = 'disassembly-view-widget';
DisassemblyViewWidget.NUM_INSTRUCTIONS_TO_LOAD = 50;
__decorate([
    (0, inversify_1.inject)(breakpoint_manager_1.BreakpointManager),
    __metadata("design:type", breakpoint_manager_1.BreakpointManager)
], DisassemblyViewWidget.prototype, "breakpointManager", void 0);
__decorate([
    (0, inversify_1.inject)(debug_session_manager_1.DebugSessionManager),
    __metadata("design:type", debug_session_manager_1.DebugSessionManager)
], DisassemblyViewWidget.prototype, "debugSessionManager", void 0);
__decorate([
    (0, inversify_1.inject)(browser_2.EditorPreferences),
    __metadata("design:type", Object)
], DisassemblyViewWidget.prototype, "editorPreferences", void 0);
__decorate([
    (0, inversify_1.inject)(debug_preferences_1.DebugPreferences),
    __metadata("design:type", Object)
], DisassemblyViewWidget.prototype, "debugPreferences", void 0);
__decorate([
    (0, inversify_1.inject)(browser_1.OpenerService),
    __metadata("design:type", Object)
], DisassemblyViewWidget.prototype, "openerService", void 0);
__decorate([
    (0, inversify_1.inject)(browser_1.LabelProvider),
    __metadata("design:type", browser_1.LabelProvider)
], DisassemblyViewWidget.prototype, "labelProvider", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DisassemblyViewWidget.prototype, "init", null);
DisassemblyViewWidget = DisassemblyViewWidget_1 = __decorate([
    (0, inversify_1.injectable)()
], DisassemblyViewWidget);
exports.DisassemblyViewWidget = DisassemblyViewWidget;


/***/ }),

/***/ "./node_modules/@theia/debug/lib/browser/preferences/launch-preferences.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@theia/debug/lib/browser/preferences/launch-preferences.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindLaunchPreferences = exports.launchPreferencesSchema = void 0;
const preference_contribution_1 = __webpack_require__(/*! @theia/core/lib/browser/preferences/preference-contribution */ "./node_modules/@theia/core/lib/browser/preferences/preference-contribution.js");
const debug_schema_updater_1 = __webpack_require__(/*! ../debug-schema-updater */ "./node_modules/@theia/debug/lib/browser/debug-schema-updater.js");
const preference_configurations_1 = __webpack_require__(/*! @theia/core/lib/browser/preferences/preference-configurations */ "./node_modules/@theia/core/lib/browser/preferences/preference-configurations.js");
const nls_1 = __webpack_require__(/*! @theia/core/lib/common/nls */ "./node_modules/@theia/core/lib/common/nls.js");
exports.launchPreferencesSchema = {
    type: 'object',
    scope: 'resource',
    properties: {
        'launch': {
            $ref: debug_schema_updater_1.launchSchemaId,
            description: nls_1.nls.localizeByDefault("Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces."),
            defaultValue: { configurations: [], compounds: [] }
        }
    }
};
function bindLaunchPreferences(bind) {
    bind(preference_contribution_1.PreferenceContribution).toConstantValue({ schema: exports.launchPreferencesSchema });
    bind(preference_configurations_1.PreferenceConfiguration).toConstantValue({ name: 'launch' });
}
exports.bindLaunchPreferences = bindLaunchPreferences;


/***/ }),

/***/ "./node_modules/@theia/debug/lib/common/debug-uri-utils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@theia/debug/lib/common/debug-uri-utils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2022 STMicroelectronics and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SCHEME_PATTERN = exports.DEBUG_SCHEME = void 0;
/**
 * The URI scheme for debug URIs.
 */
exports.DEBUG_SCHEME = 'debug';
/**
 * The pattern for URI schemes.
 */
exports.SCHEME_PATTERN = /^[a-zA-Z][a-zA-Z0-9\+\-\.]+:/;


/***/ }),

/***/ "./node_modules/@theia/workspace/lib/browser/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@theia/workspace/lib/browser/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./workspace-commands */ "./node_modules/@theia/workspace/lib/browser/workspace-commands.js"), exports);
__exportStar(__webpack_require__(/*! ./workspace-service */ "./node_modules/@theia/workspace/lib/browser/workspace-service.js"), exports);
__exportStar(__webpack_require__(/*! ./canonical-uri-service */ "./node_modules/@theia/workspace/lib/browser/canonical-uri-service.js"), exports);
__exportStar(__webpack_require__(/*! ./workspace-frontend-contribution */ "./node_modules/@theia/workspace/lib/browser/workspace-frontend-contribution.js"), exports);
__exportStar(__webpack_require__(/*! ./workspace-frontend-module */ "./node_modules/@theia/workspace/lib/browser/workspace-frontend-module.js"), exports);
__exportStar(__webpack_require__(/*! ./workspace-preferences */ "./node_modules/@theia/workspace/lib/browser/workspace-preferences.js"), exports);
__exportStar(__webpack_require__(/*! ./workspace-trust-service */ "./node_modules/@theia/workspace/lib/browser/workspace-trust-service.js"), exports);


/***/ }),

/***/ "./node_modules/@theia/debug/src/browser/style/index.css":
/*!***************************************************************!*\
  !*** ./node_modules/@theia/debug/src/browser/style/index.css ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../../../css-loader/dist/cjs.js!./index.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/@theia/debug/src/browser/style/index.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_theia_core_shared_lodash_debounce_index_js-node_modules_theia_core_share-3b1c8a.js.map