{"version":3,"file":"vendors-node_modules_theia_filesystem_lib_browser_file-dialog_index_js-node_modules_theia_fil-e74cc6.js","mappings":"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","sources":["webpack:///./node_modules/@theia/filesystem/src/browser/file-dialog/file-dialog-container.ts?","webpack:///./node_modules/@theia/filesystem/src/browser/file-dialog/index.ts?","webpack:///./node_modules/@theia/filesystem/src/browser/file-resource.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { interfaces, Container } from '@theia/core/shared/inversify';\nimport { Tree, TreeModel, TreeProps, defaultTreeProps } from '@theia/core/lib/browser';\nimport { createFileTreeContainer, FileTreeModel, FileTreeWidget } from '../file-tree';\nimport { OpenFileDialog, OpenFileDialogProps, SaveFileDialog, SaveFileDialogProps } from './file-dialog';\nimport { FileDialogModel } from './file-dialog-model';\nimport { FileDialogWidget } from './file-dialog-widget';\nimport { FileDialogTree } from './file-dialog-tree';\n\nexport function createFileDialogContainer(parent: interfaces.Container): Container {\n    const child = createFileTreeContainer(parent);\n\n    child.unbind(FileTreeModel);\n    child.bind(FileDialogModel).toSelf();\n    child.rebind(TreeModel).toService(FileDialogModel);\n\n    child.unbind(FileTreeWidget);\n    child.bind(FileDialogWidget).toSelf();\n\n    child.bind(FileDialogTree).toSelf();\n    child.rebind(Tree).toService(FileDialogTree);\n\n    return child;\n}\n\nexport function createOpenFileDialogContainer(parent: interfaces.Container, props: OpenFileDialogProps): Container {\n    const container = createFileDialogContainer(parent);\n    container.rebind(TreeProps).toConstantValue({\n        ...defaultTreeProps,\n        multiSelect: props.canSelectMany,\n        search: true\n    });\n\n    container.bind(OpenFileDialogProps).toConstantValue(props);\n    container.bind(OpenFileDialog).toSelf();\n\n    return container;\n}\n\nexport function createSaveFileDialogContainer(parent: interfaces.Container, props: SaveFileDialogProps): Container {\n    const container = createFileDialogContainer(parent);\n    container.rebind(TreeProps).toConstantValue({\n        ...defaultTreeProps,\n        multiSelect: false,\n        search: true\n    });\n\n    container.bind(SaveFileDialogProps).toConstantValue(props);\n    container.bind(SaveFileDialog).toSelf();\n\n    return container;\n}\n","// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nexport * from './file-dialog';\nexport * from './file-dialog-container';\nexport * from './file-dialog-tree-filters-renderer';\nexport * from './file-dialog-service';\n","// *****************************************************************************\n// Copyright (C) 2018 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject } from '@theia/core/shared/inversify';\nimport { Resource, ResourceVersion, ResourceResolver, ResourceError, ResourceSaveOptions } from '@theia/core/lib/common/resource';\nimport { DisposableCollection } from '@theia/core/lib/common/disposable';\nimport { Emitter, Event } from '@theia/core/lib/common/event';\nimport { Readable, ReadableStream } from '@theia/core/lib/common/stream';\nimport URI from '@theia/core/lib/common/uri';\nimport { FileOperation, FileOperationError, FileOperationResult, ETAG_DISABLED, FileSystemProviderCapabilities, FileReadStreamOptions, BinarySize } from '../common/files';\nimport { FileService, TextFileOperationError, TextFileOperationResult } from './file-service';\nimport { ConfirmDialog, Dialog } from '@theia/core/lib/browser/dialogs';\nimport { LabelProvider } from '@theia/core/lib/browser/label-provider';\nimport { GENERAL_MAX_FILE_SIZE_MB } from './filesystem-preferences';\nimport { FrontendApplicationStateService } from '@theia/core/lib/browser/frontend-application-state';\nimport { nls } from '@theia/core';\n\nexport interface FileResourceVersion extends ResourceVersion {\n    readonly encoding: string;\n    readonly mtime: number;\n    readonly etag: string;\n}\nexport namespace FileResourceVersion {\n    export function is(version: ResourceVersion | undefined): version is FileResourceVersion {\n        return !!version && 'encoding' in version && 'mtime' in version && 'etag' in version;\n    }\n}\n\nexport interface FileResourceOptions {\n    isReadonly: boolean\n    shouldOverwrite: () => Promise<boolean>\n    shouldOpenAsText: (error: string) => Promise<boolean>\n}\n\nexport class FileResource implements Resource {\n\n    protected acceptTextOnly = true;\n    protected limits: FileReadStreamOptions['limits'];\n\n    protected readonly toDispose = new DisposableCollection();\n    protected readonly onDidChangeContentsEmitter = new Emitter<void>();\n    readonly onDidChangeContents: Event<void> = this.onDidChangeContentsEmitter.event;\n\n    protected _version: FileResourceVersion | undefined;\n    get version(): FileResourceVersion | undefined {\n        return this._version;\n    }\n    get encoding(): string | undefined {\n        return this._version?.encoding;\n    }\n    get isReadonly(): boolean {\n        return this.options.isReadonly || this.fileService.hasCapability(this.uri, FileSystemProviderCapabilities.Readonly);\n    }\n\n    constructor(\n        readonly uri: URI,\n        protected readonly fileService: FileService,\n        protected readonly options: FileResourceOptions\n    ) {\n        this.toDispose.push(this.onDidChangeContentsEmitter);\n        this.toDispose.push(this.fileService.onDidFilesChange(event => {\n            if (event.contains(this.uri)) {\n                this.sync();\n            }\n        }));\n        this.toDispose.push(this.fileService.onDidRunOperation(e => {\n            if ((e.isOperation(FileOperation.DELETE) || e.isOperation(FileOperation.MOVE)) && e.resource.isEqualOrParent(this.uri)) {\n                this.sync();\n            }\n        }));\n        try {\n            this.toDispose.push(this.fileService.watch(this.uri));\n        } catch (e) {\n            console.error(e);\n        }\n        this.updateSavingContentChanges();\n        this.toDispose.push(this.fileService.onDidChangeFileSystemProviderCapabilities(e => {\n            if (e.scheme === this.uri.scheme) {\n                this.updateSavingContentChanges();\n            }\n        }));\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    async readContents(options?: { encoding?: string }): Promise<string> {\n        try {\n            const encoding = options?.encoding || this.version?.encoding;\n            const stat = await this.fileService.read(this.uri, {\n                encoding,\n                etag: ETAG_DISABLED,\n                acceptTextOnly: this.acceptTextOnly,\n                limits: this.limits\n            });\n            this._version = {\n                encoding: stat.encoding,\n                etag: stat.etag,\n                mtime: stat.mtime\n            };\n            return stat.value;\n        } catch (e) {\n            if (e instanceof TextFileOperationError && e.textFileOperationResult === TextFileOperationResult.FILE_IS_BINARY) {\n                if (await this.shouldOpenAsText(nls.localize('theia/filesystem/fileResource/binaryTitle', 'The file is either binary or uses an unsupported text encoding.'))) {\n                    this.acceptTextOnly = false;\n                    return this.readContents(options);\n                }\n            } else if (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_TOO_LARGE) {\n                const stat = await this.fileService.resolve(this.uri, { resolveMetadata: true });\n                const maxFileSize = GENERAL_MAX_FILE_SIZE_MB * 1024 * 1024;\n                if (this.limits?.size !== maxFileSize && await this.shouldOpenAsText(nls.localize(\n                    'theia/filesystem/fileResource/largeFileTitle', 'The file is too large ({0}).', BinarySize.formatSize(stat.size)))) {\n                    this.limits = {\n                        size: maxFileSize\n                    };\n                    return this.readContents(options);\n                }\n            } else if (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n                this._version = undefined;\n                const { message, stack } = e;\n                throw ResourceError.NotFound({\n                    message, stack,\n                    data: {\n                        uri: this.uri\n                    }\n                });\n            }\n            throw e;\n        }\n    }\n\n    async readStream(options?: { encoding?: string }): Promise<ReadableStream<string>> {\n        try {\n            const encoding = options?.encoding || this.version?.encoding;\n            const stat = await this.fileService.readStream(this.uri, {\n                encoding,\n                etag: ETAG_DISABLED,\n                acceptTextOnly: this.acceptTextOnly,\n                limits: this.limits\n            });\n            this._version = {\n                encoding: stat.encoding,\n                etag: stat.etag,\n                mtime: stat.mtime\n            };\n            return stat.value;\n        } catch (e) {\n            if (e instanceof TextFileOperationError && e.textFileOperationResult === TextFileOperationResult.FILE_IS_BINARY) {\n                if (await this.shouldOpenAsText(nls.localize('theia/filesystem/fileResource/binaryTitle', 'The file is either binary or uses an unsupported text encoding.'))) {\n                    this.acceptTextOnly = false;\n                    return this.readStream(options);\n                }\n            } else if (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_TOO_LARGE) {\n                const stat = await this.fileService.resolve(this.uri, { resolveMetadata: true });\n                const maxFileSize = GENERAL_MAX_FILE_SIZE_MB * 1024 * 1024;\n                if (this.limits?.size !== maxFileSize && await this.shouldOpenAsText(nls.localize(\n                    'theia/filesystem/fileResource/largeFileTitle', 'The file is too large ({0}).', BinarySize.formatSize(stat.size)))) {\n                    this.limits = {\n                        size: maxFileSize\n                    };\n                    return this.readStream(options);\n                }\n            } else if (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n                this._version = undefined;\n                const { message, stack } = e;\n                throw ResourceError.NotFound({\n                    message, stack,\n                    data: {\n                        uri: this.uri\n                    }\n                });\n            }\n            throw e;\n        }\n    }\n\n    protected doWrite = async (content: string | Readable<string>, options?: ResourceSaveOptions): Promise<void> => {\n        const version = options?.version || this._version;\n        const current = FileResourceVersion.is(version) ? version : undefined;\n        const etag = current?.etag;\n        try {\n            const stat = await this.fileService.write(this.uri, content, {\n                encoding: options?.encoding,\n                overwriteEncoding: options?.overwriteEncoding,\n                etag,\n                mtime: current?.mtime\n            });\n            this._version = {\n                etag: stat.etag,\n                mtime: stat.mtime,\n                encoding: stat.encoding\n            };\n        } catch (e) {\n            if (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_MODIFIED_SINCE) {\n                if (etag !== ETAG_DISABLED && await this.shouldOverwrite()) {\n                    return this.doWrite(content, { ...options, version: { stat: { ...current, etag: ETAG_DISABLED } } });\n                }\n                const { message, stack } = e;\n                throw ResourceError.OutOfSync({ message, stack, data: { uri: this.uri } });\n            }\n            throw e;\n        }\n    };\n\n    saveStream?: Resource['saveStream'];\n    saveContents?: Resource['saveContents'];\n    saveContentChanges?: Resource['saveContentChanges'];\n    protected updateSavingContentChanges(): void {\n        if (this.isReadonly) {\n            delete this.saveContentChanges;\n            delete this.saveContents;\n            delete this.saveStream;\n        } else {\n            this.saveContents = this.doWrite;\n            this.saveStream = this.doWrite;\n            if (this.fileService.hasCapability(this.uri, FileSystemProviderCapabilities.Update)) {\n                this.saveContentChanges = this.doSaveContentChanges;\n            }\n        }\n    }\n    protected doSaveContentChanges: Resource['saveContentChanges'] = async (changes, options) => {\n        const version = options?.version || this._version;\n        const current = FileResourceVersion.is(version) ? version : undefined;\n        if (!current) {\n            throw ResourceError.NotFound({ message: 'has not been read yet', data: { uri: this.uri } });\n        }\n        const etag = current?.etag;\n        try {\n            const stat = await this.fileService.update(this.uri, changes, {\n                readEncoding: current.encoding,\n                encoding: options?.encoding,\n                overwriteEncoding: options?.overwriteEncoding,\n                etag,\n                mtime: current?.mtime\n            });\n            this._version = {\n                etag: stat.etag,\n                mtime: stat.mtime,\n                encoding: stat.encoding\n            };\n        } catch (e) {\n            if (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n                const { message, stack } = e;\n                throw ResourceError.NotFound({ message, stack, data: { uri: this.uri } });\n            }\n            if (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_MODIFIED_SINCE) {\n                const { message, stack } = e;\n                throw ResourceError.OutOfSync({ message, stack, data: { uri: this.uri } });\n            }\n            throw e;\n        }\n    };\n\n    async guessEncoding(): Promise<string> {\n        // TODO limit size\n        const content = await this.fileService.read(this.uri, { autoGuessEncoding: true });\n        return content.encoding;\n    }\n\n    protected async sync(): Promise<void> {\n        if (await this.isInSync()) {\n            return;\n        }\n        this.onDidChangeContentsEmitter.fire(undefined);\n    }\n    protected async isInSync(): Promise<boolean> {\n        try {\n            const stat = await this.fileService.resolve(this.uri, { resolveMetadata: true });\n            return !!this.version && this.version.mtime >= stat.mtime;\n        } catch {\n            return !this.version;\n        }\n    }\n\n    protected async shouldOverwrite(): Promise<boolean> {\n        return this.options.shouldOverwrite();\n    }\n\n    protected async shouldOpenAsText(error: string): Promise<boolean> {\n        return this.options.shouldOpenAsText(error);\n    }\n\n}\n\n@injectable()\nexport class FileResourceResolver implements ResourceResolver {\n\n    @inject(FileService)\n    protected readonly fileService: FileService;\n\n    @inject(LabelProvider)\n    protected readonly labelProvider: LabelProvider;\n\n    @inject(FrontendApplicationStateService)\n    protected readonly applicationState: FrontendApplicationStateService;\n\n    async resolve(uri: URI): Promise<FileResource> {\n        let stat;\n        try {\n            stat = await this.fileService.resolve(uri);\n        } catch (e) {\n            if (!(e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_NOT_FOUND)) {\n                throw e;\n            }\n        }\n        if (stat && stat.isDirectory) {\n            throw new Error('The given uri is a directory: ' + this.labelProvider.getLongName(uri));\n        }\n        return new FileResource(uri, this.fileService, {\n            isReadonly: stat?.isReadonly ?? false,\n            shouldOverwrite: () => this.shouldOverwrite(uri),\n            shouldOpenAsText: error => this.shouldOpenAsText(uri, error)\n        });\n    }\n\n    protected async shouldOverwrite(uri: URI): Promise<boolean> {\n        const dialog = new ConfirmDialog({\n            title: nls.localize('theia/filesystem/fileResource/overwriteTitle', \"The file '{0}' has been changed on the file system.\", this.labelProvider.getName(uri)),\n            msg: nls.localize('theia/fileSystem/fileResource/overWriteBody',\n                \"Do you want to overwrite the changes made to '{0}' on the file system?\", this.labelProvider.getLongName(uri)),\n            ok: Dialog.YES,\n            cancel: Dialog.NO,\n        });\n        return !!await dialog.open();\n    }\n\n    protected async shouldOpenAsText(uri: URI, error: string): Promise<boolean> {\n        switch (this.applicationState.state) {\n            case 'init':\n            case 'started_contributions':\n            case 'attached_shell':\n                return true; // We're restoring state - assume that we should open files that were previously open.\n            default: {\n                const dialog = new ConfirmDialog({\n                    title: error,\n                    msg: nls.localize('theia/filesystem/fileResource/binaryFileQuery',\n                        \"Opening it might take some time and might make the IDE unresponsive. Do you want to open '{0}' anyway?\", this.labelProvider.getLongName(uri)\n                    ),\n                    ok: Dialog.YES,\n                    cancel: Dialog.NO,\n                });\n                return !!await dialog.open();\n            }\n        }\n    }\n\n}\n"],"names":[],"sourceRoot":""}