{"version":3,"file":"vendors-node_modules_theia_navigator_lib_browser_navigator-widget-factory_js.js","mappings":"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AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;AACA,mCAAmC;AACnC,oCAAoC;AACpC;AACA;AACA;;;AAGA;AACA;AACA,wCAAwC,GAAG,IAAI;AAC/C;AACA;AACA;;AAEA;AACA,qBAAqB,KAAK;;AAE1B;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA+B;AAC/B,uCAAuC,GAAG;AAC1C,YAAY,GAAG,yBAAyB;AACxC;AACA;AACA,8BAA8B;AAC9B,cAAc,GAAG;AACjB;;AAEA;AACA;;AAEA;AACA,WAAW,YAAY;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,qBAAqB,KAAK;AAC1B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,iBAAiB;AACrC,6BAA6B,eAAe;AAC5C;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,UAAU,EAAE;AACZ,6BAA6B;AAC7B,wBAAwB;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,cAAc,KAAK,QAAQ,EAAE,IAAI,EAAE;AACnC;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;;AAEA,sBAAsB,cAAc;AACpC;AACA;AACA;;AAEA,oBAAoB,cAAc;AAClC,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;ACzMA;AACA;AACA;AACA,+BAA+B,YAAY,IAAI;;;;;;;;;;;ACH/C,4DAA4D;AAC5D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,aAAa,mBAAO,CAAC,2DAAe;AACpC;;AAEA;AACA;AACA,eAAe,mBAAO,CAAC,gEAAiB;;AAExC;AACA,SAAS,sCAAsC;AAC/C,SAAS,0BAA0B;AACnC,SAAS,0BAA0B;AACnC,SAAS,0BAA0B;AACnC,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,IAAI;;AAE/C;AACA;AACA;;AAEA,cAAc;AACd;AACA;AACA;AACA,CAAC,IAAI;;AAEL;AACA,kCAAkC;;AAElC;AACA;;AAEA;AACA;;AAEA,yCAAyC;AACzC;;AAEA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;AAMA;AACA,KAAK,IAAI;AACT,KAAK,GAAG;AACR,KAAK,KAAK;AACV,KAAK,IAAI,IAAI,EAAE;AACf,KAAK,IAAI,EAAE,IAAI;AACf;AACA;AACA,KAAK,IAAI,OAAO,IAAI;AACpB,KAAK,EAAE,OAAO,EAAE;AAChB;;AAEA,0CAA0C;AAC1C;;AAEA;AACA;AACA,6BAA6B,QAAQ,MAAM;AAC3C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC;;AAEtC,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C;AAC5C;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB,iDAAiD;AACrE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,4CAA4C;;AAEpD;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,UAAU;AACV;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,IAAI;AAC/B;AACA;AACA;AACA;AACA;AACA,2BAA2B,IAAI;AAC/B;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,iDAAiD;AACxmDAAmD,kBAAkB;AACrE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,QAAQ;AACR,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,IAAI;AAC1C;AACA;AACA;AACA;AACA,kCAAkC,EAAE,EAAE,KAAK;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2CAA2C,QAAQ;AACnD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;;AAEA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","sources":["webpack:///./node_modules/@theia/navigator/src/browser/abstract-navigator-tree-widget.ts?","webpack:///./node_modules/@theia/navigator/src/browser/navigator-context-key-service.ts?","webpack:///./node_modules/@theia/navigator/src/browser/navigator-filter.ts?","webpack:///./node_modules/@theia/navigator/src/browser/navigator-model.ts?","webpack:///./node_modules/@theia/navigator/src/browser/navigator-preferences.ts?","webpack:///./node_modules/@theia/navigator/src/browser/navigator-tree.ts?","webpack:///./node_modules/@theia/navigator/src/browser/navigator-widget-factory.ts?","webpack:///./node_modules/@theia/navigator/src/browser/navigator-widget.tsx?","webpack:///./node_modules/@theia/navigator/src/browser/open-editors-widget/navigator-open-editors-commands.ts?","webpack:///./node_modules/@theia/navigator/src/browser/open-editors-widget/navigator-open-editors-menus.ts?","webpack:///./node_modules/@theia/navigator/src/browser/open-editors-widget/navigator-open-editors-widget.tsx?","webpack:///./node_modules/balanced-match/index.js?","webpack:///./node_modules/brace-expansion/index.js?","webpack:///./node_modules/minimatch/lib/path.js?","webpack:///./node_modules/minimatch/minimatch.js?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2022 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport { FileNavigatorPreferences } from './navigator-preferences';\nimport { PreferenceService } from '@theia/core/lib/browser/preferences/preference-service';\nimport { FileTreeWidget } from '@theia/filesystem/lib/browser';\nimport { Attributes, HTMLAttributes } from '@theia/core/shared/react';\nimport { TreeNode } from '@theia/core/lib/browser';\n\n@injectable()\nexport class AbstractNavigatorTreeWidget extends FileTreeWidget {\n\n    @inject(PreferenceService)\n    protected readonly preferenceService: PreferenceService;\n\n    @inject(FileNavigatorPreferences)\n    protected readonly navigatorPreferences: FileNavigatorPreferences;\n\n    @postConstruct()\n    protected override init(): void {\n        super.init();\n        this.toDispose.push(\n            this.preferenceService.onPreferenceChanged(preference => {\n                if (preference.preferenceName === 'explorer.decorations.colors') {\n                    this.update();\n                }\n            })\n        );\n    }\n\n    protected override decorateCaption(node: TreeNode, attrs: HTMLAttributes<HTMLElement>): Attributes & HTMLAttributes<HTMLElement> {\n        const attributes = super.decorateCaption(node, attrs);\n        if (this.navigatorPreferences.get('explorer.decorations.colors')) {\n            return attributes;\n        } else {\n            return {\n                ...attributes,\n                style: {\n                    ...attributes.style,\n                    color: undefined,\n                }\n            };\n        }\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2019 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport { ContextKeyService, ContextKey } from '@theia/core/lib/browser/context-key-service';\n\n@injectable()\nexport class NavigatorContextKeyService {\n\n    @inject(ContextKeyService)\n    protected readonly contextKeyService: ContextKeyService;\n\n    protected _explorerViewletVisible: ContextKey<boolean>;\n    get explorerViewletVisible(): ContextKey<boolean> {\n        return this._explorerViewletVisible;\n    }\n\n    protected _explorerViewletFocus: ContextKey<boolean>;\n    /** True if Explorer view has keyboard focus. */\n    get explorerViewletFocus(): ContextKey<boolean> {\n        return this._explorerViewletFocus;\n    }\n\n    protected _filesExplorerFocus: ContextKey<boolean>;\n    /** True if File Explorer section has keyboard focus. */\n    get filesExplorerFocus(): ContextKey<boolean> {\n        return this._filesExplorerFocus;\n    }\n\n    protected _explorerResourceIsFolder: ContextKey<boolean>;\n    get explorerResourceIsFolder(): ContextKey<boolean> {\n        return this._explorerResourceIsFolder;\n    }\n\n    @postConstruct()\n    protected init(): void {\n        this._explorerViewletVisible = this.contextKeyService.createKey<boolean>('explorerViewletVisible', false);\n        this._explorerViewletFocus = this.contextKeyService.createKey<boolean>('explorerViewletFocus', false);\n        this._filesExplorerFocus = this.contextKeyService.createKey<boolean>('filesExplorerFocus', false);\n        this._explorerResourceIsFolder = this.contextKeyService.createKey<boolean>('explorerResourceIsFolder', false);\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2018 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { inject, injectable, postConstruct } from '@theia/core/shared/inversify';\nimport { Minimatch } from 'minimatch';\nimport { MaybePromise } from '@theia/core/lib/common/types';\nimport { Event, Emitter } from '@theia/core/lib/common/event';\nimport { PreferenceChangeEvent } from '@theia/core/lib/browser/preferences';\nimport { FileSystemPreferences, FileSystemConfiguration } from '@theia/filesystem/lib/browser/filesystem-preferences';\nimport { FileNavigatorPreferences, FileNavigatorConfiguration } from './navigator-preferences';\n\n/**\n * Filter for omitting elements from the navigator. For more details on the exclusion patterns,\n * one should check either the manual with `man 5 gitignore` or just [here](https://git-scm.com/docs/gitignore).\n */\n@injectable()\nexport class FileNavigatorFilter {\n    protected readonly emitter: Emitter<void> = new Emitter<void>();\n\n    protected filterPredicate: FileNavigatorFilter.Predicate;\n    protected showHiddenFiles: boolean;\n\n    @inject(FileSystemPreferences)\n    protected readonly filesPreferences: FileSystemPreferences;\n\n    constructor(\n        @inject(FileNavigatorPreferences) protected readonly preferences: FileNavigatorPreferences\n    ) { }\n\n    @postConstruct()\n    protected init(): void {\n        this.doInit();\n    }\n\n    protected async doInit(): Promise<void> {\n        this.filterPredicate = this.createFilterPredicate(this.filesPreferences['files.exclude']);\n        this.filesPreferences.onPreferenceChanged(event => this.onFilesPreferenceChanged(event));\n        this.preferences.onPreferenceChanged(event => this.onPreferenceChanged(event));\n    }\n\n    async filter<T extends { id: string }>(items: MaybePromise<T[]>): Promise<T[]> {\n        return (await items).filter(item => this.filterItem(item));\n    }\n\n    get onFilterChanged(): Event<void> {\n        return this.emitter.event;\n    }\n\n    protected filterItem(item: { id: string }): boolean {\n        return this.filterPredicate.filter(item);\n    }\n\n    protected fireFilterChanged(): void {\n        this.emitter.fire(undefined);\n    }\n\n    protected onFilesPreferenceChanged(event: PreferenceChangeEvent<FileSystemConfiguration>): void {\n        const { preferenceName, newValue } = event;\n        if (preferenceName === 'files.exclude') {\n            this.filterPredicate = this.createFilterPredicate(newValue as FileNavigatorFilter.Exclusions | undefined || {});\n            this.fireFilterChanged();\n        }\n    }\n\n    protected onPreferenceChanged(event: PreferenceChangeEvent<FileNavigatorConfiguration>): void {\n    }\n\n    protected createFilterPredicate(exclusions: FileNavigatorFilter.Exclusions): FileNavigatorFilter.Predicate {\n        return new FileNavigatorFilterPredicate(this.interceptExclusions(exclusions));\n    }\n\n    toggleHiddenFiles(): void {\n        this.showHiddenFiles = !this.showHiddenFiles;\n        const filesExcludes = this.filesPreferences['files.exclude'];\n\n        this.filterPredicate = this.createFilterPredicate(filesExcludes || {});\n        this.fireFilterChanged();\n    }\n\n    protected interceptExclusions(exclusions: FileNavigatorFilter.Exclusions): FileNavigatorFilter.Exclusions {\n        return {\n            ...exclusions,\n            '**/.*': this.showHiddenFiles\n        };\n    }\n\n}\n\nexport namespace FileNavigatorFilter {\n\n    /**\n     * File navigator filter predicate.\n     */\n    export interface Predicate {\n\n        /**\n         * Returns `true` if the item should filtered our from the navigator. Otherwise, `true`.\n         *\n         * @param item the identifier of a tree node.\n         */\n        filter(item: { id: string }): boolean;\n\n    }\n\n    export namespace Predicate {\n\n        /**\n         * Wraps a bunch of predicates and returns with a new one that evaluates to `true` if\n         * each of the wrapped predicates evaluates to `true`. Otherwise, `false`.\n         */\n        export function and(...predicates: Predicate[]): Predicate {\n            return {\n                filter: id => predicates.every(predicate => predicate.filter(id))\n            };\n        }\n\n    }\n\n    /**\n     * Type for the exclusion patterns. The property keys are the patterns, values are whether the exclusion is enabled or not.\n     */\n    export interface Exclusions {\n        [key: string]: boolean;\n    }\n\n}\n\n/**\n * Concrete filter navigator filter predicate that is decoupled from the preferences.\n */\nexport class FileNavigatorFilterPredicate implements FileNavigatorFilter.Predicate {\n\n    private readonly delegate: FileNavigatorFilter.Predicate;\n\n    constructor(exclusions: FileNavigatorFilter.Exclusions) {\n        const patterns = Object.keys(exclusions).map(pattern => ({ pattern, enabled: exclusions[pattern] })).filter(object => object.enabled).map(object => object.pattern);\n        this.delegate = FileNavigatorFilter.Predicate.and(...patterns.map(pattern => this.createDelegate(pattern)));\n    }\n\n    filter(item: { id: string }): boolean {\n        return this.delegate.filter(item);\n    }\n\n    protected createDelegate(pattern: string): FileNavigatorFilter.Predicate {\n        const delegate = new Minimatch(pattern, { matchBase: true });\n        return {\n            filter: item => !delegate.match(item.id)\n        };\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { FileNode, FileTreeModel } from '@theia/filesystem/lib/browser';\nimport { OpenerService, open, TreeNode, ExpandableTreeNode, CompositeTreeNode, SelectableTreeNode } from '@theia/core/lib/browser';\nimport { FileNavigatorTree, WorkspaceRootNode, WorkspaceNode } from './navigator-tree';\nimport { WorkspaceService } from '@theia/workspace/lib/browser';\nimport { FrontendApplicationStateService } from '@theia/core/lib/browser/frontend-application-state';\nimport { ProgressService } from '@theia/core/lib/common/progress-service';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\nimport { Disposable } from '@theia/core/lib/common/disposable';\n\n@injectable()\nexport class FileNavigatorModel extends FileTreeModel {\n\n    @inject(OpenerService) protected readonly openerService: OpenerService;\n    @inject(FileNavigatorTree) protected override readonly tree: FileNavigatorTree;\n    @inject(WorkspaceService) protected readonly workspaceService: WorkspaceService;\n    @inject(FrontendApplicationStateService) protected readonly applicationState: FrontendApplicationStateService;\n\n    @inject(ProgressService)\n    protected readonly progressService: ProgressService;\n\n    @postConstruct()\n    protected override init(): void {\n        super.init();\n        this.reportBusyProgress();\n        this.initializeRoot();\n    }\n\n    protected readonly pendingBusyProgress = new Map<string, Deferred<void>>();\n    protected reportBusyProgress(): void {\n        this.toDispose.push(this.onDidChangeBusy(node => {\n            const pending = this.pendingBusyProgress.get(node.id);\n            if (pending) {\n                if (!node.busy) {\n                    pending.resolve();\n                    this.pendingBusyProgress.delete(node.id);\n                }\n                return;\n            }\n            if (node.busy) {\n                const progress = new Deferred<void>();\n                this.pendingBusyProgress.set(node.id, progress);\n                this.progressService.withProgress('', 'explorer', () => progress.promise);\n            }\n        }));\n        this.toDispose.push(Disposable.create(() => {\n            for (const pending of this.pendingBusyProgress.values()) {\n                pending.resolve();\n            }\n            this.pendingBusyProgress.clear();\n        }));\n    }\n\n    protected async initializeRoot(): Promise<void> {\n        await Promise.all([\n            this.applicationState.reachedState('initialized_layout'),\n            this.workspaceService.roots\n        ]);\n        await this.updateRoot();\n        if (this.toDispose.disposed) {\n            return;\n        }\n        this.toDispose.push(this.workspaceService.onWorkspaceChanged(() => this.updateRoot()));\n        this.toDispose.push(this.workspaceService.onWorkspaceLocationChanged(() => this.updateRoot()));\n        if (this.selectedNodes.length) {\n            return;\n        }\n        const root = this.root;\n        if (CompositeTreeNode.is(root) && root.children.length === 1) {\n            const child = root.children[0];\n            if (SelectableTreeNode.is(child) && !child.selected && ExpandableTreeNode.is(child)) {\n                this.selectNode(child);\n                this.expandNode(child);\n            }\n        }\n    }\n\n    previewNode(node: TreeNode): void {\n        if (FileNode.is(node)) {\n            open(this.openerService, node.uri, { mode: 'reveal', preview: true });\n        }\n    }\n\n    protected override doOpenNode(node: TreeNode): void {\n        if (node.visible === false) {\n            return;\n        } else if (FileNode.is(node)) {\n            open(this.openerService, node.uri);\n        } else {\n            super.doOpenNode(node);\n        }\n    }\n\n    override *getNodesByUri(uri: URI): IterableIterator<TreeNode> {\n        const workspace = this.root;\n        if (WorkspaceNode.is(workspace)) {\n            for (const root of workspace.children) {\n                const id = this.tree.createId(root, uri);\n                const node = this.getNode(id);\n                if (node) {\n                    yield node;\n                }\n            }\n        }\n    }\n\n    protected async updateRoot(): Promise<void> {\n        this.root = await this.createRoot();\n    }\n\n    protected async createRoot(): Promise<TreeNode | undefined> {\n        if (this.workspaceService.opened) {\n            const stat = this.workspaceService.workspace;\n            const isMulti = (stat) ? !stat.isDirectory : false;\n            const workspaceNode = isMulti\n                ? this.createMultipleRootNode()\n                : WorkspaceNode.createRoot();\n            const roots = await this.workspaceService.roots;\n            for (const root of roots) {\n                workspaceNode.children.push(\n                    await this.tree.createWorkspaceRoot(root, workspaceNode)\n                );\n            }\n            return workspaceNode;\n        }\n    }\n\n    /**\n     * Create multiple root node used to display\n     * the multiple root workspace name.\n     *\n     * @returns `WorkspaceNode`\n     */\n    protected createMultipleRootNode(): WorkspaceNode {\n        const workspace = this.workspaceService.workspace;\n        let name = workspace\n            ? workspace.resource.path.name\n            : 'untitled';\n        name += ' (Workspace)';\n        return WorkspaceNode.createRoot(name);\n    }\n\n    /**\n     * Move the given source file or directory to the given target directory.\n     */\n    override async move(source: TreeNode, target: TreeNode): Promise<URI | undefined> {\n        if (source.parent && WorkspaceRootNode.is(source)) {\n            // do not support moving a root folder\n            return undefined;\n        }\n        return super.move(source, target);\n    }\n\n    /**\n     * Reveals node in the navigator by given file uri.\n     *\n     * @param uri uri to file which should be revealed in the navigator\n     * @returns file tree node if the file with given uri was revealed, undefined otherwise\n     */\n    async revealFile(uri: URI): Promise<TreeNode | undefined> {\n        if (!uri.path.isAbsolute) {\n            return undefined;\n        }\n        let node = this.getNodeClosestToRootByUri(uri);\n\n        // success stop condition\n        // we have to reach workspace root because expanded node could be inside collapsed one\n        if (WorkspaceRootNode.is(node)) {\n            if (ExpandableTreeNode.is(node)) {\n                if (!node.expanded) {\n                    node = await this.expandNode(node);\n                }\n                return node;\n            }\n            // shouldn't happen, root node is always directory, i.e. expandable\n            return undefined;\n        }\n\n        // fail stop condition\n        if (uri.path.isRoot) {\n            // file system root is reached but workspace root wasn't found, it means that\n            // given uri is not in workspace root folder or points to not existing file.\n            return undefined;\n        }\n\n        if (await this.revealFile(uri.parent)) {\n            if (node === undefined) {\n                // get node if it wasn't mounted into navigator tree before expansion\n                node = this.getNodeClosestToRootByUri(uri);\n            }\n            if (ExpandableTreeNode.is(node) && !node.expanded) {\n                node = await this.expandNode(node);\n            }\n            return node;\n        }\n        return undefined;\n    }\n\n    protected getNodeClosestToRootByUri(uri: URI): TreeNode | undefined {\n        const nodes = [...this.getNodesByUri(uri)];\n        return nodes.length > 0\n            ? nodes.reduce((node1, node2) => // return the node closest to the workspace root\n                node1.id.length >= node2.id.length ? node1 : node2\n            ) : undefined;\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2018 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { interfaces } from '@theia/core/shared/inversify';\nimport { createPreferenceProxy, PreferenceProxy, PreferenceService, PreferenceContribution, PreferenceSchema } from '@theia/core/lib/browser';\nimport { nls } from '@theia/core/lib/common/nls';\n\nexport const EXPLORER_COMPACT_FOLDERS = 'explorer.compactFolders';\n\nexport const FileNavigatorConfigSchema: PreferenceSchema = {\n    'type': 'object',\n    properties: {\n        'explorer.autoReveal': {\n            type: 'boolean',\n            description: nls.localizeByDefault('Controls whether the Explorer should automatically reveal and select files when opening them.'),\n            default: true\n        },\n        'explorer.decorations.colors': {\n            type: 'boolean',\n            description: nls.localizeByDefault('Controls whether file decorations should use colors.'),\n            default: true\n        },\n        [EXPLORER_COMPACT_FOLDERS]: {\n            type: 'boolean',\n            // eslint-disable-next-line max-len\n            description: nls.localizeByDefault('Controls whether the Explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.'),\n            default: true,\n        }\n    },\n};\n\nexport interface FileNavigatorConfiguration {\n    'explorer.autoReveal': boolean;\n    'explorer.decorations.colors': boolean;\n    [EXPLORER_COMPACT_FOLDERS]: boolean;\n}\n\nexport const FileNavigatorPreferenceContribution = Symbol('FileNavigatorPreferenceContribution');\nexport const FileNavigatorPreferences = Symbol('NavigatorPreferences');\nexport type FileNavigatorPreferences = PreferenceProxy<FileNavigatorConfiguration>;\n\nexport function createNavigatorPreferences(preferences: PreferenceService, schema: PreferenceSchema = FileNavigatorConfigSchema): FileNavigatorPreferences {\n    return createPreferenceProxy(preferences, schema);\n}\n\nexport function bindFileNavigatorPreferences(bind: interfaces.Bind): void {\n    bind(FileNavigatorPreferences).toDynamicValue(ctx => {\n        const preferences = ctx.container.get<PreferenceService>(PreferenceService);\n        const contribution = ctx.container.get<PreferenceContribution>(FileNavigatorPreferenceContribution);\n        return createNavigatorPreferences(preferences, contribution.schema);\n    }).inSingletonScope();\n    bind(FileNavigatorPreferenceContribution).toConstantValue({ schema: FileNavigatorConfigSchema });\n    bind(PreferenceContribution).toService(FileNavigatorPreferenceContribution);\n}\n","// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport { FileTree, DirNode } from '@theia/filesystem/lib/browser';\nimport { FileStat } from '@theia/filesystem/lib/common/files';\nimport URI from '@theia/core/lib/common/uri';\nimport { TreeNode, CompositeTreeNode, SelectableTreeNode, CompressionToggle } from '@theia/core/lib/browser';\nimport { FileNavigatorFilter } from './navigator-filter';\nimport { EXPLORER_COMPACT_FOLDERS, FileNavigatorPreferences } from './navigator-preferences';\n\n@injectable()\nexport class FileNavigatorTree extends FileTree {\n\n    @inject(FileNavigatorFilter) protected readonly filter: FileNavigatorFilter;\n\n    @inject(FileNavigatorPreferences) protected readonly navigatorPreferences: FileNavigatorPreferences;\n\n    @inject(CompressionToggle) protected readonly compressionToggle: CompressionToggle;\n\n    @postConstruct()\n    protected init(): void {\n        this.toDispose.push(this.filter.onFilterChanged(() => this.refresh()));\n        this.navigatorPreferences.ready.then(() => this.toggleCompression());\n        this.toDispose.push(this.navigatorPreferences.onPreferenceChanged(({ preferenceName }) => {\n            if (preferenceName === EXPLORER_COMPACT_FOLDERS) {\n                this.toggleCompression();\n            }\n        }));\n    }\n\n    protected toggleCompression(): void {\n        this.compressionToggle.compress = this.navigatorPreferences.get(EXPLORER_COMPACT_FOLDERS, true);\n        this.refresh();\n    }\n\n    override async resolveChildren(parent: CompositeTreeNode): Promise<TreeNode[]> {\n        if (WorkspaceNode.is(parent)) {\n            return parent.children;\n        }\n        return this.filter.filter(super.resolveChildren(parent));\n    }\n\n    protected override toNodeId(uri: URI, parent: CompositeTreeNode): string {\n        const workspaceRootNode = WorkspaceRootNode.find(parent);\n        if (workspaceRootNode) {\n            return this.createId(workspaceRootNode, uri);\n        }\n        return super.toNodeId(uri, parent);\n    }\n    createId(root: WorkspaceRootNode, uri: URI): string {\n        const id = super.toNodeId(uri, root);\n        return id === root.id ? id : `${root.id}:${id}`;\n    }\n\n    async createWorkspaceRoot(rootFolder: FileStat, workspaceNode: WorkspaceNode): Promise<WorkspaceRootNode> {\n        const node = this.toNode(rootFolder, workspaceNode) as WorkspaceRootNode;\n        Object.assign(node, {\n            visible: workspaceNode.name !== WorkspaceNode.name,\n        });\n        return node;\n    }\n}\n\n/**\n * File tree root node for multi-root workspaces.\n */\nexport interface WorkspaceNode extends CompositeTreeNode, SelectableTreeNode {\n    children: WorkspaceRootNode[];\n}\nexport namespace WorkspaceNode {\n\n    export const id = 'WorkspaceNodeId';\n    export const name = 'WorkspaceNode';\n\n    export function is(node: TreeNode | undefined): node is WorkspaceNode {\n        return CompositeTreeNode.is(node) && node.id === WorkspaceNode.id;\n    }\n\n    /**\n     * Create a `WorkspaceNode` that can be used as a `Tree` root.\n     */\n    export function createRoot(multiRootName?: string): WorkspaceNode {\n        return {\n            id: WorkspaceNode.id,\n            name: multiRootName || WorkspaceNode.name,\n            parent: undefined,\n            children: [],\n            visible: false,\n            selected: false\n        };\n    }\n}\n\n/**\n * A node representing a folder from a multi-root workspace.\n */\nexport interface WorkspaceRootNode extends DirNode {\n    parent: WorkspaceNode;\n}\nexport namespace WorkspaceRootNode {\n\n    export function is(node: unknown): node is WorkspaceRootNode {\n        return DirNode.is(node) && WorkspaceNode.is(node.parent);\n    }\n\n    export function find(node: TreeNode | undefined): WorkspaceRootNode | undefined {\n        if (node) {\n            if (is(node)) {\n                return node;\n            }\n            return find(node.parent);\n        }\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2021 SAP SE or an SAP affiliate company and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport {\n    codicon,\n    ViewContainer,\n    ViewContainerTitleOptions,\n    WidgetFactory,\n    WidgetManager\n} from '@theia/core/lib/browser';\nimport { FILE_NAVIGATOR_ID } from './navigator-widget';\nimport { OpenEditorsWidget } from './open-editors-widget/navigator-open-editors-widget';\nimport { nls } from '@theia/core/lib/common/nls';\n\nexport const EXPLORER_VIEW_CONTAINER_ID = 'explorer-view-container';\nexport const EXPLORER_VIEW_CONTAINER_TITLE_OPTIONS: ViewContainerTitleOptions = {\n    label: nls.localizeByDefault('Explorer'),\n    iconClass: codicon('files'),\n    closeable: true\n};\n\n@injectable()\nexport class NavigatorWidgetFactory implements WidgetFactory {\n\n    static ID = EXPLORER_VIEW_CONTAINER_ID;\n\n    readonly id = NavigatorWidgetFactory.ID;\n\n    protected openEditorsWidgetOptions: ViewContainer.Factory.WidgetOptions = {\n        order: 0,\n        canHide: true,\n        initiallyCollapsed: true,\n        // this property currently has no effect (https://github.com/eclipse-theia/theia/issues/7755)\n        weight: 20\n    };\n\n    protected fileNavigatorWidgetOptions: ViewContainer.Factory.WidgetOptions = {\n        order: 1,\n        canHide: false,\n        initiallyCollapsed: false,\n        weight: 80,\n        disableDraggingToOtherContainers: true\n    };\n\n    @inject(ViewContainer.Factory)\n    protected readonly viewContainerFactory: ViewContainer.Factory;\n    @inject(WidgetManager) protected readonly widgetManager: WidgetManager;\n\n    async createWidget(): Promise<ViewContainer> {\n        const viewContainer = this.viewContainerFactory({\n            id: EXPLORER_VIEW_CONTAINER_ID,\n            progressLocationId: 'explorer'\n        });\n        viewContainer.setTitleOptions(EXPLORER_VIEW_CONTAINER_TITLE_OPTIONS);\n        const openEditorsWidget = await this.widgetManager.getOrCreateWidget(OpenEditorsWidget.ID);\n        const navigatorWidget = await this.widgetManager.getOrCreateWidget(FILE_NAVIGATOR_ID);\n        viewContainer.addWidget(navigatorWidget, this.fileNavigatorWidgetOptions);\n        viewContainer.addWidget(openEditorsWidget, this.openEditorsWidgetOptions);\n        return viewContainer;\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport { Message } from '@theia/core/shared/@phosphor/messaging';\nimport URI from '@theia/core/lib/common/uri';\nimport { CommandService } from '@theia/core/lib/common';\nimport { Key, TreeModel, ContextMenuRenderer, ExpandableTreeNode, TreeProps, TreeNode } from '@theia/core/lib/browser';\nimport { DirNode } from '@theia/filesystem/lib/browser';\nimport { WorkspaceService, WorkspaceCommands } from '@theia/workspace/lib/browser';\nimport { WorkspaceNode, WorkspaceRootNode } from './navigator-tree';\nimport { FileNavigatorModel } from './navigator-model';\nimport { isOSX, environment } from '@theia/core';\nimport * as React from '@theia/core/shared/react';\nimport { NavigatorContextKeyService } from './navigator-context-key-service';\nimport { nls } from '@theia/core/lib/common/nls';\nimport { AbstractNavigatorTreeWidget } from './abstract-navigator-tree-widget';\n\nexport const FILE_NAVIGATOR_ID = 'files';\nexport const LABEL = nls.localizeByDefault('No Folder Opened');\nexport const CLASS = 'theia-Files';\n\n@injectable()\nexport class FileNavigatorWidget extends AbstractNavigatorTreeWidget {\n\n    @inject(CommandService) protected readonly commandService: CommandService;\n    @inject(NavigatorContextKeyService) protected readonly contextKeyService: NavigatorContextKeyService;\n    @inject(WorkspaceService) protected readonly workspaceService: WorkspaceService;\n\n    constructor(\n        @inject(TreeProps) props: TreeProps,\n        @inject(FileNavigatorModel) override readonly model: FileNavigatorModel,\n        @inject(ContextMenuRenderer) contextMenuRenderer: ContextMenuRenderer,\n    ) {\n        super(props, model, contextMenuRenderer);\n        this.id = FILE_NAVIGATOR_ID;\n        this.addClass(CLASS);\n    }\n\n    @postConstruct()\n    protected override init(): void {\n        super.init();\n        // This ensures that the context menu command to hide this widget receives the label 'Folders'\n        // regardless of the name of workspace. See ViewContainer.updateToolbarItems.\n        const dataset = { ...this.title.dataset, visibilityCommandLabel: nls.localizeByDefault('Folders') };\n        this.title.dataset = dataset;\n        this.updateSelectionContextKeys();\n        this.toDispose.pushAll([\n            this.model.onSelectionChanged(() =>\n                this.updateSelectionContextKeys()\n            ),\n            this.model.onExpansionChanged(node => {\n                if (node.expanded && node.children.length === 1) {\n                    const child = node.children[0];\n                    if (ExpandableTreeNode.is(child) && !child.expanded) {\n                        this.model.expandNode(child);\n                    }\n                }\n\n            })\n        ]);\n    }\n\n    protected override doUpdateRows(): void {\n        super.doUpdateRows();\n        this.title.label = LABEL;\n        if (WorkspaceNode.is(this.model.root)) {\n            if (this.model.root.name === WorkspaceNode.name) {\n                const rootNode = this.model.root.children[0];\n                if (WorkspaceRootNode.is(rootNode)) {\n                    this.title.label = this.toNodeName(rootNode);\n                    this.title.caption = this.labelProvider.getLongName(rootNode.uri);\n                }\n            } else {\n                this.title.label = this.toNodeName(this.model.root);\n                this.title.caption = this.title.label;\n            }\n        } else {\n            this.title.caption = this.title.label;\n        }\n    }\n\n    override getContainerTreeNode(): TreeNode | undefined {\n        const root = this.model.root;\n        if (this.workspaceService.isMultiRootWorkspaceOpened) {\n            return root;\n        }\n        if (WorkspaceNode.is(root)) {\n            return root.children[0];\n        }\n        return undefined;\n    }\n\n    protected override renderTree(model: TreeModel): React.ReactNode {\n        if (this.model.root && this.isEmptyMultiRootWorkspace(model)) {\n            return this.renderEmptyMultiRootWorkspace();\n        }\n        return super.renderTree(model);\n    }\n\n    protected override shouldShowWelcomeView(): boolean {\n        return this.model.root === undefined;\n    }\n\n    protected override onAfterAttach(msg: Message): void {\n        super.onAfterAttach(msg);\n        this.addClipboardListener(this.node, 'copy', e => this.handleCopy(e));\n        this.addClipboardListener(this.node, 'paste', e => this.handlePaste(e));\n    }\n\n    protected handleCopy(event: ClipboardEvent): void {\n        const uris = this.model.selectedFileStatNodes.map(node => node.uri.toString());\n        if (uris.length > 0 && event.clipboardData) {\n            event.clipboardData.setData('text/plain', uris.join('\\n'));\n            event.preventDefault();\n        }\n    }\n\n    protected handlePaste(event: ClipboardEvent): void {\n        if (event.clipboardData) {\n            const raw = event.clipboardData.getData('text/plain');\n            if (!raw) {\n                return;\n            }\n            const target = this.model.selectedFileStatNodes[0];\n            if (!target) {\n                return;\n            }\n            for (const file of raw.split('\\n')) {\n                event.preventDefault();\n                const source = new URI(file);\n                this.model.copy(source, target);\n            }\n        }\n    }\n\n    protected canOpenWorkspaceFileAndFolder: boolean = isOSX || !environment.electron.is();\n\n    protected readonly openWorkspace = () => this.doOpenWorkspace();\n    protected doOpenWorkspace(): void {\n        this.commandService.executeCommand(WorkspaceCommands.OPEN_WORKSPACE.id);\n    }\n\n    protected readonly openFolder = () => this.doOpenFolder();\n    protected doOpenFolder(): void {\n        this.commandService.executeCommand(WorkspaceCommands.OPEN_FOLDER.id);\n    }\n\n    protected readonly addFolder = () => this.doAddFolder();\n    protected doAddFolder(): void {\n        this.commandService.executeCommand(WorkspaceCommands.ADD_FOLDER.id);\n    }\n\n    protected readonly keyUpHandler = (e: React.KeyboardEvent) => {\n        if (Key.ENTER.keyCode === e.keyCode) {\n            (e.target as HTMLElement).click();\n        }\n    };\n\n    /**\n     * When a multi-root workspace is opened, a user can remove all the folders from it.\n     * Instead of displaying an empty navigator tree, this will show a button to add more folders.\n     */\n    protected renderEmptyMultiRootWorkspace(): React.ReactNode {\n        return <div className='theia-navigator-container'>\n            <div className='center'>{nls.localizeByDefault('You have not yet added a folder to the workspace.\\n{0}', '')}</div>\n            <div className='open-workspace-button-container'>\n                <button className='theia-button open-workspace-button' title={nls.localizeByDefault('Add Folder to Workspace')}\n                    onClick={this.addFolder}\n                    onKeyUp={this.keyUpHandler}>\n                    {nls.localizeByDefault('Open Folder')}\n                </button>\n            </div>\n        </div>;\n    }\n\n    protected isEmptyMultiRootWorkspace(model: TreeModel): boolean {\n        return WorkspaceNode.is(model.root) && model.root.children.length === 0;\n    }\n\n    protected override tapNode(node?: TreeNode): void {\n        if (node && this.corePreferences['workbench.list.openMode'] === 'singleClick') {\n            this.model.previewNode(node);\n        }\n        super.tapNode(node);\n    }\n\n    protected override onAfterShow(msg: Message): void {\n        super.onAfterShow(msg);\n        this.contextKeyService.explorerViewletVisible.set(true);\n    }\n\n    protected override onAfterHide(msg: Message): void {\n        super.onAfterHide(msg);\n        this.contextKeyService.explorerViewletVisible.set(false);\n    }\n\n    protected updateSelectionContextKeys(): void {\n        this.contextKeyService.explorerResourceIsFolder.set(DirNode.is(this.model.selectedNodes[0]));\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2021 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { CommonCommands } from '@theia/core/lib/browser';\nimport { Command } from '@theia/core/lib/common';\n\nexport namespace OpenEditorsCommands {\n    export const CLOSE_ALL_TABS_FROM_TOOLBAR = Command.toDefaultLocalizedCommand({\n        id: 'navigator.close.all.editors.toolbar',\n        category: CommonCommands.FILE_CATEGORY,\n        label: 'Close All Editors',\n        iconClass: 'codicon codicon-close-all'\n    });\n\n    export const SAVE_ALL_TABS_FROM_TOOLBAR = Command.toDefaultLocalizedCommand({\n        id: 'navigator.save.all.editors.toolbar',\n        category: CommonCommands.FILE_CATEGORY,\n        label: 'Save All',\n        iconClass: 'codicon codicon-save-all'\n    });\n\n    export const CLOSE_ALL_EDITORS_IN_GROUP_FROM_ICON = Command.toDefaultLocalizedCommand({\n        id: 'navigator.close.all.in.area.icon',\n        category: CommonCommands.VIEW_CATEGORY,\n        label: 'Close Group',\n        iconClass: 'codicon codicon-close-all'\n    });\n\n    export const SAVE_ALL_IN_GROUP_FROM_ICON = Command.toDefaultLocalizedCommand({\n        id: 'navigator.save.all.in.area.icon',\n        category: CommonCommands.FILE_CATEGORY,\n        label: 'Save All in Group',\n        iconClass: 'codicon codicon-save-all'\n    });\n}\n","// *****************************************************************************\n// Copyright (C) 2021 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { MenuPath } from '@theia/core/lib/common';\n\nexport const OPEN_EDITORS_CONTEXT_MENU: MenuPath = ['open-editors-context-menu'];\nexport namespace OpenEditorsContextMenu {\n    export const NAVIGATION = [...OPEN_EDITORS_CONTEXT_MENU, '1_navigation'];\n    export const CLIPBOARD = [...OPEN_EDITORS_CONTEXT_MENU, '2_clipboard'];\n    export const SAVE = [...OPEN_EDITORS_CONTEXT_MENU, '3_save'];\n    export const COMPARE = [...OPEN_EDITORS_CONTEXT_MENU, '4_compare'];\n    export const MODIFICATION = [...OPEN_EDITORS_CONTEXT_MENU, '5_modification'];\n}\n","// *****************************************************************************\n// Copyright (C) 2021 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport * as React from '@theia/core/shared/react';\nimport { injectable, interfaces, Container, postConstruct, inject } from '@theia/core/shared/inversify';\nimport {\n    ApplicationShell,\n    codicon,\n    ContextMenuRenderer,\n    defaultTreeProps,\n    NavigatableWidget,\n    NodeProps,\n    Saveable,\n    TabBar,\n    TreeDecoration,\n    TreeDecoratorService,\n    TreeModel,\n    TreeNode,\n    TreeProps,\n    TreeWidget,\n    TREE_NODE_CONTENT_CLASS,\n    Widget,\n} from '@theia/core/lib/browser';\nimport { OpenEditorNode, OpenEditorsModel } from './navigator-open-editors-tree-model';\nimport { createFileTreeContainer, FileTreeModel, FileTreeWidget } from '@theia/filesystem/lib/browser';\nimport { OpenEditorsTreeDecoratorService } from './navigator-open-editors-decorator-service';\nimport { OPEN_EDITORS_CONTEXT_MENU } from './navigator-open-editors-menus';\nimport { CommandService } from '@theia/core/lib/common';\nimport { OpenEditorsCommands } from './navigator-open-editors-commands';\nimport { nls } from '@theia/core/lib/common/nls';\nimport { WorkspaceService } from '@theia/workspace/lib/browser';\nimport { AbstractNavigatorTreeWidget } from '../abstract-navigator-tree-widget';\n\nexport const OPEN_EDITORS_PROPS: TreeProps = {\n    ...defaultTreeProps,\n    virtualized: false,\n    contextMenuPath: OPEN_EDITORS_CONTEXT_MENU,\n    leftPadding: 22\n};\n\nexport interface OpenEditorsNodeRow extends TreeWidget.NodeRow {\n    node: OpenEditorNode;\n}\n@injectable()\nexport class OpenEditorsWidget extends AbstractNavigatorTreeWidget {\n    static ID = 'theia-open-editors-widget';\n    static LABEL = nls.localizeByDefault('Open Editors');\n\n    @inject(ApplicationShell) protected readonly applicationShell: ApplicationShell;\n    @inject(CommandService) protected readonly commandService: CommandService;\n    @inject(WorkspaceService) protected readonly workspaceService: WorkspaceService;\n\n    static createContainer(parent: interfaces.Container): Container {\n        const child = createFileTreeContainer(parent);\n\n        child.unbind(FileTreeModel);\n        child.bind(OpenEditorsModel).toSelf();\n        child.rebind(TreeModel).toService(OpenEditorsModel);\n\n        child.unbind(FileTreeWidget);\n        child.bind(OpenEditorsWidget).toSelf();\n\n        child.rebind(TreeProps).toConstantValue(OPEN_EDITORS_PROPS);\n\n        child.bind(OpenEditorsTreeDecoratorService).toSelf().inSingletonScope();\n        child.rebind(TreeDecoratorService).toService(OpenEditorsTreeDecoratorService);\n        return child;\n    }\n\n    static createWidget(parent: interfaces.Container): OpenEditorsWidget {\n        return OpenEditorsWidget.createContainer(parent).get(OpenEditorsWidget);\n    }\n\n    constructor(\n        @inject(TreeProps) props: TreeProps,\n        @inject(OpenEditorsModel) override readonly model: OpenEditorsModel,\n        @inject(ContextMenuRenderer) contextMenuRenderer: ContextMenuRenderer\n    ) {\n        super(props, model, contextMenuRenderer);\n    }\n\n    @postConstruct()\n    override init(): void {\n        super.init();\n        this.id = OpenEditorsWidget.ID;\n        this.title.label = OpenEditorsWidget.LABEL;\n        this.addClass(OpenEditorsWidget.ID);\n        this.update();\n    }\n\n    get editorWidgets(): NavigatableWidget[] {\n        return this.model.editorWidgets;\n    }\n\n    // eslint-disable-next-line no-null/no-null\n    protected activeTreeNodePrefixElement: string | undefined | null;\n\n    protected override renderNode(node: OpenEditorNode, props: NodeProps): React.ReactNode {\n        if (!TreeNode.isVisible(node)) {\n            return undefined;\n        }\n        const attributes = this.createNodeAttributes(node, props);\n        const isEditorNode = !(node.id.startsWith(OpenEditorsModel.GROUP_NODE_ID_PREFIX) || node.id.startsWith(OpenEditorsModel.AREA_NODE_ID_PREFIX));\n        const content = <div className={`${TREE_NODE_CONTENT_CLASS}`}>\n            {this.renderExpansionToggle(node, props)}\n            {isEditorNode && this.renderPrefixIcon(node)}\n            {this.decorateIcon(node, this.renderIcon(node, props))}\n            <div className='noWrapInfo theia-TreeNodeSegmentGrow'>\n                {this.renderCaptionAffixes(node, props, 'captionPrefixes')}\n                {this.renderCaption(node, props)}\n                {this.renderCaptionAffixes(node, props, 'captionSuffixes')}\n            </div>\n            {this.renderTailDecorations(node, props)}\n            {(this.isGroupNode(node) || this.isAreaNode(node)) && this.renderInteractables(node, props)}\n        </div>;\n        return React.createElement('div', attributes, content);\n    }\n\n    protected override getDecorationData<K extends keyof TreeDecoration.Data>(node: TreeNode, key: K): Required<Pick<TreeDecoration.Data, K>>[K][] {\n        const contributed = super.getDecorationData(node, key);\n        if (key === 'captionSuffixes' && OpenEditorNode.is(node)) {\n            (contributed as Array<Array<TreeDecoration.CaptionAffix>>).push(this.getWorkspaceDecoration(node));\n        }\n        return contributed;\n    }\n\n    protected getWorkspaceDecoration(node: OpenEditorNode): TreeDecoration.CaptionAffix[] {\n        const color = this.getDecorationData(node, 'fontData').find(data => data.color)?.color;\n        return [{\n            fontData: { color },\n            data: this.labelProvider.getDetails(node.fileStat),\n        }];\n    }\n\n    protected isGroupNode(node: OpenEditorNode): boolean {\n        return node.id.startsWith(OpenEditorsModel.GROUP_NODE_ID_PREFIX);\n    }\n\n    protected isAreaNode(node: OpenEditorNode): boolean {\n        return node.id.startsWith(OpenEditorsModel.AREA_NODE_ID_PREFIX);\n    }\n\n    protected override doRenderNodeRow({ node, depth }: OpenEditorsNodeRow): React.ReactNode {\n        let groupClass = '';\n        if (this.isGroupNode(node)) {\n            groupClass = 'group-node';\n        } else if (this.isAreaNode(node)) {\n            groupClass = 'area-node';\n        }\n        return <div className={`open-editors-node-row ${this.getPrefixIconClass(node)}${groupClass}`}>\n            {this.renderNode(node, { depth })}\n        </div>;\n    }\n\n    protected renderInteractables(node: OpenEditorNode, props: NodeProps): React.ReactNode {\n        return (<div className='open-editors-inline-actions-container'>\n            <div className='open-editors-inline-action'>\n                <a className='codicon codicon-save-all'\n                    title={OpenEditorsCommands.SAVE_ALL_IN_GROUP_FROM_ICON.label}\n                    onClick={this.handleGroupActionIconClicked}\n                    data-id={node.id}\n                    id={OpenEditorsCommands.SAVE_ALL_IN_GROUP_FROM_ICON.id}\n                />\n            </div>\n            <div className='open-editors-inline-action' >\n                <a className='codicon codicon-close-all'\n                    title={OpenEditorsCommands.CLOSE_ALL_EDITORS_IN_GROUP_FROM_ICON.label}\n                    onClick={this.handleGroupActionIconClicked}\n                    data-id={node.id}\n                    id={OpenEditorsCommands.CLOSE_ALL_EDITORS_IN_GROUP_FROM_ICON.id}\n                />\n            </div>\n        </div>\n        );\n    }\n\n    protected handleGroupActionIconClicked = async (e: React.MouseEvent<HTMLAnchorElement>) => this.doHandleGroupActionIconClicked(e);\n    protected async doHandleGroupActionIconClicked(e: React.MouseEvent<HTMLAnchorElement>): Promise<void> {\n        e.stopPropagation();\n        const groupName = e.currentTarget.getAttribute('data-id');\n        const command = e.currentTarget.id;\n        if (groupName && command) {\n            const groupFromTarget: string | number | undefined = groupName.split(':').pop();\n            const areaOrTabBar = this.sanitizeInputFromClickHandler(groupFromTarget);\n            if (areaOrTabBar) {\n                return this.commandService.executeCommand(command, areaOrTabBar);\n            }\n        }\n    }\n\n    protected sanitizeInputFromClickHandler(groupFromTarget?: string): ApplicationShell.Area | TabBar<Widget> | undefined {\n        let areaOrTabBar: ApplicationShell.Area | TabBar<Widget> | undefined;\n        if (groupFromTarget) {\n            if (ApplicationShell.isValidArea(groupFromTarget)) {\n                areaOrTabBar = groupFromTarget;\n            } else {\n                const groupAsNum = parseInt(groupFromTarget);\n                if (!isNaN(groupAsNum)) {\n                    areaOrTabBar = this.model.getTabBarForGroup(groupAsNum);\n                }\n            }\n        }\n        return areaOrTabBar;\n    }\n\n    protected renderPrefixIcon(node: OpenEditorNode): React.ReactNode {\n        return (\n            <div className='open-editors-prefix-icon-container'>\n                <div data-id={node.id}\n                    className={`open-editors-prefix-icon dirty ${codicon('circle-filled', true)}`}\n                />\n                <div data-id={node.id}\n                    onClick={this.closeEditor}\n                    className={`open-editors-prefix-icon close ${codicon('close', true)}`}\n                />\n            </div>);\n    }\n\n    protected getPrefixIconClass(node: OpenEditorNode): string {\n        const saveable = Saveable.get(node.widget);\n        if (saveable) {\n            return saveable.dirty ? 'dirty' : '';\n        }\n        return '';\n    }\n\n    protected closeEditor = async (e: React.MouseEvent<HTMLDivElement>) => this.doCloseEditor(e);\n    protected async doCloseEditor(e: React.MouseEvent<HTMLDivElement>): Promise<void> {\n        const widgetId = e.currentTarget.getAttribute('data-id');\n        if (widgetId) {\n            await this.applicationShell.closeWidget(widgetId);\n        }\n    }\n\n    protected override tapNode(node?: TreeNode): void {\n        if (OpenEditorNode.is(node)) {\n            this.applicationShell.activateWidget(node.widget.id);\n        }\n        super.tapNode(node);\n    }\n\n    protected override handleContextMenuEvent(node: OpenEditorNode | undefined, event: React.MouseEvent<HTMLElement>): void {\n        super.handleContextMenuEvent(node, event);\n        if (node) {\n            // Since the CommonCommands used in the context menu act on the shell's activeWidget, this is necessary to ensure\n            // that the EditorWidget is activated, not the Navigator itself\n            this.applicationShell.activateWidget(node.widget.id);\n        }\n    }\n\n    protected override getPaddingLeft(node: TreeNode): number {\n        if (node.id.startsWith(OpenEditorsModel.AREA_NODE_ID_PREFIX)) {\n            return 0;\n        }\n        return this.props.leftPadding;\n    }\n\n    // The state of this widget is derived from external factors. No need to store or restore it.\n    override storeState(): object { return {}; }\n    override restoreState(): void { }\n}\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    if(a===b) {\n      return [ai, bi];\n    }\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","var balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m) return [str];\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  if (/\\$$/.test(m.pre)) {    \n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre+ '{' + m.body + '}' + post[k];\n      expansions.push(expansion);\n    }\n  } else {\n    var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isSequence = isNumericSequence || isAlphaSequence;\n    var isOptions = m.body.indexOf(',') >= 0;\n    if (!isSequence && !isOptions) {\n      // {a},b}\n      if (m.post.match(/,.*\\}/)) {\n        str = m.pre + '{' + m.body + escClose + m.post;\n        return expand(str);\n      }\n      return [str];\n    }\n\n    var n;\n    if (isSequence) {\n      n = m.body.split(/\\.\\./);\n    } else {\n      n = parseCommaParts(m.body);\n      if (n.length === 1) {\n        // x{{a,b}}y ==> x{a}y x{b}y\n        n = expand(n[0], false).map(embrace);\n        if (n.length === 1) {\n          return post.map(function(p) {\n            return m.pre + n[0] + p;\n          });\n        }\n      }\n    }\n\n    // at this point, n is the parts, and we know it's not a comma set\n    // with a single entry.\n    var N;\n\n    if (isSequence) {\n      var x = numeric(n[0]);\n      var y = numeric(n[1]);\n      var width = Math.max(n[0].length, n[1].length)\n      var incr = n.length == 3\n        ? Math.abs(numeric(n[2]))\n        : 1;\n      var test = lte;\n      var reverse = y < x;\n      if (reverse) {\n        incr *= -1;\n        test = gte;\n      }\n      var pad = n.some(isPadded);\n\n      N = [];\n\n      for (var i = x; test(i, y); i += incr) {\n        var c;\n        if (isAlphaSequence) {\n          c = String.fromCharCode(i);\n          if (c === '\\\\')\n            c = '';\n        } else {\n          c = String(i);\n          if (pad) {\n            var need = width - c.length;\n            if (need > 0) {\n              var z = new Array(need + 1).join('0');\n              if (i < 0)\n                c = '-' + z + c.slice(1);\n              else\n                c = z + c;\n            }\n          }\n        }\n        N.push(c);\n      }\n    } else {\n      N = [];\n\n      for (var j = 0; j < n.length; j++) {\n        N.push.apply(N, expand(n[j], false));\n      }\n    }\n\n    for (var j = 0; j < N.length; j++) {\n      for (var k = 0; k < post.length; k++) {\n        var expansion = pre + N[j] + post[k];\n        if (!isTop || isSequence || expansion)\n          expansions.push(expansion);\n      }\n    }\n  }\n\n  return expansions;\n}\n\n","const isWindows = typeof process === 'object' &&\n  process &&\n  process.platform === 'win32'\nmodule.exports = isWindows ? { sep: '\\\\' } : { sep: '/' }\n","const minimatch = module.exports = (p, pattern, options = {}) => {\n  assertValidPattern(pattern)\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  return new Minimatch(pattern, options).match(p)\n}\n\nmodule.exports = minimatch\n\nconst path = require('./lib/path.js')\nminimatch.sep = path.sep\n\nconst GLOBSTAR = Symbol('globstar **')\nminimatch.GLOBSTAR = GLOBSTAR\nconst expand = require('brace-expansion')\n\nconst plTypes = {\n  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},\n  '?': { open: '(?:', close: ')?' },\n  '+': { open: '(?:', close: ')+' },\n  '*': { open: '(?:', close: ')*' },\n  '@': { open: '(?:', close: ')' }\n}\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nconst qmark = '[^/]'\n\n// * => any number of characters\nconst star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nconst twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nconst twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'\n\n// \"abc\" -> { a:true, b:true, c:true }\nconst charSet = s => s.split('').reduce((set, c) => {\n  set[c] = true\n  return set\n}, {})\n\n// characters that need to be escaped in RegExp.\nconst reSpecials = charSet('().*{}+?[]^$\\\\!')\n\n// characters that indicate we have to add the pattern start\nconst addPatternStartSet = charSet('[.(')\n\n// normalizes slashes.\nconst slashSplit = /\\/+/\n\nminimatch.filter = (pattern, options = {}) =>\n  (p, i, list) => minimatch(p, pattern, options)\n\nconst ext = (a, b = {}) => {\n  const t = {}\n  Object.keys(a).forEach(k => t[k] = a[k])\n  Object.keys(b).forEach(k => t[k] = b[k])\n  return t\n}\n\nminimatch.defaults = def => {\n  if (!def || typeof def !== 'object' || !Object.keys(def).length) {\n    return minimatch\n  }\n\n  const orig = minimatch\n\n  const m = (p, pattern, options) => orig(p, pattern, ext(def, options))\n  m.Minimatch = class Minimatch extends orig.Minimatch {\n    constructor (pattern, options) {\n      super(pattern, ext(def, options))\n    }\n  }\n  m.Minimatch.defaults = options => orig.defaults(ext(def, options)).Minimatch\n  m.filter = (pattern, options) => orig.filter(pattern, ext(def, options))\n  m.defaults = options => orig.defaults(ext(def, options))\n  m.makeRe = (pattern, options) => orig.makeRe(pattern, ext(def, options))\n  m.braceExpand = (pattern, options) => orig.braceExpand(pattern, ext(def, options))\n  m.match = (list, pattern, options) => orig.match(list, pattern, ext(def, options))\n\n  return m\n}\n\n\n\n\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = (pattern, options) => braceExpand(pattern, options)\n\nconst braceExpand = (pattern, options = {}) => {\n  assertValidPattern(pattern)\n\n  // Thanks to Yeting Li <https://github.com/yetingli> for\n  // improving this regexp to avoid a ReDOS vulnerability.\n  if (options.nobrace || !/\\{(?:(?!\\{).)*\\}/.test(pattern)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\n\nconst MAX_PATTERN_LENGTH = 1024 * 64\nconst assertValidPattern = pattern => {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('invalid pattern')\n  }\n\n  if (pattern.length > MAX_PATTERN_LENGTH) {\n    throw new TypeError('pattern is too long')\n  }\n}\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nconst SUBPARSE = Symbol('subparse')\n\nminimatch.makeRe = (pattern, options) =>\n  new Minimatch(pattern, options || {}).makeRe()\n\nminimatch.match = (list, pattern, options = {}) => {\n  const mm = new Minimatch(pattern, options)\n  list = list.filter(f => mm.match(f))\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\n\n// replace stuff like \\* with *\nconst globUnescape = s => s.replace(/\\\\(.)/g, '$1')\nconst charUnescape = s => s.replace(/\\\\([^-\\]])/g, '$1')\nconst regExpEscape = s => s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\nconst braExpEscape = s => s.replace(/[[\\]\\\\]/g, '\\\\$&')\n\nclass Minimatch {\n  constructor (pattern, options) {\n    assertValidPattern(pattern)\n\n    if (!options) options = {}\n\n    this.options = options\n    this.set = []\n    this.pattern = pattern\n    this.windowsPathsNoEscape = !!options.windowsPathsNoEscape ||\n      options.allowWindowsEscape === false\n    if (this.windowsPathsNoEscape) {\n      this.pattern = this.pattern.replace(/\\\\/g, '/')\n    }\n    this.regexp = null\n    this.negate = false\n    this.comment = false\n    this.empty = false\n    this.partial = !!options.partial\n\n    // make the set of regexps etc.\n    this.make()\n  }\n\n  debug () {}\n\n  make () {\n    const pattern = this.pattern\n    const options = this.options\n\n    // empty patterns and comments match nothing.\n    if (!options.nocomment && pattern.charAt(0) === '#') {\n      this.comment = true\n      return\n    }\n    if (!pattern) {\n      this.empty = true\n      return\n    }\n\n    // step 1: figure out negation, etc.\n    this.parseNegate()\n\n    // step 2: expand braces\n    let set = this.globSet = this.braceExpand()\n\n    if (options.debug) this.debug = (...args) => console.error(...args)\n\n    this.debug(this.pattern, set)\n\n    // step 3: now we have a set, so turn each one into a series of path-portion\n    // matching patterns.\n    // These will be regexps, except in the case of \"**\", which is\n    // set to the GLOBSTAR object for globstar behavior,\n    // and will not contain any / characters\n    set = this.globParts = set.map(s => s.split(slashSplit))\n\n    this.debug(this.pattern, set)\n\n    // glob --> regexps\n    set = set.map((s, si, set) => s.map(this.parse, this))\n\n    this.debug(this.pattern, set)\n\n    // filter out everything that didn't compile properly.\n    set = set.filter(s => s.indexOf(false) === -1)\n\n    this.debug(this.pattern, set)\n\n    this.set = set\n  }\n\n  parseNegate () {\n    if (this.options.nonegate) return\n\n    const pattern = this.pattern\n    let negate = false\n    let negateOffset = 0\n\n    for (let i = 0; i < pattern.length && pattern.charAt(i) === '!'; i++) {\n      negate = !negate\n      negateOffset++\n    }\n\n    if (negateOffset) this.pattern = pattern.slice(negateOffset)\n    this.negate = negate\n  }\n\n  // set partial to true to test if, for example,\n  // \"/a/b\" matches the start of \"/*/b/*/d\"\n  // Partial means, if you run out of file before you run\n  // out of pattern, then that's fine, as long as all\n  // the parts match.\n  matchOne (file, pattern, partial) {\n    var options = this.options\n\n    this.debug('matchOne',\n      { 'this': this, file: file, pattern: pattern })\n\n    this.debug('matchOne', file.length, pattern.length)\n\n    for (var fi = 0,\n        pi = 0,\n        fl = file.length,\n        pl = pattern.length\n        ; (fi < fl) && (pi < pl)\n        ; fi++, pi++) {\n      this.debug('matchOne loop')\n      var p = pattern[pi]\n      var f = file[fi]\n\n      this.debug(pattern, p, f)\n\n      // should be impossible.\n      // some invalid regexp stuff in the set.\n      /* istanbul ignore if */\n      if (p === false) return false\n\n      if (p === GLOBSTAR) {\n        this.debug('GLOBSTAR', [pattern, p, f])\n\n        // \"**\"\n        // a/**/b/**/c would match the following:\n        // a/b/x/y/z/c\n        // a/x/y/z/b/c\n        // a/b/x/b/x/c\n        // a/b/c\n        // To do this, take the rest of the pattern after\n        // the **, and see if it would match the file remainder.\n        // If so, return success.\n        // If not, the ** \"swallows\" a segment, and try again.\n        // This is recursively awful.\n        //\n        // a/**/b/**/c matching a/b/x/y/z/c\n        // - a matches a\n        // - doublestar\n        //   - matchOne(b/x/y/z/c, b/**/c)\n        //     - b matches b\n        //     - doublestar\n        //       - matchOne(x/y/z/c, c) -> no\n        //       - matchOne(y/z/c, c) -> no\n        //       - matchOne(z/c, c) -> no\n        //       - matchOne(c, c) yes, hit\n        var fr = fi\n        var pr = pi + 1\n        if (pr === pl) {\n          this.debug('** at the end')\n          // a ** at the end will just swallow the rest.\n          // We have found a match.\n          // however, it will not swallow /.x, unless\n          // options.dot is set.\n          // . and .. are *never* matched by **, for explosively\n          // exponential reasons.\n          for (; fi < fl; fi++) {\n            if (file[fi] === '.' || file[fi] === '..' ||\n              (!options.dot && file[fi].charAt(0) === '.')) return false\n          }\n          return true\n        }\n\n        // ok, let's see if we can swallow whatever we can.\n        while (fr < fl) {\n          var swallowee = file[fr]\n\n          this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n          // XXX remove this slice.  Just pass the start index.\n          if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n            this.debug('globstar found match!', fr, fl, swallowee)\n            // found a match.\n            return true\n          } else {\n            // can't swallow \".\" or \"..\" ever.\n            // can only swallow \".foo\" when explicitly asked.\n            if (swallowee === '.' || swallowee === '..' ||\n              (!options.dot && swallowee.charAt(0) === '.')) {\n              this.debug('dot detected!', file, fr, pattern, pr)\n              break\n            }\n\n            // ** swallows a segment, and continue.\n            this.debug('globstar swallow a segment, and continue')\n            fr++\n          }\n        }\n\n        // no match was found.\n        // However, in partial mode, we can't say this is necessarily over.\n        // If there's more *pattern* left, then\n        /* istanbul ignore if */\n        if (partial) {\n          // ran out of file\n          this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n          if (fr === fl) return true\n        }\n        return false\n      }\n\n      // something other than **\n      // non-magic patterns just have to match exactly\n      // patterns with magic have been turned into regexps.\n      var hit\n      if (typeof p === 'string') {\n        hit = f === p\n        this.debug('string match', p, f, hit)\n      } else {\n        hit = f.match(p)\n        this.debug('pattern match', p, f, hit)\n      }\n\n      if (!hit) return false\n    }\n\n    // Note: ending in / means that we'll get a final \"\"\n    // at the end of the pattern.  This can only match a\n    // corresponding \"\" at the end of the file.\n    // If the file ends in /, then it can only match a\n    // a pattern that ends in /, unless the pattern just\n    // doesn't have any more for it. But, a/b/ should *not*\n    // match \"a/b/*\", even though \"\" matches against the\n    // [^/]*? pattern, except in partial mode, where it might\n    // simply not be reached yet.\n    // However, a/b/ should still satisfy a/*\n\n    // now either we fell off the end of the pattern, or we're done.\n    if (fi === fl && pi === pl) {\n      // ran out of pattern and filename at the same time.\n      // an exact hit!\n      return true\n    } else if (fi === fl) {\n      // ran out of file, but still had pattern left.\n      // this is ok if we're doing the match as part of\n      // a glob fs traversal.\n      return partial\n    } else /* istanbul ignore else */ if (pi === pl) {\n      // ran out of pattern, still have file left.\n      // this is only acceptable if we're on the very last\n      // empty segment of a file with a trailing slash.\n      // a/* should match a/b/\n      return (fi === fl - 1) && (file[fi] === '')\n    }\n\n    // should be unreachable.\n    /* istanbul ignore next */\n    throw new Error('wtf?')\n  }\n\n  braceExpand () {\n    return braceExpand(this.pattern, this.options)\n  }\n\n  parse (pattern, isSub) {\n    assertValidPattern(pattern)\n\n    const options = this.options\n\n    // shortcuts\n    if (pattern === '**') {\n      if (!options.noglobstar)\n        return GLOBSTAR\n      else\n        pattern = '*'\n    }\n    if (pattern === '') return ''\n\n    let re = ''\n    let hasMagic = false\n    let escaping = false\n    // ? => one single character\n    const patternListStack = []\n    const negativeLists = []\n    let stateChar\n    let inClass = false\n    let reClassStart = -1\n    let classStart = -1\n    let cs\n    let pl\n    let sp\n    // . and .. never match anything that doesn't start with .,\n    // even when options.dot is set.  However, if the pattern\n    // starts with ., then traversal patterns can match.\n    let dotTravAllowed = pattern.charAt(0) === '.'\n    let dotFileAllowed = options.dot || dotTravAllowed\n    const patternStart = () =>\n      dotTravAllowed\n        ? ''\n        : dotFileAllowed\n        ? '(?!(?:^|\\\\/)\\\\.{1,2}(?:$|\\\\/))'\n        : '(?!\\\\.)'\n    const subPatternStart = (p) =>\n      p.charAt(0) === '.'\n        ? ''\n        : options.dot\n        ? '(?!(?:^|\\\\/)\\\\.{1,2}(?:$|\\\\/))'\n        : '(?!\\\\.)'\n\n\n    const clearStateChar = () => {\n      if (stateChar) {\n        // we had some state-tracking character\n        // that wasn't consumed by this pass.\n        switch (stateChar) {\n          case '*':\n            re += star\n            hasMagic = true\n          break\n          case '?':\n            re += qmark\n            hasMagic = true\n          break\n          default:\n            re += '\\\\' + stateChar\n          break\n        }\n        this.debug('clearStateChar %j %j', stateChar, re)\n        stateChar = false\n      }\n    }\n\n    for (let i = 0, c; (i < pattern.length) && (c = pattern.charAt(i)); i++) {\n      this.debug('%s\\t%s %s %j', pattern, i, re, c)\n\n      // skip over any that are escaped.\n      if (escaping) {\n        /* istanbul ignore next - completely not allowed, even escaped. */\n        if (c === '/') {\n          return false\n        }\n\n        if (reSpecials[c]) {\n          re += '\\\\'\n        }\n        re += c\n        escaping = false\n        continue\n      }\n\n      switch (c) {\n        /* istanbul ignore next */\n        case '/': {\n          // Should already be path-split by now.\n          return false\n        }\n\n        case '\\\\':\n          if (inClass && pattern.charAt(i + 1) === '-') {\n            re += c\n            continue\n          }\n\n          clearStateChar()\n          escaping = true\n        continue\n\n        // the various stateChar values\n        // for the \"extglob\" stuff.\n        case '?':\n        case '*':\n        case '+':\n        case '@':\n        case '!':\n          this.debug('%s\\t%s %s %j <-- stateChar', pattern, i, re, c)\n\n          // all of those are literals inside a class, except that\n          // the glob [!a] means [^a] in regexp\n          if (inClass) {\n            this.debug('  in class')\n            if (c === '!' && i === classStart + 1) c = '^'\n            re += c\n            continue\n          }\n\n          // if we already have a stateChar, then it means\n          // that there was something like ** or +? in there.\n          // Handle the stateChar, then proceed with this one.\n          this.debug('call clearStateChar %j', stateChar)\n          clearStateChar()\n          stateChar = c\n          // if extglob is disabled, then +(asdf|foo) isn't a thing.\n          // just clear the statechar *now*, rather than even diving into\n          // the patternList stuff.\n          if (options.noext) clearStateChar()\n        continue\n\n        case '(': {\n          if (inClass) {\n            re += '('\n            continue\n          }\n\n          if (!stateChar) {\n            re += '\\\\('\n            continue\n          }\n\n          const plEntry = {\n            type: stateChar,\n            start: i - 1,\n            reStart: re.length,\n            open: plTypes[stateChar].open,\n            close: plTypes[stateChar].close,\n          }\n          this.debug(this.pattern, '\\t', plEntry)\n          patternListStack.push(plEntry)\n          // negation is (?:(?!(?:js)(?:<rest>))[^/]*)\n          re += plEntry.open\n          // next entry starts with a dot maybe?\n          if (plEntry.start === 0 && plEntry.type !== '!') {\n            dotTravAllowed = true\n            re += subPatternStart(pattern.slice(i + 1))\n          }\n          this.debug('plType %j %j', stateChar, re)\n          stateChar = false\n          continue\n        }\n\n        case ')': {\n          const plEntry = patternListStack[patternListStack.length - 1]\n          if (inClass || !plEntry) {\n            re += '\\\\)'\n            continue\n          }\n          patternListStack.pop()\n\n          // closing an extglob\n          clearStateChar()\n          hasMagic = true\n          pl = plEntry\n          // negation is (?:(?!js)[^/]*)\n          // The others are (?:<pattern>)<type>\n          re += pl.close\n          if (pl.type === '!') {\n            negativeLists.push(Object.assign(pl, { reEnd: re.length }))\n          }\n          continue\n        }\n\n        case '|': {\n          const plEntry = patternListStack[patternListStack.length - 1]\n          if (inClass || !plEntry) {\n            re += '\\\\|'\n            continue\n          }\n\n          clearStateChar()\n          re += '|'\n          // next subpattern can start with a dot?\n          if (plEntry.start === 0 && plEntry.type !== '!') {\n            dotTravAllowed = true\n            re += subPatternStart(pattern.slice(i + 1))\n          }\n          continue\n        }\n\n        // these are mostly the same in regexp and glob\n        case '[':\n          // swallow any state-tracking char before the [\n          clearStateChar()\n\n          if (inClass) {\n            re += '\\\\' + c\n            continue\n          }\n\n          inClass = true\n          classStart = i\n          reClassStart = re.length\n          re += c\n        continue\n\n        case ']':\n          //  a right bracket shall lose its special\n          //  meaning and represent itself in\n          //  a bracket expression if it occurs\n          //  first in the list.  -- POSIX.2 2.8.3.2\n          if (i === classStart + 1 || !inClass) {\n            re += '\\\\' + c\n            continue\n          }\n\n          // split where the last [ was, make sure we don't have\n          // an invalid re. if so, re-walk the contents of the\n          // would-be class to re-translate any characters that\n          // were passed through as-is\n          // TODO: It would probably be faster to determine this\n          // without a try/catch and a new RegExp, but it's tricky\n          // to do safely.  For now, this is safe and works.\n          cs = pattern.substring(classStart + 1, i)\n          try {\n            RegExp('[' + braExpEscape(charUnescape(cs)) + ']')\n            // looks good, finish up the class.\n            re += c\n          } catch (er) {\n            // out of order ranges in JS are errors, but in glob syntax,\n            // they're just a range that matches nothing.\n            re = re.substring(0, reClassStart) + '(?:$.)' // match nothing ever\n          }\n          hasMagic = true\n          inClass = false\n        continue\n\n        default:\n          // swallow any state char that wasn't consumed\n          clearStateChar()\n\n          if (reSpecials[c] && !(c === '^' && inClass)) {\n            re += '\\\\'\n          }\n\n          re += c\n          break\n\n      } // switch\n    } // for\n\n    // handle the case where we left a class open.\n    // \"[abc\" is valid, equivalent to \"\\[abc\"\n    if (inClass) {\n      // split where the last [ was, and escape it\n      // this is a huge pita.  We now have to re-walk\n      // the contents of the would-be class to re-translate\n      // any characters that were passed through as-is\n      cs = pattern.slice(classStart + 1)\n      sp = this.parse(cs, SUBPARSE)\n      re = re.substring(0, reClassStart) + '\\\\[' + sp[0]\n      hasMagic = hasMagic || sp[1]\n    }\n\n    // handle the case where we had a +( thing at the *end*\n    // of the pattern.\n    // each pattern list stack adds 3 chars, and we need to go through\n    // and escape any | chars that were passed through as-is for the regexp.\n    // Go through and escape them, taking care not to double-escape any\n    // | chars that were already escaped.\n    for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {\n      let tail\n      tail = re.slice(pl.reStart + pl.open.length)\n      this.debug('setting tail', re, pl)\n      // maybe some even number of \\, then maybe 1 \\, followed by a |\n      tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, (_, $1, $2) => {\n        /* istanbul ignore else - should already be done */\n        if (!$2) {\n          // the | isn't already escaped, so escape it.\n          $2 = '\\\\'\n        }\n\n        // need to escape all those slashes *again*, without escaping the\n        // one that we need for escaping the | character.  As it works out,\n        // escaping an even number of slashes can be done by simply repeating\n        // it exactly after itself.  That's why this trick works.\n        //\n        // I am sorry that you have to see this.\n        return $1 + $1 + $2 + '|'\n      })\n\n      this.debug('tail=%j\\n   %s', tail, tail, pl, re)\n      const t = pl.type === '*' ? star\n        : pl.type === '?' ? qmark\n        : '\\\\' + pl.type\n\n      hasMagic = true\n      re = re.slice(0, pl.reStart) + t + '\\\\(' + tail\n    }\n\n    // handle trailing things that only matter at the very end.\n    clearStateChar()\n    if (escaping) {\n      // trailing \\\\\n      re += '\\\\\\\\'\n    }\n\n    // only need to apply the nodot start if the re starts with\n    // something that could conceivably capture a dot\n    const addPatternStart = addPatternStartSet[re.charAt(0)]\n\n    // Hack to work around lack of negative lookbehind in JS\n    // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n    // like 'a.xyz.yz' doesn't match.  So, the first negative\n    // lookahead, has to look ALL the way ahead, to the end of\n    // the pattern.\n    for (let n = negativeLists.length - 1; n > -1; n--) {\n      const nl = negativeLists[n]\n\n      const nlBefore = re.slice(0, nl.reStart)\n      const nlFirst = re.slice(nl.reStart, nl.reEnd - 8)\n      let nlAfter = re.slice(nl.reEnd)\n      const nlLast = re.slice(nl.reEnd - 8, nl.reEnd) + nlAfter\n\n      // Handle nested stuff like *(*.js|!(*.json)), where open parens\n      // mean that we should *not* include the ) in the bit that is considered\n      // \"after\" the negated section.\n      const closeParensBefore = nlBefore.split(')').length\n      const openParensBefore = nlBefore.split('(').length - closeParensBefore\n      let cleanAfter = nlAfter\n      for (let i = 0; i < openParensBefore; i++) {\n        cleanAfter = cleanAfter.replace(/\\)[+*?]?/, '')\n      }\n      nlAfter = cleanAfter\n\n      const dollar = nlAfter === '' && isSub !== SUBPARSE ? '(?:$|\\\\/)' : ''\n\n      re = nlBefore + nlFirst + nlAfter + dollar + nlLast\n    }\n\n    // if the re is not \"\" at this point, then we need to make sure\n    // it doesn't match against an empty path part.\n    // Otherwise a/* will match a/, which it should not.\n    if (re !== '' && hasMagic) {\n      re = '(?=.)' + re\n    }\n\n    if (addPatternStart) {\n      re = patternStart() + re\n    }\n\n    // parsing just a piece of a larger pattern.\n    if (isSub === SUBPARSE) {\n      return [re, hasMagic]\n    }\n\n    // if it's nocase, and the lcase/uppercase don't match, it's magic\n    if (options.nocase && !hasMagic) {\n      hasMagic = pattern.toUpperCase() !== pattern.toLowerCase()\n    }\n\n    // skip the regexp for non-magical patterns\n    // unescape anything in it, though, so that it'll be\n    // an exact match against a file etc.\n    if (!hasMagic) {\n      return globUnescape(pattern)\n    }\n\n    const flags = options.nocase ? 'i' : ''\n    try {\n      return Object.assign(new RegExp('^' + re + '$', flags), {\n        _glob: pattern,\n        _src: re,\n      })\n    } catch (er) /* istanbul ignore next - should be impossible */ {\n      // If it was an invalid regular expression, then it can't match\n      // anything.  This trick looks for a character after the end of\n      // the string, which is of course impossible, except in multi-line\n      // mode, but it's not a /m regex.\n      return new RegExp('$.')\n    }\n  }\n\n  makeRe () {\n    if (this.regexp || this.regexp === false) return this.regexp\n\n    // at this point, this.set is a 2d array of partial\n    // pattern strings, or \"**\".\n    //\n    // It's better to use .match().  This function shouldn't\n    // be used, really, but it's pretty convenient sometimes,\n    // when you just want to work with a regex.\n    const set = this.set\n\n    if (!set.length) {\n      this.regexp = false\n      return this.regexp\n    }\n    const options = this.options\n\n    const twoStar = options.noglobstar ? star\n      : options.dot ? twoStarDot\n      : twoStarNoDot\n    const flags = options.nocase ? 'i' : ''\n\n    // coalesce globstars and regexpify non-globstar patterns\n    // if it's the only item, then we just do one twoStar\n    // if it's the first, and there are more, prepend (\\/|twoStar\\/)? to next\n    // if it's the last, append (\\/twoStar|) to previous\n    // if it's in the middle, append (\\/|\\/twoStar\\/) to previous\n    // then filter out GLOBSTAR symbols\n    let re = set.map(pattern => {\n      pattern = pattern.map(p =>\n        typeof p === 'string' ? regExpEscape(p)\n        : p === GLOBSTAR ? GLOBSTAR\n        : p._src\n      ).reduce((set, p) => {\n        if (!(set[set.length - 1] === GLOBSTAR && p === GLOBSTAR)) {\n          set.push(p)\n        }\n        return set\n      }, [])\n      pattern.forEach((p, i) => {\n        if (p !== GLOBSTAR || pattern[i-1] === GLOBSTAR) {\n          return\n        }\n        if (i === 0) {\n          if (pattern.length > 1) {\n            pattern[i+1] = '(?:\\\\\\/|' + twoStar + '\\\\\\/)?' + pattern[i+1]\n          } else {\n            pattern[i] = twoStar\n          }\n        } else if (i === pattern.length - 1) {\n          pattern[i-1] += '(?:\\\\\\/|' + twoStar + ')?'\n        } else {\n          pattern[i-1] += '(?:\\\\\\/|\\\\\\/' + twoStar + '\\\\\\/)' + pattern[i+1]\n          pattern[i+1] = GLOBSTAR\n        }\n      })\n      return pattern.filter(p => p !== GLOBSTAR).join('/')\n    }).join('|')\n\n    // must match entire pattern\n    // ending in a * or ** will make it less strict.\n    re = '^(?:' + re + ')$'\n\n    // can match anything, as long as it's not this.\n    if (this.negate) re = '^(?!' + re + ').*$'\n\n    try {\n      this.regexp = new RegExp(re, flags)\n    } catch (ex) /* istanbul ignore next - should be impossible */ {\n      this.regexp = false\n    }\n    return this.regexp\n  }\n\n  match (f, partial = this.partial) {\n    this.debug('match', f, this.pattern)\n    // short-circuit in the case of busted things.\n    // comments, etc.\n    if (this.comment) return false\n    if (this.empty) return f === ''\n\n    if (f === '/' && partial) return true\n\n    const options = this.options\n\n    // windows: need to use /, not \\\n    if (path.sep !== '/') {\n      f = f.split(path.sep).join('/')\n    }\n\n    // treat the test path as a set of pathparts.\n    f = f.split(slashSplit)\n    this.debug(this.pattern, 'split', f)\n\n    // just ONE of the pattern sets in this.set needs to match\n    // in order for it to be valid.  If negating, then just one\n    // match means that we have failed.\n    // Either way, return on the first hit.\n\n    const set = this.set\n    this.debug(this.pattern, 'set', set)\n\n    // Find the basename of the path by looking for the last non-empty segment\n    let filename\n    for (let i = f.length - 1; i >= 0; i--) {\n      filename = f[i]\n      if (filename) break\n    }\n\n    for (let i = 0; i < set.length; i++) {\n      const pattern = set[i]\n      let file = f\n      if (options.matchBase && pattern.length === 1) {\n        file = [filename]\n      }\n      const hit = this.matchOne(file, pattern, partial)\n      if (hit) {\n        if (options.flipNegate) return true\n        return !this.negate\n      }\n    }\n\n    // didn't get any hits.  this is success if it's a negative\n    // pattern, failure otherwise.\n    if (options.flipNegate) return false\n    return this.negate\n  }\n\n  static defaults (def) {\n    return minimatch.defaults(def).Minimatch\n  }\n}\n\nminimatch.Minimatch = Minimatch\n"],"names":[],"sourceRoot":""}