{"version":3,"file":"node_modules_theia_git_lib_browser_prompt_git-prompt-module_js.js","mappings":"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","sources":["webpack:///./node_modules/@theia/git/src/browser/prompt/git-prompt-module.ts?","webpack:///./node_modules/@theia/git/src/common/git-prompt.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2018 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { ContainerModule, interfaces } from '@theia/core/shared/inversify';\nimport { WebSocketConnectionProvider } from '@theia/core/lib/browser/messaging/ws-connection-provider';\nimport { GitPrompt, GitPromptServer, GitPromptServerProxy, GitPromptServerImpl } from '../../common/git-prompt';\n\nexport default new ContainerModule(bind => {\n    bind(GitPrompt).toSelf();\n    bindPromptServer(bind);\n});\n\nexport function bindPromptServer(bind: interfaces.Bind): void {\n    bind(GitPromptServer).to(GitPromptServerImpl).inSingletonScope();\n    bind(GitPromptServerProxy).toDynamicValue(context => WebSocketConnectionProvider.createProxy(context.container, GitPrompt.WS_PATH)).inSingletonScope();\n}\n","// *****************************************************************************\n// Copyright (C) 2018 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { inject, injectable, postConstruct } from '@theia/core/shared/inversify';\nimport { RpcProxy, RpcServer } from '@theia/core/lib/common/messaging/proxy-factory';\nimport { Disposable, DisposableCollection } from '@theia/core/lib/common/disposable';\n\nexport const GitPromptServer = Symbol('GitPromptServer');\nexport interface GitPromptServer extends RpcServer<GitPromptClient> {\n}\n\nexport const GitPromptServerProxy = Symbol('GitPromptServerProxy');\nexport interface GitPromptServerProxy extends RpcProxy<GitPromptServer> {\n}\n\n@injectable()\nexport class GitPrompt implements GitPromptClient, Disposable {\n\n    @inject(GitPromptServer)\n    protected readonly server: GitPromptServer;\n\n    protected readonly toDispose = new DisposableCollection();\n\n    @postConstruct()\n    protected init(): void {\n        this.server.setClient(this);\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    async ask(question: GitPrompt.Question): Promise<GitPrompt.Answer> {\n        return GitPrompt.Failure.create('Interactive Git prompt is not supported in the browser.');\n    }\n\n}\n\nexport namespace GitPrompt {\n\n    /**\n     * Unique WS endpoint path for the Git prompt service.\n     */\n    export const WS_PATH = 'services/git-prompt';\n\n    export interface Question {\n        readonly text: string;\n        readonly details?: string;\n        readonly password?: boolean;\n    }\n\n    export interface Answer {\n        readonly type: Answer.Type;\n    }\n\n    export interface Success {\n        readonly type: Answer.Type.SUCCESS;\n        readonly result: string | boolean;\n    }\n\n    export namespace Success {\n\n        export function is(answer: Answer): answer is Success {\n            return answer.type === Answer.Type.SUCCESS\n                && 'result' in answer\n                && ((typeof (answer as Success).result) === 'string' || (typeof (answer as Success).result) === 'boolean');\n        }\n\n        export function create(result: string | boolean): Success {\n            return {\n                type: Answer.Type.SUCCESS,\n                result\n            };\n        }\n\n    }\n\n    export interface Cancel extends Answer {\n        readonly type: Answer.Type.CANCEL;\n    }\n\n    export namespace Cancel {\n\n        export function is(answer: Answer): answer is Cancel {\n            return answer.type === Answer.Type.CANCEL;\n        }\n\n        export function create(): Cancel {\n            return {\n                type: Answer.Type.CANCEL\n            };\n        }\n\n    }\n\n    export interface Failure extends Answer {\n        readonly type: Answer.Type.FAILURE;\n        readonly error: string | Error;\n    }\n\n    export namespace Failure {\n\n        export function is(answer: Answer): answer is Failure {\n            return answer.type === Answer.Type.FAILURE\n                && 'error' in answer\n                && ((typeof (answer as Failure).error) === 'string' || (answer as Failure).error instanceof Error);\n        }\n\n        export function create(error: string | Error): Failure {\n            return {\n                type: Answer.Type.FAILURE,\n                error\n            };\n        }\n\n    }\n\n    export namespace Answer {\n\n        export enum Type {\n\n            SUCCESS,\n            CANCEL,\n            FAILURE\n\n        }\n\n    }\n\n}\n\nexport const GitPromptClient = Symbol('GitPromptClient');\nexport interface GitPromptClient {\n\n    ask(question: GitPrompt.Question): Promise<GitPrompt.Answer>;\n\n    // TODO: implement `confirm` with boolean return type.\n    // TODO: implement `select` with possible answers.\n\n}\n\n/**\n * Note: This implementation is not reconnecting.\n * Git prompting is not supported in the browser. In electron, there's no need to reconnect.\n */\n@injectable()\nexport class GitPromptServerImpl implements GitPromptServer {\n\n    @inject(GitPromptServerProxy)\n    protected readonly proxy: GitPromptServerProxy;\n\n    setClient(client: GitPromptClient): void {\n        this.proxy.setClient(client);\n    }\n\n    dispose(): void {\n        this.proxy.dispose();\n    }\n\n}\n"],"names":[],"sourceRoot":""}