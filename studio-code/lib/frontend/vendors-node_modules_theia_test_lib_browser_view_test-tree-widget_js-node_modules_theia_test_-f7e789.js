"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_theia_test_lib_browser_view_test-tree-widget_js-node_modules_theia_test_-f7e789"],{

/***/ "./node_modules/@theia/test/lib/browser/test-service.js":
/*!**************************************************************!*\
  !*** ./node_modules/@theia/test/lib/browser/test-service.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2022 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultTestService = exports.TestService = exports.TestContribution = exports.TestItem = exports.TestRun = exports.TestFailure = exports.TestExecutionState = exports.TestRunProfileKind = void 0;
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "./node_modules/@theia/core/lib/common/index.js");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! @theia/core/shared/vscode-languageserver-protocol */ "./node_modules/@theia/core/shared/vscode-languageserver-protocol/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const collections_1 = __webpack_require__(/*! ../common/collections */ "./node_modules/@theia/test/lib/common/collections.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "./node_modules/@theia/core/lib/browser/index.js");
var TestRunProfileKind;
(function (TestRunProfileKind) {
    TestRunProfileKind[TestRunProfileKind["Run"] = 1] = "Run";
    TestRunProfileKind[TestRunProfileKind["Debug"] = 2] = "Debug";
    TestRunProfileKind[TestRunProfileKind["Coverage"] = 3] = "Coverage";
})(TestRunProfileKind = exports.TestRunProfileKind || (exports.TestRunProfileKind = {}));
var TestExecutionState;
(function (TestExecutionState) {
    TestExecutionState[TestExecutionState["Queued"] = 1] = "Queued";
    TestExecutionState[TestExecutionState["Running"] = 2] = "Running";
    TestExecutionState[TestExecutionState["Passed"] = 3] = "Passed";
    TestExecutionState[TestExecutionState["Failed"] = 4] = "Failed";
    TestExecutionState[TestExecutionState["Skipped"] = 5] = "Skipped";
    TestExecutionState[TestExecutionState["Errored"] = 6] = "Errored";
})(TestExecutionState = exports.TestExecutionState || (exports.TestExecutionState = {}));
var TestFailure;
(function (TestFailure) {
    function is(obj) {
        return (0, common_1.isObject)(obj) && (obj.state === TestExecutionState.Failed || obj.state === TestExecutionState.Errored) && Array.isArray(obj.messages);
    }
    TestFailure.is = is;
})(TestFailure = exports.TestFailure || (exports.TestFailure = {}));
var TestRun;
(function (TestRun) {
    function is(obj) {
        return (0, common_1.isObject)(obj)
            && typeof obj.cancel === 'function'
            && typeof obj.name === 'string'
            && typeof obj.isRunning === 'boolean'
            && typeof obj.controller === 'object'
            && typeof obj.onDidChangeProperty === 'function'
            && typeof obj.getTestState === 'function'
            && typeof obj.onDidChangeTestState === 'function'
            && typeof obj.onDidChangeTestState === 'function'
            && typeof obj.getOutput === 'function'
            && typeof obj.onDidChangeTestOutput === 'function'
            && Array.isArray(obj.items);
    }
    TestRun.is = is;
})(TestRun = exports.TestRun || (exports.TestRun = {}));
var TestItem;
(function (TestItem) {
    function is(obj) {
        return (0, common_1.isObject)(obj)
            && obj.id !== undefined
            && obj.label !== undefined
            && Array.isArray(obj.tags)
            && Array.isArray(obj.tests)
            && obj.busy !== undefined
            && obj.canResolveChildren !== undefined
            && typeof obj.resolveChildren === 'function';
    }
    TestItem.is = is;
})(TestItem = exports.TestItem || (exports.TestItem = {}));
exports.TestContribution = Symbol('TestContribution');
exports.TestService = Symbol('TestService');
let DefaultTestService = class DefaultTestService {
    constructor() {
        this.testRunCounter = 0;
        this.onDidChangeIsRefreshingEmitter = new common_1.Emitter();
        this.onDidChangeIsRefreshing = this.onDidChangeIsRefreshingEmitter.event;
        this.controllers = new Map();
        this.refreshing = new Set();
        this.onControllersChangedEmitter = new common_1.Emitter();
        this.onControllersChanged = this.onControllersChangedEmitter.event;
    }
    registerContributions() {
        this.contributionProvider.getContributions().forEach(contribution => contribution.registerTestControllers(this));
    }
    registerTestController(controller) {
        if (this.controllers.has(controller.id)) {
            throw new Error('TestController already registered: ' + controller.id);
        }
        this.controllers.set(controller.id, controller);
        this.onControllersChangedEmitter.fire({ added: [controller] });
        return common_1.Disposable.create(() => {
            this.controllers.delete(controller.id);
            this.onControllersChangedEmitter.fire({ removed: [controller.id] });
        });
    }
    getControllers() {
        return Array.from(this.controllers.values());
    }
    refresh() {
        const cts = new vscode_languageserver_protocol_1.CancellationTokenSource();
        this.refreshing.add(cts);
        Promise.all(this.getControllers().map(controller => controller.refreshTests(cts.token))).then(() => {
            this.refreshing.delete(cts);
            if (this.refreshing.size === 0) {
                this.onDidChangeIsRefreshingEmitter.fire();
            }
        });
        if (this.refreshing.size === 1) {
            this.onDidChangeIsRefreshingEmitter.fire();
        }
    }
    cancelRefresh() {
        if (this.refreshing.size > 0) {
            this.refreshing.forEach(cts => cts.cancel());
            this.refreshing.clear();
            this.onDidChangeIsRefreshingEmitter.fire();
        }
    }
    get isRefreshing() {
        return this.refreshing.size > 0;
    }
    runAllTests(profileKind) {
        this.getControllers().forEach(controller => {
            this.runTestForController(controller, profileKind, controller.tests);
        });
    }
    async runTestForController(controller, profileKind, items) {
        const runProfiles = controller.testRunProfiles.filter(profile => profile.kind === profileKind);
        let activeProfile;
        if (runProfiles.length === 1) {
            activeProfile = runProfiles[0];
        }
        else if (runProfiles.length > 1) {
            const defaultProfile = runProfiles.find(p => p.isDefault);
            if (defaultProfile) {
                activeProfile = defaultProfile;
            }
            else {
                activeProfile = await this.pickProfile(runProfiles, common_1.nls.localizeByDefault('Pick a test profile to use'));
            }
        }
        if (activeProfile) {
            activeProfile.run(`Test run #${this.testRunCounter++}`, items, []);
        }
    }
    async pickProfile(runProfiles, title) {
        var _a;
        if (runProfiles.length === 0) {
            return undefined;
        }
        // eslint-disable-next-line arrow-body-style
        const picks = runProfiles.map(profile => {
            let iconClasses;
            if (profile.kind === TestRunProfileKind.Run) {
                iconClasses = (0, browser_1.codiconArray)('run');
            }
            else if (profile.kind === TestRunProfileKind.Debug) {
                iconClasses = (0, browser_1.codiconArray)('debug-alt');
            }
            return {
                iconClasses,
                label: profile.label,
                profile: profile
            };
        });
        return (_a = (await this.quickpickService.show(picks, { title: title }))) === null || _a === void 0 ? void 0 : _a.profile;
    }
    runTests(profileKind, items) {
        (0, collections_1.groupBy)(items, item => item.controller).forEach((tests, controller) => {
            if (controller) {
                this.runTestForController(controller, profileKind, tests);
            }
        });
    }
    runTestsWithProfile(items) {
        (0, collections_1.groupBy)(items, item => item.controller).forEach((tests, controller) => {
            if (controller) {
                this.pickProfile(controller.testRunProfiles, common_1.nls.localizeByDefault('Pick a test profile to use')).then(activeProfile => {
                    if (activeProfile) {
                        activeProfile.run(`Test run #${this.testRunCounter++}`, items, []);
                    }
                });
            }
        });
    }
    configureProfile() {
        const profiles = [];
        for (const controller of this.controllers.values()) {
            profiles.push(...controller.testRunProfiles);
        }
        ;
        this.pickProfile(profiles.filter(profile => profile.canConfigure), common_1.nls.localizeByDefault('Select a profile to update')).then(profile => {
            if (profile) {
                profile.configure();
            }
        });
    }
    clearResults() {
        for (const controller of this.controllers.values()) {
            controller.clearRuns();
        }
    }
};
__decorate([
    (0, inversify_1.inject)(common_1.QuickPickService),
    __metadata("design:type", Object)
], DefaultTestService.prototype, "quickpickService", void 0);
__decorate([
    (0, inversify_1.inject)(common_1.ContributionProvider),
    (0, inversify_1.named)(exports.TestContribution),
    __metadata("design:type", Object)
], DefaultTestService.prototype, "contributionProvider", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DefaultTestService.prototype, "registerContributions", null);
DefaultTestService = __decorate([
    (0, inversify_1.injectable)()
], DefaultTestService);
exports.DefaultTestService = DefaultTestService;


/***/ }),

/***/ "./node_modules/@theia/test/lib/browser/view/test-execution-state-manager.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@theia/test/lib/browser/view/test-execution-state-manager.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2023 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TestExecutionStateManager = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const test_service_1 = __webpack_require__(/*! ../test-service */ "./node_modules/@theia/test/lib/browser/test-service.js");
/**
 * This class manages the state of "internal" nodes in the test tree
 */
let TestExecutionStateManager = class TestExecutionStateManager {
    constructor() {
        this.executionStates = new Map();
    }
    init() {
        this.testService.getControllers().forEach(controller => this.addController(controller));
        this.testService.onControllersChanged(controllerDelta => {
            var _a;
            (_a = controllerDelta.added) === null || _a === void 0 ? void 0 : _a.forEach(controller => this.addController(controller));
        });
    }
    addController(controller) {
        controller.testRuns.forEach(run => this.addRun(run));
        controller.onRunsChanged(runDelta => {
            var _a, _b;
            (_a = runDelta.added) === null || _a === void 0 ? void 0 : _a.forEach(run => this.addRun(run));
            (_b = runDelta.removed) === null || _b === void 0 ? void 0 : _b.forEach(run => {
                this.executionStates.delete(run);
            });
        });
    }
    addRun(run) {
        this.executionStates.set(run, new TestExecutionStateMap);
        run.onDidChangeTestState(updates => {
            updates.forEach(update => {
                var _a, _b;
                this.updateState(run, update.test, (_a = update.oldState) === null || _a === void 0 ? void 0 : _a.state, (_b = update.newState) === null || _b === void 0 ? void 0 : _b.state);
            });
        });
    }
    updateState(run, item, oldState, newState) {
        const map = this.executionStates.get(run);
        map.reportState(item, oldState, newState);
    }
    getComputedState(run, item) {
        var _a;
        return (_a = this.executionStates.get(run)) === null || _a === void 0 ? void 0 : _a.getComputedState(item);
    }
};
__decorate([
    (0, inversify_1.inject)(test_service_1.TestService),
    __metadata("design:type", Object)
], TestExecutionStateManager.prototype, "testService", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TestExecutionStateManager.prototype, "init", null);
TestExecutionStateManager = __decorate([
    (0, inversify_1.injectable)()
], TestExecutionStateManager);
exports.TestExecutionStateManager = TestExecutionStateManager;
class TestExecutionStateMap {
    constructor() {
        this.stateCounts = new Map();
    }
    reportState(item, oldState, newState) {
        if (oldState !== newState) {
            if (item.parent) {
                this.reportChildStateChanged(item.parent, oldState, newState);
            }
        }
    }
    reportChildStateChanged(parent, oldState, newState) {
        if (oldState !== newState) {
            const currentParentState = this.getComputedState(parent);
            let counts = this.stateCounts.get(parent);
            if (!counts) {
                counts = [];
                counts[test_service_1.TestExecutionState.Queued] = 0;
                counts[test_service_1.TestExecutionState.Running] = 0;
                counts[test_service_1.TestExecutionState.Passed] = 0;
                counts[test_service_1.TestExecutionState.Failed] = 0;
                counts[test_service_1.TestExecutionState.Skipped] = 0;
                counts[test_service_1.TestExecutionState.Errored] = 0;
                this.stateCounts.set(parent, counts);
            }
            if (oldState) {
                counts[oldState]--;
            }
            if (newState) {
                counts[newState]++;
            }
            const newParentState = this.getComputedState(parent);
            if (parent.parent && currentParentState !== newParentState) {
                this.reportChildStateChanged(parent.parent, currentParentState, newParentState);
            }
        }
    }
    updateState(item, oldState, newState) {
        let parent = item.parent;
        while (parent && 'parent' in parent) { // parent is a test item
            let counts = this.stateCounts.get(parent);
            if (!counts) {
                counts = [];
                counts[test_service_1.TestExecutionState.Queued] = 0;
                counts[test_service_1.TestExecutionState.Running] = 0;
                counts[test_service_1.TestExecutionState.Passed] = 0;
                counts[test_service_1.TestExecutionState.Failed] = 0;
                counts[test_service_1.TestExecutionState.Skipped] = 0;
                counts[test_service_1.TestExecutionState.Errored] = 0;
                this.stateCounts.set(parent, counts);
            }
            if (oldState) {
                counts[oldState]--;
            }
            counts[newState]++;
            parent = parent.parent;
        }
    }
    getComputedState(item) {
        const counts = this.stateCounts.get(item);
        if (counts) {
            if (counts[test_service_1.TestExecutionState.Errored] > 0) {
                return test_service_1.TestExecutionState.Errored;
            }
            else if (counts[test_service_1.TestExecutionState.Failed] > 0) {
                return test_service_1.TestExecutionState.Failed;
            }
            else if (counts[test_service_1.TestExecutionState.Running] > 0) {
                return test_service_1.TestExecutionState.Running;
            }
            else if (counts[test_service_1.TestExecutionState.Queued] > 0) {
                return test_service_1.TestExecutionState.Queued;
            }
            else if (counts[test_service_1.TestExecutionState.Passed] > 0) {
                return test_service_1.TestExecutionState.Passed;
            }
            else if (counts[test_service_1.TestExecutionState.Skipped] > 0) {
                return test_service_1.TestExecutionState.Skipped;
            }
            else {
                return undefined;
            }
        }
        else {
            return undefined;
        }
    }
}


/***/ }),

/***/ "./node_modules/@theia/test/lib/browser/view/test-output-ui-model.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@theia/test/lib/browser/view/test-output-ui-model.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2023 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TestOutputUIModel = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const test_service_1 = __webpack_require__(/*! ../test-service */ "./node_modules/@theia/test/lib/browser/test-service.js");
const core_1 = __webpack_require__(/*! @theia/core */ "./node_modules/@theia/core/lib/common/index.js");
let TestOutputUIModel = class TestOutputUIModel {
    constructor() {
        this.activeRuns = new Map();
        this.controllerListeners = new Map();
        this.onDidChangeActiveTestRunEmitter = new core_1.Emitter();
        this.onDidChangeActiveTestRun = this.onDidChangeActiveTestRunEmitter.event;
        this.onDidChangeActiveTestStateEmitter = new core_1.Emitter();
        this.onDidChangeActiveTestState = this.onDidChangeActiveTestStateEmitter.event;
        this.onDidChangeSelectedOutputSourceEmitter = new core_1.Emitter();
        this.onDidChangeSelectedOutputSource = this.onDidChangeSelectedOutputSourceEmitter.event;
        this.onDidChangeSelectedTestStateEmitter = new core_1.Emitter();
        this.onDidChangeSelectedTestState = this.onDidChangeSelectedTestStateEmitter.event;
    }
    init() {
        this.testService.getControllers().forEach(controller => this.addController(controller));
        this.testService.onControllersChanged(deltas => {
            var _a, _b;
            (_a = deltas.added) === null || _a === void 0 ? void 0 : _a.forEach(controller => this.addController(controller));
            (_b = deltas.removed) === null || _b === void 0 ? void 0 : _b.forEach(controller => this.removeController(controller));
        });
    }
    removeController(id) {
        var _a;
        (_a = this.controllerListeners.get(id)) === null || _a === void 0 ? void 0 : _a.dispose();
        if (this.activeRuns.has(id)) {
            this.activeRuns.delete(id);
        }
    }
    addController(controller) {
        this.controllerListeners.set(controller.id, controller.onRunsChanged(delta => {
            var _a;
            if (delta.added) {
                const currentRun = controller.testRuns[controller.testRuns.length - 1];
                if (currentRun) {
                    this.setActiveTestRun(currentRun);
                }
            }
            else {
                (_a = delta.removed) === null || _a === void 0 ? void 0 : _a.forEach(run => {
                    if (run === this.getActiveTestRun(controller)) {
                        const currentRun = controller.testRuns[controller.testRuns.length - 1];
                        this.doSetActiveRun(controller, currentRun);
                    }
                });
            }
        }));
    }
    getActiveTestRun(controller) {
        var _a;
        return (_a = this.activeRuns.get(controller.id)) === null || _a === void 0 ? void 0 : _a.run;
    }
    setActiveTestRun(run) {
        this.doSetActiveRun(run.controller, run);
    }
    doSetActiveRun(controller, run) {
        const old = this.activeRuns.get(controller.id);
        if (old !== run) {
            if (old) {
                old.toDispose.dispose();
            }
            if (run) {
                const toDispose = run.onDidChangeTestState(e => {
                    this.onDidChangeActiveTestStateEmitter.fire({
                        controller,
                        testRun: run,
                        statedDelta: e
                    });
                });
                this.activeRuns.set(controller.id, { run, toDispose });
            }
            else {
                this.activeRuns.delete(controller.id);
            }
            this.onDidChangeActiveTestRunEmitter.fire({ activeRun: run, controller: controller });
        }
    }
    get selectedOutputSource() {
        return this._selectedOutputSource;
    }
    set selectedOutputSource(element) {
        if (element !== this._selectedOutputSource) {
            this._selectedOutputSource = element;
            this.onDidChangeSelectedOutputSourceEmitter.fire(element);
        }
    }
    get selectedTestState() {
        return this._selectedTestState;
    }
    set selectedTestState(element) {
        if (element !== this._selectedTestState) {
            this._selectedTestState = element;
            this.onDidChangeSelectedTestStateEmitter.fire(element);
        }
    }
};
__decorate([
    (0, inversify_1.inject)(test_service_1.TestService),
    __metadata("design:type", Object)
], TestOutputUIModel.prototype, "testService", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TestOutputUIModel.prototype, "init", null);
TestOutputUIModel = __decorate([
    (0, inversify_1.injectable)()
], TestOutputUIModel);
exports.TestOutputUIModel = TestOutputUIModel;


/***/ }),

/***/ "./node_modules/@theia/test/lib/browser/view/test-tree-widget.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@theia/test/lib/browser/view/test-tree-widget.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2023 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var TestTreeWidget_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TestTreeWidget = exports.TestTree = exports.TestItemNode = exports.TestControllerNode = exports.TestRoot = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const tree_1 = __webpack_require__(/*! @theia/core/lib/browser/tree */ "./node_modules/@theia/core/lib/browser/tree/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "./node_modules/@theia/core/lib/browser/index.js");
const icon_theme_service_1 = __webpack_require__(/*! @theia/core/lib/browser/icon-theme-service */ "./node_modules/@theia/core/lib/browser/icon-theme-service.js");
const theming_1 = __webpack_require__(/*! @theia/core/lib/browser/theming */ "./node_modules/@theia/core/lib/browser/theming.js");
const context_key_service_1 = __webpack_require__(/*! @theia/core/lib/browser/context-key-service */ "./node_modules/@theia/core/lib/browser/context-key-service.js");
const test_service_1 = __webpack_require__(/*! ../test-service */ "./node_modules/@theia/test/lib/browser/test-service.js");
const React = __webpack_require__(/*! @theia/core/shared/react */ "./node_modules/@theia/core/shared/react/index.js");
const tree_delta_1 = __webpack_require__(/*! ../../common/tree-delta */ "./node_modules/@theia/test/lib/common/tree-delta.js");
const core_1 = __webpack_require__(/*! @theia/core */ "./node_modules/@theia/core/lib/common/index.js");
const test_execution_state_manager_1 = __webpack_require__(/*! ./test-execution-state-manager */ "./node_modules/@theia/test/lib/browser/view/test-execution-state-manager.js");
const test_output_ui_model_1 = __webpack_require__(/*! ./test-output-ui-model */ "./node_modules/@theia/test/lib/browser/view/test-output-ui-model.js");
const test_view_contribution_1 = __webpack_require__(/*! ./test-view-contribution */ "./node_modules/@theia/test/lib/browser/view/test-view-contribution.js");
const ROOT_ID = 'TestTree';
var TestRoot;
(function (TestRoot) {
    function is(node) {
        return tree_1.CompositeTreeNode.is(node) && node.id === ROOT_ID;
    }
    TestRoot.is = is;
})(TestRoot = exports.TestRoot || (exports.TestRoot = {}));
var TestControllerNode;
(function (TestControllerNode) {
    function is(node) {
        return tree_1.ExpandableTreeNode.is(node) && 'controller' in node;
    }
    TestControllerNode.is = is;
})(TestControllerNode = exports.TestControllerNode || (exports.TestControllerNode = {}));
var TestItemNode;
(function (TestItemNode) {
    function is(node) {
        return tree_1.TreeNode.is(node) && 'testItem' in node;
    }
    TestItemNode.is = is;
})(TestItemNode = exports.TestItemNode || (exports.TestItemNode = {}));
let TestTree = class TestTree extends tree_1.TreeImpl {
    constructor() {
        super(...arguments);
        this.controllerListeners = new Map();
    }
    init() {
        this.testService.getControllers().forEach(controller => this.addController(controller));
        this.testService.onControllersChanged(e => {
            var _a, _b;
            (_a = e.removed) === null || _a === void 0 ? void 0 : _a.forEach(controller => {
                var _a;
                (_a = this.controllerListeners.get(controller)) === null || _a === void 0 ? void 0 : _a.dispose();
            });
            (_b = e.added) === null || _b === void 0 ? void 0 : _b.forEach(controller => this.addController(controller));
            this.refresh(this.root);
        });
    }
    addController(controller) {
        const listeners = new core_1.DisposableCollection();
        this.controllerListeners.set(controller.id, listeners);
        listeners.push(controller.onItemsChanged(delta => {
            this.processDeltas(controller, controller, delta);
        }));
    }
    async resolveChildren(parent) {
        if (TestItemNode.is(parent)) {
            parent.testItem.resolveChildren();
            return Promise.resolve(parent.testItem.tests.map(test => this.createTestNode(parent.controller, parent, test)));
        }
        else if (TestControllerNode.is(parent)) {
            return Promise.resolve(parent.controller.tests.map(test => this.createTestNode(parent.controller, parent, test)));
        }
        else if (TestRoot.is(parent)) {
            return Promise.resolve(this.testService.getControllers().map(controller => this.createControllerNode(parent, controller)));
        }
        else {
            return Promise.resolve([]);
        }
    }
    createControllerNode(parent, controller) {
        const node = {
            id: controller.id,
            name: controller.label,
            controller: controller,
            expanded: false,
            children: [],
            parent: parent
        };
        return node;
    }
    processDeltas(controller, parent, deltas) {
        deltas.forEach(delta => this.processDelta(controller, parent, delta));
    }
    processDelta(controller, parent, delta) {
        if (delta.type === tree_delta_1.DeltaKind.ADDED || delta.type === tree_delta_1.DeltaKind.REMOVED) {
            let node;
            if (parent === controller && delta.path.length === 1) {
                node = this.getNode(this.computeId([controller.id]));
            }
            else {
                const item = this.findInParent(parent, delta.path.slice(0, delta.path.length - 1), 0);
                if (item) {
                    node = this.getNode(this.computeId(this.computePath(controller, item)));
                }
            }
            if (node) {
                this.refresh(node); // we only have composite tree nodes in this tree
            }
            else {
                console.warn('delta for unknown test item');
            }
        }
        else {
            const item = this.findInParent(parent, delta.path, 0);
            if (item) {
                if (delta.type === tree_delta_1.DeltaKind.CHANGED) {
                    this.fireChanged();
                }
                if (delta.childDeltas) {
                    this.processDeltas(controller, item, delta.childDeltas);
                }
            }
            else {
                console.warn('delta for unknown test item');
            }
        }
    }
    findInParent(root, path, startIndex) {
        if (startIndex >= path.length) {
            return root;
        }
        const child = root.tests.find(candidate => candidate.id === path[startIndex]);
        if (!child) {
            return undefined;
        }
        return this.findInParent(child, path, startIndex + 1);
    }
    computePath(controller, item) {
        const result = [controller.id];
        let current = item;
        while (current) {
            result.unshift(current.id);
            current = current.parent;
        }
        return result;
    }
    computeId(path) {
        return path.map(id => id.replace('/', '//')).join('/');
    }
    createTestNode(controller, parent, test) {
        const previous = this.getNode(test.id);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const result = {
            id: this.computeId(this.computePath(controller, test)),
            name: test.label,
            controller: controller,
            testItem: test,
            expanded: tree_1.ExpandableTreeNode.is(previous) ? previous.expanded : undefined,
            selected: false,
            children: [],
            parent: parent
        };
        result.children = test.tests.map(t => this.createTestNode(controller, result, t));
        if (result.children.length === 0 && !test.canResolveChildren) {
            delete result.expanded;
        }
        return result;
    }
};
__decorate([
    (0, inversify_1.inject)(test_service_1.TestService),
    __metadata("design:type", Object)
], TestTree.prototype, "testService", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TestTree.prototype, "init", null);
TestTree = __decorate([
    (0, inversify_1.injectable)()
], TestTree);
exports.TestTree = TestTree;
let TestTreeWidget = TestTreeWidget_1 = class TestTreeWidget extends tree_1.TreeWidget {
    constructor(props, model, contextMenuRenderer) {
        super(props, model, contextMenuRenderer);
        this.id = TestTreeWidget_1.ID;
        this.title.label = core_1.nls.localizeByDefault('Test Explorer');
        this.title.caption = core_1.nls.localizeByDefault('Test Explorer');
        this.title.iconClass = (0, browser_1.codicon)('beaker');
        this.title.closable = true;
    }
    init() {
        super.init();
        this.addClass('theia-test-view');
        this.model.root = {
            id: ROOT_ID,
            parent: undefined,
            visible: false,
            children: []
        };
        this.uiModel.onDidChangeActiveTestRun(e => this.update());
        this.uiModel.onDidChangeActiveTestState(() => this.update());
        this.model.onSelectionChanged(() => {
            const that = this;
            const node = this.model.selectedNodes[0];
            if (TestItemNode.is(node)) {
                const run = that.uiModel.getActiveTestRun(node.controller);
                if (run) {
                    const output = run === null || run === void 0 ? void 0 : run.getOutput(node.testItem);
                    if (output) {
                        this.uiModel.selectedOutputSource = {
                            output: output,
                            onDidAddTestOutput: core_1.Event.map(run.onDidChangeTestOutput, evt => evt.filter(item => item[0] === node.testItem).map(item => item[1]))
                        };
                    }
                    this.uiModel.selectedTestState = run.getTestState(node.testItem);
                }
            }
        });
    }
    renderTree(model) {
        if (TestRoot.is(model.root) && model.root.children.length > 0) {
            return super.renderTree(model);
        }
        return React.createElement("div", { className: 'theia-widget-noInfo noMarkers' }, core_1.nls.localizeByDefault('No tests have been found in this workspace yet.'));
    }
    getTestStateClass(state) {
        switch (state) {
            case test_service_1.TestExecutionState.Queued: return `${(0, browser_1.codicon)('history')} queued`;
            case test_service_1.TestExecutionState.Running: return `${(0, browser_1.codicon)('sync')} codicon-modifier-spin running`;
            case test_service_1.TestExecutionState.Skipped: return `${(0, browser_1.codicon)('debug-step-over')} skipped`;
            case test_service_1.TestExecutionState.Failed: return `${(0, browser_1.codicon)('error')} failed`;
            case test_service_1.TestExecutionState.Errored: return `${(0, browser_1.codicon)('issues')} errored`;
            case test_service_1.TestExecutionState.Passed: return `${(0, browser_1.codicon)('pass')} passed`;
            case test_service_1.TestExecutionState.Running: return `${(0, browser_1.codicon)('sync-spin')} running`;
            default: return (0, browser_1.codicon)('circle');
        }
    }
    renderIcon(node, props) {
        var _a;
        if (TestItemNode.is(node)) {
            const currentRun = this.uiModel.getActiveTestRun(node.controller);
            let state;
            if (currentRun) {
                state = (_a = currentRun.getTestState(node.testItem)) === null || _a === void 0 ? void 0 : _a.state;
                if (!state) {
                    state = this.stateManager.getComputedState(currentRun, node.testItem);
                }
            }
            return React.createElement("div", { className: this.getTestStateClass(state) });
        }
        else {
            return super.renderIcon(node, props);
        }
    }
    renderTailDecorations(node, props) {
        if (TestItemNode.is(node)) {
            const testItem = node.testItem;
            return this.contextKeys.with({ view: this.id, controllerId: node.controller.id, testId: testItem.id, testItemHasUri: !!testItem.uri }, () => {
                const menu = this.menus.getMenu(test_view_contribution_1.TEST_VIEW_INLINE_MENU);
                const args = [node.testItem];
                const inlineCommands = menu.children.filter((item) => item instanceof core_1.ActionMenuNode);
                const tailDecorations = super.renderTailDecorations(node, props);
                return React.createElement(React.Fragment, null,
                    inlineCommands.length > 0 && React.createElement("div", { className: tree_1.TREE_NODE_SEGMENT_CLASS + ' flex' }, inlineCommands.map((item, index) => this.renderInlineCommand(item, index, this.focusService.hasFocus(node), args))),
                    tailDecorations !== undefined && React.createElement("div", { className: tree_1.TREE_NODE_SEGMENT_CLASS + ' flex' }, tailDecorations));
            });
        }
        else {
            return super.renderTailDecorations(node, props);
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    renderInlineCommand(actionMenuNode, index, tabbable, args) {
        if (!actionMenuNode.icon || !this.commands.isVisible(actionMenuNode.command, ...args) || (actionMenuNode.when && !this.contextKeys.match(actionMenuNode.when))) {
            return false;
        }
        const className = [tree_1.TREE_NODE_SEGMENT_CLASS, tree_1.TREE_NODE_TAIL_CLASS, actionMenuNode.icon, browser_1.ACTION_ITEM, 'theia-test-tree-inline-action'].join(' ');
        const tabIndex = tabbable ? 0 : undefined;
        const titleString = actionMenuNode.label + this.resolveKeybindingForCommand(actionMenuNode.command);
        return React.createElement("div", { key: index, className: className, title: titleString, tabIndex: tabIndex, onClick: e => {
                e.stopPropagation();
                this.commands.executeCommand(actionMenuNode.command, ...args);
            } });
    }
    resolveKeybindingForCommand(command) {
        let result = '';
        if (command) {
            const bindings = this.keybindings.getKeybindingsForCommand(command);
            let found = false;
            if (bindings && bindings.length > 0) {
                bindings.forEach(binding => {
                    if (!found && this.keybindings.isEnabledInScope(binding, this.node)) {
                        found = true;
                        result = ` (${this.keybindings.acceleratorFor(binding, '+')})`;
                    }
                });
            }
        }
        return result;
    }
    toContextMenuArgs(node) {
        if (TestItemNode.is(node)) {
            return [node.testItem];
        }
        return [];
    }
    storeState() {
        return {}; // don't store any state for now
    }
};
TestTreeWidget.ID = 'test-tree-widget';
TestTreeWidget.TEST_CONTEXT_MENU = ['RESOURCE_CONTEXT_MENU'];
__decorate([
    (0, inversify_1.inject)(icon_theme_service_1.IconThemeService),
    __metadata("design:type", icon_theme_service_1.IconThemeService)
], TestTreeWidget.prototype, "iconThemeService", void 0);
__decorate([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    __metadata("design:type", Object)
], TestTreeWidget.prototype, "contextKeys", void 0);
__decorate([
    (0, inversify_1.inject)(theming_1.ThemeService),
    __metadata("design:type", theming_1.ThemeService)
], TestTreeWidget.prototype, "themeService", void 0);
__decorate([
    (0, inversify_1.inject)(test_execution_state_manager_1.TestExecutionStateManager),
    __metadata("design:type", test_execution_state_manager_1.TestExecutionStateManager)
], TestTreeWidget.prototype, "stateManager", void 0);
__decorate([
    (0, inversify_1.inject)(test_output_ui_model_1.TestOutputUIModel),
    __metadata("design:type", test_output_ui_model_1.TestOutputUIModel)
], TestTreeWidget.prototype, "uiModel", void 0);
__decorate([
    (0, inversify_1.inject)(core_1.MenuModelRegistry),
    __metadata("design:type", core_1.MenuModelRegistry)
], TestTreeWidget.prototype, "menus", void 0);
__decorate([
    (0, inversify_1.inject)(core_1.CommandRegistry),
    __metadata("design:type", core_1.CommandRegistry)
], TestTreeWidget.prototype, "commands", void 0);
__decorate([
    (0, inversify_1.inject)(browser_1.KeybindingRegistry),
    __metadata("design:type", browser_1.KeybindingRegistry)
], TestTreeWidget.prototype, "keybindings", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TestTreeWidget.prototype, "init", null);
TestTreeWidget = TestTreeWidget_1 = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(tree_1.TreeProps)),
    __param(1, (0, inversify_1.inject)(tree_1.TreeModel)),
    __param(2, (0, inversify_1.inject)(browser_1.ContextMenuRenderer)),
    __metadata("design:paramtypes", [Object, Object, browser_1.ContextMenuRenderer])
], TestTreeWidget);
exports.TestTreeWidget = TestTreeWidget;


/***/ }),

/***/ "./node_modules/@theia/test/lib/browser/view/test-view-contribution.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@theia/test/lib/browser/view/test-view-contribution.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2023 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TestViewContribution = exports.TEST_VIEW_CONTAINER_TITLE_OPTIONS = exports.TEST_VIEW_CONTAINER_ID = exports.TEST_VIEW_INLINE_MENU = exports.TEST_VIEW_CONTEXT_MENU = exports.TestViewCommands = void 0;
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "./node_modules/@theia/core/lib/browser/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "./node_modules/@theia/core/lib/common/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const test_service_1 = __webpack_require__(/*! ../test-service */ "./node_modules/@theia/test/lib/browser/test-service.js");
const context_key_service_1 = __webpack_require__(/*! @theia/core/lib/browser/context-key-service */ "./node_modules/@theia/core/lib/browser/context-key-service.js");
const test_tree_widget_1 = __webpack_require__(/*! ./test-tree-widget */ "./node_modules/@theia/test/lib/browser/view/test-tree-widget.js");
const navigation_location_service_1 = __webpack_require__(/*! @theia/editor/lib/browser/navigation/navigation-location-service */ "./node_modules/@theia/editor/lib/browser/navigation/navigation-location-service.js");
const navigation_location_1 = __webpack_require__(/*! @theia/editor/lib/browser/navigation/navigation-location */ "./node_modules/@theia/editor/lib/browser/navigation/navigation-location.js");
const file_service_1 = __webpack_require__(/*! @theia/filesystem/lib/browser/file-service */ "./node_modules/@theia/filesystem/lib/browser/file-service.js");
const file_navigator_commands_1 = __webpack_require__(/*! @theia/navigator/lib/browser/file-navigator-commands */ "./node_modules/@theia/navigator/lib/browser/file-navigator-commands.js");
var TestViewCommands;
(function (TestViewCommands) {
    /**
     * Command which refreshes all test.
     */
    TestViewCommands.REFRESH = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.refreshTests" /* RefreshTestsAction */,
        label: 'Refresh Tests',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('refresh')
    });
    /**
     * Command which cancels the refresh
     */
    TestViewCommands.CANCEL_REFRESH = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.cancelTestRefresh" /* CancelTestRefreshAction */,
        label: 'Cancel Test Refresh',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('stop')
    });
    TestViewCommands.RUN_ALL_TESTS = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.runAll" /* RunAllAction */,
        label: 'Run All Tests',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('run-all')
    });
    TestViewCommands.DEBUG_ALL_TESTS = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.debugAll" /* DebugAllAction */,
        label: 'Debug Tests',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('debug-all')
    });
    TestViewCommands.RUN_TEST = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.run" /* RunAction */,
        label: 'Run Test',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('run')
    });
    TestViewCommands.RUN_TEST_WITH_PROFILE = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.runUsing" /* RunUsingProfileAction */,
        category: 'Test',
        label: 'Execute using Profile...'
    });
    TestViewCommands.DEBUG_TEST = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.debug" /* DebugAction */,
        label: 'Debug Test',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('debug-alt')
    });
    TestViewCommands.CANCEL_ALL_RUNS = core_1.Command.toLocalizedCommand({
        id: 'testing.cancelAllRuns',
        label: 'Cancel All Test Runs',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('debug-stop')
    }, 'theia/test/cancelAllTestRuns', core_1.nls.getDefaultKey('Test'));
    TestViewCommands.CANCEL_RUN = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.cancelRun" /* CancelTestRunAction */,
        label: 'Cancel Test Run',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('debug-stop')
    });
    TestViewCommands.GOTO_TEST = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.editFocusedTest" /* GoToTest */,
        label: 'Go to Test',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('go-to-file')
    });
    TestViewCommands.CONFIGURE_PROFILES = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.configureProfile" /* ConfigureTestProfilesAction */,
        label: 'Configure Test Profiles',
        category: 'Test'
    });
    TestViewCommands.CLEAR_ALL_RESULTS = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.clearTestResults" /* ClearTestResultsAction */,
        label: 'Clear All Results',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('trash')
    });
})(TestViewCommands = exports.TestViewCommands || (exports.TestViewCommands = {}));
exports.TEST_VIEW_CONTEXT_MENU = ['test-view-context-menu'];
exports.TEST_VIEW_INLINE_MENU = [...exports.TEST_VIEW_CONTEXT_MENU, 'inline'];
exports.TEST_VIEW_CONTAINER_ID = 'test-view-container';
exports.TEST_VIEW_CONTAINER_TITLE_OPTIONS = {
    label: core_1.nls.localizeByDefault('Testing'),
    iconClass: (0, browser_1.codicon)('beaker'),
    closeable: true
};
let TestViewContribution = class TestViewContribution extends browser_1.AbstractViewContribution {
    constructor() {
        super({
            viewContainerId: exports.TEST_VIEW_CONTAINER_ID,
            widgetId: test_tree_widget_1.TestTreeWidget.ID,
            widgetName: core_1.nls.localizeByDefault('Test Explorer'),
            defaultWidgetOptions: {
                area: 'left',
                rank: 600,
            }
        });
    }
    async initializeLayout() {
        await this.openView({ activate: false });
    }
    registerCommands(commands) {
        super.registerCommands(commands);
        commands.registerCommand(TestViewCommands.REFRESH, {
            isEnabled: w => this.withWidget(w, () => !this.testService.isRefreshing),
            isVisible: w => this.withWidget(w, () => !this.testService.isRefreshing),
            execute: () => this.testService.refresh()
        });
        commands.registerCommand(TestViewCommands.CANCEL_REFRESH, {
            isEnabled: w => this.withWidget(w, () => this.testService.isRefreshing),
            isVisible: w => this.withWidget(w, () => this.testService.isRefreshing),
            execute: () => this.testService.cancelRefresh()
        });
        commands.registerCommand(TestViewCommands.RUN_ALL_TESTS, {
            isEnabled: w => this.withWidget(w, () => true),
            isVisible: w => this.withWidget(w, () => true),
            execute: () => this.testService.runAllTests(test_service_1.TestRunProfileKind.Run)
        });
        commands.registerCommand(TestViewCommands.DEBUG_ALL_TESTS, {
            isEnabled: w => this.withWidget(w, () => true),
            isVisible: w => this.withWidget(w, () => true),
            execute: () => this.testService.runAllTests(test_service_1.TestRunProfileKind.Debug)
        });
        commands.registerCommand(TestViewCommands.RUN_TEST, {
            isEnabled: t => test_service_1.TestItem.is(t),
            isVisible: t => test_service_1.TestItem.is(t),
            execute: t => {
                this.testService.runTests(test_service_1.TestRunProfileKind.Run, [t]);
            }
        });
        commands.registerCommand(TestViewCommands.DEBUG_TEST, {
            isEnabled: t => test_service_1.TestItem.is(t),
            isVisible: t => test_service_1.TestItem.is(t),
            execute: t => {
                this.testService.runTests(test_service_1.TestRunProfileKind.Debug, [t]);
            }
        });
        commands.registerCommand(TestViewCommands.RUN_TEST_WITH_PROFILE, {
            isEnabled: t => test_service_1.TestItem.is(t),
            isVisible: t => test_service_1.TestItem.is(t),
            execute: t => {
                this.testService.runTestsWithProfile([t]);
            }
        });
        commands.registerCommand(TestViewCommands.CANCEL_ALL_RUNS, {
            isEnabled: w => this.withWidget(w, () => true),
            isVisible: w => this.withWidget(w, () => true),
            execute: () => this.cancelAllRuns()
        });
        commands.registerCommand(TestViewCommands.GOTO_TEST, {
            isEnabled: t => test_service_1.TestItem.is(t) && !!t.uri,
            isVisible: t => test_service_1.TestItem.is(t) && !!t.uri,
            execute: t => {
                if (test_service_1.TestItem.is(t)) {
                    this.fileSystem.resolve(t.uri).then(stat => {
                        if (stat.isFile) {
                            this.navigationService.reveal(navigation_location_1.NavigationLocation.create(t.uri, t.range ? t.range.start : { line: 0, character: 0 }));
                        }
                        else {
                            commands.executeCommand(file_navigator_commands_1.FileNavigatorCommands.REVEAL_IN_NAVIGATOR.id, t.uri);
                        }
                    });
                }
            }
        });
        commands.registerCommand(TestViewCommands.CONFIGURE_PROFILES, {
            execute: () => {
                this.testService.configureProfile();
            }
        });
    }
    cancelAllRuns() {
        this.testService.getControllers().forEach(controller => controller.testRuns.forEach(run => run.cancel()));
    }
    registerMenus(menus) {
        super.registerMenus(menus);
        menus.registerMenuAction(exports.TEST_VIEW_INLINE_MENU, {
            commandId: TestViewCommands.RUN_TEST.id,
            order: 'a'
        });
        menus.registerMenuAction(exports.TEST_VIEW_INLINE_MENU, {
            commandId: TestViewCommands.DEBUG_TEST.id,
            order: 'aa'
        });
        menus.registerMenuAction(exports.TEST_VIEW_INLINE_MENU, {
            commandId: TestViewCommands.GOTO_TEST.id,
            order: 'aaa'
        });
        menus.registerMenuAction(exports.TEST_VIEW_CONTEXT_MENU, {
            commandId: TestViewCommands.RUN_TEST_WITH_PROFILE.id,
            order: 'aaaa'
        });
    }
    registerToolbarItems(toolbar) {
        toolbar.registerItem({
            id: TestViewCommands.REFRESH.id,
            command: TestViewCommands.REFRESH.id,
            priority: 0,
            onDidChange: this.testService.onDidChangeIsRefreshing
        });
        toolbar.registerItem({
            id: TestViewCommands.CANCEL_REFRESH.id,
            command: TestViewCommands.CANCEL_REFRESH.id,
            priority: 0,
            onDidChange: this.testService.onDidChangeIsRefreshing
        });
        toolbar.registerItem({
            id: TestViewCommands.RUN_ALL_TESTS.id,
            command: TestViewCommands.RUN_ALL_TESTS.id,
            priority: 1
        });
        toolbar.registerItem({
            id: TestViewCommands.DEBUG_ALL_TESTS.id,
            command: TestViewCommands.DEBUG_ALL_TESTS.id,
            priority: 2
        });
        toolbar.registerItem({
            id: TestViewCommands.CANCEL_ALL_RUNS.id,
            command: TestViewCommands.CANCEL_ALL_RUNS.id,
            priority: 3
        });
    }
    withWidget(widget = this.tryGetWidget(), cb) {
        if (widget instanceof test_tree_widget_1.TestTreeWidget && widget.id === test_tree_widget_1.TestTreeWidget.ID) {
            return cb(widget);
        }
        return false;
    }
};
__decorate([
    (0, inversify_1.inject)(test_service_1.TestService),
    __metadata("design:type", Object)
], TestViewContribution.prototype, "testService", void 0);
__decorate([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    __metadata("design:type", Object)
], TestViewContribution.prototype, "contextKeys", void 0);
__decorate([
    (0, inversify_1.inject)(navigation_location_service_1.NavigationLocationService),
    __metadata("design:type", navigation_location_service_1.NavigationLocationService)
], TestViewContribution.prototype, "navigationService", void 0);
__decorate([
    (0, inversify_1.inject)(file_service_1.FileService),
    __metadata("design:type", file_service_1.FileService)
], TestViewContribution.prototype, "fileSystem", void 0);
TestViewContribution = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], TestViewContribution);
exports.TestViewContribution = TestViewContribution;


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_theia_test_lib_browser_view_test-tree-widget_js-node_modules_theia_test_-f7e789.js.map