{"version":3,"file":"vendors-node_modules_theia_variable-resolver_lib_browser_variable-quick-open-service_js.js","mappings":"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","sources":["webpack:///./node_modules/@theia/variable-resolver/src/browser/variable-quick-open-service.ts?","webpack:///./node_modules/@theia/variable-resolver/src/browser/variable-resolver-service.ts?","webpack:///./node_modules/@theia/variable-resolver/src/browser/variable.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2018 Red Hat, Inc. and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { inject, injectable, optional } from '@theia/core/shared/inversify';\nimport { MessageService } from '@theia/core/lib/common/message-service';\nimport { VariableRegistry, Variable } from './variable';\nimport { VariableResolverService } from './variable-resolver-service';\nimport { QuickPickItem, QuickInputService } from '@theia/core/lib/browser';\n\n@injectable()\nexport class VariableQuickOpenService {\n\n    protected items: Array<QuickPickItem>;\n\n    @inject(MessageService)\n    protected readonly messages: MessageService;\n\n    @inject(QuickInputService) @optional()\n    protected readonly quickInputService: QuickInputService;\n\n    @inject(VariableResolverService)\n    protected readonly variableResolver: VariableResolverService;\n\n    constructor(\n        @inject(VariableRegistry) protected readonly variableRegistry: VariableRegistry\n    ) { }\n\n    open(): void {\n        this.items = this.variableRegistry.getVariables().map(v => ({\n            label: '${' + v.name + '}',\n            detail: v.description,\n            execute: () => {\n                setTimeout(() => this.showValue(v));\n            }\n        }));\n\n        this.quickInputService?.showQuickPick(this.items, { placeholder: 'Registered variables' });\n    }\n\n    protected async showValue(variable: Variable): Promise<void> {\n        const argument = await this.quickInputService?.input({\n            placeHolder: 'Type a variable argument'\n        });\n        const value = await this.variableResolver.resolve('${' + variable.name + ':' + argument + '}');\n        if (typeof value === 'string') {\n            this.messages.info(value);\n        }\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2018 Red Hat, Inc. and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { injectable, inject } from '@theia/core/shared/inversify';\nimport { VariableRegistry } from './variable';\nimport URI from '@theia/core/lib/common/uri';\nimport { CommandIdVariables } from '../common/variable-types';\nimport { isCancelled } from '@theia/core';\n\nexport interface VariableResolveOptions {\n    context?: URI;\n    /**\n     * Used for resolving inputs, see https://code.visualstudio.com/docs/editor/variables-reference#_input-variables\n     */\n    configurationSection?: string;\n    commandIdVariables?: CommandIdVariables;\n    configuration?: unknown;\n}\n\n/**\n * The variable resolver service should be used to resolve variables in strings.\n */\n@injectable()\nexport class VariableResolverService {\n\n    protected static VAR_REGEXP = /\\$\\{(.*?)\\}/g;\n\n    @inject(VariableRegistry) protected readonly variableRegistry: VariableRegistry;\n\n    /**\n     * Resolve the variables in the given string array.\n     * @param value The array of data to resolve variables in.\n     * @param options Options of the variable resolution.\n     * @returns Promise to array with variables resolved. Never rejects.\n     *\n     * @deprecated since 1.28.0 use {@link resolve} instead.\n     */\n    resolveArray(value: string[], options: VariableResolveOptions = {}): Promise<string[] | undefined> {\n        return this.resolve(value, options);\n    }\n\n    /**\n     * Resolve the variables for all strings found in the object and nested objects.\n     * @param value Data to resolve variables in.\n     * @param options Options of the variable resolution\n     * @returns Promise to object with variables resolved. Returns `undefined` if a variable resolution was cancelled.\n     */\n    async resolve<T>(value: T, options: VariableResolveOptions = {}): Promise<T | undefined> {\n        const context = new VariableResolverService.Context(this.variableRegistry, options);\n        try {\n            return await this.doResolve(value, context);\n        } catch (error) {\n            if (isCancelled(error)) {\n                return undefined;\n            }\n            throw error;\n        }\n    }\n\n    protected async doResolve(value: any, context: VariableResolverService.Context): Promise<any> {\n        // eslint-disable-next-line no-null/no-null\n        if (value === undefined || value === null) {\n            return value;\n        }\n        if (typeof value === 'string') {\n            return this.doResolveString(value, context);\n        }\n        if (Array.isArray(value)) {\n            return this.doResolveArray(value, context);\n        }\n        if (typeof value === 'object') {\n            return this.doResolveObject(value, context);\n        }\n        return value;\n    }\n\n    protected async doResolveObject(obj: object, context: VariableResolverService.Context): Promise<object> {\n        const result: {\n            [prop: string]: Object | undefined\n        } = {};\n        for (const name of Object.keys(obj)) {\n            const value = (obj as any)[name];\n            const resolved = await this.doResolve(value, context);\n            result[name] = resolved;\n        }\n        return result;\n    }\n\n    protected async doResolveArray(values: Array<Object | undefined>, context: VariableResolverService.Context): Promise<Array<Object | undefined>> {\n        const result: (Object | undefined)[] = [];\n        for (const value of values) {\n            const resolved = await this.doResolve(value, context);\n            result.push(resolved);\n        }\n        return result;\n    }\n\n    protected async doResolveString(value: string, context: VariableResolverService.Context): Promise<string> {\n        await this.resolveVariables(value, context);\n        return value.replace(VariableResolverService.VAR_REGEXP, (match: string, varName: string) => {\n            const varValue = context.get(varName);\n            return varValue !== undefined ? varValue : match;\n        });\n    }\n\n    protected async resolveVariables(value: string, context: VariableResolverService.Context): Promise<void> {\n        const variableRegExp = new RegExp(VariableResolverService.VAR_REGEXP);\n        let match;\n        // eslint-disable-next-line no-null/no-null\n        while ((match = variableRegExp.exec(value)) !== null) {\n            const variableName = match[1];\n            await context.resolve(variableName);\n        }\n    }\n}\nexport namespace VariableResolverService {\n\n    export class Context {\n\n        protected readonly resolved = new Map<string, string | undefined>();\n\n        constructor(\n            protected readonly variableRegistry: VariableRegistry,\n            protected readonly options: VariableResolveOptions\n        ) { }\n\n        get(name: string): string | undefined {\n            return this.resolved.get(name);\n        }\n\n        async resolve(name: string): Promise<void> {\n            if (this.resolved.has(name)) {\n                return;\n            }\n            try {\n                let variableName = name;\n                let argument: string | undefined;\n                const parts = name.split(':', 2);\n                if (parts.length > 1) {\n                    variableName = parts[0];\n                    argument = parts[1];\n                }\n                const variable = this.variableRegistry.getVariable(variableName);\n                const resolved = await variable?.resolve(\n                    this.options.context,\n                    argument,\n                    this.options.configurationSection,\n                    this.options.commandIdVariables,\n                    this.options.configuration\n                );\n                if (\n                    typeof resolved === 'bigint' ||\n                    typeof resolved === 'boolean' ||\n                    typeof resolved === 'number' ||\n                    typeof resolved === 'string'\n                ) {\n                    this.resolved.set(name, `${resolved}`);\n                } else {\n                    this.resolved.set(name, undefined);\n                }\n            } catch (e) {\n                if (isCancelled(e)) {\n                    throw e;\n                }\n                this.resolved.set(name, undefined);\n                console.error(`Failed to resolve '${name}' variable:`, e);\n            }\n        }\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2018 Red Hat, Inc. and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable } from '@theia/core/shared/inversify';\nimport { Disposable, DisposableCollection, MaybePromise } from '@theia/core';\nimport URI from '@theia/core/lib/common/uri';\nimport { CommandIdVariables } from '../common/variable-types';\n\n/**\n * Variable can be used inside of strings using ${variableName} syntax.\n */\nexport interface Variable {\n\n    /**\n     * A unique name of this variable.\n     */\n    readonly name: string;\n\n    /**\n     * A human-readable description of this variable.\n     */\n    readonly description?: string;\n\n    /**\n     * Resolve to a string value of this variable or\n     * `undefined` if variable cannot be resolved.\n     * Never reject.\n     */\n    resolve(\n        context?: URI,\n        argument?: string,\n        configurationSection?: string,\n        commandIdVariables?: CommandIdVariables,\n        configuration?: unknown\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): MaybePromise<any>;\n}\n\nexport const VariableContribution = Symbol('VariableContribution');\n/**\n * The variable contribution should be implemented to register custom variables.\n */\nexport interface VariableContribution {\n    registerVariables(variables: VariableRegistry): void;\n}\n\n/**\n * The variable registry manages variables.\n */\n@injectable()\nexport class VariableRegistry implements Disposable {\n\n    protected readonly variables: Map<string, Variable> = new Map();\n    protected readonly toDispose = new DisposableCollection();\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    /**\n     * Register the given variable.\n     * Do nothing if a variable is already registered for the given variable name.\n     */\n    registerVariable(variable: Variable): Disposable {\n        if (this.variables.has(variable.name)) {\n            console.warn(`A variables with name ${variable.name} is already registered.`);\n            return Disposable.NULL;\n        }\n        this.variables.set(variable.name, variable);\n        const disposable = {\n            dispose: () => this.variables.delete(variable.name)\n        };\n        this.toDispose.push(disposable);\n        return disposable;\n    }\n\n    /**\n     * Return all registered variables.\n     */\n    getVariables(): Variable[] {\n        return [...this.variables.values()];\n    }\n\n    /**\n     * Get a variable for the given name or `undefined` if none.\n     */\n    getVariable(name: string): Variable | undefined {\n        return this.variables.get(name);\n    }\n\n    /**\n     * Register an array of variables.\n     * Do nothing if a variable is already registered for the given variable name.\n     */\n    registerVariables(variables: Variable[]): Disposable[] {\n        return variables.map(v => this.registerVariable(v));\n    }\n}\n"],"names":[],"sourceRoot":""}