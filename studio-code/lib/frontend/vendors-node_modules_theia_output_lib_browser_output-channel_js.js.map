{"version":3,"file":"vendors-node_modules_theia_output_lib_browser_output-channel_js.js","mappings":"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AAI,CAAC,MAAM,CAAC,CAAC;IAC1G,CAAC;IALe,qBAAW,cAK1B;AAEL,CAAC,EA5BgB,SAAS,GAAT,iBAAS,KAAT,iBAAS,QA4BzB;;;;;;;;;;;AC9CY;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH,mBAAmB;;AAEnB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,uFAAuF,iBAAiB,MAAM,wBAAwB;AACtI;;AAEA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uCAAuC;AACvC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","sources":["webpack:///./node_modules/@theia/output/src/browser/output-channel.ts?","webpack:///./node_modules/@theia/output/src/browser/output-preferences.ts?","webpack:///./node_modules/@theia/output/src/browser/output-resource.ts?","webpack:///./node_modules/@theia/output/src/common/output-uri.ts?","webpack:///./node_modules/p-queue/index.js?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2018 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport * as PQueue from 'p-queue';\nimport { injectable, inject } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\nimport { Resource, ResourceResolver } from '@theia/core/lib/common/resource';\nimport { Emitter, Event, Disposable, DisposableCollection } from '@theia/core';\nimport { MonacoEditorModel } from '@theia/monaco/lib/browser/monaco-editor-model';\nimport { MonacoTextModelService } from '@theia/monaco/lib/browser/monaco-text-model-service';\nimport { OutputUri } from '../common/output-uri';\nimport { OutputResource } from '../browser/output-resource';\nimport { OutputPreferences } from './output-preferences';\nimport { IReference } from '@theia/monaco-editor-core/esm/vs/base/common/lifecycle';\nimport * as monaco from '@theia/monaco-editor-core';\n\n@injectable()\nexport class OutputChannelManager implements Disposable, ResourceResolver {\n\n    @inject(MonacoTextModelService)\n    protected readonly textModelService: MonacoTextModelService;\n\n    @inject(OutputPreferences)\n    protected readonly preferences: OutputPreferences;\n\n    protected readonly channels = new Map<string, OutputChannel>();\n    protected readonly resources = new Map<string, OutputResource>();\n    protected _selectedChannel: OutputChannel | undefined;\n\n    protected readonly channelAddedEmitter = new Emitter<{ name: string }>();\n    protected readonly channelDeletedEmitter = new Emitter<{ name: string }>();\n    protected readonly channelWasShownEmitter = new Emitter<{ name: string, preserveFocus?: boolean }>();\n    protected readonly channelWasHiddenEmitter = new Emitter<{ name: string }>();\n    protected readonly selectedChannelChangedEmitter = new Emitter<{ name: string } | undefined>();\n\n    readonly onChannelAdded = this.channelAddedEmitter.event;\n    readonly onChannelDeleted = this.channelDeletedEmitter.event;\n    readonly onChannelWasShown = this.channelWasShownEmitter.event;\n    readonly onChannelWasHidden = this.channelWasHiddenEmitter.event;\n    readonly onSelectedChannelChanged = this.selectedChannelChangedEmitter.event;\n\n    protected readonly toDispose = new DisposableCollection();\n    protected readonly toDisposeOnChannelDeletion = new Map<string, Disposable>();\n\n    getChannel(name: string): OutputChannel {\n        const existing = this.channels.get(name);\n        if (existing) {\n            return existing;\n        }\n\n        // We have to register the resource first, because `textModelService#createModelReference` will require it\n        // right after creating the monaco.editor.ITextModel.\n        // All `append` and `appendLine` will be deferred until the underlying text-model instantiation.\n        let resource = this.resources.get(name);\n        if (!resource) {\n            const uri = OutputUri.create(name);\n            const editorModelRef = new Deferred<IReference<MonacoEditorModel>>();\n            resource = this.createResource({ uri, editorModelRef });\n            this.resources.set(name, resource);\n            this.textModelService.createModelReference(uri).then(ref => editorModelRef.resolve(ref));\n        }\n\n        const channel = this.createChannel(resource);\n        this.channels.set(name, channel);\n        this.toDisposeOnChannelDeletion.set(name, this.registerListeners(channel));\n        this.channelAddedEmitter.fire(channel);\n        if (!this.selectedChannel) {\n            this.selectedChannel = channel;\n        }\n        return channel;\n    }\n\n    protected registerListeners(channel: OutputChannel): Disposable {\n        const { name } = channel;\n        return new DisposableCollection(\n            channel,\n            channel.onVisibilityChange(({ isVisible, preserveFocus }) => {\n                if (isVisible) {\n                    this.selectedChannel = channel;\n                    this.channelWasShownEmitter.fire({ name, preserveFocus });\n                } else {\n                    if (channel === this.selectedChannel) {\n                        this.selectedChannel = this.getVisibleChannels()[0];\n                    }\n                    this.channelWasHiddenEmitter.fire({ name });\n                }\n            }),\n            channel.onDisposed(() => this.deleteChannel(name)),\n            Disposable.create(() => {\n                const resource = this.resources.get(name);\n                if (resource) {\n                    resource.dispose();\n                    this.resources.delete(name);\n                } else {\n                    console.warn(`Could not dispose. No resource was for output channel: '${name}'.`);\n                }\n            }),\n            Disposable.create(() => {\n                const toDispose = this.channels.get(name);\n                if (!toDispose) {\n                    console.warn(`Could not dispose. No channel exist with name: '${name}'.`);\n                    return;\n                }\n                this.channels.delete(name);\n                toDispose.dispose();\n                this.channelDeletedEmitter.fire({ name });\n                if (this.selectedChannel && this.selectedChannel.name === name) {\n                    this.selectedChannel = this.getVisibleChannels()[0];\n                }\n            })\n        );\n    }\n\n    deleteChannel(name: string): void {\n        const toDispose = this.toDisposeOnChannelDeletion.get(name);\n        if (toDispose) {\n            toDispose.dispose();\n        }\n    }\n\n    getChannels(): OutputChannel[] {\n        return Array.from(this.channels.values()).sort(this.channelComparator);\n    }\n\n    getVisibleChannels(): OutputChannel[] {\n        return this.getChannels().filter(channel => channel.isVisible);\n    }\n\n    protected get channelComparator(): (left: OutputChannel, right: OutputChannel) => number {\n        return (left, right) => {\n            if (left.isVisible !== right.isVisible) {\n                return left.isVisible ? -1 : 1;\n            }\n            return left.name.toLocaleLowerCase().localeCompare(right.name.toLocaleLowerCase());\n        };\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    get selectedChannel(): OutputChannel | undefined {\n        return this._selectedChannel;\n    }\n\n    set selectedChannel(channel: OutputChannel | undefined) {\n        this._selectedChannel = channel;\n        if (this._selectedChannel) {\n            this.selectedChannelChangedEmitter.fire({ name: this._selectedChannel.name });\n        } else {\n            this.selectedChannelChangedEmitter.fire(undefined);\n        }\n    }\n\n    /**\n     * Non-API: do not call directly.\n     */\n    async resolve(uri: URI): Promise<Resource> {\n        if (!OutputUri.is(uri)) {\n            throw new Error(`Expected '${OutputUri.SCHEME}' URI scheme. Got: ${uri} instead.`);\n        }\n        const resource = this.resources.get(OutputUri.channelName(uri));\n        if (!resource) {\n            throw new Error(`No output resource was registered with URI: ${uri.toString()}`);\n        }\n        return resource;\n    }\n\n    protected createResource({ uri, editorModelRef }: { uri: URI, editorModelRef: Deferred<IReference<MonacoEditorModel>> }): OutputResource {\n        return new OutputResource(uri, editorModelRef);\n    }\n\n    protected createChannel(resource: OutputResource): OutputChannel {\n        return new OutputChannel(resource, this.preferences);\n    }\n\n}\n\nexport enum OutputChannelSeverity {\n    Error = 1,\n    Warning = 2,\n    Info = 3\n}\n\nexport class OutputChannel implements Disposable {\n\n    protected readonly contentChangeEmitter = new Emitter<void>();\n    protected readonly visibilityChangeEmitter = new Emitter<{ isVisible: boolean, preserveFocus?: boolean }>();\n    protected readonly disposedEmitter = new Emitter<void>();\n    protected readonly textModifyQueue = new PQueue({ autoStart: true, concurrency: 1 });\n    protected readonly toDispose = new DisposableCollection(\n        Disposable.create(() => this.textModifyQueue.clear()),\n        this.contentChangeEmitter,\n        this.visibilityChangeEmitter,\n        this.disposedEmitter\n    );\n\n    protected disposed = false;\n    protected visible = true;\n    protected _maxLineNumber: number;\n    protected decorationIds = new Set<string>();\n\n    readonly onVisibilityChange: Event<{ isVisible: boolean, preserveFocus?: boolean }> = this.visibilityChangeEmitter.event;\n    readonly onContentChange: Event<void> = this.contentChangeEmitter.event;\n    readonly onDisposed: Event<void> = this.disposedEmitter.event;\n\n    constructor(protected readonly resource: OutputResource, protected readonly preferences: OutputPreferences) {\n        this._maxLineNumber = this.preferences['output.maxChannelHistory'];\n        this.toDispose.push(resource);\n        this.toDispose.push(Disposable.create(() => this.decorationIds.clear()));\n        this.toDispose.push(this.preferences.onPreferenceChanged(event => {\n            if (event.preferenceName === 'output.maxChannelHistory') {\n                const maxLineNumber = event.newValue;\n                if (this.maxLineNumber !== maxLineNumber) {\n                    this.maxLineNumber = maxLineNumber;\n                }\n            }\n        }));\n    }\n\n    get name(): string {\n        return OutputUri.channelName(this.uri);\n    }\n\n    get uri(): URI {\n        return this.resource.uri;\n    }\n\n    hide(): void {\n        this.visible = false;\n        this.visibilityChangeEmitter.fire({ isVisible: this.isVisible });\n    }\n\n    /**\n     * If `preserveFocus` is `true`, the channel will not take focus. It is `false` by default.\n     *  - Calling `show` without args or with `preserveFocus: false` will reveal **and** activate the `Output` widget.\n     *  - Calling `show` with `preserveFocus: true` will reveal the `Output` widget but **won't** activate it.\n     */\n    show({ preserveFocus }: { preserveFocus: boolean } = { preserveFocus: false }): void {\n        this.visible = true;\n        this.visibilityChangeEmitter.fire({ isVisible: this.isVisible, preserveFocus });\n    }\n\n    /**\n     * Note: if `false` it does not meant it is disposed or not available, it is only hidden from the UI.\n     */\n    get isVisible(): boolean {\n        return this.visible;\n    }\n\n    clear(): void {\n        this.textModifyQueue.add(async () => {\n            const textModel = (await this.resource.editorModelRef.promise).object.textEditorModel;\n            textModel.deltaDecorations(Array.from(this.decorationIds), []);\n            this.decorationIds.clear();\n            textModel.setValue('');\n            this.contentChangeEmitter.fire();\n        });\n    }\n\n    dispose(): void {\n        if (this.disposed) {\n            return;\n        }\n        this.disposed = true;\n        this.toDispose.dispose();\n        this.disposedEmitter.fire();\n    }\n\n    append(content: string, severity: OutputChannelSeverity = OutputChannelSeverity.Info): void {\n        this.textModifyQueue.add(() => this.doAppend({ content, severity }));\n    }\n\n    appendLine(content: string, severity: OutputChannelSeverity = OutputChannelSeverity.Info): void {\n        this.textModifyQueue.add(() => this.doAppend({ content, severity, appendEol: true }));\n    }\n\n    protected async doAppend({ content, severity, appendEol }: { content: string, severity: OutputChannelSeverity, appendEol?: boolean }): Promise<void> {\n        const textModel = (await this.resource.editorModelRef.promise).object.textEditorModel;\n        const lastLine = textModel.getLineCount();\n        const lastLineMaxColumn = textModel.getLineMaxColumn(lastLine);\n        const position = new monaco.Position(lastLine, lastLineMaxColumn);\n        const range = new monaco.Range(position.lineNumber, position.column, position.lineNumber, position.column);\n        const edits = [{\n            range,\n            text: !!appendEol ? `${content}${textModel.getEOL()}` : content,\n            forceMoveMarkers: true\n        }];\n        // We do not use `pushEditOperations` as we do not need undo/redo support. VS Code uses `applyEdits` too.\n        // https://github.com/microsoft/vscode/blob/dc348340fd1a6c583cb63a1e7e6b4fd657e01e01/src/vs/workbench/services/output/common/outputChannelModel.ts#L108-L115\n        textModel.applyEdits(edits);\n        if (severity !== OutputChannelSeverity.Info) {\n            const inlineClassName = severity === OutputChannelSeverity.Error ? 'theia-output-error' : 'theia-output-warning';\n            let endLineNumber = textModel.getLineCount();\n            // If last line is empty (the first non-whitespace is 0), apply decorator to previous line's last non-whitespace instead\n            // Note: if the user appends `inlineWarning `, the new decorator's range includes the trailing whitespace.\n            if (!textModel.getLineFirstNonWhitespaceColumn(endLineNumber)) {\n                endLineNumber--;\n            }\n            const endColumn = textModel.getLineLastNonWhitespaceColumn(endLineNumber);\n            const newDecorations = [{\n                range: new monaco.Range(range.startLineNumber, range.startColumn, endLineNumber, endColumn), options: {\n                    inlineClassName\n                }\n            }];\n            for (const decorationId of textModel.deltaDecorations([], newDecorations)) {\n                this.decorationIds.add(decorationId);\n            }\n        }\n        this.ensureMaxChannelHistory(textModel);\n        this.contentChangeEmitter.fire();\n    }\n\n    protected ensureMaxChannelHistory(textModel: monaco.editor.ITextModel): void {\n        this.contentChangeEmitter.fire();\n        const linesToRemove = textModel.getLineCount() - this.maxLineNumber - 1; // -1 as the last line is usually empty -> `appendLine`.\n        if (linesToRemove > 0) {\n            const endColumn = textModel.getLineMaxColumn(linesToRemove);\n            // `endLineNumber` is `linesToRemove` + 1 as monaco is one based.\n            const range = new monaco.Range(1, 1, linesToRemove, endColumn + 1);\n            // eslint-disable-next-line no-null/no-null\n            const text = null;\n            const decorationsToRemove = textModel.getLinesDecorations(range.startLineNumber, range.endLineNumber)\n                .filter(({ id }) => this.decorationIds.has(id)).map(({ id }) => id); // Do we need to filter here? Who else can put decorations to the output model?\n            if (decorationsToRemove.length) {\n                for (const newId of textModel.deltaDecorations(decorationsToRemove, [])) {\n                    this.decorationIds.add(newId);\n                }\n                for (const toRemoveId of decorationsToRemove) {\n                    this.decorationIds.delete(toRemoveId);\n                }\n            }\n            textModel.applyEdits([\n                {\n                    range: new monaco.Range(1, 1, linesToRemove + 1, textModel.getLineFirstNonWhitespaceColumn(linesToRemove + 1)),\n                    text,\n                    forceMoveMarkers: true\n                }\n            ]);\n        }\n    }\n\n    protected get maxLineNumber(): number {\n        return this._maxLineNumber;\n    }\n\n    protected set maxLineNumber(maxLineNumber: number) {\n        this._maxLineNumber = maxLineNumber;\n        this.append(''); // will trigger an `ensureMaxChannelHistory` call and will refresh the content.\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2018 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { interfaces } from '@theia/core/shared/inversify';\nimport {\n    PreferenceContribution,\n    PreferenceProxy,\n    PreferenceSchema,\n    PreferenceService,\n    createPreferenceProxy\n} from '@theia/core/lib/browser/preferences';\nimport { nls } from '@theia/core/lib/common/nls';\n\nexport const OutputConfigSchema: PreferenceSchema = {\n    'type': 'object',\n    'properties': {\n        'output.maxChannelHistory': {\n            'type': 'number',\n            'description': nls.localize('theia/output/maxChannelHistory', 'The maximum number of entries in an output channel.'),\n            'default': 1000\n        }\n    }\n};\n\nexport interface OutputConfiguration {\n    'output.maxChannelHistory': number\n}\n\nexport const OutputPreferenceContribution = Symbol('OutputPreferenceContribution');\nexport const OutputPreferences = Symbol('OutputPreferences');\nexport type OutputPreferences = PreferenceProxy<OutputConfiguration>;\n\nexport function createOutputPreferences(preferences: PreferenceService, schema: PreferenceSchema = OutputConfigSchema): OutputPreferences {\n    return createPreferenceProxy(preferences, schema);\n}\n\nexport function bindOutputPreferences(bind: interfaces.Bind): void {\n    bind(OutputPreferences).toDynamicValue(ctx => {\n        const preferences = ctx.container.get<PreferenceService>(PreferenceService);\n        const contribution = ctx.container.get<PreferenceContribution>(OutputPreferenceContribution);\n        return createOutputPreferences(preferences, contribution.schema);\n    }).inSingletonScope();\n    bind(OutputPreferenceContribution).toConstantValue({ schema: OutputConfigSchema });\n    bind(PreferenceContribution).toService(OutputPreferenceContribution);\n}\n","// *****************************************************************************\n// Copyright (C) 2020 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport URI from '@theia/core/lib/common/uri';\nimport { Event, Resource, ResourceReadOptions, DisposableCollection, Emitter } from '@theia/core/lib/common';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\nimport { MonacoEditorModel } from '@theia/monaco/lib/browser/monaco-editor-model';\nimport { IReference } from '@theia/monaco-editor-core/esm/vs/base/common/lifecycle';\nimport * as monaco from '@theia/monaco-editor-core';\n\nexport class OutputResource implements Resource {\n\n    protected _textModel: monaco.editor.ITextModel | undefined;\n    protected onDidChangeContentsEmitter = new Emitter<void>();\n    protected toDispose = new DisposableCollection(\n        this.onDidChangeContentsEmitter\n    );\n\n    constructor(readonly uri: URI, readonly editorModelRef: Deferred<IReference<MonacoEditorModel>>) {\n        this.editorModelRef.promise.then(modelRef => {\n            if (this.toDispose.disposed) {\n                modelRef.dispose();\n                return;\n            }\n            const textModel = modelRef.object.textEditorModel;\n            this._textModel = textModel;\n            this.toDispose.push(modelRef);\n            this.toDispose.push(this._textModel!.onDidChangeContent(() => this.onDidChangeContentsEmitter.fire()));\n        });\n    }\n\n    get textModel(): monaco.editor.ITextModel | undefined {\n        return this._textModel;\n    }\n\n    get onDidChangeContents(): Event<void> {\n        return this.onDidChangeContentsEmitter.event;\n    }\n\n    async readContents(options?: ResourceReadOptions): Promise<string> {\n        if (this._textModel) {\n            const modelRef = await this.editorModelRef.promise;\n            return modelRef.object.textEditorModel.getValue();\n        }\n        return '';\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2020 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport URI from '@theia/core/lib/common/uri';\n\nexport namespace OutputUri {\n\n    export const SCHEME = 'output';\n\n    export function is(uri: string | URI): boolean {\n        if (uri instanceof URI) {\n            return uri.scheme === SCHEME;\n        }\n        return is(new URI(uri));\n    }\n\n    export function create(name: string): URI {\n        if (!name) {\n            throw new Error(\"'name' must be defined.\");\n        }\n        if (!name.trim().length) {\n            throw new Error(\"'name' must contain at least one non-whitespace character.\");\n        }\n        return new URI(encodeURIComponent(name)).withScheme(SCHEME);\n    }\n\n    export function channelName(uri: string | URI): string {\n        if (!is(uri)) {\n            throw new Error(`Expected '${OutputUri.SCHEME}' URI scheme. Got: ${uri} instead.`);\n        }\n        return (uri instanceof URI ? uri : new URI(uri)).toString(true).slice(`${OutputUri.SCHEME}:/`.length);\n    }\n\n}\n","'use strict';\n\n// Port of lower_bound from http://en.cppreference.com/w/cpp/algorithm/lower_bound\n// Used to compute insertion index to keep queue sorted after insertion\nfunction lowerBound(array, value, comp) {\n\tlet first = 0;\n\tlet count = array.length;\n\n\twhile (count > 0) {\n\t\tconst step = (count / 2) | 0;\n\t\tlet it = first + step;\n\n\t\tif (comp(array[it], value) <= 0) {\n\t\t\tfirst = ++it;\n\t\t\tcount -= step + 1;\n\t\t} else {\n\t\t\tcount = step;\n\t\t}\n\t}\n\n\treturn first;\n}\n\nclass PriorityQueue {\n\tconstructor() {\n\t\tthis._queue = [];\n\t}\n\n\tenqueue(run, opts) {\n\t\topts = Object.assign({\n\t\t\tpriority: 0\n\t\t}, opts);\n\n\t\tconst element = {priority: opts.priority, run};\n\n\t\tif (this.size && this._queue[this.size - 1].priority >= opts.priority) {\n\t\t\tthis._queue.push(element);\n\t\t\treturn;\n\t\t}\n\n\t\tconst index = lowerBound(this._queue, element, (a, b) => b.priority - a.priority);\n\t\tthis._queue.splice(index, 0, element);\n\t}\n\n\tdequeue() {\n\t\treturn this._queue.shift().run;\n\t}\n\n\tget size() {\n\t\treturn this._queue.length;\n\t}\n}\n\nclass PQueue {\n\tconstructor(opts) {\n\t\topts = Object.assign({\n\t\t\tconcurrency: Infinity,\n\t\t\tautoStart: true,\n\t\t\tqueueClass: PriorityQueue\n\t\t}, opts);\n\n\t\tif (!(typeof opts.concurrency === 'number' && opts.concurrency >= 1)) {\n\t\t\tthrow new TypeError(`Expected \\`concurrency\\` to be a number from 1 and up, got \\`${opts.concurrency}\\` (${typeof opts.concurrency})`);\n\t\t}\n\n\t\tthis.queue = new opts.queueClass(); // eslint-disable-line new-cap\n\t\tthis._queueClass = opts.queueClass;\n\t\tthis._pendingCount = 0;\n\t\tthis._concurrency = opts.concurrency;\n\t\tthis._isPaused = opts.autoStart === false;\n\t\tthis._resolveEmpty = () => {};\n\t\tthis._resolveIdle = () => {};\n\t}\n\n\t_next() {\n\t\tthis._pendingCount--;\n\n\t\tif (this.queue.size > 0) {\n\t\t\tif (!this._isPaused) {\n\t\t\t\tthis.queue.dequeue()();\n\t\t\t}\n\t\t} else {\n\t\t\tthis._resolveEmpty();\n\t\t\tthis._resolveEmpty = () => {};\n\n\t\t\tif (this._pendingCount === 0) {\n\t\t\t\tthis._resolveIdle();\n\t\t\t\tthis._resolveIdle = () => {};\n\t\t\t}\n\t\t}\n\t}\n\n\tadd(fn, opts) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst run = () => {\n\t\t\t\tthis._pendingCount++;\n\n\t\t\t\ttry {\n\t\t\t\t\tPromise.resolve(fn()).then(\n\t\t\t\t\t\tval => {\n\t\t\t\t\t\t\tresolve(val);\n\t\t\t\t\t\t\tthis._next();\n\t\t\t\t\t\t},\n\t\t\t\t\t\terr => {\n\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\tthis._next();\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t\tthis._next();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (!this._isPaused && this._pendingCount < this._concurrency) {\n\t\t\t\trun();\n\t\t\t} else {\n\t\t\t\tthis.queue.enqueue(run, opts);\n\t\t\t}\n\t\t});\n\t}\n\n\taddAll(fns, opts) {\n\t\treturn Promise.all(fns.map(fn => this.add(fn, opts)));\n\t}\n\n\tstart() {\n\t\tif (!this._isPaused) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._isPaused = false;\n\t\twhile (this.queue.size > 0 && this._pendingCount < this._concurrency) {\n\t\t\tthis.queue.dequeue()();\n\t\t}\n\t}\n\n\tpause() {\n\t\tthis._isPaused = true;\n\t}\n\n\tclear() {\n\t\tthis.queue = new this._queueClass(); // eslint-disable-line new-cap\n\t}\n\n\tonEmpty() {\n\t\t// Instantly resolve if the queue is empty\n\t\tif (this.queue.size === 0) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\treturn new Promise(resolve => {\n\t\t\tconst existingResolve = this._resolveEmpty;\n\t\t\tthis._resolveEmpty = () => {\n\t\t\t\texistingResolve();\n\t\t\t\tresolve();\n\t\t\t};\n\t\t});\n\t}\n\n\tonIdle() {\n\t\t// Instantly resolve if none pending\n\t\tif (this._pendingCount === 0) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\treturn new Promise(resolve => {\n\t\t\tconst existingResolve = this._resolveIdle;\n\t\t\tthis._resolveIdle = () => {\n\t\t\t\texistingResolve();\n\t\t\t\tresolve();\n\t\t\t};\n\t\t});\n\t}\n\n\tget size() {\n\t\treturn this.queue.size;\n\t}\n\n\tget pending() {\n\t\treturn this._pendingCount;\n\t}\n\n\tget isPaused() {\n\t\treturn this._isPaused;\n\t}\n}\n\nmodule.exports = PQueue;\n"],"names":[],"sourceRoot":""}