"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_theia_core_lib_common_markdown-rendering_index_js-node_modules_theia_tes-f3e309"],{

/***/ "./node_modules/@theia/core/lib/common/markdown-rendering/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@theia/core/lib/common/markdown-rendering/index.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./markdown-string */ "./node_modules/@theia/core/lib/common/markdown-rendering/markdown-string.js"), exports);
__exportStar(__webpack_require__(/*! ./icon-utilities */ "./node_modules/@theia/core/lib/common/markdown-rendering/icon-utilities.js"), exports);


/***/ }),

/***/ "./node_modules/@theia/test/lib/common/collections.js":
/*!************************************************************!*\
  !*** ./node_modules/@theia/test/lib/common/collections.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


// *****************************************************************************
// Copyright (C) 2022 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.groupBy = exports.TreeCollection = exports.SimpleObservableCollection = exports.ChangeBatcher = exports.observableProperty = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! @theia/core/shared/vscode-languageserver-protocol */ "./node_modules/@theia/core/shared/vscode-languageserver-protocol/index.js");
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function observableProperty(observationFunction) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return (target, property) => {
        Reflect.defineProperty(target, property, {
            // @ts-ignore
            get() { return this['_' + property]; },
            set(v) {
                // @ts-ignore
                this[observationFunction](property, v);
                // @ts-ignore
                this['_' + property] = v;
            }
        });
    };
}
exports.observableProperty = observableProperty;
class ChangeBatcher {
    constructor(emitBatch, timeoutMs) {
        this.emitBatch = emitBatch;
        this.timeoutMs = timeoutMs;
    }
    changeOccurred() {
        if (!this.startTime) {
            this.startTime = Date.now();
            this.handle = setTimeout(() => {
                this.flush();
            }, this.timeoutMs);
        }
        else {
            if (Date.now() - this.startTime > this.timeoutMs) {
                this.flush();
            }
        }
    }
    flush() {
        if (this.handle) {
            clearTimeout(this.handle);
            this.handle = undefined;
        }
        this.startTime = undefined;
        this.emitBatch();
    }
}
exports.ChangeBatcher = ChangeBatcher;
class SimpleObservableCollection {
    constructor(equals = (left, right) => left === right) {
        this.equals = equals;
        this._values = [];
        this.onChangeEmitter = new vscode_languageserver_protocol_1.Emitter();
        this.onChanged = this.onChangeEmitter.event;
    }
    add(value) {
        if (!this._values.find(v => this.equals(v, value))) {
            this._values.push(value);
            this.onChangeEmitter.fire({ added: [value] });
            return true;
        }
        return false;
    }
    remove(value) {
        const index = this._values.findIndex(v => this.equals(v, value));
        if (index >= 0) {
            this._values.splice(index, 1);
            this.onChangeEmitter.fire({ removed: [value] });
            return true;
        }
        return false;
    }
    get values() {
        return this._values;
    }
    clear() {
        const copy = this._values;
        this._values = [];
        this.onChangeEmitter.fire({ removed: copy });
    }
}
exports.SimpleObservableCollection = SimpleObservableCollection;
class AbstractIndexedCollection {
    constructor() {
        this.keys = new Map();
    }
    get values() {
        if (!this._values) {
            this._values = [...this.keys.values()];
        }
        return this._values;
    }
    get size() {
        return this.keys.size;
    }
    has(key) {
        return this.keys.has(key);
    }
    get(key) {
        return this.keys.get(key);
    }
    doAdd(key, value) {
        const previous = this.keys.get(key);
        if (previous !== undefined) {
            return previous;
        }
        else {
            this.keys.set(key, value);
            this._values = undefined;
            return undefined;
        }
    }
    remove(key) {
        const previous = this.keys.get(key);
        if (previous !== undefined) {
            this.keys.delete(key);
            this._values = undefined;
            return previous;
        }
        return undefined;
    }
}
class TreeCollection extends AbstractIndexedCollection {
    constructor(owner, pathOf, deltaBuilder) {
        super();
        this.owner = owner;
        this.pathOf = pathOf;
        this.deltaBuilder = deltaBuilder;
    }
    add(item) {
        const path = this.pathOf(item);
        const previous = this.doAdd(path[path.length - 1], item);
        const deltaBuilder = this.deltaBuilder(item);
        if (deltaBuilder) {
            if (previous) {
                deltaBuilder.reportChanged(path, item);
            }
            else {
                deltaBuilder.reportAdded(path, item);
            }
        }
        return previous;
    }
    remove(key) {
        const toRemove = this.get(key);
        if (toRemove) {
            const deltaBuilder = this.deltaBuilder(toRemove);
            const path = this.pathOf(toRemove);
            super.remove(key);
            if (deltaBuilder) {
                deltaBuilder.reportRemoved(path);
            }
        }
        return toRemove;
    }
    entries() {
        return this[Symbol.iterator]();
    }
    [Symbol.iterator]() {
        const iter = this.values.entries();
        const that = this;
        return {
            next(..._args) {
                const res = iter.next();
                if (res.done) {
                    return { done: true, value: res.value };
                }
                else {
                    const path = that.pathOf(res.value[1]);
                    const result = [path[path.length - 1], res.value[1]];
                    return {
                        done: false,
                        value: result
                    };
                }
            }
        };
    }
}
exports.TreeCollection = TreeCollection;
function groupBy(items, keyOf) {
    const result = new Map();
    for (const item of items) {
        const key = keyOf(item);
        let values = result.get(key);
        if (!values) {
            values = [];
            result.set(key, values);
        }
        values.push(item);
    }
    return result;
}
exports.groupBy = groupBy;


/***/ }),

/***/ "./node_modules/@theia/test/lib/common/tree-delta.js":
/*!***********************************************************!*\
  !*** ./node_modules/@theia/test/lib/common/tree-delta.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


// *****************************************************************************
// Copyright (C) 2022 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AccumulatingTreeDeltaEmitter = exports.TreeDeltaBuilderImpl = exports.MappingTreeDeltaBuilder = exports.DeltaKind = void 0;
const core_1 = __webpack_require__(/*! @theia/core */ "./node_modules/@theia/core/lib/common/index.js");
const collections_1 = __webpack_require__(/*! ./collections */ "./node_modules/@theia/test/lib/common/collections.js");
var DeltaKind;
(function (DeltaKind) {
    DeltaKind[DeltaKind["NONE"] = 0] = "NONE";
    DeltaKind[DeltaKind["ADDED"] = 1] = "ADDED";
    DeltaKind[DeltaKind["REMOVED"] = 2] = "REMOVED";
    DeltaKind[DeltaKind["CHANGED"] = 3] = "CHANGED";
})(DeltaKind = exports.DeltaKind || (exports.DeltaKind = {}));
class MappingTreeDeltaBuilder {
    constructor(wrapped, map, mapPartial) {
        this.wrapped = wrapped;
        this.map = map;
        this.mapPartial = mapPartial;
    }
    reportAdded(path, added) {
        this.wrapped.reportAdded(path, this.map(added));
    }
    reportRemoved(path) {
        this.wrapped.reportRemoved(path);
    }
    reportChanged(path, change) {
        this.wrapped.reportChanged(path, this.mapPartial(change));
    }
}
exports.MappingTreeDeltaBuilder = MappingTreeDeltaBuilder;
class TreeDeltaBuilderImpl {
    constructor() {
        this._currentDelta = [];
    }
    get currentDelta() {
        return this._currentDelta;
    }
    reportAdded(path, added) {
        this.findNode(path, (parentCollection, nodeIndex, residual) => {
            if (residual.length === 0) {
                // we matched an exact node
                const child = parentCollection[nodeIndex];
                if (child.type === DeltaKind.REMOVED) {
                    child.type = DeltaKind.CHANGED;
                }
                else if (child.type === DeltaKind.NONE) {
                    child.type = DeltaKind.ADDED;
                }
                child.value = added;
            }
            else {
                this.insert(parentCollection, nodeIndex, {
                    path: residual,
                    type: DeltaKind.ADDED,
                    value: added,
                });
            }
        });
    }
    reportRemoved(path) {
        this.findNode(path, (parentCollection, nodeIndex, residual) => {
            if (residual.length === 0) {
                // we matched an exact node
                const child = parentCollection[nodeIndex];
                if (child.type === DeltaKind.CHANGED) {
                    child.type = DeltaKind.REMOVED;
                    delete child.value;
                }
                else if (child.type === DeltaKind.ADDED) {
                    parentCollection.splice(nodeIndex, 1);
                }
                else if (child.type === DeltaKind.NONE) {
                    child.type = DeltaKind.REMOVED;
                }
            }
            else {
                this.insert(parentCollection, nodeIndex, {
                    path: residual,
                    type: DeltaKind.REMOVED,
                });
            }
        });
    }
    reportChanged(path, change) {
        this.findNode(path, (parentCollection, nodeIndex, residual) => {
            if (residual.length === 0) {
                // we matched an exact node
                const child = parentCollection[nodeIndex];
                if (child.type === DeltaKind.NONE) {
                    child.type = DeltaKind.CHANGED;
                    child.value = change;
                }
                else if (child.type === DeltaKind.CHANGED) {
                    Object.assign(child.value, change);
                }
            }
            else {
                this.insert(parentCollection, nodeIndex, {
                    path: residual,
                    type: DeltaKind.CHANGED,
                    value: change,
                });
            }
        });
    }
    insert(parentCollection, nodeIndex, delta) {
        if (nodeIndex < 0) {
            parentCollection.push(delta);
        }
        else {
            const child = parentCollection[nodeIndex];
            const prefixLength = computePrefixLength(delta.path, child.path);
            if (prefixLength === delta.path.length) {
                child.path = child.path.slice(prefixLength);
                delta.childDeltas = [child];
                parentCollection[nodeIndex] = delta;
            }
            else {
                const newNode = {
                    path: child.path.slice(0, prefixLength),
                    type: DeltaKind.NONE,
                    childDeltas: []
                };
                parentCollection[nodeIndex] = newNode;
                delta.path = delta.path.slice(prefixLength);
                newNode.childDeltas.push(delta);
                child.path = child.path.slice(prefixLength);
                newNode.childDeltas.push(child);
                if (newNode.path.length === 0) {
                    console.log('newNode');
                }
            }
            if (delta.path.length === 0) {
                console.log('delta');
            }
            if (child.path.length === 0) {
                console.log('child');
            }
        }
    }
    findNode(path, handler) {
        doFindNode(this._currentDelta, path, handler);
    }
}
exports.TreeDeltaBuilderImpl = TreeDeltaBuilderImpl;
function doFindNode(rootCollection, path, handler) {
    // handler parameters:
    // parent collection: the collection the node index refers to, if valid
    // nodeIndex: the index of the node that has a common path prefix with the path of the path we're searching
    // residual path: the path that has not been consumed looking for the path: if empty, we found the exact node
    let commonPrefixLength = 0;
    const childIndex = rootCollection.findIndex(delta => {
        commonPrefixLength = computePrefixLength(delta.path, path);
        return commonPrefixLength > 0;
    });
    if (childIndex >= 0) {
        // we know which child to insert into
        const child = rootCollection[childIndex];
        if (commonPrefixLength === child.path.length) {
            // we matched a child
            if (commonPrefixLength === path.length) {
                // it's an exact match: we already have a node for the given path
                handler(rootCollection, childIndex, []);
                return;
            }
            // we know the node is below the child
            if (child.type === DeltaKind.REMOVED || child.type === DeltaKind.ADDED) {
                // there will be no children deltas beneath added/remove nodes
                return;
            }
            if (!child.childDeltas) {
                child.childDeltas = [];
            }
            doFindNode(child.childDeltas, path.slice(child.path.length), handler);
        }
        else {
            handler(rootCollection, childIndex, path);
        }
    }
    else {
        // we have no node to insert into
        handler(rootCollection, -1, path);
    }
}
function computePrefixLength(left, right) {
    let i = 0;
    while (i < left.length && i < right.length && left[i] === right[i]) {
        i++;
    }
    return i;
}
class AccumulatingTreeDeltaEmitter extends TreeDeltaBuilderImpl {
    constructor(timeoutMillis) {
        super();
        this.onDidFlushEmitter = new core_1.Emitter();
        this.onDidFlush = this.onDidFlushEmitter.event;
        this.batcher = new collections_1.ChangeBatcher(() => this.doEmitDelta(), timeoutMillis);
    }
    flush() {
        this.batcher.flush();
    }
    doEmitDelta() {
        const batch = this._currentDelta;
        this._currentDelta = [];
        this.onDidFlushEmitter.fire(batch);
    }
    reportAdded(path, added) {
        super.reportAdded(path, added);
        // console.debug(`reported added, now: ${JSON.stringify(path, undefined, 3)}`);
        // logging levels don't work in plugin host: https://github.com/eclipse-theia/theia/issues/12234
        this.batcher.changeOccurred();
    }
    reportChanged(path, change) {
        super.reportChanged(path, change);
        // console.debug(`reported changed, now: ${JSON.stringify(path, undefined, 3)}`);
        // logging levels don't work in plugin host: https://github.com/eclipse-theia/theia/issues/12234
        this.batcher.changeOccurred();
    }
    reportRemoved(path) {
        super.reportRemoved(path);
        // console.debug(`reported removed, now: ${JSON.stringify(path, undefined, 3)}`);
        // logging levels don't work in plugin host: https://github.com/eclipse-theia/theia/issues/12234
        this.batcher.changeOccurred();
    }
}
exports.AccumulatingTreeDeltaEmitter = AccumulatingTreeDeltaEmitter;


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_theia_core_lib_common_markdown-rendering_index_js-node_modules_theia_tes-f3e309.js.map